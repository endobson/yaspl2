#:module (udp-echo-server)
#:import {
  (bytes)
  (io)
  (ip)
  (numbers)
  (prim)
  (tuples)
  (udp)
}
(export
  (#:types)
  (#:values)
  (#:patterns))
(types)

(define (run-recv [sock : UdpSocket] [buf : Bytes] [stdout : OutputPort]) : Void
  (case (udp-socket-recv! sock buf)
    [(tuple2 len remote-addr)
     (case remote-addr
       [(udp-address ip port)
        (if (= len 0)
            (void)
            (begin
              (write-all-bytes #"From " stdout)
              (write-all-bytes (ipv4-address->bytes ip) stdout)
              (write-all-bytes #":" stdout)
              (write-all-bytes (integer->decimal-bytes port) stdout)
              (write-all-bytes #"; " stdout)
              (write-all-bytes (subbytes buf 0 len) stdout)
              (udp-socket-send-to sock remote-addr (subbytes buf 0 len))
              (run-recv sock buf stdout)))])]))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (let ([sock (make-udp-socket)])
    (begin
      (udp-socket-bind sock (udp-address (ipv4-address (u8 127) (u8 0) (u8 0) (u8 1)) 1026))
      (run-recv sock (make-bytes 1024) stdout)
      0)))
