#:module (tools module-index-parser)
#:import {
  (bytes)
  (data source-location)
  (dict)
  (either)
  (io)
  (list)
  (maybe)
  (module-name)
  (prim)
  (sexp-parser)
  (sexp-printer)
}
(export
  (#:types)
  (#:values read-module-index-file)
  (#:patterns))
(types)

(define (parse-module-index [module-index-forms : (List Sexp)] [acc : (Dict ModName Bytes)])
  : (Either Bytes (Dict ModName Bytes))
  (case module-index-forms
    [(empty) (right acc)]
    [(cons _ (empty)) (left #"Module Index file has odd number of sexps")]
    [(cons target-label (cons mod-name module-index-forms))
     (case target-label
       [(bytes-sexp target-label _)
        (case (sexp->mod-name mod-name)
          [(just mod-name)
           (case (dict-maybe-add acc mod-name target-label)
             [(just acc)
              (parse-module-index module-index-forms acc)]
             [(nothing)
              (left (bytes-append (varargs list #"Duplicate module: " (mod-name->bytes mod-name))))])]
          [(nothing)
           (left (bytes-append (varargs list
             #"Mod name '"
             (print-sexp* mod-name)
             #"' in module index file is unparseable")))])]
       [_ (left #"Target label in module index is unparseable")])]))


(define (read-module-index-file [module-index-file : Bytes]) : (Either Bytes (Dict ModName Bytes))
  (case (parse-sexps (sourced-bytes-from-file module-index-file))
    [(left (sexp-error v _)) (left v)]
    [(right (source-span-annotated _ module-index-forms))
     (parse-module-index module-index-forms (make-dict mod-name-cmp))]))
