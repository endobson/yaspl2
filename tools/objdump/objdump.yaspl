#:module (tools objdump objdump)
#:import {
  (bytes)
  (either)
  (formats pe)
  (io)
  (list)
  (machine-code-writer)
  (maybe)
  (numbers)
  (prim)
  (system-abi)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [abi : SystemAbi]
      [file-name : Bytes])))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable???")]
    [(cons _ (empty))
     (left #"No abi provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No file name provided.")]
    [(cons _ (cons _ (cons _ (cons _ _))))
     (left #"Too many arguments.")]
    [(cons _ (cons abi (cons file-name (empty))))
     (case (parse-system-abi abi)
       [(nothing) (left #"Unknown abi")]
       [(just abi)
        (right (args abi file-name))])]))

(define (run [args : Bytes] [output : OutputPort]) : (Maybe Bytes)
  (case (parse-args (args->list args))
    [(left v) (just v)]
    [(right (args abi file-name))
     (case abi
       [(osx-abi)
        (just #"Objdump doesn't work for osx-abi yet.")]
       [(linux-abi)
        (just #"Objdump doesn't work for linux-abi yet.")]
       [(yasplos-abi)
        (case (call-with-input-file file-name read-pe)
          [(left v) (just v)]
          [(right pe-file)
           (begin
             (print-pe pe-file output)
             (nothing))])])]))

(define (print-pe [pe : PeFile] [output : OutputPort]) : Void
  (match-define (pe-file (coff-header num-sections symbol-table-offset num-symbols)
                         section-headers symbols sections _) pe)
  (begin
    (write-line #"-- Coff Header --" output)
    (write-all-bytes #"Num Sections: " output)
    (write-line (integer->decimal-bytes num-sections) output)
    (write-all-bytes #"Symbol Table Offset: " output)
    (write-line (integer->decimal-bytes symbol-table-offset) output)
    (write-all-bytes #"Number of Symbols:  " output)
    (write-line (integer->decimal-bytes num-symbols) output)

    (write-line #"" output)
    (write-line #"-- Section Headers --" output)
    (for-each
      (lambda ([sect : SectionHeader])
        (match-define (section-header name virt-addr virt-size raw-data-ptr raw-data-size
                                      relocation-offset num-relocations characteristics) sect)
        (match-define name-padding (make-bytes/fill (- 8 (bytes-length name)) (u8 20)))
        (begin
          (write-all-bytes name output)
          (write-all-bytes name-padding output)
          (write-line #":" output)
          (write-all-bytes #"  Virtual Address: " output)
          (write-line (integer->hex-bytes virt-addr) output)
          (write-all-bytes #"  Virtual Size: " output)
          (write-line (integer->hex-bytes virt-size) output)
          (write-all-bytes #"  Raw Data Pointer: " output)
          (write-line (integer->hex-bytes raw-data-ptr) output)
          (write-all-bytes #"  Raw Data Size: " output)
          (write-line (integer->hex-bytes raw-data-size) output)
          (write-all-bytes #"  Relocation Offset: " output)
          (write-line (integer->decimal-bytes relocation-offset) output)
          (write-all-bytes #"  Number of Relocations:  " output)
          (write-line (integer->decimal-bytes num-relocations) output)
          (write-all-bytes #"  Characteristics: " output)
          (write-line (integer->hex-bytes characteristics) output)
          (newline output)))
      section-headers)

    (write-line #"" output)
    (write-line #"-- Symbol Table --" output)
    (for-each
      (lambda ([sym : SymbolTableEntry])
        (match-define (symbol-table-entry _ name value section-number storage-class) sym)
        (match-define hex-bytes (integer->hex-bytes value))
        (match-define hex-padding (make-bytes/fill (- 8 (bytes-length hex-bytes)) (u8 48)))
        (begin
          (write-all-bytes hex-padding output)
          (write-all-bytes hex-bytes output)
          (write-all-bytes #" " output)
          (write-all-bytes (integer->decimal-bytes section-number) output)
          (write-all-bytes #" " output)
          (write-all-bytes (integer->decimal-bytes storage-class) output)
          (write-all-bytes #" | " output)
          (write-all-bytes name output)
          (newline output)))
      symbols)


    (write-line #"" output)
    (write-line #"-- Sections --" output)
    (for-each
      (lambda ([sec : Section])
        (match-define (section _ name _ _ relocations) sec)
        (begin
          (write-all-bytes name output)
          (write-line #": " output)
          (write-all-bytes #"Num Relocs: " output)
          (write-line (integer->decimal-bytes (length relocations)) output)
          (for-each
            (lambda ([reloc : RelocationEntry])
              (match-define (relocation-entry addr sym type) reloc)
              (match-define addr-bytes (integer->hex-bytes addr))
              (match-define addr-padding (make-bytes/fill (- 8 (bytes-length addr-bytes)) (u8 48)))
              (begin
                (write-all-bytes addr-padding output)
                (write-all-bytes addr-bytes output)
                (write-all-bytes #" " output)
                (write-all-bytes (integer->decimal-bytes type) output)
                (write-all-bytes #" " output)
                (write-all-bytes sym output)
                (newline output)))
            relocations)
          (newline output)))
      sections)


    (void)))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (case (run args stdout)
    [(just v)
     (begin
       (write-all-bytes v stderr)
       (newline stderr)
       1)]
    [(nothing)
     0]))
