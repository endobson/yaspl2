#:module (tools intermediate-html-printer-main)
#:import {
  (data indexed-set)
  (either)
  (formats xml)
  (io)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (prim-implementation)
  {(resolved-imports-language)
    {#:values
      import-resolution-errors->bytes
      resolve-imports
    }
  }
  {(resolved-types-language)
    {#:values
      resolve-types
      type-resolution-error->bytes
    }
  }
  {(source-to-intermediate-language)
    {#:values
      source->intermediate
      type-check-errors->bytes
    }
  }
  (tools command-line)
  (tools compile-module-args)
  (validator)
  (yaspl debug intermediate-to-html)
}
(export
  (#:values main))
(types)

(define (index-sigs [sigs : (List ModuleSignature)]) : (IndexedSet ModuleSignature ModName)
  (foldl
    (lambda ([sig : ModuleSignature] [acc : (IndexedSet ModuleSignature ModName)])
      (indexed-set-add acc sig))
    sigs
    (indexed-set-add
      (make-indexed-set module-signature-name mod-name-cmp)
      (prim-signature))))

(define (run [args : CompileModuleArgs] [stdin : InputPort]) : (Either Bytes Node)
  (match-define (compile-module-args _output-path main-module signatures) args)
  (match-define signatures (index-sigs signatures))
  (case (resolve-imports main-module signatures)
    [(left v) (left (import-resolution-errors->bytes v))]
    [(right res-mod)
     (case (validate-module res-mod signatures)
       [(just v) (left (module-errors->bytes v))]
       [(nothing)
        (case (resolve-types res-mod)
          [(left v) (left (type-resolution-error->bytes v))]
          [(right res-mod)
           (case (source->intermediate res-mod)
             [(left v) (left (type-check-errors->bytes v))]
             [(right intermediate)
              (right (intermediate-to-html intermediate))])])])]))

(define (get-output [args : CompileModuleArgs]) : OutputLocation
  (output-to-file (compile-module-args-output-path args)))

(define (write-output [node : Node] [output : OutputPort]) : Void
  (write-all-bytes (document->xml-bytes node) output))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (run-command-line-tool args stdin stdout stderr
    (command-line-tool parse-compile-module-args run get-output write-output)))
