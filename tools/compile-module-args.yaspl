#:module (tools compile-module-args)
#:import {
  (compiler)
  (either)
  (io)
  (list)
  (module-signature)
  (prim)
  (source-language)
}
(export
  (#:types CompileModuleArgs)
  (#:values parse-compile-module-args handle-failure-result)
  (#:patterns compile-module-args))
(types
  (define-type CompileModuleArgs
    (compile-module-args
      [output-path : Bytes]
      [main-module : Module]
      [signatures : (List ModuleSignature)])))

(define (parse-compile-module-args [args : (List Bytes)]) : (Either Bytes CompileModuleArgs)
  (case args
    [(empty)
     (left #"No binary!?")]
    [(cons _ (empty))
     (left #"No output path provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No module file provided.")]
    [(cons _ (cons output-path (cons main-module-file signature-files)))
     (case (parse-module-file main-module-file)
       [(left v) (left v)]
       [(right main-module)
        (case (parse-signature-files signature-files)
          [(left v) (left v)]
          [(right signatures)
           (right (compile-module-args output-path main-module signatures))])])]))

(define (handle-failure-result [msg : Bytes] [stderr : OutputPort]) : Int
  (begin
    (write-line msg stderr)
    1))
