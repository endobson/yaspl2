#:module (tools linter)
#:import {
  (bytes)
  (data indexed-set)
  (data source-location)
  (either)
  (io)
  (lexer)
  (list)
  (module-header-lint)
  (module-name)
  (module-signature)
  (prim)
  (set)
  (unused-bindings)
  (unused-local-bindings)
  (yaspl languages source-language)
  (yaspl parser)
}
(export
  (#:types LintResults)
  (#:values lint-module write-lint-results)
  (#:patterns lint-results))
(types
  (define-type LintResults
    (lint-results
      [filename : Bytes]
      [unused-bindings : UnusedBindings]
      [unused-local-bindings : UnusedLocalBindings]
      [unused-dependencies : (List ModName)]
      [header-violations : ModuleHeaderLintViolations]
      [whitespace-issues : (List Bytes)])))


(define (indent [bytes : Bytes]) : Bytes
  (bytes-append (varargs list #"  " bytes)))
(define (indent2 [bytes : Bytes]) : Bytes
  (bytes-append (varargs list #"    " bytes)))
(define (indent3 [bytes : Bytes]) : Bytes
  (bytes-append (varargs list #"      " bytes)))
(define (indent4 [bytes : Bytes]) : Bytes
  (bytes-append (varargs list #"        " bytes)))


(define (write-results-section [title : Bytes] [unused : (List Bytes)] [output : OutputPort]) : Void
  (let ([write-out-line (lambda ([x : Bytes]) (write-line x output))])
    (case unused
      [(empty) (void)]
      [unused
       (begin
         (write-out-line (indent title))
         (for-each write-out-line (map indent2 unused)))])))

(define (write-unused-imports-section [imports : (List ImportsUnusedBindings)] [output : OutputPort]) : Void
  (let ([write-out-line (lambda ([x : Bytes]) (write-line x output))])
    (let ([write-section (lambda ([name : Bytes] [entries : (List Bytes)])
                           (case entries
                             [(empty) (void)]
                             [_
                              (begin
                                (write-out-line (indent3 name))
                                (for-each
                                  write-out-line
                                  (map indent4 entries)))]))])
      (case imports
        [(empty) (void)]
        [_
          (begin
            (write-out-line #"  Unused imports:")
            (for-each
              (lambda ([unused : ImportsUnusedBindings])
                (case unused
                  [(partial-imports-unused mod-name types values patterns statics)
                   (begin
                     (write-out-line (indent2 (mod-name->bytes mod-name)))
                     (write-section #"Types:" types)
                     (write-section #"Values:" values)
                     (write-section #"Patterns:" patterns)
                     (write-section #"Statics:" statics))]
                  [(partial-imports-completely-unused mod-name)
                   (write-out-line
                     (indent2 (bytes-append (varargs list #"Everything in: "
                                                          (mod-name->bytes mod-name)))))]
                  [(full-imports-unused mod-name)
                   (write-out-line
                     (indent2 (bytes-append (varargs list #"Everything in: "
                                                          (mod-name->bytes mod-name)))))]))
              imports))]))))

(define (write-lint-results [results : LintResults] [output : OutputPort]) : Void
  (case results
    [(lint-results
       _
       (unused-bindings (empty) (empty) (empty))
       (unused-local-bindings (empty))
       (empty)
       (module-header-lint-violations
         (empty)
         (empty))
       (empty))
     (void)]
    [(lint-results
       src-file-path
       (unused-bindings unused-imports unused-var-defs unused-static-defs)
       (unused-local-bindings unused-local-vars)
       unused-dependencies
       (module-header-lint-violations
         unsorted-modules
         unsorted-bindings)
       whitespace-issues)
     (begin
      (write-line src-file-path output)
      (write-unused-imports-section unused-imports output)
      (write-results-section #"Unused defined-functions" unused-var-defs output)
      (write-results-section #"Unused static definitions" unused-static-defs output)
      (for-each
        (lambda ([fun : UnusedFunctionLocalBindings])
          (case fun
            [(unused-function-local-bindings name vars)
             (write-results-section
               (bytes-append
                 (varargs list
                   #"Unused function local bindings: "
                   name))
               (map
                 (lambda ([v : Identifier])
                   (match-define (identifier name src) v)
                   (bytes-append
                     (varargs list name #" [" (source-span->start-location-bytes src) #"]")))
                 vars)
               output)]))
        unused-local-vars)
      (write-results-section #"Unused dependencies:" (map mod-name->bytes unused-dependencies) output)
      (write-results-section #"Unsorted modules:" (map mod-name->bytes unsorted-modules) output)

      (write-results-section #"Unsorted bindings:" unsorted-bindings output)
      (write-results-section #"Whitespace issues:" whitespace-issues output))]))


(define (newline? [v : U8]) : Boolean
  (= (u8->s64 v) 10))
(define (space? [v : U8]) : Boolean
  (= (u8->s64 v) 32))

(define (line-lexer-impl [ctx : LexerContext] [pos : Int]) : (InnerResult Bytes)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= pos (bytes-length bytes))
      (end-of-input/inner (lexer-context-get-span ctx pos pos))
      (line-lexer-impl* ctx pos pos)))

(define (line-lexer-impl* [ctx : LexerContext] [line-start : Int] [pos : Int]) : (InnerResult Bytes)
  (match-define bytes (lexer-context-bytes ctx))
  (cond
    [(= pos (bytes-length bytes))
     (lex-result/inner
       (source-span-annotated (subbytes bytes line-start pos)
                              (lexer-context-get-span ctx line-start pos))
       pos)]
    [(newline? (bytes-ref bytes pos))
     (match-define pos (+ 1 pos))
     (lex-result/inner
       (source-span-annotated (subbytes bytes line-start pos)
                              (lexer-context-get-span ctx line-start pos))
       pos)]
    [else
      (line-lexer-impl* ctx line-start (+ 1 pos))]))


(define (find-whitespace-issues [file-name : Bytes]) : (List Bytes)
  (match-define sourced-bytes (sourced-bytes-from-file file-name))
  (match-define lexer (make-lexer sourced-bytes line-lexer-impl))
  (find-whitespace-issues* lexer #f))

(define (find-whitespace-issues* [lexer : (Lexer Bytes)]
                                 [prev-line-blank : Boolean]) : (List Bytes)
  (case (run-lexer lexer)
    [(bad-input msg _) (panic msg)]
    [(end-of-input _)
     (if prev-line-blank
         (varargs list #"Empty line at end of file.")
         (empty))]
    [(lex-result (source-span-annotated line src) lexer)
     (match-define length (bytes-length line))
     (cond
       [(not (newline? (bytes-ref line (- length 1))))
        (varargs list #"No newline at end of file.")]
       [(= length 1)
        (find-whitespace-issues* lexer #t)]
       [(space? (bytes-ref line (- length 2)))
        (varargs list
          (bytes-append
            (varargs list #"Trailing space at end of line: ["
                     (source-span->start-location-bytes src) #"]")))]
       [else
        (find-whitespace-issues* lexer #f)])]))

(define (lint-module [module-file : Bytes] [signatures : (List Bytes)]) : (Either Bytes LintResults)
  (case (parse-module-file module-file)
    [(left v) (left (parser-error->bytes v))]
    [(right module)
     (case (parse-signature-files signatures)
       [(left v) (left v)]
       [(right signatures)
        (let ([signatures
                (foldl
                  (lambda ([sig : ModuleSignature] [acc : (IndexedSet ModuleSignature ModName)])
                    (indexed-set-add acc sig))
                  signatures
                  (make-indexed-set module-signature-name mod-name-cmp))])
          (right (lint-results
                   module-file
                   (module-unused-bindings module signatures)
                   (module-unused-local-bindings module)
                   (set->list
                     (set-remove-all
                       (set-add-all
                         (make-set mod-name-cmp)
                         (map module-signature-name (indexed-set->list signatures)))
                       (map imports-module-name (module-imports module))))
                   (find-header-violations module)
                   (find-whitespace-issues module-file))))])]))
