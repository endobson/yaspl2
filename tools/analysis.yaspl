#:module (tools analysis)
#:import {
  (either)
  (io)
  (list)
  (maybe)
  (prim)
  (yaspl languages source-language)
  (yaspl parser)
}
(export
  (#:types AnalysisResults)
  (#:values write-analysis-results find-problematic-functions))
(types
  (define-type AnalysisResults
    (analysis-results
      [file-name : Bytes]
      [bad-functions : (List Bytes)])))

(define (write-analysis-results [results : AnalysisResults] [output : OutputPort]) : Void
  (case results
    [(analysis-results _ (empty))
     (void)]
    [(analysis-results name functions)
     (begin
        (write-all-bytes name output)
        (write-line #":" output)
        (for-each
          (lambda ([function : Bytes])
            (begin
              (write-all-bytes #"  " output)
              (write-line function output)))
          functions))]))

(define (find-problematic-functions [module-file : Bytes]) : (Either Bytes AnalysisResults)
  (case (parse-module-file module-file)
    [(left v) (left (parser-error->bytes v))]
    [(right mod)
     (match-define (module _ _ _ (definitions _ _ _ functions _)) mod)
     (right
       (analysis-results
         module-file
         (filter-map
           (lambda ([def : FunctionDefinition]) : (Maybe Bytes)
             (case def
               [(function-definition (identifier name _) _ _ _ _ body)
                (if (search/block body)
                    (just name)
                    (nothing))]))
           functions)))]))

(define (search/block [block : Block]) : Boolean
  (match-define (block defs expr) block)
  (or
    (ormap search/block-def defs)
    (search/expr expr)))

(define (search/expr [expr : Expression]) : Boolean
  (case expr
    ;; Problematic expressions
    [(app-expr _ (lambda-expr _ _ _ _) _ _) #t]

    ;; Recur
    [(int-literal _ _) #f]
    [(bytes-literal _ _) #f]
    [(boolean-literal _ _) #f]
    [(var-expr _) #f]
    [(annotated-expr _ expr _)
     (search/expr expr)]
    [(if-expr c t f _)
     (or (search/expr c)
         (or (search/expr t)
             (search/expr f)))]
    [(cond-expr clauses final _)
     (or (ormap search/cond-clause clauses)
         (search/block final))]
    [(begin-expr exprs last-expr _)
     (or (ormap search/expr exprs)
         (search/expr last-expr))]
    [(app-expr _ op args _)
     (or (ormap search/expr args)
         (search/expr op))]
    [(varargs-app-expr _ _ args _)
     (ormap search/expr args)]
    [(let-expr _ expr body _)
     (or (search/expr expr)
         (search/block body))]
    [(lambda-expr _ _ body _)
     (search/block body)]
    [(case-expr expr clauses _)
     (or (ormap search/case-clause clauses)
         (search/expr expr))]))

(define (search/block-def [block-def : BlockDefinition]) : Boolean
  (match-define (match-def _pattern _type expr) block-def)
  (search/expr expr))

(define (search/case-clause [clause : CaseClause]) : Boolean
  (match-define (case-clause _pattern block) clause)
  (search/block block))

(define (search/cond-clause [clause : CondClause]) : Boolean
  (match-define (cond-clause test body _) clause)
  (or (search/expr test) (search/block body)))
