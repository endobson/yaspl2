#:module (tools aspect-remove-unused-dependencies-main)
#:import {
  (bytes)
  (dict)
  (either)
  (io)
  (list)
  (maybe)
  (module-name)
  (prim)
  (set)
  (sexp-parser)
  (tools command-line)
  (tools module-index-parser)
  (yaspl languages source-language)
  (yaspl parser)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [target-label : Bytes]
      [module-index-file-path : Bytes]
      [module-file-path : Bytes]
      [mod-name-file-paths : (List Bytes)])))

(define (parse-args [input-args : (List Bytes)]) : (Either Bytes Args)
  (case input-args
    [(empty)
     (left #"No binary!?")]
    [(cons _ (empty))
     (left #"No target label provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No module index file provided.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No module file provided.")]
    [(cons _ (cons target-label (cons module-index-file (cons module-file mod-name-files))))
     (right (args target-label module-index-file module-file mod-name-files))]))

(define (get-output [args : Args]) : OutputLocation
  (output-to-stdout))

(define (handle-result [buildozer-commands : (List Bytes)] [output : OutputPort]) : Void
  (for-each
    (lambda ([buildozer-command : Bytes])
      (write-line buildozer-command output))
    buildozer-commands))

(define (extract-imported-modules [module-file : Bytes]) : (Either Bytes (List ModName))
  (case (parse-module-file module-file)
    [(left v) (left (parser-error->bytes v))]
    [(right module)
     (right (map imports-module-name (module-imports module)))]))

(define (extract-available-modules [mod-name-files : (List Bytes)]) : (Either Bytes (List ModName))
  (extract-rights
    (map
      (lambda ([input-path : Bytes]) : (Either Bytes ModName)
        (case (parse-single-sexp
                (sourced-bytes-from-file input-path))
          [(left (sexp-error v _)) (left v)]
          [(right mod-name)
           (case (sexp->mod-name mod-name)
             [(nothing) (left #"Unparseable mod-name")]
             [(just v) (right v)])]))
      mod-name-files)))

(define (compute-unused-dependencies [module-file : Bytes] [mod-name-files : (List Bytes)])
  : (Either Bytes (List ModName))
  (case (extract-imported-modules module-file)
    [(left v) (left v)]
    [(right imported-modules)
     (case (extract-available-modules mod-name-files)
       [(left v) (left v)]
       [(right available-modules)
        (right
          (set->list
            (set-remove-all
              (set-add-all
                (make-set mod-name-cmp)
                available-modules)
              imported-modules)))])]))

(define (construct-buildozer-commands
          [self-target : Bytes]
          [module-index : (Dict ModName Bytes)]
          [mod-names : (List ModName)])
  : (Either Bytes (List Bytes))
  (extract-rights
    (map
      (lambda ([mod-name : ModName]) : (Either Bytes Bytes)
        (case (dict-ref module-index mod-name)
          [(nothing)
           (left (bytes-append (varargs list
                                 #"Couldn't find module " (mod-name->bytes mod-name) #" in index")))]
          [(just module-target)
           (right (bytes-append (varargs list #"remove deps " module-target #"|" self-target)))]))
      mod-names)))

(define (run [args : Args] [stdin : InputPort]) : (Either Bytes (List Bytes))
  (match-define (args target-label module-index-file-path module-file-path mod-name-file-paths) args)
  (case (compute-unused-dependencies module-file-path mod-name-file-paths)
    [(left v) (left v)]
    [(right unused-dependencies)
     (case (read-module-index-file module-index-file-path)
       [(left v) (left v)]
       [(right module-index)
        (construct-buildozer-commands target-label module-index unused-dependencies)])]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (run-command-line-tool args stdin stdout stderr
    (command-line-tool parse-args run get-output handle-result)))
