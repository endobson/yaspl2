#:module (tools web-calculator web-calculator-main)
#:import {
  (bytes)
  (either)
  (data lifted-primitives)
  (formats html)
  (formats web-assembly)
  (formats xml)
  (http-server)
  (io)
  (ip)
  (join-list)
  (list)
  (maybe)
  (numbers)
  (prim)
  (protocols http http-response)
  (protocols http http-responses)
  (tcp)
  (tools web-calculator client-code)
  {(tools web-calculator embed)
    {#:values
      [value js-contents]
    }
  }
}
(export
  (#:values main))
(types)

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (args->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No ip address supplied." stderr)
       1)]
    [(cons _ (cons _ (empty)))
     (begin
       (write-line #"No port supplied" stderr)
       1)]
    [(cons _ (cons _ (cons _ (cons _ _))))
     (begin
       (write-line #"Too many arguments" stderr)
       1)]
    [(cons _ (cons ip-addr (cons port (empty))))
     (case (bytes->ipv4-address ip-addr)
       [(nothing)
        (begin
          (write-line #"Unparsable ip address" stderr)
          1)]
       [(just ip-addr)
        (case (decimal-bytes->integer port)
          [(nothing)
           (begin
             (write-line #"Unparsable port number" stderr)
             1)]
          [(just (lifted-int port))
           (begin
             (run-http-server (tcp-address ip-addr port) (make-request-handler))
             (write-line #"Http server stopped running." stderr)
             1)])])]))

(define (make-request-handler) : (HttpRequest -> HttpResponse)
  (lambda ([request : HttpRequest])
    (case request
      [(http-request path _headers)
       (if (bytes=? path #"/")
           (serve-index-response)
           (if (bytes=? path #"/calc.wasm")
               (serve-wasm-response2)
               (not-found)))])))

(define (wasm-ok-response [mod : Module]) : HttpResponse
  (http-response 200 #"OK" #"application/wasm" (module->binary-bytes mod)))

(define (serve-index-response) : HttpResponse
  (xhtml-ok-response
    (html
      (head
        (varargs list
          (script/javascript (single-jl (js-contents)))))
      (body
        (varargs list
          (form
            (varargs list
              (element-node #"input" 
                (varargs list 
                  (attribute/escape #"type" (single-jl #"text"))
                  (attribute/escape #"name" (single-jl #"input"))
                  (attribute/escape #"autofocus" (single-jl #""))) 
                (empty))
              (input/submit))))))))

(define (serve-wasm-response2) : HttpResponse
  (match-define client-source (client-source-code))
  (case (convert-module client-source)
    [(left v) (internal-server-error v)]
    [(right v) (wasm-ok-response v)]))


(define (serve-wasm-response) : HttpResponse
  (wasm-ok-response
    (module
      (varargs list
        (function-type (empty) (varargs list (i32)))
        (function-type (varargs list (i32) (i32)) (varargs list (i32)))
        (function-type (empty) (empty))
        (function-type (empty) (varargs list (i32))))
      (varargs list
        (import #"host" #"log" (function-import 2))
        (import #"host" #"getChar" (function-import 3)))
      (varargs list
        (function 0 (empty) (varargs list (const-i32-inst 100)))
        (function 1 (empty) 
          (varargs list 
            (call-inst 0) 
            (global-get-inst 0)
            (call-inst 1)
            (global-set-inst 0)
            )))
      (varargs list
        (global (global-type #t (i32)) (varargs list (const-i32-inst 0))))
      (varargs list 
        (export #"calc" (function-export 2))
        (export #"add" (function-export 3))))))
