#:module (tools web-calculator web-calculator-main)
#:import {
  (bytes)
  (data lifted-primitives)
  (formats html)
  (formats web-assembly)
  (http-server)
  (io)
  (ip)
  (join-list)
  (list)
  (maybe)
  (numbers)
  (prim)
  (protocols http http-response)
  (protocols http http-responses)
  (tcp)
}
(export
  (#:values main))
(types)

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (args->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No ip address supplied." stderr)
       1)]
    [(cons _ (cons _ (empty)))
     (begin
       (write-line #"No port supplied" stderr)
       1)]
    [(cons _ (cons _ (cons _ (cons _ _))))
     (begin
       (write-line #"Too many arguments" stderr)
       1)]
    [(cons _ (cons ip-addr (cons port (empty))))
     (case (bytes->ipv4-address ip-addr)
       [(nothing)
        (begin
          (write-line #"Unparsable ip address" stderr)
          1)]
       [(just ip-addr)
        (case (decimal-bytes->integer port)
          [(nothing)
           (begin
             (write-line #"Unparsable port number" stderr)
             1)]
          [(just (lifted-int port))
           (begin
             (run-http-server (tcp-address ip-addr port) (make-request-handler))
             (write-line #"Http server stopped running." stderr)
             1)])])]))

(define (make-request-handler) : (HttpRequest -> HttpResponse)
  (lambda ([request : HttpRequest])
    (case request
      [(http-request path _headers)
       (if (bytes=? path #"/")
           (serve-index-response)
           (if (bytes=? path #"/calc.wasm")
               (serve-wasm-response)
               (not-found)))])))

(define (wasm-ok-response [mod : Module]) : HttpResponse
  (http-response 200 #"OK" #"application/wasm" (module->binary-bytes mod)))

(define (serve-index-response) : HttpResponse
  (xhtml-ok-response
    (html
      (head
        (varargs list
          (script/javascript (script-body))))
      (body
        (varargs list
          (form
            (varargs list
              (input/text)
              (input/submit))))))))

(define (script-body) : (JoinList Bytes)
  (list->jl
    (interleave
      (varargs list
        #"window.addEventListener(\"DOMContentLoaded\", () => {"
        #"  document.getElementById(\"form\").addEventListener(\"submit\", e => {"
        #"    e.preventDefault()"
        #"    fetch(\"calc.wasm\", {cache: \"no-cache\"})"
        #"    .then(response => WebAssembly.instantiateStreaming(response))"
        #"    .then(res => {"
        #"        let mod = res.module"
        #"        let instance = res.instance"
        #"        let result = instance.exports.calc()"
        #"        let div = document.createElement(\"div\")"
        #"        div.appendChild(new Text(\"Result: \" + result))"
        #"        document.body.appendChild(div)"
        #"    }).catch(error => {"
        #"      document.body.appendChild(new Text(error))"
        #"    })"
        #"  })"
        #"})")
      #"\n")))


(define (serve-wasm-response) : HttpResponse
  (wasm-ok-response
    (module
      (varargs list
        (function-type (empty) (varargs list (i32))))
      (varargs list
        (function 0 (empty) (varargs list (const-i32-inst 100))))
      (varargs list (export #"calc" (function-export 0))))))
