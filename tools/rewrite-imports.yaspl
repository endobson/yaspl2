#:module (tools rewrite-imports)
#:import {
  (bytes)
  (data source-location)
  (either)
  (io)
  (join-list)
  {(lexer)
    {#:values
      lexer-remaining-input
    }
  }
  (list)
  (module-name)
  (prim)
  (sexp-lexer)
  (sexp-parser)
  (yaspl languages source-language)
}
(export
  (#:values rewrite-imports))
(types)

(define (import->bytes [i : Import]) : Bytes
  (case i
    [(import (identifier exported _) (identifier local _))
     (if (bytes=? exported local)
         local
         (bytes-append (varargs list #"[" exported #" " local #"]")))]))

(define (remove-import-section [b : Bytes]) : (Either Bytes Bytes)
  (match-define lexer (make-sexp-lexer (sourced-bytes (unnamed-source) b)))
  (case (skip-sexp lexer)
    [(left v) (left v)]
    [(right lexer)
     (case (skip-sexp lexer)
       [(left v) (left v)]
       [(right lexer)
        (case (skip-sexp lexer)
          [(left v) (left v)]
          [(right lexer)
           (case (skip-sexp lexer)
             [(left v) (left v)]
             [(right lexer)
              (right (lexer-remaining-input lexer))])])])]))

(define (skip-sexp [l : (Lexer Token)]) : (Either Bytes (Lexer Token))
  (case (parse-sexp l)
    [(sexp-result-eof _) (left #"End of file")]
    [(sexp-result-error (sexp-error v _)) (left v)]
    [(sexp-result _ lexer) (right lexer)]))


(define (import< [a : Import] [b : Import]) : Boolean
  (bytes< (import-exported-name* a) (import-exported-name* b)))

(define (imports< [i1 : Imports] [i2 : Imports]) : Boolean
  (mod-name< (imports-module-name i1) (imports-module-name i2)))

(define (rewrite-imports [mod-name : ModName] [imports : (List Imports)] [module-file-name : Bytes])
  : (Either Bytes Bytes)
  (case (remove-import-section (call-with-input-file module-file-name read-all-bytes))
    [(left v) (left v)]
    [(right rest-of-module)
     (right
       (bytes-append
         (jl->list
           (varargs append-jl*
             (single-jl #"#:module ")
             (single-jl (mod-name->bytes mod-name))
             (single-jl #"\n")
             (single-jl #"#:import {\n")
             (concat-map-jl/list
               (lambda ([i : Imports]) : (JoinList Bytes)
                 (case i
                   [(full-imports (source-span-annotated mod-name _))
                    (varargs join-list #"  " (mod-name->bytes mod-name) #"\n")]
                   [(partial-imports (source-span-annotated mod-name _) types values patterns statics)
                    (match-define format-imports
                      (lambda ([kind : Bytes] [imports : (List Import)]) : (JoinList Bytes)
                        (case imports
                          [(empty)
                           (empty-jl)]
                          [_
                           (append-jl
                             (varargs join-list #"    {#:" kind #"\n")
                             (snoc-jl
                               (concat-map-jl/list
                                 (lambda ([i : Import])
                                   (varargs join-list #"      " (import->bytes i) #"\n"))
                                 (sort imports import<))
                               #"    }\n"))])))

                    (varargs append-jl*
                      (varargs join-list #"  {" (mod-name->bytes mod-name) #"\n")
                      (format-imports #"types" types)
                      (format-imports #"values" values)
                      (format-imports #"patterns" patterns)
                      (format-imports #"statics" statics)
                      (single-jl #"  }\n"))]))
               (sort imports imports<))
             (single-jl #"}")
             (single-jl rest-of-module)))))]))
