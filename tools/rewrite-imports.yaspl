#:module (tools rewrite-imports)
#:import {
  (bytes)
  (data source-location)
  (either)
  (io)
  (join-list)
  (lexer)
  (list)
  (module-name)
  (prim)
  (sexp-parser)
  (source-language)
}
(export
  (#:types)
  (#:values rewrite-imports)
  (#:patterns))
(types)

(define (import->bytes [i : Import]) : Bytes
  (match-define (import exported local) i)
  (if (bytes=? exported local)
      local
      (bytes-append (varargs list #"[" exported #" " local #"]"))))

(define (remove-import-section [b : Bytes]) : (Either Bytes Bytes)
  (match-define lexer (make-lexer (sourced-bytes (unnamed-source) b)))
  (case (skip-sexp lexer)
    [(left v) (left v)]
    [(right lexer)
     (case (skip-sexp lexer)
       [(left v) (left v)]
       [(right lexer)
        (case (skip-sexp lexer)
          [(left v) (left v)]
          [(right lexer)
           (case (skip-sexp lexer)
             [(left v) (left v)]
             [(right lexer)
              (right (lexer-remaining-input lexer))])])])]))

(define (skip-sexp [l : Lexer]) : (Either Bytes Lexer)
  (case (parse-sexp l)
    [(sexp-result-eof _) (left #"End of file")]
    [(sexp-result-error (sexp-error v _)) (left v)]
    [(sexp-result _ lexer) (right lexer)]))


(define (import< [a : Import] [b : Import]) : Boolean
  (bytes< (import-exported-name a) (import-exported-name b)))

(define (imports-module-name [i : Imports]) : ModName
  (case i
    [(partial-imports mod-name _ _ _) mod-name]
    [(full-imports mod-name) mod-name]))

(define (imports< [i1 : Imports] [i2 : Imports]) : Boolean
  (mod-name< (imports-module-name i1) (imports-module-name i2)))

(define (rewrite-imports [mod-name : ModName] [imports : (List Imports)] [module-file-name : Bytes])
  : (Either Bytes Bytes)
  (case (remove-import-section (call-with-input-file module-file-name read-all-bytes))
    [(left v) (left v)]
    [(right rest-of-module)
     (right
       (bytes-append
         (jl->list
           (varargs append-jl*
             (single-jl #"#:module ")
             (single-jl (mod-name->bytes mod-name))
             (single-jl #"\n")
             (single-jl #"#:import {\n")
             (concat-map-jl/list
               (lambda ([i : Imports]) : (JoinList Bytes)
                 (case i
                   [(full-imports mod-name)
                    (varargs join-list #"  " (mod-name->bytes mod-name) #"\n")]
                   [(partial-imports mod-name types values patterns)
                    (varargs append-jl*
                      (varargs join-list #"  {" (mod-name->bytes mod-name) #"\n")
                      (case types
                        [(empty)
                         (empty-jl)]
                        [_
                         (cons-jl
                           #"    {#:types\n"
                           (snoc-jl
                             (concat-map-jl/list
                               (lambda ([i : Import])
                                 (varargs join-list #"      " (import->bytes i) #"\n"))
                               (sort types import<))
                             #"    }\n"))])
                      (case values
                        [(empty)
                         (empty-jl)]
                        [_
                         (cons-jl
                           #"    {#:values\n"
                           (snoc-jl
                             (concat-map-jl/list
                               (lambda ([i : Import])
                                 (varargs join-list #"      " (import->bytes i) #"\n"))
                               (sort values import<))
                             #"    }\n"))])
                      (case patterns
                        [(empty)
                         (empty-jl)]
                        [_
                         (cons-jl
                           #"    {#:patterns\n"
                           (snoc-jl
                             (concat-map-jl/list
                               (lambda ([i : Import])
                                 (varargs join-list #"      " (import->bytes i) #"\n"))
                               (sort patterns import<))
                             #"    }\n"))])
                      (single-jl #"  }\n"))]))
               (sort imports imports<))
             (single-jl #"}")
             (single-jl rest-of-module)))))]))
