#:module (rewrite-imports)
#:import {
  (bytes) {
    #:values
      bytes-append
      bytes<
      bytes=?
      make-null-terminated
  }
  (compiler) {
    #:values
      parse-module-file
  }
  (either) {
    #:types
      Either
    #:values
      left
      right
    #:patterns
      left
      right
  }
  (io) {
    #:values
      call-with-input-file
      call-with-output-file
      delete-file
      read-all-bytes
      write-all-bytes
      write-line
  }
  (list) {
    #:types
      List
    #:values
      array->list
      for-each
      list
      sort
    #:patterns
      cons
      empty
  }
  (module-name) {
    #:types
      ModName
    #:values
      mod-name->bytes
      mod-name<
  }
  (prim) {
    #:types
      Array
      Boolean
      Bytes
      InputPort
      Int
      OutputPort
      Void
    #:values
      set-file-or-directory-permissions
      void
  }
  (sexp-parser) {
    #:values
      parse-sexp
  }
  (source-language) {
    #:types
      Import
      Imports
    #:values
      import-exported-name
      module-imports
      module-name
    #:patterns
      full-imports
      import
      partial-imports
  }
  (tuples) {
    #:patterns
      tuple2
  }
}
(export)
(types)

(define (import->bytes [i : Import]) : Bytes
  (match-define (import exported local) i)
  (if (bytes=? exported local)
      local
      (bytes-append (varargs list #"[" exported #" " local #"]"))))

(define (remove-import-section [b : Bytes]) : (Either Bytes Bytes)
  (case (parse-sexp b)
    [(left v) (left v)]
    [(right (tuple2 _ b))
     (case (parse-sexp b)
       [(left v) (left v)]
       [(right (tuple2 _ b))
        (case (parse-sexp b)
          [(left v) (left v)]
          [(right (tuple2 _ b))
           (case (parse-sexp b)
             [(left v) (left v)]
             [(right (tuple2 _ b))
              (right b)])])])]))

(define (import< [a : Import] [b : Import]) : Boolean
  (bytes< (import-exported-name a) (import-exported-name b)))

(define (imports-module-name [i : Imports]) : ModName
  (case i
    [(partial-imports mod-name _ _ _) mod-name]
    [(full-imports mod-name) mod-name]))

(define (imports< [i1 : Imports] [i2 : Imports]) : Boolean
  (mod-name< (imports-module-name i1) (imports-module-name i2)))


(define (rewrite-imports [mod-name : ModName] [imports : (List Imports)] [module-file-name : Bytes])
  : (Either Bytes Void)
  (case (remove-import-section (call-with-input-file module-file-name read-all-bytes))
    [(left v) (left v)]
    [(right rest-of-module)
     (begin
       (delete-file module-file-name)
       (right
         (call-with-output-file module-file-name
           (lambda ([output : OutputPort])
             (begin
               (set-file-or-directory-permissions
                 (make-null-terminated module-file-name)
                 432) ;; Octal 660
               (write-line
                 (bytes-append (varargs list #"#:module " (mod-name->bytes mod-name)))
                 output)
               (write-line #"#:import {" output)
               (for-each
                 (lambda ([i : Imports])
                   (case i
                     [(full-imports mod-name)
                      (write-line (bytes-append (varargs list #"  " (mod-name->bytes mod-name))) output)]
                     [(partial-imports mod-name types values patterns)
                      (begin
                        (write-line (bytes-append (varargs list #"  " (mod-name->bytes mod-name) #" {")) output)
                        (case types
                          [(empty)
                           (void)]
                          [_
                           (begin
                             (write-line #"    #:types" output)
                             (for-each
                               (lambda ([i : Import])
                                 (begin
                                   (write-all-bytes #"      " output)
                                   (write-line (import->bytes i) output)))
                               (sort types import<)))])
                        (case values
                          [(empty)
                           (void)]
                          [_
                           (begin
                             (write-line #"    #:values" output)
                             (for-each
                               (lambda ([i : Import])
                                 (begin
                                   (write-all-bytes #"      " output)
                                   (write-line (import->bytes i) output)))
                               (sort values import<)))])
                        (case patterns
                          [(empty)
                           (void)]
                          [_
                           (begin
                             (write-line #"    #:patterns" output)
                             (for-each
                               (lambda ([i : Import])
                                 (begin
                                   (write-all-bytes #"      " output)
                                   (write-line (import->bytes i) output)))
                               (sort patterns import<)))])
                        (write-line #"  }" output))]))
                 (sort imports imports<))
               (write-all-bytes #"}" output)
               (write-all-bytes rest-of-module output))))))]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No input file name supplied." stderr)
       1)]
    [(cons _ (cons _ (cons _ _)))
     (begin
       (write-line #"Too many arguments supplied." stderr)
       1)]
    [(cons _ (cons input-file-name (empty)))
     (case (parse-module-file input-file-name)
       [(left v)
        (begin
          (write-line v stderr)
          1)]
       [(right mod)
        (case (rewrite-imports (module-name mod) (module-imports mod) input-file-name)
          [(left v)
           (begin
             (write-line v stderr)
             1)]
          [(right _)
           0])])]))
