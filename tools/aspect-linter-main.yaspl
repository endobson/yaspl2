#:module (tools aspect-linter-main)
#:import {
  (either)
  (list)
  (prim)
  (tools command-line)
  (tools linter)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [module-file-path : Bytes]
      [output-file-path : Bytes]
      [signature-file-paths : (List Bytes)])))

(define (parse-args [input-args : (List Bytes)]) : (Either Bytes Args)
  (case input-args
    [(empty)
     (left #"No binary!?")]
    [(cons _ (empty))
     (left #"No module file provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No output file provided.")]
    [(cons _ (cons module-file (cons output-file signature-files)))
     (right (args module-file output-file signature-files) )]))

(define (run [args : Args] [stdin : InputPort]) : (Either Bytes LintResults)
  (lint-module (args-module-file-path args) (args-signature-file-paths args) ))

(define (get-output [args : Args]) : OutputLocation
  (output-to-file (args-output-file-path args)))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (run-command-line-tool args stdin stdout stderr
    (command-line-tool parse-args run get-output write-lint-results)))
