#:module (tools aspect-linter-main)
#:import {
  {(either)
    {#:types
      Either
    }
    {#:patterns
      left
      right
    }
  }
  {(io)
    {#:values
      call-with-output-file
      write-line
    }
  }
  {(list)
    {#:values
      array->list
    }
    {#:patterns
      cons
      empty
    }
  }
  {(prim)
    {#:types
      Array
      Bytes
      InputPort
      Int
      OutputPort
    }
  }
  {(tools linter)
    {#:types
      LintResults
    }
    {#:values
      lint-module
      write-lint-results
    }
  }
}
(export)
(types)

(define (handle-failure-result [msg : Bytes] [stderr : OutputPort]) : Int
  (begin
    (write-line msg stderr)
    1))

(define (handle-result [output : OutputPort] [stderr : OutputPort]
                       [results : (Either Bytes LintResults)]) : Int
  (case results
    [(left v)
     (handle-failure-result v stderr)]
    [(right results)
     (begin
       (write-lint-results results output)
       0)]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (handle-failure-result #"No binary!?" stderr)]
    [(cons _ (empty))
     (handle-failure-result #"No module file provided." stderr)]
    [(cons _ (cons _ (empty)))
     (handle-failure-result #"No output file provided." stderr)]
    [(cons _ (cons module-file (cons output-file signature-files)))
     (call-with-output-file output-file
       (lambda ([output-port : OutputPort])
         (handle-result output-port stderr
           (lint-module module-file signature-files))))]))
