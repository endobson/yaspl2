#:module (tools module-index-validator)
#:import {
  (data lifted-primitives)
  (either)
  (list)
  (prim)
  (tools command-line)
  (tools module-index-parser)
}
(export)
(types
  (define-type Args
    (args
      [module-index-file-path : Bytes])))

(define (parse-args [input-args : (List Bytes)]) : (Either Bytes Args)
  (case input-args
    [(empty)
     (left #"No binary!?")]
    [(cons _ (empty))
     (left #"No module index file provided.")]
    [(cons _ (cons _ (cons _ _)))
     (left #"Too many arguments provided")]
    [(cons _ (cons module-index-file (empty)))
     (right (args module-index-file))]))

(define (run [args : Args] [stdin : InputPort]) : (Either Bytes LiftedVoid)
  (match-define (args module-index-file) args)
  (case (read-module-index-file module-index-file)
    [(left v) (left v)]
    [(right _) (right (lifted-void))]))

(define (get-output [args : Args]) : OutputLocation
  (output-to-stdout))

(define (print-nothing [v : LiftedVoid] [output : OutputPort]) : Void
  (void))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (run-command-line-tool args stdin stdout stderr
    (ann (CommandLineTool Args LiftedVoid)
         (command-line-tool parse-args run get-output print-nothing))))
