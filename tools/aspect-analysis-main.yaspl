#:module (tools aspect-analysis-main)
#:import {
  (either)
  (io)
  (list)
  (prim)
  (tools analysis)
}
(export)
(types)

(define (handle-failure-result [msg : Bytes] [stderr : OutputPort]) : Int
  (begin
    (write-line msg stderr)
    1))

(define (handle-result [output : OutputPort] [stderr : OutputPort]
                       [results : (Either Bytes AnalysisResults)]) : Int
  (case results
    [(left v)
     (handle-failure-result v stderr)]
    [(right results)
     (begin
       (write-analysis-results results output)
       0)]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (handle-failure-result #"No binary!?" stderr)]
    [(cons _ (empty))
     (handle-failure-result #"No module file provided." stderr)]
    [(cons _ (cons _ (empty)))
     (handle-failure-result #"No output file provided." stderr)]
    [(cons _ (cons module-file (cons output-file signature-files)))
     (call-with-output-file output-file
       (lambda ([output-port : OutputPort])
         (handle-result output-port stderr
           (find-problematic-functions module-file))))]))
