#:module (tools ir-printer-main)
#:import {
  (bytes)
  (color-graph)
  (compiler)
  (dict)
  (either)
  (io)
  (join-list)
  (list)
  {(lower-x86-64)
    {#:types
      Reg
      X8664Register
    }
    {#:values
      all-fixed-registers
      reg->bytes
      reg-cmp
      x86-64-register->bytes
    }
  }
  (lowered-live-variables)
  (panic)
  (prim)
  {(print-lowered-register-language)
    {#:values
      [print-function l:print-function]
    }
  }
  {(print-register-language)
    {#:values
      [print-function r:print-function]
    }
  }
  {(register-language)
    {#:patterns
      [function-definition r:function-definition]
    }
  }
  (register-language-compiler)
  (tools compile-module-args)
  (tuples)
  (yaspl top-level-objects)
  (yaspl top-level-objects-to-x86-64)
  (yaspl var)
  (yaspl x86-64-assembly)
  (yaspl x86-64-assembly-printer)
}
(export)
(types)

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (parse-compile-module-args (array->list args))
    [(left v) (handle-failure-result v stderr)]
    [(right (compile-module-args output-directory main-module signatures))
     (case (compile-main-module main-module signatures)
       [(left v) (handle-failure-result v stderr)]
       [(right (tuple2 objects _))
        (match-define (assembly-fragments _text-fragments _) (convert-objects objects))
        (begin
          (make-directory output-directory)
          (for-each
            (lambda ([o : TopLevelObject]) : Void
              (case o
                [(register-function-tlo fun)
                 (match-define (r:function-definition orig-name _ _ _ _) fun)
                 (match-define file-name-base
                   (bytes-append (interleave (bytes-split orig-name #"/") #"_")))
                 (match-define make-file-name
                   (lambda ([suffix : Bytes])
                     (bytes-append (varargs list output-directory #"/" file-name-base suffix))))
                 (begin
                   (call-with-output-file/void
                     (make-file-name #".reg")
                     (lambda ([port : OutputPort])
                       (write-all-bytes (r:print-function fun) port)))
                   (case (compile-function/intermediates fun)
                     [(left v) (panic/void v)]
                     [(right (compile-function-intermediates _ orig-lowered spilled-lowered text))
                      (match-define live (live-variables spilled-lowered reg-cmp))
                      (begin
                        (call-with-output-file/void
                          (make-file-name #".lower")
                          (lambda ([port : OutputPort])
                            (write-all-bytes (l:print-function spilled-lowered reg->bytes) port)))
                        (call-with-output-file/void
                          (make-file-name #".lower-orig")
                          (lambda ([port : OutputPort])
                            (write-all-bytes (l:print-function orig-lowered reg->bytes) port)))
                        (call-with-output-file/void
                          (make-file-name #".orig-trace")
                          (lambda ([port : OutputPort])
                            (for-each
                              (lambda ([v : ColorTrace])
                                (write-line (color-trace->bytes v) port))
                              (determine-color-traces
                                (initial-state
                                 (blocks->live-out-states
                                   (live-variables orig-lowered reg-cmp)))))))

                        (call-with-output-file/void
                          (make-file-name #".assem")
                          (lambda ([port : OutputPort])
                            (let ([bytes (bytes-append
                                           (jl->list (assembly-commands->bytes
                                                       (osx-assembly-style)
                                                       (jl->list (text-fragment->commands text)))))])
                              (write-all-bytes bytes port))))
                        (call-with-output-file/void
                          (make-file-name #".block-live")
                          (lambda ([port : OutputPort])
                            (write-all-bytes
                              (print-blocks live reg->bytes)
                              port)))
                        (call-with-output-file/void
                          (make-file-name #".live-out")
                          (lambda ([port : OutputPort])
                            (for-each
                              (lambda ([ls : (LiveOutState Reg)])
                                (write-line (live-out-state->bytes ls reg->bytes) port))
                              (blocks->live-out-states live))))
                        (call-with-output-file/void
                          (make-file-name #".final-trace")
                          (lambda ([port : OutputPort])
                            (for-each
                              (lambda ([v : ColorTrace])
                                (write-line (color-trace->bytes v) port))
                              (determine-color-traces
                                (initial-state
                                 (blocks->live-out-states live))))))
                        (case (color-graph (initial-state (blocks->live-out-states live)))
                          [(left _) (void)]
                          [(right dict)
                           (call-with-output-file/void
                             (make-file-name #".final-assignments")
                             (lambda ([port : OutputPort])
                               (for-each
                                 (lambda ([v : Bytes])
                                   (write-line v port))
                                 (dict-map
                                   dict
                                   (lambda ([v : Var] [reg : X8664Register])
                                     (bytes-append
                                       (varargs list
                                         (var->bytes v) #" => " (x86-64-register->bytes reg))))))))])
                        (call-with-output-file/void
                          (make-file-name #".assignments")
                          (lambda ([port : OutputPort])
                            (for-each
                              (lambda ([v : ColorTrace])
                                (write-line (color-trace->bytes v) port))
                              (determine-color-traces (initial-state
                                                                (blocks->live-out-states
                                                                  live))))))
                        (call-with-output-file/void
                          (make-file-name #".graph")
                          (lambda ([port : OutputPort])
                            (write-all-bytes
                              (print-graph live reg-cmp reg->bytes (all-fixed-registers))
                              port))))]))]
                [_ (void)]))
            objects)
          0)])]))

(define (handle-failure-result [msg : Bytes] [stderr : OutputPort]) : Int
  (begin
    (write-line msg stderr)
    1))
