#:module (tools aspect-missing-dependencies-main)
#:import {
  (bytes)
  (compiler)
  (dict)
  (either)
  (io)
  (list)
  (maybe)
  (module-name)
  (prim)
  (prim-types)
  (set)
  (sexp-parser)
  (source-language)
  (tools module-index-parser)
}
(export)
(types)

(define (imports-module-name [i : Imports]) : ModName
  (case i
    [(partial-imports mod-name _ _ _ _) mod-name]
    [(full-imports mod-name) mod-name]))

(define (handle-failure-result [msg : Bytes] [stderr : OutputPort]) : Int
  (begin
    (write-line msg stderr)
    1))

(define (handle-result [output : OutputPort] [stderr : OutputPort]
                       [results : (Either Bytes (List Bytes))]) : Int
  (case results
    [(left v)
     (handle-failure-result v stderr)]
    [(right buildozer-commands)
     (begin
       (for-each
         (lambda ([buildozer-command : Bytes])
           (write-line buildozer-command output))
         buildozer-commands)
       0)]))

(define (extract-imported-modules [module-file : Bytes]) : (Either Bytes (List ModName))
  (case (parse-module-file module-file)
    [(left v) (left (parser-error->bytes v))]
    [(right module)
     (right (map imports-module-name (module-imports module)))]))

(define (extract-available-modules [mod-name-files : (List Bytes)]) : (Either Bytes (List ModName))
  (case (extract-rights
           (map
             (lambda ([input-path : Bytes]) : (Either Bytes ModName)
               (case (parse-single-sexp
                       (sourced-bytes-from-file input-path))
                 [(left (sexp-error v _)) (left v)]
                 [(right mod-name)
                  (case (sexp->mod-name mod-name)
                    [(nothing) (left #"Unparseable mod-name")]
                    [(just v) (right v)])]))
             mod-name-files))
    [(left v) (left v)]
    [(right mod-names)
     (right (cons (prim-mod) mod-names))]))

(define (compute-missing-dependencies [module-file : Bytes] [mod-name-files : (List Bytes)])
  : (Either Bytes (List ModName))
  (case (extract-imported-modules module-file)
    [(left v) (left v)]
    [(right imported-modules)
     (case (extract-available-modules mod-name-files)
       [(left v) (left v)]
       [(right available-modules)
        (right
          (set->list
            (set-remove-all
              (set-add-all
                (make-set mod-name-cmp)
                imported-modules)
              available-modules)))])]))



(define (construct-buildozer-commands
          [self-target : Bytes]
          [module-index : (Dict ModName Bytes)]
          [mod-names : (List ModName)])
  : (Either Bytes (List Bytes))
  (extract-rights
    (map
      (lambda ([mod-name : ModName]) : (Either Bytes Bytes)
        (case (dict-ref module-index mod-name)
          [(nothing)
           (left (bytes-append (varargs list
                                 #"Couldn't find module " (mod-name->bytes mod-name) #" in index")))]
          [(just module-target)
           (right (bytes-append (varargs list #"add deps " module-target #"|" self-target)))]))
      mod-names)))


(define (run [target-label : Bytes]
             [module-index-file : Bytes]
             [module-file : Bytes]
             [mod-name-files : (List Bytes)])
  : (Either Bytes (List Bytes))
  (case (compute-missing-dependencies module-file mod-name-files)
    [(left v) (left v)]
    [(right missing-dependencies)
     (case (read-module-index-file module-index-file)
       [(left v) (left v)]
       [(right module-index)
        (construct-buildozer-commands target-label module-index missing-dependencies)])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (handle-failure-result #"No binary!?" stderr)]
    [(cons _ (empty))
     (handle-failure-result #"No target label provided." stderr)]
    [(cons _ (cons _ (empty)))
     (handle-failure-result #"No module index file provided." stderr)]
    [(cons _ (cons _ (cons _ (empty))))
     (handle-failure-result #"No module file provided." stderr)]
    [(cons _ (cons target-label (cons module-index-file (cons module-file mod-name-files))))
     (handle-result stdout stderr
       (run target-label module-index-file module-file mod-name-files))]))
