#:module (tools shell shell-main)
#:import {
  (bytes)
  (data lifted-primitives)
  (io)
  (list)
  (maybe)
  (prim)
}
(export)
(types
  (define-type Termios
    (termios
      [input-flags : Bytes]
      [output-flags : Bytes]
      [control-flags : Bytes]
      [local-flags : Bytes]
      [control-chars : Bytes]
      [input-speed : Bytes]
      [output-speed : Bytes]))

  (define-type EditLineState
    (edit-line-state [input-state : InputState]
                     [before-bytes : (List LiftedU8)]
                     [after-chars : (List LiftedU8)]))
  (define-type InputState
    (input-state-empty)
    (input-state-esc)
    (input-state-esc-bracket))

  (define-type HistoryState
    (history-state
      [executed-commands : (List Bytes)]
      [current-prev-commands : (List Bytes)]
      [current-next-commands : (List Bytes)])))


(define (ioctl-number
          [modality : Int]
          [group : Int]
          [num : Int]
          [len : Int]) : Int
  (bitwise-ior
    modality
    (bitwise-ior
      (logical-shift-left (bitwise-and #x1FFF len) 16)
      (bitwise-ior
        (logical-shift-left group 8)
        num))))


(define (parse-termios-bytes [bytes : Bytes]) : Termios
  (termios
    (subbytes bytes 0 8)
    (subbytes bytes 8 16)
    (subbytes bytes 16 24)
    (subbytes bytes 24 32)
    (subbytes bytes 32 52)
    (subbytes bytes 56 64)
    (subbytes bytes 64 72)))

(define (serialize-termios [termios : Termios]) : Bytes
  (match-define (termios in out control local chars input-speed output-speed) termios)
  (let ([bytes (make-bytes 72)])
    (begin
      (bytes-copy! in 0 8 bytes 0)
      (bytes-copy! out 0 8 bytes 8)
      (bytes-copy! control 0 8 bytes 16)
      (bytes-copy! local 0 8 bytes 24)
      (bytes-copy! chars 0 20 bytes 32)
      (bytes-copy! input-speed 0 8 bytes 56)
      (bytes-copy! output-speed 0 8 bytes 64)
      bytes)))


(define (read-termios [terminal : InputPort]) : Termios
  (let ([bytes (make-bytes 72)])
    (begin
      (ioctl terminal (ioctl-number #x40000000 116 19 72) bytes)
      (parse-termios-bytes bytes))))

(define (write-termios [termios : Termios] [terminal : InputPort]) : Void
  (ioctl terminal (ioctl-number #x80000000 116 20 72) (serialize-termios termios)))



(define (main-loop
          [executed-commands : (List Bytes)]
          [stdin : InputPort]
          [stdout : OutputPort])
  : (Maybe Bytes)
  (begin
    (write-all-bytes #"> " stdout)
    (edit-loop (history-state executed-commands executed-commands (empty))
               (edit-line-state (input-state-empty) (empty) (empty)) stdin stdout)))

(define (edit-loop [history-state : HistoryState] [line-state : EditLineState] [stdin : InputPort] [stdout : OutputPort]) : (Maybe Bytes)
  ;; TODO handle more than 1 byte at a time
  (let ([buffer (make-bytes 1)])
    (let ([amount-read (read-bytes buffer stdin 0 (bytes-length buffer))])
      (if (= amount-read 1)
          (handle-byte history-state line-state (u8->s64 (bytes-ref buffer 0)) stdin stdout)
          (panic #"Unexpected read amount")))))

(define (list->bytes [l : (List LiftedU8)]) : Bytes
  (list->bytes-helper (make-bytes (length l)) 0 l))

(define (list->bytes-helper [bytes : Bytes] [index : Int] [l : (List LiftedU8)]) : Bytes
  (case l
    [(empty) bytes]
    [(cons (lifted-u8 e) l)
     (begin
       (bytes-set! bytes index e)
       (list->bytes-helper bytes (+ 1 index) l))]))

(define (bytes->list [b : Bytes]) : (List LiftedU8)
  (bytes-map b lifted-u8))



(define (finish-iteration [bytes : Bytes] [executed-commands : (List Bytes)]
                          [stdin : InputPort] [stdout : OutputPort]) : (Maybe Bytes)
  (case bytes
    [#""
     (main-loop executed-commands stdin stdout)]
    [_
     (begin
       (write-line bytes stdout)
       (main-loop (cons bytes executed-commands) stdin stdout))]))

(define (handle-byte
          [hist-state : HistoryState]
          [line-state : EditLineState]
          [byte : Int]
          [stdin : InputPort]
          [stdout : OutputPort])
  : (Maybe Bytes)
  (case line-state
    [(edit-line-state (input-state-empty) before after)
     (case byte
       ;; Newline
       [10
        (begin
          (newline stdout)
          (finish-iteration (list->bytes (append (reverse before) after))
                            (history-state-executed-commands hist-state) stdin stdout))]
       ;; Control-D
       [4 (begin (newline stdout) (nothing))]
       ;; Control-P
       [16
        (case hist-state
          [(history-state _ (empty) _)
           (edit-loop hist-state line-state stdin stdout)]
          [(history-state exec-commands (cons prev-command prev-commands) next-commands)
           (match-define current-command
             (bytes-append
               (varargs list (list->bytes (reverse before)) (list->bytes after))))
           (begin
             (write-all-bytes
               (bytes-append
                 (varargs list
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) before))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) after))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))
                   prev-command))
               stdout)
             (edit-loop (history-state exec-commands prev-commands (cons current-command
                                                                         next-commands))
                        (edit-line-state (input-state-empty) (reverse (bytes->list prev-command)) (empty))
                        stdin stdout))])]
       ;; Control-N
       [14
        (case hist-state
          [(history-state _ _ (empty))
           (edit-loop hist-state line-state stdin stdout)]
          [(history-state exec-commands prev-commands (cons next-command next-commands))
           (match-define current-command
             (bytes-append
               (varargs list (list->bytes (reverse before)) (list->bytes after))))
           (begin
             (write-all-bytes
               (bytes-append
                 (varargs list
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) before))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) after))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))
                   next-command))
               stdout)
             (edit-loop (history-state exec-commands (cons current-command prev-commands)
                                                     next-commands)
                        (edit-line-state (input-state-empty) (reverse (bytes->list next-command)) (empty))
                        stdin stdout))])]
       ;; Backspace
       [127
        (case before
          [(empty)
           (begin
             (write-all-bytes #"\x07" stdout)
             (edit-loop hist-state (edit-line-state (input-state-empty) before after) stdin stdout))]
          [(cons _ before)
           (begin
             (write-all-bytes
               (bytes-append
                 (varargs list
                   #"\x08"
                   (list->bytes after)
                   #" "
                   (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))
                   #"\x08"
                   ))
               stdout)
             (edit-loop hist-state (edit-line-state (input-state-empty) before after) stdin stdout))])]
       [27
        (edit-loop hist-state (edit-line-state (input-state-esc) before after) stdin stdout)]
       [_
        (begin
          (write-all-bytes
            (bytes-append
              (varargs list
                (bytes/1 (u8 byte))
                (list->bytes after)
                (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))))
            stdout)
          (edit-loop hist-state (edit-line-state (input-state-empty) (cons (lifted-u8 (u8 byte)) before) after) stdin stdout))])]
    [(edit-line-state (input-state-esc) before after)
     (case byte
       [91
        (edit-loop hist-state (edit-line-state (input-state-esc-bracket) before after) stdin stdout)]
       [_
         (just #"Invalid start of escape sequence")])]
    [(edit-line-state (input-state-esc-bracket) before after)
     (case byte
       [65
        (begin
          (write-all-bytes #"\x07"stdout)
          (edit-loop hist-state (edit-line-state (input-state-empty) before after) stdin stdout))]
       [66
        (begin
          (write-all-bytes #"\x07" stdout)
          (edit-loop hist-state (edit-line-state (input-state-empty) before after) stdin stdout))]
       [67
        (case after
          [(empty)
           (begin
             (write-all-bytes #"\x07" stdout)
             (edit-loop hist-state (edit-line-state (input-state-empty) before after) stdin stdout))]
          [(cons char after)
           (begin
             (write-all-bytes #"\x1b[C" stdout)
             (edit-loop hist-state (edit-line-state (input-state-empty) (cons char before) after) stdin
                        stdout))])]
       [68
        (case before
          [(empty)
           (begin
             (write-all-bytes #"\x07" stdout)
             (edit-loop hist-state (edit-line-state (input-state-empty) before after) stdin stdout))]
          [(cons char before)
           (begin
             (write-all-bytes #"\x1b[D" stdout)
             (edit-loop hist-state (edit-line-state (input-state-empty) before (cons char after)) stdin
                        stdout))])]
       [_
         (just #"Unknown escape sequence")])]))





(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (begin
    (let ([termios (read-termios stdin)])
      (case termios
        [(termios _in _out _control local _chars _in-speed _out-speed)
         (begin
           (bytes-set! local 0 (u8 (bitwise-and #xF7 (u8->s64 (bytes-ref local 0)))))
           (bytes-set! local 1 (u8 (bitwise-and #xFE (u8->s64 (bytes-ref local 1)))))
           (write-termios termios stdin))]))
    (case (main-loop (empty) stdin stdout)
      [(nothing) 0]
      [(just msg)
       (begin
         (write-line msg stderr)
         1)])))
