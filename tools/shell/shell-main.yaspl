#:module (tools shell shell-main)
#:import {
  (bytes)
  (data lifted-primitives)
  (either)
  (io)
  (list)
  (maybe)
  (prim)
  (tuples)
}
(export)
(types
  (define-type Termios
    (termios
      [input-flags : Bytes]
      [output-flags : Bytes]
      [control-flags : Bytes]
      [local-flags : Bytes]
      [control-chars : Bytes]
      [input-speed : Bytes]
      [output-speed : Bytes]))

  (define-type EditLineState
    (edit-line-state
      [current-prev-commands : (List Bytes)]
      [before-bytes : (List LiftedU8)]
      [after-chars : (List LiftedU8)]
      [current-next-commands : (List Bytes)]))
  (define-type InputState
    (input-state-empty)
    (input-state-esc)
    (input-state-esc-bracket))

  (define-type InputAction
    (print-action [val : Byte])
    (previous-command-action)
    (no-action)
    (next-command-action)
    (move-cursor-right-action)
    (move-cursor-left-action)
    (finish-command-action)
    (exit-action)
    (backspace-action))

  (define-type ActionResult
    (continue-editing-result [edit-line-state : EditLineState])
    (command-result [command : Bytes])
    (exit-result)))

(define (ioctl-number
          [modality : Int]
          [group : Int]
          [num : Int]
          [len : Int]) : Int
  (bitwise-ior
    modality
    (bitwise-ior
      (logical-shift-left (bitwise-and #x1FFF len) 16)
      (bitwise-ior
        (logical-shift-left group 8)
        num))))

(define (parse-termios-bytes [bytes : Bytes]) : Termios
  (termios
    (subbytes bytes 0 8)
    (subbytes bytes 8 16)
    (subbytes bytes 16 24)
    (subbytes bytes 24 32)
    (subbytes bytes 32 52)
    (subbytes bytes 56 64)
    (subbytes bytes 64 72)))

(define (serialize-termios [termios : Termios]) : Bytes
  (match-define (termios in out control local chars input-speed output-speed) termios)
  (let ([bytes (make-bytes 72)])
    (begin
      (bytes-copy! in 0 8 bytes 0)
      (bytes-copy! out 0 8 bytes 8)
      (bytes-copy! control 0 8 bytes 16)
      (bytes-copy! local 0 8 bytes 24)
      (bytes-copy! chars 0 20 bytes 32)
      (bytes-copy! input-speed 0 8 bytes 56)
      (bytes-copy! output-speed 0 8 bytes 64)
      bytes)))

(define (read-termios [terminal : InputPort]) : Termios
  (let ([bytes (make-bytes 72)])
    (begin
      (ioctl terminal (ioctl-number #x40000000 116 19 72) bytes)
      (parse-termios-bytes bytes))))

(define (write-termios [termios : Termios] [terminal : InputPort]) : Void
  (ioctl terminal (ioctl-number #x80000000 116 20 72) (serialize-termios termios)))

(define (main-loop [executed-commands : (List Bytes)] [stdin : InputPort] [stdout : OutputPort])
  : (Maybe Bytes)
  (begin
    (write-all-bytes #"> " stdout)
    (case (edit-loop (edit-line-state executed-commands (empty) (empty) (empty)) stdin stdout)
      [(left error) (just error)]
      [(right (nothing)) (nothing)]
      [(right (just #""))
       (main-loop executed-commands stdin stdout)]
      [(right (just command))
       (begin
         (write-line command stdout)
         (main-loop (cons command executed-commands) stdin stdout))])))

(define (edit-loop [line-state : EditLineState] [stdin : InputPort] [stdout : OutputPort])
  : (Either Bytes (Maybe Bytes))
  (case (input-loop (input-state-empty) stdin)
    [(left v) (left v)]
    [(right action)
     (match-define (tuple2 output action-result) (handle-input-action action line-state))
     (begin
       (write-all-bytes output stdout)
       (case action-result
         [(continue-editing-result line-state)
          (edit-loop line-state stdin stdout)]
         [(command-result command) (right (just command))]
         [(exit-result) (right (nothing))]))]))

(define (input-loop [input-state : InputState] [stdin : InputPort])
  : (Either Bytes InputAction)
  (let ([buffer (make-bytes 1)])
    (let ([amount-read (read-bytes buffer stdin 0 (bytes-length buffer))])
      (if (not (= amount-read 1))
          (left #"Unexpected read amount")
          (case (handle-input-byte (u8->s64 (bytes-ref buffer 0)) input-state)
            [(left v) (left v)]
            [(right (left input-state))
             (input-loop input-state stdin)]
            [(right (right action))
             (right action)])))))

(define (list->bytes [l : (List LiftedU8)]) : Bytes
  (list->bytes-helper (make-bytes (length l)) 0 l))

(define (list->bytes-helper [bytes : Bytes] [index : Int] [l : (List LiftedU8)]) : Bytes
  (case l
    [(empty) bytes]
    [(cons (lifted-u8 e) l)
     (begin
       (bytes-set! bytes index e)
       (list->bytes-helper bytes (+ 1 index) l))]))

(define (bytes->list [b : Bytes]) : (List LiftedU8)
  (bytes-map b lifted-u8))


(define (handle-input-byte [byte : Int] [state : InputState])
  : (Either Bytes (Either InputState InputAction))
  (case state
    [(input-state-empty)
     (case byte
       ;; Newline
       [10 (right (right (finish-command-action)))]
       ;; Control-D
       [4 (right (right (exit-action)))]
       ;; Control-P
       [16 (right (right (previous-command-action)))]
       ;; Control-N
       [14 (right (right (next-command-action)))]
       ;; Backspace
       [127 (right (right (backspace-action)))]
       ;; ESC
       [27 (right (left (input-state-esc)))]
       ;; Anything else
       [byte (right (right (print-action byte)))])]
    [(input-state-esc)
     (case byte
       ;; Bracket
       [91 (right (left (input-state-esc-bracket)))]
       ;; Anything else
       [_ (left #"Invalid start of escape sequence")])]
    [(input-state-esc-bracket)
     (case byte
       ;; Up arrow
       [65 (right (right (previous-command-action)))]
       ;; Down arrow
       [66 (right (right (next-command-action)))]
       ;; Right arrow
       [67 (right (right (move-cursor-right-action)))]
       ;; Left arrow
       [68 (right (right (move-cursor-left-action)))]
       ;; Anything else
       [_ (left #"Unknown escape sequence")])]))

(define (handle-input-action
          [action : InputAction]
          [line-state : EditLineState])
  : (Tuple2 Bytes ActionResult)
  (case action
    [(no-action) (tuple2 #"" (continue-editing-result line-state))]
    [(finish-command-action)
     (match-define (edit-line-state _ before after _) line-state)
     (tuple2 #"\n" (command-result (list->bytes (append (reverse before) after))))]
    [(exit-action) (tuple2 #"\n" (exit-result))]
    [(previous-command-action)
     (case line-state
       [(edit-line-state (empty) _ _ _)
        (tuple2 #"" (continue-editing-result line-state))]
       [(edit-line-state (cons prev-command prev-commands) before after next-commands)
        (match-define current-command
          (bytes-append
            (varargs list (list->bytes (reverse before)) (list->bytes after))))
        (match-define output
          (bytes-append
            (varargs list
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) before))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) after))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))
              prev-command)))
        (tuple2 output
                (continue-editing-result
                  (edit-line-state
                    prev-commands
                    (reverse (bytes->list prev-command))
                    (empty)
                    (cons current-command next-commands))))])]
    [(next-command-action)
     (case line-state
       [(edit-line-state _ _ _ (empty))
        (tuple2 #"" (continue-editing-result line-state))]
       [(edit-line-state prev-commands before after (cons next-command next-commands))
        (match-define current-command
          (bytes-append
            (varargs list (list->bytes (reverse before)) (list->bytes after))))
        (match-define output
          (bytes-append
            (varargs list
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) before))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 32))) after))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) before))
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))
              next-command)))
        (tuple2 output
                (continue-editing-result
                  (edit-line-state
                    (cons current-command prev-commands)
                    (reverse (bytes->list next-command))
                    (empty)
                    next-commands)))])]
    [(backspace-action)
     (case line-state
       [(edit-line-state _ (empty) _ _)
        (tuple2 #"\x07" (continue-editing-result line-state))]
       [(edit-line-state prev-commands (cons _ before) after next-commands)
        (tuple2
          (bytes-append
            (varargs list
              #"\x08"
              (list->bytes after)
              #" "
              (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))
              #"\x08"))
          (continue-editing-result (edit-line-state prev-commands before after next-commands)))])]
    [(print-action val)
     (match-define (edit-line-state prev-commands before after next-commands) line-state)
     (tuple2
       (bytes-append
         (varargs list
           (bytes/1 (u8 val))
           (list->bytes after)
           (list->bytes (map (lambda ([_ : LiftedU8]) (lifted-u8 (u8 8))) after))))
       (continue-editing-result
         (edit-line-state prev-commands (cons (lifted-u8 (u8 val)) before) after next-commands)))]
    [(move-cursor-right-action)
     (case line-state
       [(edit-line-state _ _ (empty) _)
        (tuple2 #"\x07" (continue-editing-result line-state))]
       [(edit-line-state prev-commands before (cons char after) next-commands)
        (tuple2
          #"\x1b[C"
          (continue-editing-result
            (edit-line-state prev-commands (cons char before) after next-commands)))])]
    [(move-cursor-left-action)
     (case line-state
       [(edit-line-state _ (empty) _ _)
        (tuple2 #"\x07" (continue-editing-result line-state))]
       [(edit-line-state prev-commands (cons char before) after next-commands)
        (tuple2
          #"\x1b[D"
          (continue-editing-result
            (edit-line-state prev-commands before (cons char after) next-commands)))])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (begin
    (let ([termios (read-termios stdin)])
      (case termios
        [(termios _in _out _control local _chars _in-speed _out-speed)
         (begin
           (bytes-set! local 0 (u8 (bitwise-and #xF7 (u8->s64 (bytes-ref local 0)))))
           (bytes-set! local 1 (u8 (bitwise-and #xFE (u8->s64 (bytes-ref local 1)))))
           (write-termios termios stdin))]))
    (case (main-loop (empty) stdin stdout)
      [(nothing) 0]
      [(just msg)
       (begin
         (write-line msg stderr)
         1)])))
