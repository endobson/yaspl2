#:module (tools aspect-ir-validator-main)
#:import {
  (compiler)
  (data lifted-primitives)
  (either)
  (list)
  (prim)
  (tools command-line)
  (tools compile-module-args)
  (tuples)
  (yaspl top-level-objects)
  (yaspl top-level-objects-to-x86-64)
  (yaspl x86-64-assembly)
}
(export)
(types)

(define (get-output [args : CompileModuleArgs]) : OutputLocation
  (output-to-file (compile-module-args-output-path args)))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (run-command-line-tool args stdin stdout stderr
    (ann (CommandLineTool CompileModuleArgs LiftedInt)
         (command-line-tool parse-compile-module-args run get-output write-validate-ir-results))))

(define (run [args : CompileModuleArgs] [stdin : InputPort]) : (Either Bytes LiftedInt)
  (match-define (compile-module-args output-path main-module signatures) args)
  (case (compile-main-module main-module signatures)
    [(left v) (left v)]
    [(right (tuple2 objects _))
     (match-define (assembly-fragments _text-fragments _) (convert-objects objects))
     (begin
       (for-each
         (lambda ([o : TopLevelObject]) : Void
           (case o
             [(register-function-tlo fun)
              (void)]
             [_ (void)]))
         objects)
       (right (lifted-int 0)))]))

(define (write-validate-ir-results [v : LiftedInt] [output-port : OutputPort]) : Void
  (void))
