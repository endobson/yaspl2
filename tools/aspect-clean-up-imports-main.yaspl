#:module (tools aspect-clean-up-imports-main)
#:import {
  (compiler)
  (either)
  (io)
  (list)
  (prim)
  (source-language)
  (tools rewrite-imports)
}

(export)
(types)

(define (handle-failure-result [msg : Bytes] [stderr : OutputPort]) : Int
  (begin
    (write-line msg stderr)
    1))

(define (handle-result [output : OutputPort] [stderr : OutputPort]
                       [results : (Either Bytes Bytes)]) : Int
  (case results
    [(left v)
     (handle-failure-result v stderr)]
    [(right new-contents)
     (begin
       (write-all-bytes new-contents output)
       0)]))

(define (run [module-file : Bytes] [signature-files : (List Bytes)])
  : (Either Bytes Bytes)
  (case (parse-module-file module-file)
    [(left v) (left v)]
    [(right mod)
     (rewrite-imports (module-name mod) (module-imports mod) module-file)]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (handle-failure-result #"No binary!?" stderr)]
    [(cons _ (empty))
     (handle-failure-result #"No module file provided." stderr)]
    [(cons _ (cons module-file signature-files))
     (handle-result stdout stderr
       (run module-file signature-files))]))
