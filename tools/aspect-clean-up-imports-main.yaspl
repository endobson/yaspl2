#:module (tools aspect-clean-up-imports-main)
#:import {
  (bytes)
  (compiler)
  (either)
  (io)
  (list)
  (maybe)
  (module-name)
  (prim)
  (set)
  (source-language)
  (tools command-line)
  (tools linter)
  (tools rewrite-imports)
  (unused-bindings)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [module-file-path : Bytes]
      [signature-file-paths : (List Bytes)])))

(define (parse-args [input-args : (List Bytes)]) : (Either Bytes Args)
  (case input-args
    [(empty)
     (left #"No binary!?")]
    [(cons _ (empty))
     (left #"No module file provided.")]
    [(cons _ (cons module-file-path signature-file-paths))
     (right (args module-file-path signature-file-paths))]))

(define (get-output [args : Args]) : OutputLocation
  (output-to-stdout))

(define (run [args : Args] [stdin : InputPort])  : (Either Bytes Bytes)
  (match-define (args module-file-path signature-file-paths) args)
  (case (lint-module module-file-path signature-file-paths)
    [(left v) (left v)]
    [(right (lint-results _ (unused-bindings all-unused-bindings _ _) _ _ _))
     (case (parse-module-file module-file-path)
       [(left v) (left (parser-error->bytes v))]
       [(right mod)
        (match-define new-imports
          (filter-map
            (lambda ([imports : Imports]) : (Maybe Imports)
              (let ([imports-mod-name (imports-module-name imports)])
                (case (findf (lambda ([unused : ImportsUnusedBindings])
                               (case unused
                                 [(full-imports-unused unused-mod-name)
                                  (mod-name=? imports-mod-name unused-mod-name)]
                                 [(partial-imports-completely-unused unused-mod-name)
                                  (mod-name=? imports-mod-name unused-mod-name)]
                                 [(partial-imports-unused unused-mod-name _ _ _ _)
                                  (mod-name=? imports-mod-name unused-mod-name)]))
                             all-unused-bindings)
                  [(nothing)
                   (just imports)]
                  [(just (partial-imports-unused _ unused-types unused-values unused-patterns
                                                 unused-statics))
                   (match-define unused-types (set-add-all (make-set bytes-cmp) unused-types))
                   (match-define unused-values (set-add-all (make-set bytes-cmp) unused-values))
                   (match-define unused-patterns (set-add-all (make-set bytes-cmp) unused-patterns))
                   (match-define unused-statics (set-add-all (make-set bytes-cmp) unused-statics))
                   (case imports
                     [(full-imports _)
                      (panic #"Cannot have partially unused full-imports")]
                     [(partial-imports m types values patterns statics)
                      (match-define filter-unused-imports
                        (lambda ([unused : (Set Bytes)] [imports : (List Import)])
                          (filter
                            (lambda ([import : Import])
                              (case import
                                [(import _ local-name)
                                 (not (set-member? unused local-name))]))
                            imports)))
                      (just
                        (partial-imports
                          m
                          (filter-unused-imports unused-types types)
                          (filter-unused-imports unused-values values)
                          (filter-unused-imports unused-patterns patterns)
                          (filter-unused-imports unused-statics statics)))])]
                  [(just (partial-imports-completely-unused _))
                   (nothing)]
                  [(just (full-imports-unused _))
                   (nothing)])))
            (module-imports mod)))
        (rewrite-imports (module-name mod) new-imports module-file-path)])]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (run-command-line-tool args stdin stdout stderr
    (command-line-tool parse-args run get-output write-all-bytes)))
