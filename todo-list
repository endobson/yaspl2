
In progress:

Things to do:

In libraries:
Make subbytes/bytes-copy! fast
decimal-bytes->integer should return a monadic result
change all mains to accept environment.

In bootstrap compiler:
Improve error message of typechecker when applying non function

In compiler:
Fix error message for vararg application with non single type array function.
make boolean patterns accepted
Make warning for duplicate field in variant
Make lint warnings be in order not reverse order
handle exports of imported functions
remove trivial constraint from unification error messages
make type errors in different functions show up in parallel
support + in identifier names in bootstrap compiler
Prevent accessing unexported patterns
Export missing error message doesn't say what export is missing
Make polymorphic calls work in more cases.
  * add annotations for let
  * support instantiation of polymorphic type
Check bytes length when doing reads/writes
Cond statements
Provide better location info for error messages.
Make error messages for strings better
Make error message for case with multiple bodies in a clause better.
Make error messages for function definitions with missing type variables better.
Make #; comments work
Make closure names for defined functionsa and data type functions be in sync.
  _code vs _closure.
Add totality checks to pattern matches

In test suites:
Provide better scoping of error messages.

In linter:
Warn about unused local variables.
Warn about unused datatypes.
Warn about unsorted imported modules
Warn about unsorted imported types/variables/patterns
Do global analysis to find unused exported bindings


New syntax
#:module (dir1 dir2 name)
#:imports {
  #:import (dir1 dir2 name2) {
    #:types {
      T1
      T2
      T3
    }
    #:values {
      V1
      V2
      V3
    }
    #:patterns {
      P1
      P2
      P3
    }
  }
}
#:exports {
  #:types {
    T1
    T2
    T3
  }
  #:values {
    V1
    V2
    V3
  }
  #:patterns {
    P1
    P2
    P3
    T1
  }
}
#:type-definitions {
  (define-type (List A)
    (cons [head : A] [tail : (List A)])
    (empty))
}
#:function-definitions {
  (define (foo [x : Bar]) : Baz
    (foobarbaz x))
}
