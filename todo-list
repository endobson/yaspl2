
In progress:

Things to do:

In libraries:
Make subbytes/bytes-copy! fast
change all mains to accept environment.
make prim-signature not tied to prim-implementation

In compiler:
Add tests for validator.
Improve warning for free types in type definitions.
Make regexp for matching the whole string not be an element in the list of matches.
Allow rename on export
make boolean patterns accepted
remove trivial constraint from unification error messages
Make polymorphic calls work in more cases.
  * add annotations for let
  * support instantiation of polymorphic type
Check bytes length when doing reads/writes
Cond statements
Provide better location info for error messages.
Make #; comments work
Make closure names for defined functions and data type functions be in sync.
  _code vs _closure.
Make blocks work in lambdas
Check kind of types somewhere before type unification.
Make polymorphic function inference not crash compiler
  'polymorphic functions constraints not yet implemented'
Do 'cuts' when parsing after seeing keyword.
Clean up: function-definition->assembly-fragment.
stop using tuple for named arg types
non polymorphic function should push argument expectations down even if it doesn't match its expectation
Optimize writing the variant tag information so that it doesn't need a register.
Trimming signature to only exported names or ones visable via inlining. This will reduce rebuilding
Print types nicer if there isn't a chance of confusion.
Add return and scoped return blocks.
Make kind errors in data type definitions not crash the compiler.
Make arguments check that their types are of star-kind.
Make just self calls not inifinte loop the compiler
Make all modules use full path naming scheme



In test suites:
Provide better scoping of error messages.

In linter:
Warn about unused local variables.
Warn about unused datatypes.
Do global analysis to find unused exported bindings
Make linter check indentation of imports
Warn about files unused by build rules

In tools:
Answer question of where is variable used.
Add import when well known binding is unbound.

Migrate modules to multipart names as appropriate

New syntax
#:module (dir1 dir2 name)
#:imports {
  #:import (dir1 dir2 name2) {
    #:types {
      T1
      T2
      T3
    }
    #:values {
      V1
      V2
      V3
    }
    #:patterns {
      P1
      P2
      P3
    }
  }
}
#:exports {
  #:types {
    T1
    T2
    T3
  }
  #:values {
    V1
    V2
    V3
  }
  #:patterns {
    P1
    P2
    P3
    T1
  }
}
#:type-definitions {
  (define-type (List A)
    (cons [head : A] [tail : (List A)])
    (empty))
}
#:function-definitions {
  (define (foo [x : Bar]) : Baz
    (foobarbaz x))
}

Improve optimizations
u8 should be able to optimize known constants
byte extraction of U32/U64 should be a primop
variable optimization in pattern matching
spliting matrix optimization in pattern matching
same symbol optimized to one load
Merge similar blocks
known variants should be decomposed

WebASM project:
Program that takes expression in the sexpression form and generates
web-asm program that computes that sexpression.
Support i32, +, *, -, quotient.
Support local variables.
Support input variables.
Js page that allows sending form to server and getting it back and rendering it.
JS page that allows loading up the response in browser and running it.
