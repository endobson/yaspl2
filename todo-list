
In progress:

Things to do:

In libraries:
Make subbytes/bytes-copy! fast
decimal-bytes->integer should return a monadic result
change all mains to accept environment.

In bootstrap compiler:
Improve error message of typechecker when applying non function

In compiler:

Make lint warnings be in order not reverse order
handle exports of imported functions
remove trivial constraint from unification error messages
make type errors in different functions show up in parallel
support + in identifier names in bootstrap compiler
remove accessor for data types with more than one variant
Prevent accessing unexported patterns
Export missing error message doesn't say what export is missing
Make polymorphic calls work in more cases.
  * add annotations for expected type
Make error messages for imports show all at the same time.
Check bytes length when doing reads/writes
Cond statements
Provide better location info for error messages.
Make error messages for strings better
Make error message for case with multiple bodies in a clause better.
Make error messages for function definitions with missing type variables better.
Make defining the same function twice an error
Make defining the same argument name twice an error
Make #; comments work

In test suites:
Provide better scoping of error messages.

In linter:
Warn about unused local variables.
Warn about unused datatypes.
Warn about unsorted imported modules
Warn about unsorted imported types/variables/patterns
Do global analysis to find unused exported bindings


New syntax
#:module (dir1 dir2 name)
#:imports {
  #:import (dir1 dir2 name2) {
    #:types {
      T1
      T2
      T3
    }
    #:values {
      V1
      V2
      V3
    }
    #:patterns {
      P1
      P2
      P3
    }
  }
}
#:exports {
  #:types {
    T1
    T2
    T3
  }
  #:values {
    V1
    V2
    V3
  }
  #:patterns {
    P1
    P2
    P3
    T1
  }
}
#:type-definitions {
  (define-type (List A)
    (cons [head : A] [tail : (List A)])
    (empty))
}
#:function-definitions {
  (define (foo [x : Bar]) : Baz
    (foobarbaz x))
}
