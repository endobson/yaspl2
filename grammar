#:module (cprim grammar rules)
#:token-type Token

(import (cprim grammar basics))
(import (data list))

(define-alias #":=" ASSIGNMENT) 
(define-alias #"<-" POINTER_ASSIGNMENT) 
(define-alias #"(" OPEN_PAREN) 
(define-alias #")" CLOSE_PAREN) 
(define-alias #";" SEMICOLON) 
(define-alias #"," COMMA) 


(define-non-terminal STATEMENT : Statement
 [TYPE ID #":=" EXPR #";" -> (var-assignment-statement TYPE ID EXPR)]
 [#"while" #"(" EXPR #")" #"{" STATEMENTS #"}" -> (while-statement EXPR STATEMENT*)]
 [EXPR_1 #"<-" EXPR_2 #"; -> (ptr-assignment-statement EXPR_1 EXPR_2)])

(define-non-terminal STATEMENTS : (List Statement)
 [-> (empty)]
 [STATEMENT STATEMENTS -> (cons STATEMENT STATEMENTS)])


(define-non-terminal VALUE : Expr
  [ID -> (identifier-expr ID)]
  [INTEGER -> (identifier-expr ID)]
  [#"(" EXPR #")" -> EXPR])

(define-non-terminal PATHED_VALUE : Expr
  [VALUE PATH -> (apply-path path value)])

(define-non-terminal PATH : (List PathElement)
  [-> (empty)]
  [#"." ID PATH -> (cons (field-access ID) PATH)]
  [#"->&[" EXPR #"]" -> (cons (array-element-ptr EXPR) PATH)]
  [#"->[" EXPR #"]" -> (cons (array-deref EXPR) PATH)])



