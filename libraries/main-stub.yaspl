#:module (main-stub)
#:import {
  (bytes)
  (either)
  (io)
  (list)
  (mach-o-writer)
  (prim)
  (prim-implementation)
  (x86-64-runtime)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects-to-x86-64)
  (yaspl x86-64-assembly)
}
(export
  #:types ()
  #:values (main)
  #:patterns ())
(types)

(define (append-fragments [f1 : AssemblyFragments] [f2 : AssemblyFragments]) : AssemblyFragments
  (match-define (assembly-fragments text1 const1) f1)
  (match-define (assembly-fragments text2 const2) f2)
  (assembly-fragments (append text1 text2) (append const1 const2)))




(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (if (< (array-length args) 2)
      (begin
        (write-line #"No output file name supplied" stderr)
        1)
      (if (< (array-length args) 3)
          (begin
            (write-line #"No module name supplied" stderr)
            1)
          (let ([assembly
                  (append-fragments
                    (yaspl-runtime (bytes-append (varargs list (array-ref args 2) #"_main")))
                    (convert-objects (optimize-tlos (prim-implementation))))])
            (case (write-mach-o-library/fragments (array-ref args 1) assembly)
              [(left v)
               (begin
                 (write-line v stderr)
                 1)]
              [(right _)
               0])))))
