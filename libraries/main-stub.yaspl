(module main-stub
  (import
    (bytes bytes=? bytes-append)
    (dict
      #:types (Dict)
      #:values (make-dict dict-add)
      #:patterns ())
    (either
      #:types ()
      #:values ()
      #:patterns (left right))
    (io write-line)
    (list
      #:types (List)
      #:values (list)
      #:patterns (empty cons))
    (mach-o-writer2 write-mach-o-library/fragments)
    (prim
      #:types (Bytes InputPort OutputPort Array Int)
      #:values (< array-length array-ref)
      #:patterns ())
    (prim-implementation prim-implementation)
    (stack-machine
      #:types (TopLevelObject)
      #:values ()
      #:patterns (trivial-closure-tlo))
    (stack-machine-optimizer optimize-tlos)
    (x86-64-stack-machine compile-stack-machine))
  (export
    #:types ()
    #:values (main)
    #:patterns ())
  (types)


  (define (add-known-functions [tlos : (List TopLevelObject)]
                               [dict : (Dict Bytes Bytes)]) : (Dict Bytes Bytes)
    (case tlos
      [(empty) dict]
      [(cons (trivial-closure-tlo name fun-name) tlos)
       (add-known-functions tlos (dict-add dict name fun-name))]
      [(cons _ tlos)
       (add-known-functions tlos dict)]))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (if (< (array-length args) 3)
            (begin
              (write-line #"No module name supplied" stderr)
              1)
            (let ([assembly (compile-stack-machine
                              (bytes-append (varargs list (array-ref args 2) #"_main"))
                              (optimize-tlos (prim-implementation)
                                             (add-known-functions
                                               (prim-implementation)
                                               (make-dict bytes=?))))])
              (case (write-mach-o-library/fragments (array-ref args 1) assembly)
                [(left v)
                 (begin
                   (write-line v stderr)
                   1)]
                [(right _)
                 0]))))))
