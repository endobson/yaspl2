#:module main-stub
#:import {
  bytes {
    #:values
      bytes-append
      bytes=?
  }
  dict {
    #:types
      Dict
    #:values
      dict-add
      make-dict
  }
  either {
    #:patterns
      left
      right
  }
  io {
    #:values
      write-line
  }
  list {
    #:types
      List
    #:values
      append
      list
    #:patterns
      cons
      empty
  }
  mach-o-writer2 {
    #:values
      write-mach-o-library/fragments
  }
  prim {
    #:types
      Array
      Bytes
      InputPort
      Int
      OutputPort
    #:values
      <
      array-length
      array-ref
  }
  prim-implementation {
    #:values
      prim-implementation
  }
  stack-machine {
    #:types
      TopLevelObject
    #:patterns
      trivial-closure-tlo
  }
  stack-machine-optimizer {
    #:values
      optimize-tlos
  }
  x86-64-runtime {
    #:values
      yaspl-runtime
  }
  x86-64-stack-machine {
    #:values
      convert-objects
  }
}
(export
  #:types ()
  #:values (main)
  #:patterns ())
(types)


(define (add-known-functions [tlos : (List TopLevelObject)]
                             [dict : (Dict Bytes Bytes)]) : (Dict Bytes Bytes)
  (case tlos
    [(empty) dict]
    [(cons (trivial-closure-tlo name fun-name) tlos)
     (add-known-functions tlos (dict-add dict name fun-name))]
    [(cons _ tlos)
     (add-known-functions tlos dict)]))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (if (< (array-length args) 2)
      (begin
        (write-line #"No output file name supplied" stderr)
        1)
      (if (< (array-length args) 3)
          (begin
            (write-line #"No module name supplied" stderr)
            1)
          (let ([assembly
                  (append
                    (yaspl-runtime (bytes-append (varargs list (array-ref args 2) #"_main")))
                    (convert-objects
                      (optimize-tlos (prim-implementation)
                                     (add-known-functions
                                       (prim-implementation)
                                       (make-dict bytes=?)))))])
            (case (write-mach-o-library/fragments (array-ref args 1) assembly)
              [(left v)
               (begin
                 (write-line v stderr)
                 1)]
              [(right _)
               0])))))
