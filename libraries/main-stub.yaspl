(module main-stub
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array)
      #:values (< array-length array-ref open-output-file close-output-port)
      #:patterns ())
    (io write-line)
    (list
      #:types (List)
      #:values (list)
      #:patterns (empty cons))

    (bytes bytes=?)
    (stack-machine
      #:types (TopLevelObject)
      #:values ()
      #:patterns (function-tlo trivial-closure-tlo))
    (dict
      #:types (Dict)
      #:values (make-dict dict-add-all dict-add)
      #:patterns ())
    (prim-implementation prim-implementation)
    (stack-machine-optimizer optimize-tlos)
    (bytes bytes-append make-null-terminated)
    (x86-64-stack-machine write-start write-fragments convert-objects))
  (export
    #:types ()
    #:values (main)
    #:patterns ())
  (types)


(define (add-known-functions [tlos : (List TopLevelObject)]
                               [dict : (Dict Bytes Bytes)]) : (Dict Bytes Bytes)
    (case tlos
      [(empty) dict]
      [(cons (trivial-closure-tlo name fun-name) tlos)
       (add-known-functions tlos (dict-add dict name fun-name))]
      [(cons _ tlos)
       (add-known-functions tlos dict)]))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (if (< (array-length args) 3)
            (begin
              (write-line #"No module name supplied" stderr)
              1)
            (let ([output (open-output-file (make-null-terminated (array-ref args 1)))])
              (begin
                (write-start
                  (bytes-append (varargs list (array-ref args 2) #"_main"))
                  output)
                (write-fragments
                  (convert-objects (optimize-tlos (prim-implementation)
                                                  (add-known-functions
                                                    (prim-implementation)
                                                    (make-dict bytes=?))))
                  output)
                (close-output-port output)
                0))))))
