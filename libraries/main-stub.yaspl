(module main-stub
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array)
      #:values (< array-length array-ref open-output-file close-output-port)
      #:patterns ())
    (io write-line)
    (list list)
    (bytes bytes-append make-null-terminated)
    (x86-64-stack-machine write-start))
  (export
    #:types ()
    #:values (main)
    #:patterns ())
  (types)


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 2)
        (begin
          (write-line #"No module name supplied" stderr)
          1)
        (let ([output (open-output-file (make-null-terminated (array-ref args 1)))])
          (begin
            (write-start
              (bytes-append (varargs list (array-ref args 2) #"_main"))
              output)
            (close-output-port output)
            0)))))
