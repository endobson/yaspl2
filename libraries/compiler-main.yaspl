#:module (compiler-main)
#:import {
  (bytes)
  (compiler)
  (either)
  (io)
  (list)
  (machine-code)
  (maybe)
  (module-name)
  (prim)
  (prim-language-compiler)
  (top-level-name)
  (tuples)
  (x86-64-runtime)
  (yaspl top-level-objects-to-x86-64)
  (yaspl x86-64-assembly)
  (yaspl x86-64-assembly-printer)
}
(export
  (#:types)
  (#:values main)
  (#:patterns))
(types
  (define-type Args
    (args
      [output-format : (Tuple2 AssemblyStyle SystemAbi)]
      [output-file-name : Bytes]
      [module-name : Bytes]
      [module-file-names : (List Bytes)])))

(define (append-fragments [f1 : AssemblyFragments] [f2 : AssemblyFragments]) : AssemblyFragments
  (match-define (assembly-fragments text1 const1) f1)
  (match-define (assembly-fragments text2 const2) f2)
  (assembly-fragments (append text1 text2) (append const1 const2)))

(define (split-module-files [module-files : (List Bytes)]) : (Tuple2 (List Bytes) (List Bytes))
  (partition-eithers
    (map
      (lambda ([file : Bytes]) : (Either Bytes Bytes)
        (if (ends-with? file #".yaspl")
            (left file)
            (right file)))
      module-files)))

(define (compile-prim-files [prim-files : (List Bytes)]) : (Either Bytes AssemblyFragments)
  (compile-prim-files* prim-files (empty)))


(define (compile-prim-files* [prim-files : (List Bytes)] [acc : (List TextFragment)]) : (Either Bytes AssemblyFragments)
  (case prim-files
    [(empty)
     (right (assembly-fragments acc (empty)))]
    [(cons prim-file prim-files)
     (case (compile-prim-program (sourced-bytes-from-file prim-file))
       [(left v)
        (left v)]
       [(right text-fragments)
        (compile-prim-files* prim-files (append text-fragments acc))])]))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable specified???")]
    [(cons _ (empty))
     (left #"No output format supplied.")]
    [(cons _ (cons _ (empty)))
     (left #"No output file name supplied.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No module name supplied")]
    [(cons _ (cons output-format (cons output-file-name (cons module-name module-files))))
     (case
       (ann
         (Either Bytes (Tuple2 AssemblyStyle SystemAbi))
         (case output-format
           [#"osx-assembly" (right (tuple2 (osx-assembly-style) (osx-abi)))]
           [#"linux-assembly" (right (tuple2 (linux-assembly-style) (linux-abi)))]
           [_ (left #"Unknown output format")]))
       [(left v) (left v)]
       [(right output-format)
        (right (args output-format output-file-name module-name module-files))])]))


(define (run [input : (List Bytes)]) : (Maybe Bytes)
  (case (parse-args input)
    [(left v) (just v)]
    [(right (args (tuple2 output-style abi) output-file-name module-name module-files))
     (match-define (tuple2 yaspl-files prim-files) (split-module-files module-files))
     (call-with-output-file output-file-name
       (lambda ([output : OutputPort])
         (case (parse-module-files yaspl-files)
           [(left v) (just v)]
           [(right modules)
            (case (compile-modules modules)
              [(left v) (just v)]
              [(right code)
               (case (compile-prim-files prim-files)
                 [(left v) (just v)]
                 [(right prim-fragments)
                  (let ([assembly
                          (append-fragments
                            prim-fragments
                            (append-fragments
                              (yaspl-runtime
                                (top-level-name (mod-name (varargs list module-name)) #"main")
                                abi)
                              (convert-objects code)))])
                    (begin
                      (write-fragments output-style assembly output)
                      (nothing)))])])])))]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (run (array->list args))
    [(just v)
     (begin
       (write-line v stderr)
       1)]
    [(nothing)
     0]))
