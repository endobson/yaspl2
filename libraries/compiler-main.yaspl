#:module (compiler-main)
#:import {
  (bytes)
  (compiler)
  (either)
  (io)
  (list)
  (prim)
  (x86-64-runtime)
  (x86-64-stack-machine)
  (yaspl x86-64-assembly)
}
(export
  #:types ()
  #:values (main)
  #:patterns ())
(types)

(define (append-fragments [f1 : AssemblyFragments] [f2 : AssemblyFragments]) : AssemblyFragments
  (match-define (assembly-fragments text1 const1) f1)
  (match-define (assembly-fragments text2 const2) f2)
  (assembly-fragments (append text1 text2) (append const1 const2)))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No output file name supplied." stderr)
       1)]
    [(cons _ (cons _ (empty)))
     (begin
       (write-line #"No module name supplied" stderr)
       1)]
    [(cons _ (cons output-file-name (cons module-name module-files)))
     (call-with-output-file output-file-name
       (lambda ([output : OutputPort])
         (case (parse-module-files module-files)
           [(left v)
            (begin
              (write-line v stderr)
              1)]
           [(right modules)
            (case (compile-modules modules)
              [(left v)
               (begin
                 (write-line v stderr)
                 1)]
              [(right code)
               (let ([assembly
                       (append-fragments
                         (yaspl-runtime (bytes-append (varargs list module-name #"_main")))
                         (convert-objects code))])
                 (begin
                   (write-fragments assembly output)
                   0))])])))]))
