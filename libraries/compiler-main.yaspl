#:module compiler-main
#:import {
  bytes {
    #:values
      bytes-append
  }
  compiler {
    #:values
      compile-modules
      parse-module-files
  }
  either {
    #:patterns
      left
      right
  }
  io {
    #:values
      call-with-output-file
      write-line
  }
  list {
    #:values
      array->list
      list
    #:patterns
      cons
      empty
  }
  prim {
    #:types
      Array
      Bytes
      InputPort
      Int
      OutputPort
  }
  x86-64-runtime {
    #:values
      compile-stack-machine
  }
  x86-64-stack-machine {
    #:values
      write-fragments
  }
}
(export
  #:types ()
  #:values (main)
  #:patterns ())
(types)

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No output file name supplied." stderr)
       1)]
    [(cons _ (cons _ (empty)))
     (begin
       (write-line #"No module name supplied" stderr)
       1)]
    [(cons _ (cons output-file-name (cons module-name module-files)))
     (call-with-output-file output-file-name
       (lambda ([output : OutputPort])
         (case (parse-module-files module-files)
           [(left v)
            (begin
              (write-line v stderr)
              1)]
           [(right modules)
            (case (compile-modules modules)
              [(left v)
               (begin
                 (write-line v stderr)
                 1)]
              [(right code)
               (let ([assembly (compile-stack-machine
                                 (bytes-append (varargs list module-name #"_main"))
                                 code)])
                 (begin
                   (write-fragments assembly output)
                   0))])])))]))
