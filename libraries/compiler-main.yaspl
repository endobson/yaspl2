(module compiler-main
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array)
      #:values (< array-length array-ref)
      #:patterns ())
    (io write-line call-with-output-file)
    (list
      #:types ()
      #:values (list)
      #:patterns ())
    (bytes bytes-append)
    (x86-64-stack-machine compile-stack-machine write-fragments)
    (compiler compile-modules parse-module-files)
    (either
      #:types ()
      #:values ()
      #:patterns (left right)))
  (export
    #:types ()
    #:values (main compile-modules)
    #:patterns ())
  (types)

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (if (< (array-length args) 3)
            (begin
              (write-line #"No module name supplied" stderr)
              1)
            (call-with-output-file (array-ref args 1)
              (lambda ([output : OutputPort])
                (case (parse-module-files 3 args)
                  [(left v)
                   (begin
                     (write-line v stderr)
                     1)]
                  [(right modules)
                   (case (compile-modules modules)
                     [(left v)
                      (begin
                        (write-line v stderr)
                        1)]
                     [(right code)
                      (let ([assembly (compile-stack-machine
                                        (bytes-append (varargs list (array-ref args 2) #"_main"))
                                        code)])
                        (begin
                          (write-fragments assembly output)
                          0))])])))))))
