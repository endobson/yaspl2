#:module (compiler-main)
#:import {
  (bytes)
  (compiler)
  (either)
  (io)
  (list)
  (machine-code)
  (machine-code-writer)
  (maybe)
  (module-name)
  (prim)
  (prim-language-compiler)
  (top-level-name)
  (tuples)
  (x86-64-runtime)
  (yaspl top-level-objects-to-x86-64)
  (yaspl x86-64-assembly)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [output-format : MachineCodeOutputFormat]
      [output-file-name : Bytes]
      [module-name : Bytes]
      [module-file-names : (List Bytes)])))

(define (append-fragments [f1 : AssemblyFragments] [f2 : AssemblyFragments]) : AssemblyFragments
  (match-define (assembly-fragments text1 const1) f1)
  (match-define (assembly-fragments text2 const2) f2)
  (assembly-fragments (append text1 text2) (append const1 const2)))

(define (split-module-files [module-files : (List Bytes)]) : (Tuple2 (List Bytes) (List Bytes))
  (partition-eithers
    (map
      (lambda ([file : Bytes]) : (Either Bytes Bytes)
        (if (ends-with? file #".yaspl")
            (left file)
            (right file)))
      module-files)))

(define (compile-prim-files [prim-files : (List Bytes)] [abi : SystemAbi])
  : (Either Bytes AssemblyFragments)
  (compile-prim-files* prim-files abi (empty)))


(define (compile-prim-files* [prim-files : (List Bytes)] [abi : SystemAbi] [acc : (List TextFragment)])
  : (Either Bytes AssemblyFragments)
  (case prim-files
    [(empty)
     (right (assembly-fragments acc (empty)))]
    [(cons prim-file prim-files)
     (case (compile-prim-program (sourced-bytes-from-file prim-file) abi)
       [(left v)
        (left v)]
       [(right text-fragments)
        (compile-prim-files* prim-files abi (append text-fragments acc))])]))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable specified???")]
    [(cons _ (empty))
     (left #"No output format supplied.")]
    [(cons _ (cons _ (empty)))
     (left #"No output file name supplied.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No module name supplied")]
    [(cons _ (cons output-format (cons output-file-name (cons module-name module-files))))
     (case (parse-machine-code-output-format output-format)
       [(nothing) (left (bytes-append (varargs list #"Unknown output format: " output-format)))]
       [(just output-format)
        (right (args output-format output-file-name module-name module-files))])]))


(define (run [input : (List Bytes)]) : (Maybe Bytes)
  (case (parse-args input)
    [(left v) (just v)]
    [(right (args output-format output-file-name module-name module-files))
     (match-define abi (machine-code-output-format-abi output-format))
     (match-define (tuple2 yaspl-files prim-files) (split-module-files module-files))
     (case (parse-module-files yaspl-files)
       [(left v) (just (parser-error->bytes v))]
       [(right modules)
        (case (compile-modules modules)
          [(left v) (just v)]
          [(right code)
           (case (compile-prim-files prim-files abi)
             [(left v) (just v)]
             [(right prim-fragments)
              (let ([assembly
                      (append-fragments
                        prim-fragments
                        (append-fragments
                          (yaspl-runtime
                            (top-level-name (mod-name (varargs list module-name)) #"main_closure")
                            abi)
                          (convert-objects code)))])
                (begin
                  (write-library-machine-code
                    assembly
                    output-format
                    output-file-name)
                  (nothing)))])])])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (run (array->list args))
    [(just v)
     (begin
       (write-line v stderr)
       1)]
    [(nothing)
     0]))
