(module xml
  (import
    (bytes bytes-append)
    (join-list
      #:types (JoinList)
      #:values (append-jl* concat-jl cons-jl jl->list join-list single-jl)
      #:patterns ())
    (list
      #:types (List)
      #:values (map)
      #:patterns ())
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ()))
  (export
    #:types (Node Attribute)
    #:values (element-node text-node attribute document->xml-bytes)
    #:patterns ())
  (types
    (define-type Node
      (element-node [tag-name : Bytes] [attributes : (List Attribute)] [children : (List Node)])
      (text-node [contents : (JoinList Bytes)]))
    (define-type Attribute
      (attribute [name : Bytes] [value : (JoinList Bytes)])))


  (define (document->xml-bytes [node : Node]) : Bytes
    (bytes-append
      (jl->list
        (cons-jl
          #"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
          (node->xml-bytes node)))))

  (define (node->xml-bytes [v : Node]) : (JoinList Bytes)
    (case v
      [(element-node tag attributes child-nodes)
       (varargs append-jl*
          (varargs join-list #"<" tag)
          (concat-jl (map attribute->xml-bytes attributes))
          (single-jl #">")
          (concat-jl (map node->xml-bytes child-nodes))
          (varargs join-list #"</" tag #">"))]
      [(text-node contents)
       contents]))

  ;; TODO move the space somewhere else
  (define (attribute->xml-bytes [v : Attribute]) : (JoinList Bytes)
    (case v
      [(attribute name value)
       (varargs append-jl*
         (varargs join-list #" " name #"=\"")
         value
         (single-jl #"\""))])))
