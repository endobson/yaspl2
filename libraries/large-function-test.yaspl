(module large-function-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Byte)
      #:values (+ =)
      #:patterns ())
    (list
      #:types ()
      #:values (list)
      #:patterns ())
    (yunit
      #:types () 
      #:values (yunit/main test-case)
      #:patterns ()))
  (export)
  (types
    (define-type Z
      (z [a Byte] [b Byte] [c Byte] [d Byte] [e Byte] [f Byte] [g Byte] [h Byte])))


  (define (eighth [a : Byte] [b : Byte] [c : Byte] [d : Byte] [e : Byte] [f : Byte] [g : Byte]
                  [h : Byte]) : Byte
     h)



  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (yunit/main stderr
      (varargs list
        (test-case #"8th regular" (lambda () (= 7 (eighth 0 1 2 3 4 5 6 (+ 3 4)))))
        (test-case #"8th constructor" (lambda () (= 7 (z-h (z 0 1 2 3 4 5 6 (+ 3 4))))))))))
