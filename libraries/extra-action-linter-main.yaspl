(module extra-action-linter-main
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Void Byte S64 Boolean U8)
      #:values (array-length array-ref = void bytes-length)
      #:patterns ())
    (bytes ends-with?)
    (boolean not)
    (unused-imports unused-imports)
    (source-language parse-module)
    (sexp-parser parse-sexp)
    (list
      #:types (List)
      #:values (map reverse filter cons-head)
      #:patterns (empty))
    (tuples
      #:types ()
      #:values ()
      #:patterns (tuple3))
    (either
      #:types ()
      #:values ()
      #:patterns (right left))
    (io write-line read-all-bytes write-all-bytes call-with-input-file call-with-output-file)
    (extra-action-parser
      #:types ()
      #:values (proto-parser parse-extra-action-info)
      #:patterns (extra-action-info spawn-info)))
  (export)
  (types)

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (not (= (array-length args) 3))
        (begin
          (write-line #"Too few arguments" stderr)
          1)
        (let ([bytes (call-with-input-file (array-ref args 1) read-all-bytes)])
          (let ([output-file-name (array-ref args 2)])
            (let ([limit (bytes-length bytes)])
              (case (parse-extra-action-info (proto-parser bytes 0 limit))
                [(left msg)
                 (begin
                   (write-line msg stderr)
                   1)]
                [(right info)
                 (case info
                   [(extra-action-info owner id mnemonic (spawn-info arguments input-files output-files))
                    (case mnemonic
                      [#"YasplCompile"
                       (call-with-output-file output-file-name
                         (lambda ([output-port : OutputPort])
                           (let ([src-file-path
                                   (cons-head (reverse
                                     (filter
                                       (lambda ([input-path : Bytes])
                                         (ends-with? input-path #".yaspl"))
                                       input-files)))])
                             (case (parse-sexp (call-with-input-file src-file-path read-all-bytes))
                              [(left v)
                               (begin
                                 (write-line v stderr)
                                 1)]
                              [(right sexp)
                               (case (parse-module sexp)
                                [(left v)
                                 (begin
                                   (write-line v stderr)
                                   1)]
                                [(right module)
                                 (begin
                                   (case (unused-imports module)
                                     [(tuple3 (empty) (empty) (empty)) (void)]
                                     [(tuple3 unused-types unused-vars unused-patterns)
                                      (begin
                                       (write-line src-file-path output-port)
                                       (case unused-types
                                         [(empty) (void)]
                                         [unused
                                          (begin
                                            (write-line #"  Unused types" output-port)
                                            (map
                                              (lambda ([unused-import : Bytes])
                                                (begin
                                                  (write-all-bytes #"    " output-port)
                                                  (write-line unused-import output-port)))
                                              unused))])
                                       (case unused-vars
                                         [(empty) (void)]
                                         [unused
                                          (begin
                                            (write-line #"  Unused variables:" output-port)
                                            (map
                                              (lambda ([unused-import : Bytes])
                                                (begin
                                                  (write-all-bytes #"    " output-port)
                                                  (write-line unused-import output-port)))
                                              unused))])
                                       (case unused-patterns
                                         [(empty) (void)]
                                         [unused
                                          (begin
                                            (write-line #"  Unused patterns" output-port)
                                            (map
                                              (lambda ([unused-import : Bytes])
                                                (begin
                                                  (write-all-bytes #"    " output-port)
                                                  (write-line unused-import output-port)))
                                              unused))]))])
                                   0)])]))))]
                      [x
                        (begin
                          (write-line x stderr)
                          1)])])])))))))
