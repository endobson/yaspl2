(module http-server
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort Void)
      #:values (socket sendto bind shutdown listen accept make-bytes bytes-set! write-bytes quotient
                close-output-port panic
                remainder = void connect bytes-length + * bytes-ref array-length array-ref)
      #:patterns ())
    (io write-line read-all-bytes write-all-bytes newline)
    (buffered-port
      #:types (BufferedPort)
      #:values (make-buffered-port read-crlf-line)
      #:patterns (line-result))
    (numbers decimal-bytes->integer integer->decimal-bytes)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (regexp
      #:types (Regexp)
      #:values (any-regexp group-regexp rep-regexp regexp-match epsilon-regexp seq-regexp lit-regexp
                non-greedy-rep-regexp)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty length reverse map)
      #:patterns (cons empty))
    (mach spawn)
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (tcp tcp-address tcp-socket-bind tcp-socket-accept tcp-socket-set-reuse-address)
    (ip
      #:types (Ipv4Address)
      #:values (bytes->ipv4-address)
      #:patterns ()))
  (export)
  (types)

  (define (write-crlf [out : OutputPort]) : Void
    (let ([bytes (make-bytes 2)])
      (begin
        (bytes-set! bytes 0 #x0D)
        (bytes-set! bytes 1 #x0A)
        (write-all-bytes bytes out))))

  (define (bytes-regexp [bytes : Bytes]) : Regexp
    (bytes-regexp/loop bytes 0))

  (define (bytes-regexp/loop [bytes : Bytes] [offset : Byte]) : Regexp
    (if (= offset (bytes-length bytes))
        (epsilon-regexp)
        (seq-regexp (lit-regexp (bytes-ref bytes offset))
                    (bytes-regexp/loop bytes (+ 1 offset)))))

  (define (request-line-regexp) : Regexp
    (seq-regexp
      (bytes-regexp #"GET ")
      (seq-regexp
        (group-regexp (seq-regexp (bytes-regexp #"/") (rep-regexp (any-regexp))))
        (bytes-regexp #" HTTP/1.1"))))

  (define (parse-request-line [request-line : Bytes]) : (Maybe Bytes)
    (case (regexp-match (request-line-regexp) request-line)
      [(nothing) (nothing)]
      [(just (cons _ (cons resource (empty))))
       (just resource)]
      [(just _) (panic #"Bad status regexp return")]))

  ;; This mostly works but should be tightend up
  (define (request-header-regexp) : Regexp
    (seq-regexp
      (group-regexp (non-greedy-rep-regexp (any-regexp)))
      (seq-regexp
        (bytes-regexp #":")
        (group-regexp (rep-regexp (any-regexp))))))

  (define (parse-request-header [header-line : Bytes]) : (Maybe (Tuple2 Bytes Bytes))
    (case (regexp-match (request-header-regexp) header-line)
      [(nothing) (nothing)]
      [(just (cons _ (cons header-name (cons header-value (empty)))))
       (just (tuple2 header-name header-value))]
      [(just _) (panic #"Bad header regexp return")]))


  (define (read-loop [buffered-port : BufferedPort] [lines : (List Bytes)] [sock : Socket] [stdout : OutputPort]) : Void
    (case (read-crlf-line buffered-port)
      [(line-result bytes eof buffered-port)
       (if (= (bytes-length bytes) 0)
           (case (reverse lines)
             [(empty)
              (close-output-port sock)]
             [(cons request-line header-lines)
              (begin
                (write-all-bytes #"HTTP/1.1 200 OK" sock)
                (write-crlf sock)
                (write-all-bytes #"Content-Type: text/plain" sock)
                (write-crlf sock)
                (write-all-bytes #"Connection: close" sock)
                (write-crlf sock)
                (write-crlf sock)
                (case (parse-request-line request-line)
                  [(just resource)
                   (write-line resource sock)]
                  [(nothing)
                   (panic #"Unparseable resource")])
                (map 
                  (lambda ([header-line : Bytes])
                    (case (parse-request-header header-line)
                      [(just (tuple2 header-name header-value))
                       (begin
                         (write-all-bytes header-name sock)
                         (write-all-bytes #":" sock)
                         (write-all-bytes header-value sock)
                         (newline sock))]))
                  header-lines)
                (write-line (integer->decimal-bytes (length header-lines)) sock)
                (close-output-port sock))])
           (if eof
               (close-output-port sock)
               (read-loop buffered-port (cons bytes lines) sock stdout)))]))

  (define (accept-loop [sock : Socket] [stdout : OutputPort]) : Void
    (case (tcp-socket-accept sock)
      [(tuple2 new-sock new-sock-addr)
       (begin
         (spawn
           (lambda ()
             (read-loop (make-buffered-port new-sock) (empty) new-sock stdout)))
         (accept-loop sock stdout))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (= (array-length args) 3)
        (case (bytes->ipv4-address (array-ref args 1))
          [(just ip-addr)
           (let ([address (tcp-address ip-addr (decimal-bytes->integer (array-ref args 2)))])
             (let ([sock (socket 2 1 0)])
               (begin
                 (tcp-socket-set-reuse-address sock #t)
                 (tcp-socket-bind sock address)
                 (listen sock 5)
                 (accept-loop sock stdout))))]
          [(nothing)
           (begin
             (write-line #"Unparsable ip address" stderr)
             1)])
        (begin
          (write-line #"Wrong number of arguments" stderr)
          1))))
