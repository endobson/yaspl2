#:module (http-server)
#:import {
  (buffered-port)
  (data lifted-primitives)
  (io)
  (list)
  (maybe)
  (numbers)
  (prim)
  (protocols http http-response)
  (regexp)
  (tcp)
  (tuples)
}
(export
  (#:types HttpRequest HttpRequestHeader)
  (#:values run-http-server run-http-server/state http-request http-request-header)
  (#:patterns http-request http-request-header))
(types
  (define-type HttpRequest
    (http-request
      [path : Bytes]
      [headers : (List HttpRequestHeader)]))
  (define-type HttpRequestHeader
    (http-request-header [name : Bytes] [value : Bytes])))

(define (bytes-regexp [bytes : Bytes]) : Regexp
  (bytes-regexp/loop bytes 0))

(define (bytes-regexp/loop [bytes : Bytes] [offset : Int]) : Regexp
  (if (= offset (bytes-length bytes))
      (epsilon-regexp)
      (seq-regexp (lit-regexp (bytes-ref bytes offset))
                  (bytes-regexp/loop bytes (+ 1 offset)))))

(define (request-line-regexp) : Regexp
  (seq-regexp
    (bytes-regexp #"GET ")
    (seq-regexp
      (group-regexp (seq-regexp (bytes-regexp #"/") (rep-regexp (any-regexp))))
      (bytes-regexp #" HTTP/1.1"))))

(define (parse-request-line [request-line : Bytes]) : (Maybe Bytes)
  (case (regexp-match (request-line-regexp) request-line)
    [(nothing) (nothing)]
    [(just (cons _ (cons resource (empty))))
     (just resource)]
    [(just _) (panic #"Bad status regexp return")]))

;; This mostly works but should be tightend up
(define (request-header-regexp) : Regexp
  (seq-regexp
    (group-regexp (non-greedy-rep-regexp (any-regexp)))
    (seq-regexp
      (bytes-regexp #":")
      (group-regexp (rep-regexp (any-regexp))))))

(define (parse-request-header [header-line : Bytes]) : (Maybe HttpRequestHeader)
  (case (regexp-match (request-header-regexp) header-line)
    [(nothing) (nothing)]
    [(just (cons _ (cons header-name (cons header-value (empty)))))
     (just (http-request-header header-name header-value))]
    [(just _) (panic #"Bad header regexp return")]))

(define (write-http-response [response : HttpResponse] [out : OutputPort]) : Void
  (case response
    [(http-response status-code status-text content-type body)
     (begin
       (write-all-bytes #"HTTP/1.1 " out)
       (write-all-bytes (integer->decimal-bytes status-code) out)
       (write-all-bytes #" " out)
       (write-all-bytes status-text out)
       (write-all-bytes #"\r\n" out)
       (write-all-bytes #"Content-Type: " out)
       (write-all-bytes content-type out)
       (write-all-bytes #"\r\n" out)
       (write-all-bytes #"Connection: close" out)
       (write-all-bytes #"\r\n" out)
       (write-all-bytes #"\r\n" out)
       (write-all-bytes body out))]))

(define [s] (read-loop/state
              [buffered-port : BufferedPort] [lines : (List Bytes)] [sock : Socket]
              [request-handler : (HttpRequest s -> (Tuple2 HttpResponse s))]
              [state : s]) : s
  (match-define (line-result bytes buffered-port) (read-crlf-line buffered-port))
  (if (= (bytes-length bytes) 0)
      (case (reverse lines)
        [(empty)
         (begin
           (close-output-port sock)
           state)]
        [(cons request-line header-lines)
         (let ([request
                (http-request
                  (case (parse-request-line request-line)
                    [(just resource) resource]
                    [(nothing) (panic #"Unparseable resource")])
                  (map
                    (lambda ([header-line : Bytes]) : HttpRequestHeader
                      (case (parse-request-header header-line)
                        [(just request-header) request-header]
                        [(nothing) (panic #"Unparseable header")]))
                    header-lines))])
           (match-define (tuple2 response state) (request-handler request state))
           (begin
             (write-http-response response sock)
             (close-output-port sock)
             state))])
          (case buffered-port
            [(nothing)
             (begin
               (close-output-port sock)
               state)]
            [(just buffered-port)
             (read-loop/state buffered-port (cons bytes lines) sock request-handler state)])))

(define [s] (accept-loop/state
              [sock : Socket]
              [request-handler : (HttpRequest s -> (Tuple2 HttpResponse s))]
              [state : s]) : Void
  (case (tcp-socket-accept sock)
    [(accepted-socket new-sock _new-sock-addr)
     (match-define state
       (read-loop/state (make-buffered-port new-sock) (empty) new-sock request-handler state))
     (accept-loop/state sock request-handler state)]))

(define (run-http-server [address : TcpAddress] [request-handler : (HttpRequest -> HttpResponse)]) : Void
  (match-define full-handler
    (lambda ([req : HttpRequest] [s : LiftedVoid])
      (tuple2 (request-handler req) s)))
  (run-http-server/state address full-handler (lifted-void)))

(define [s] (run-http-server/state
              [address : TcpAddress]
              [request-handler : (HttpRequest s -> (Tuple2 HttpResponse s))]
              [initial-state : s]) : Void
  (let ([sock (socket 2 1 0)])
     (begin
       (tcp-socket-set-reuse-address sock #t)
       (tcp-socket-bind sock address)
       (listen sock 5)
       (accept-loop/state sock request-handler initial-state))))
