#:module (buffered-port)
#:import {
  (bytes)
  (data lifted-primitives)
  (maybe)
  (prim)
}
(export
  (#:types BufferedPort)
  (#:values make-buffered-port make-buffered-port* read-crlf-line)
  (#:patterns line-result))
(types
  (define-type BufferedPort
    (buffered-port
      [buffer1 : Bytes] [pos1 : Int] [limit1 : Int]
      [buffer2 : Bytes]
      [port : InputPort]))

  ;; The line does not have the associated line terminator
  ;; If the port is unset, there is no more input to read
  (define-type LineResult
    (line-result [line : Bytes] [port : (Maybe BufferedPort)])))


(define (make-buffered-port [port : InputPort]) : BufferedPort
  (make-buffered-port* port 4096))

(define (make-buffered-port* [port : InputPort] [buffer-size : Int]) : BufferedPort
  (buffered-port (make-bytes buffer-size) 0 0 (make-bytes buffer-size) port))


(define (read-crlf-line [bport : BufferedPort]) : LineResult
  (read-crlf-line/loop bport (make-bytes 512) 0))

;; Rough outline of algorithm:
;;
;; Try to read line:
;; Q: Does main buffer contain start of termination sequence?
;; No:
;;   1. Copy main buffer to output.
;;   2. Read more input into buffer.
;;   3. If no more input to read, return EOF.
;; Yes:
;;   Q: Would termination sequence would go past buffer?
;;   No:
;;     Q: Is there the termination sequence there?
;;     Yes: Copy part of buffer to output, and return.
;;     No: Copy part of buffer to output and continue.
;;   Yes:
;;     1. Read enough input into secondary buffer for full termination sequence
;;     2. If no more input, return EOF
;;     3. Q: Is the rest of the termination sequence there?
;;        Yes: Copy part of buffer to output, and return
;;        No: Copy part of buffer to output and continue


(define (read-crlf-line/loop [bport : BufferedPort] [output : Bytes] [output-pos : Int])
  : LineResult
  (match-define (buffered-port b1 s1 l1 b2 input) bport)
  (case (find-cr b1 s1 l1)
    [(nothing)
     (match-define new-pos (+ output-pos (- l1 s1)))
     (begin
       (bytes-copy! b1 s1 l1 output output-pos)
       (case (refill-buffered-port bport)
         [(nothing)
          (line-result (subbytes output 0 new-pos) (nothing))]
         [(just bport)
          (read-crlf-line/loop bport output new-pos)]))]
    [(just (lifted-int p))
     (if (< (+ p 1) l1)
         (case (u8->s64 (bytes-ref b1 (+ p 1)))
           [10
            (match-define new-output-pos (+ output-pos (- p s1)))
            (begin
              (bytes-copy! b1 s1 p output output-pos)
              (line-result (subbytes output 0 new-output-pos)
                (just (buffered-port b1 (+ p 2) l1 b2 input))))]
           [_
            (match-define s2 (+ p 1))
            (match-define new-output-pos (+ output-pos (- s2 s1)))
            (begin
              (bytes-copy! b1 s1 s2 output output-pos)
              (read-crlf-line/loop
                (buffered-port b1 s2 l1 b2 input) output new-output-pos))])
         (case (read-bytes b2 input 0 (bytes-length b2))
           [0
            (match-define new-pos (+ output-pos (- l1 s1)))
            (begin
              (bytes-copy! b1 s1 l1 output output-pos)
              (line-result (subbytes output 0 new-pos) (nothing)))]
           [num-bytes
            (case (u8->s64 (bytes-ref b2 0))
              [10
               (match-define new-output-pos (+ output-pos (- p s1)))
               (begin
                 (bytes-copy! b1 s1 p output output-pos)
                 (line-result (subbytes output 0 new-output-pos)
                   (just (buffered-port b2 1 num-bytes b1 input))))]
              [_
               (match-define new-output-pos (+ output-pos (- l1 s1)))
               (begin
                 (bytes-copy! b1 s1 l1 output output-pos)
                 (read-crlf-line/loop
                   (buffered-port b2 0 num-bytes b1 input)
                   output new-output-pos))])]))]))


(define (refill-buffered-port [bport : BufferedPort]) : (Maybe BufferedPort)
  (match-define (buffered-port b _ _ b2 input) bport)
  (let ([num-bytes (read-bytes b input 0 (bytes-length b))])
    (if (= num-bytes 0)
        (nothing)
        (just (buffered-port b 0 num-bytes b2 input)))))

(define (find-cr [buffer : Bytes] [pos : Int] [limit : Int]) : (Maybe LiftedInt)
  (cond
    [(= pos limit)
     (nothing)]
    [(= (u8->s64 (bytes-ref buffer pos)) 13) ;; 13 is carriage-return
     (just (lifted-int pos))]
    [else
     (find-cr buffer (+ 1 pos) limit)]))
