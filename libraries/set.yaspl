(module set
  (import
    (prim
      #:types (Boolean)
      #:values ()
      #:patterns ())
    (list
      #:types ()
      #:values (cons empty)
      #:patterns (cons empty)))
  (export make-set set-add set->list set-member? set-remove)
  (types
    (define-type (Set a)
      (set [eq? (a a -> Boolean)] [vals (List a)])))

  (define (a) (make-set [eq : (a a -> Boolean)]) : (Set a)
    (set eq (empty)))

  (define (a) (set->list [s : (Set a)]) : (List a)
    (set-vals s))

  (define (a) (set-add [s : (Set a)] [v : a]) : (Set a)
    (if (set-member? s v)
        s
        (case s
          [(set eq vs)
           (set eq (cons v vs))])))

  (define (a) (set-remove [s : (Set a)] [v : a]) : (Set a)
    (case s
      [(set eq vs)
       (set eq (set-remove-helper eq vs v))]))

  (define (a) (set-remove-helper [eq : (a a -> Boolean)] [vs : (List a)] [v : a]) : (List a)
    (case vs
      [(empty) (empty)]
      [(cons v2 vs)
       (if (eq v v2)
           vs
           (cons v2 (set-remove-helper eq vs v)))]))

  (define (a) (set-member? [s : (Set a)] [v : a]) : Boolean
    (case s
      [(set eq vs)
       (set-member?-helper eq vs v)]))

  (define (a) (set-member?-helper [eq : (a a -> Boolean)] [vs : (List a)] [v : a]) : Boolean
    (case vs
      [(empty) #f]
      [(cons v2 vs)
       (if (eq v v2)
           #t
           (set-member?-helper eq vs v))])))

