#:module module-header-lint
(import
  (bytes bytes<)
  (list
    #:types (List)
    #:values (append append* cons empty map)
    #:patterns (cons empty))
  (prim
    #:types (Bytes)
    #:values ()
    #:patterns ())
  (source-language
    #:types (Imports Module)
    #:values (import-exported-name imports-module-name)
    #:patterns (imports module)))
(export
  #:types (ModuleHeaderLintViolations)
  #:values (find-header-violations)
  #:patterns (module-header-lint-violations))
(types
  (define-type ModuleHeaderLintViolations
    (module-header-lint-violations
      [unsorted-imports/modules : (List Bytes)]
      [unsorted-imports/bindings : (List Bytes)])))

(define (find-header-violations [mod : Module]) : ModuleHeaderLintViolations
  (match-define (module _ imports _ _ _) mod)
  (module-header-lint-violations
    (find-imports-module-order-violations imports)
    (append*
      (map find-import-binding-order-violations imports))))


(define (find-unsorted-values [vs : (List Bytes)]) : (List Bytes)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (find-unsorted-values* v vs)]))

(define (find-unsorted-values* [last-value : Bytes] [vs : (List Bytes)]) : (List Bytes)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (if (bytes< last-value v)
         (find-unsorted-values* v vs)
         (cons v (find-unsorted-values* v vs)))]))


(define (find-imports-module-order-violations [imports : (List Imports)]) : (List Bytes)
  (find-unsorted-values (map imports-module-name imports)))

(define (find-import-binding-order-violations [imports : Imports]) : (List Bytes)
  (match-define (imports _ types values patterns) imports)
  (append
    (append
      (find-unsorted-values (map import-exported-name types))
      (find-unsorted-values (map import-exported-name values)))
    (find-unsorted-values (map import-exported-name patterns))))
