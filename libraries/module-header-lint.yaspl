#:module (module-header-lint)
#:import {
  (bytes) {
    #:values
      bytes<
  }
  (list) {
    #:types
      List
    #:values
      append
      append*
      cons
      empty
      map
    #:patterns
      cons
      empty
  }
  (module-name) {
    #:types
      ModName
    #:values
      mod-name<
  }
  (prim) {
    #:types
      Boolean
      Bytes
  }
  (source-language) {
    #:types
      Imports
      Module
    #:values
      import-exported-name
    #:patterns
      full-imports
      module
      partial-imports
  }
}
(export
  #:types (ModuleHeaderLintViolations)
  #:values (find-header-violations)
  #:patterns (module-header-lint-violations))
(types
  (define-type ModuleHeaderLintViolations
    (module-header-lint-violations
      [unsorted-imports/modules : (List ModName)]
      [unsorted-imports/bindings : (List Bytes)])))

(define (find-header-violations [mod : Module]) : ModuleHeaderLintViolations
  (match-define (module _ imports _ _ _) mod)
  (module-header-lint-violations
    (find-imports-module-order-violations imports)
    (append*
      (map find-import-binding-order-violations imports))))


(define (A) (find-unsorted-values [< : (A A -> Boolean)] [vs : (List A)]) : (List A)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (find-unsorted-values* < v vs)]))

(define (A) (find-unsorted-values* [< : (A A -> Boolean)] [last-value : A] [vs : (List A)]) : (List A)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (if (< last-value v)
         (find-unsorted-values* < v vs)
         (cons v (find-unsorted-values* < v vs)))]))

(define (imports-module-name [i : Imports]) : ModName
  (case i
    [(partial-imports mod-name _ _ _) mod-name]
    [(full-imports mod-name) mod-name]))

(define (find-imports-module-order-violations [imports : (List Imports)]) : (List ModName)
  (find-unsorted-values mod-name< (map imports-module-name imports)))

(define (find-import-binding-order-violations [imports : Imports]) : (List Bytes)
  (case imports
    [(partial-imports _ types values patterns)
     (append
       (append
         (find-unsorted-values bytes< (map import-exported-name types))
         (find-unsorted-values bytes< (map import-exported-name values)))
       (find-unsorted-values bytes< (map import-exported-name patterns)))]
    [(full-imports _)
     (empty)]))
