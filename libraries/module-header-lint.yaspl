#:module (module-header-lint)
#:import {
  (bytes)
  (list)
  (module-name)
  (prim)
  (source-language)
}
(export
  (#:types ModuleHeaderLintViolations)
  (#:values find-header-violations)
  (#:patterns module-header-lint-violations))
(types
  (define-type ModuleHeaderLintViolations
    (module-header-lint-violations
      [unsorted-imports/modules : (List ModName)]
      [unsorted-imports/bindings : (List Bytes)])))

(define (find-header-violations [mod : Module]) : ModuleHeaderLintViolations
  (match-define (module _ imports _ _ _ _) mod)
  (module-header-lint-violations
    (find-imports-module-order-violations imports)
    (append*
      (map find-import-binding-order-violations imports))))


(define [A] (find-unsorted-values [< : (A A -> Boolean)] [vs : (List A)]) : (List A)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (find-unsorted-values* < v vs)]))

(define [A] (find-unsorted-values* [< : (A A -> Boolean)] [last-value : A] [vs : (List A)]) : (List A)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (if (< last-value v)
         (find-unsorted-values* < v vs)
         (cons v (find-unsorted-values* < v vs)))]))

(define (imports-module-name [i : Imports]) : ModName
  (case i
    [(partial-imports mod-name _ _ _ _) mod-name]
    [(full-imports mod-name) mod-name]))

(define (find-imports-module-order-violations [imports : (List Imports)]) : (List ModName)
  (find-unsorted-values mod-name< (map imports-module-name imports)))

(define (find-import-binding-order-violations [imports : Imports]) : (List Bytes)
  (case imports
    [(partial-imports _ types values patterns statics)
     (append
       (append
         (find-unsorted-values bytes< (map import-exported-name types))
         (find-unsorted-values bytes< (map import-exported-name values)))
       (append
         (find-unsorted-values bytes< (map import-exported-name patterns))
         (find-unsorted-values bytes< (map import-exported-name statics))))]
    [(full-imports _)
     (empty)]))
