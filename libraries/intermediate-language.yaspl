(module intermediate-language
  (import
    (prim
      #:types (Bytes Int Boolean)
      #:values ()
      #:patterns ())
    (list
      #:types (List)
      #:values ()
      #:patterns ())
    (types
      #:types (Type)
      #:values ()
      #:patterns ())
    (source-language
      #:types (Imports Exports)
      #:values ()
      #:patterns ()))
  (export
    #:types (Module FunctionDefinition BytesConstant ClosureConstant Expression
             CaseClause Pattern TypeDefinition VariantDefinition VariantField)
    #:values (module-name module-definitions module-closures module-bytes
              module-exports module-imports module-types
              type-definition variant-definition variant-field
              function-definition-name variant-field-type
              module function-definition int-literal boolean-literal
              local-var-expr global-var-expr if-expr
              begin-expr create-closure-expr call-closure-expr varargs-call-closure-expr
              let-expr case-expr case-clause
              closure-constant closure-constant-name
              bytes-constant bytes-constant-name
              bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern)
    #:patterns (function-definition type-definition variant-definition variant-field
                int-literal boolean-literal
                local-var-expr global-var-expr if-expr
                begin-expr create-closure-expr call-closure-expr varargs-call-closure-expr
                let-expr case-expr case-clause
                closure-constant bytes-constant
                bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern))
  (types
    (define-type Module
      (module [name Bytes]
              [imports (List Imports)]
              [exports Exports]
              [types (List TypeDefinition)]
              [definitions (List FunctionDefinition)]
              [closures (List ClosureConstant)]
              [bytes (List BytesConstant)]))
    (define-type FunctionDefinition
      (function-definition
        [name Bytes] [type Type] [args (List Bytes)] [free-vars (List Bytes)] [body Expression]))
    (define-type Expression
      (int-literal [v Int])
      (boolean-literal [v Boolean])
      (local-var-expr [v Bytes])
      (global-var-expr [v Bytes])
      (if-expr [cond Expression] [true Expression] [false Expression])
      (begin-expr [first-expr Expression] [exprs (List Expression)])
      (create-closure-expr [op Expression] [args (List Expression)])
      (call-closure-expr [op Expression] [args (List Expression)])
      (varargs-call-closure-expr [op Expression] [args (List Expression)])
      (let-expr [name Bytes] [expr Expression] [body Expression])
      (case-expr [expr Expression] [clauses (List CaseClause)]))

    (define-type ClosureConstant
      (closure-constant [name Bytes] [fun-name Bytes]))
    (define-type BytesConstant
      (bytes-constant [name Bytes] [value Bytes]))

    (define-type TypeDefinition
      (type-definition
        [name Bytes]
        ;; This is what the name is bound to in the type environment
        [type-binding Type]
        [type-vars (List Bytes)]
        ;; This is what the variants return
        [constructed-type Type]
        [variants (List VariantDefinition)]))
    (define-type VariantDefinition
      (variant-definition
        [name Bytes]
        [tag Int]
        [fields (List VariantField)]))
    (define-type VariantField
      (variant-field
        [name Bytes]
        [type Type]))

    (define-type CaseClause
      (case-clause [pattern Pattern] [expr Expression]))

    (define-type Pattern
      (bytes-pattern [name Bytes])
      (int-pattern [v Int])
      (variable-pattern [v Bytes])
      (ignore-pattern)
      (abstraction-pattern [name Bytes] [patterns (List Pattern)]))))
