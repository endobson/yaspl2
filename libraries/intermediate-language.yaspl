#:module (intermediate-language)
#:import {
  (list)
  (module-name)
  (prim)
  (resolved-imports-language) {
    #:types
      Imports
  }
  (types)
  (yaspl math-operations)
}
(export
  #:types (Module FunctionDefinition BytesConstant ClosureConstant Expression
           CaseClause Pattern TypeDefinition VariantDefinition VariantField
           Export TypedExport Exports)
  #:values (module-name module-definitions module-closures module-bytes
            module-exports module-types
            type-definition variant-definition variant-field
            function-definition-name variant-field-type
            module function-definition int-literal boolean-literal
            var-expr if-expr
            begin-expr create-closure-expr call-closure-expr make-array-expr
            let-expr case-expr case-clause
            closure-constant closure-constant-name
            bytes-constant bytes-constant-name
            bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern
            export typed-export exports exports-values exports-types
            variant-definition-name module-imports)
  #:patterns (function-definition type-definition variant-definition variant-field
              int-literal boolean-literal var-expr if-expr
              begin-expr create-closure-expr call-closure-expr make-array-expr
              let-expr case-expr case-clause
              closure-constant bytes-constant
              bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern
              prim-numeric-bin-op prim-comparison-bin-op
              export typed-export exports))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]
            [closures : (List ClosureConstant)]
            [bytes : (List BytesConstant)]))

  (define-type Exports
    (exports [types : (List TypedExport)]
             [values : (List TypedExport)]
             [patterns : (List Export)]))
  (define-type Export
    (export [local-name : Bytes] [exported-name : Bytes]))
  (define-type TypedExport
    (typed-export [local-name : Bytes] [exported-name : Bytes] [type : Type]))

  (define-type FunctionDefinition
    (function-definition
      [name : Bytes] [type : Type] [args : (List Bytes)] [free-vars : (List Bytes)] [body : Expression]))
  (define-type Expression
    (int-literal [v : Int])
    (boolean-literal [v : Boolean])
    (var-expr [v : Bytes])
    (if-expr [cond : Expression] [true : Expression] [false : Expression])
    (begin-expr [first-expr : Expression] [exprs : (List Expression)])
    (create-closure-expr [fun-name : Bytes] [args : (List Expression)])
    (call-closure-expr [op : Expression] [args : (List Expression)])
    (make-array-expr [args : (List Expression)])
    (let-expr [name : Bytes] [expr : Expression] [body : Expression])
    (case-expr [expr : Expression] [clauses : (List CaseClause)])
    (prim-numeric-bin-op [op : NumericBinOp] [left : Expression] [right : Expression])
    (prim-comparison-bin-op [op : ComparisonBinOp] [left : Expression] [right : Expression]))

  (define-type ClosureConstant
    (closure-constant [name : Bytes] [fun-name : Bytes]))
  (define-type BytesConstant
    (bytes-constant [name : Bytes] [value : Bytes]))

  (define-type TypeDefinition
    (type-definition
      [name : Bytes]
      ;; This is what the name is bound to in the type environment
      [type-binding : Type]
      [type-vars : (List Bytes)]
      ;; This is what the variants return
      [constructed-type : Type]
      [variants : (List VariantDefinition)]))
  (define-type VariantDefinition
    (variant-definition
      [name : Bytes]
      [tag : Int]
      [fields : (List VariantField)]))
  (define-type VariantField
    (variant-field
      [name : Bytes]
      [type : Type]))

  (define-type CaseClause
    (case-clause [pattern : Pattern] [expr : Expression]))

  (define-type Pattern
    (bytes-pattern [name : Bytes])
    (int-pattern [v : Int])
    (variable-pattern [v : Bytes])
    (ignore-pattern)
    (abstraction-pattern [name : Bytes] [patterns : (List Pattern)])))
