#:module (intermediate-language)
#:import {
  (dict)
  (intermediate-expression)
  (list)
  (module-name)
  (module-signature)
  (prim)
  (top-level-name)
  (types)
  (yaspl var)
}
(export
  (#:types Module FunctionDefinition ConstantDefinition
           PatternExport TypeExport ValueExport Exports Imports)
  (#:values module-name module-definitions module-constants
            module-exports module-static-info function-definition-name
            module function-definition
            closure-constant bytes-constant variant-descriptor-constant trivial-variant-constant
            pattern-export type-export value-export exports exports-values exports-types
            exports-patterns
            module-imports imports empty-imports imports-static-info)
  (#:patterns function-definition
              closure-constant bytes-constant variant-descriptor-constant trivial-variant-constant
              pattern-export type-export value-export exports imports module))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [definitions : (List FunctionDefinition)]
            [constants : (List ConstantDefinition)]
            [static-info : (Dict TopLevelName TopLevelSignature)]))

  (define-type Imports
    (imports
      [static-info : (Dict TopLevelName TopLevelSignature)]))
  (define-type Exports
    (exports [types : (List TypeExport)]
             [values : (List ValueExport)]
             [patterns : (List PatternExport)]))
  (define-type PatternExport
    (pattern-export [exported-name : Bytes] [sig : PatternSignature]))
  (define-type TypeExport
    (type-export [exported-name : Bytes] [type : Type]))
  (define-type ValueExport
    (value-export [exported-name : Bytes] [top-level-name : TopLevelName] [type : Type]))

  (define-type FunctionDefinition
    (function-definition
      [name : Bytes]
      [type : Type]
      [args : (List Var)]
      [free-vars : (List Var)]
      [next-var : VarNumber]
      [body : Expression]))

  (define-type ConstantDefinition
    (closure-constant [name : Bytes] [fun-name : Bytes])
    (bytes-constant [name : Bytes] [value : Bytes])
    (variant-descriptor-constant [name : Bytes])
    (trivial-variant-constant [name : Bytes] [tag : U8])))

(define (empty-imports) : Imports
  (imports (make-dict top-level-name-cmp)))
