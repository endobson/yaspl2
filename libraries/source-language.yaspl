(module source-language
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values ()
      #:patterns (node symbol-sexp))
    (either
      #:types (Either)
      #:values (right)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty)
      #:patterns (cons empty)))
  (export)
  (types
    (define-type Module
      (module [name Bytes]
              [imports Imports]
              [exports (List Bytes)]
              [types (List TypeDefinition)]
              [definitions (List FunctionDefinition)]))
    ;; TODO make these have the right substructure
    (define-type Imports
      (unparsed-imports [v Sexp]))
    (define-type TypeDefinition
      (unparsed-type-definition [v Sexp]))
    (define-type FunctionDefinition
      (unparsed-function-definition [v Sexp])))

  ;; TODO implement these
  (define (parse-exports/top [sexp : Sexp]) : (List Bytes)
    (empty))
  (define (parse-types/top [sexp : Sexp]) : (List TypeDefinition)
    (empty))


  (define (parse-module [sexp : Sexp]) : (Either Bytes Module)
    (case sexp
      [(node (cons (symbol-sexp #"module")
                   (cons (symbol-sexp name)
                         (cons imports
                               (cons exports
                                     (cons types
                                           definitions))))))
       (right
         (module name
                 (unparsed-imports imports)
                 (parse-exports/top exports)
                 (parse-types/top types)
                 (parse-function-definitions definitions)))]))

  (define (parse-function-definitions [sexps : (List Sexp)]) : (List FunctionDefinition)
    (case sexps
      [(empty) (empty)]
      [(cons sexp sexps)
       (cons (unparsed-function-definition sexp) (parse-function-definitions sexps))])))

