(module source-language
  (import
    (prim
      #:types (Bytes InputPort OutputPort Byte)
      #:values (panic)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexp)
      #:patterns (node symbol-sexp))
    (io write-all-bytes read-all-bytes)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (list
      #:types (List)
      #:values (cons empty map)
      #:patterns (cons empty)))
  (export main)
  (types
    (define-type Module
      (module [name Bytes]
              [imports Imports]
              [exports (List Bytes)]
              [types (List TypeDefinition)]
              [definitions (List FunctionDefinition)]))
    ;; TODO make these have the right substructure
    (define-type Imports
      (unparsed-imports [v Sexp]))
    (define-type TypeDefinition
      (type-definition [name Bytes] [vars (List Bytes)] [variants (List VariantDefinition)]))
    (define-type VariantDefinition
      (variant-definition [name Bytes] [fields (List VariantField)]))
    (define-type VariantField
      (variant-field [name Bytes] [type PreType]))
    (define-type PreType
      (unparsed-pre-type [v Sexp]))
    (define-type FunctionDefinition
      (unparsed-function-definition [v Sexp])))

  (define (parse-exports/top [sexp : Sexp]) : (List Bytes)
    (case sexp
      [(node (cons (symbol-sexp #"export") exported-symbols))
       (map parse-exported-symbol exported-symbols)]
      [_ (panic #"Bad exports")]))

  (define (parse-exported-symbol [sexp : Sexp]) : Bytes
    (case sexp
      [(symbol-sexp bytes) bytes]
      [_ (panic #"Not a valid export")]))



  (define (parse-types/top [sexp : Sexp]) : (List TypeDefinition)
    (case sexp
      [(node (cons (symbol-sexp #"types") type-definitions))
       (map parse-type-definition type-definitions)]
      [_ (panic #"Bad types")]))

  (define (parse-type-definition [sexp : Sexp]) : TypeDefinition
    (case sexp
      [(node (cons (symbol-sexp #"define-type") (cons type-name/vars variants)))
       (type-definition
         #"NYI" ;; TODO (extract-type-name type-name/vars)
         (empty) ;; TODO (extract-type-vars type-name/vars)
         (map parse-variant variants))]
      [_ (panic #"Bad type definition")]))

  (define (parse-variant [sexp : Sexp]) : VariantDefinition
    (case sexp
      [(node (cons (symbol-sexp variant-name) fields))
       (variant-definition variant-name (map parse-variant-field fields))]
      [_ (panic #"Bad variant definition")]))

  (define (parse-variant-field [sexp : Sexp]) : VariantField
    (case sexp
      [(node (cons (symbol-sexp field-name) (cons type (empty))))
       (variant-field field-name (unparsed-pre-type type))]
      [_ (panic #"Bad variant field")]))


  (define (parse-module [sexp : Sexp]) : (Either Bytes Module)
    (case sexp
      [(node (cons (symbol-sexp #"module")
                   (cons (symbol-sexp name)
                         (cons imports
                               (cons exports
                                     (cons types
                                           definitions))))))
       (right
         (module name
                 (unparsed-imports imports)
                 (parse-exports/top exports)
                 (parse-types/top types)
                 (map unparsed-function-definition definitions)))]
      [_ (left #"Bad module form")]))


  (define (a) (extract-either [either : (Either Bytes a)]) : a
    (case either
      [(right v) v]
      [(left b) (panic b)]))

  (define (main [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (case (parse-module (extract-either (parse-sexp (read-all-bytes stdin))))
      [(right _) 0]
      [(left bytes)
       (begin
         (write-all-bytes bytes stderr)
         1)])))

