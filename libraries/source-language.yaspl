#:module (source-language)
#:import {
  (bytes)
  (data source-location)
  (either)
  (list)
  (maybe)
  (module-name)
  (prim)
  (sexp-parser)
  (tuples)
}
(export
  (#:types Module Imports Import Exports Export TypeDefinition VariantDefinition VariantField PreType
           FunctionDefinition FunctionArg Expression CaseClause Pattern Block BlockDefinition)
  (#:values module-name module-types module-definitions parse-module function-definition-name
            function-arg-pattern function-arg-pre-type
            exports-values type-definition-variants var-pre-type fun-pre-type export variant-field-type
            case-clause-body module-exports exports-patterns exports-types
            export-local-name export-exported-name module-imports import-exported-name
            type-definition-name var-expr app-expr function-definition-body
            variant-definition-name variant-field-name case-clause-pattern boolean-literal
            ignore-pattern int-literal case-clause case-expr bytes-pattern bytes-literal block
            variable-pattern import-local-name partial-imports full-imports import
            parse-expression)
  (#:patterns int-literal bytes-literal boolean-literal var-expr if-expr begin-expr app-expr
              varargs-app-expr let-expr lambda-expr case-expr annotated-expr case-clause module
              bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern
              function-definition function-arg variant-definition type-definition variant-field export
              exports import partial-imports block match-def
              var-pre-type fun-pre-type type-app-pre-type full-imports))
(types
  (define-type Module
    (module [name : ModName]
            [imports : (List Imports)]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]))
  (define-type Imports
    (full-imports [module-name : ModName])
    (partial-imports
      [module-name : ModName]
      [types : (List Import)]
      [values : (List Import)]
      [patterns : (List Import)]))
  (define-type Import
    (import [exported-name : Bytes] [local-name : Bytes]))
  (define-type Exports
    (exports [types : (List Export)]
             [values : (List Export)]
             [patterns : (List Export)]))
  (define-type Export
    (export [local-name : Bytes] [exported-name : Bytes]))
  (define-type TypeDefinition
    (type-definition [name : Bytes] [vars : (Maybe (List Bytes))] [variants : (List VariantDefinition)]))
  (define-type VariantDefinition
    (variant-definition [name : Bytes] [fields : (List VariantField)]))
  (define-type VariantField
    (variant-field [name : Bytes] [type : PreType]))
  (define-type PreType
    (var-pre-type [v : Bytes])
    (fun-pre-type [type-vars : (List Bytes)] [args : (List PreType)] [result : PreType])
    (type-app-pre-type [constructor : Bytes] [args : (List PreType)]))
  (define-type FunctionDefinition
    (function-definition [name : Bytes]
                         [type-vars : (List Bytes)]
                         [args : (List FunctionArg)]
                         [return-type : PreType]
                         [body : Block]))
  (define-type Block
    (block [definitions : (List BlockDefinition)] [expr : Expression]))
  (define-type BlockDefinition
    (match-def [pattern : Pattern] [type : (Maybe PreType)] [expr : Expression]))

  (define-type Expression
    (int-literal [v : Int])
    (bytes-literal [v : Bytes])
    (boolean-literal [v : Boolean])
    (var-expr [v : Bytes])
    (annotated-expr [t : PreType] [e : Expression])
    (if-expr [cond : Expression] [true : Expression] [false : Expression])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression])
    (app-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)])
    (varargs-app-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)])
    (let-expr [name : Bytes] [expr : Expression] [body : Block])
    (lambda-expr [args : (List FunctionArg)] [type : (Maybe PreType)] [body : Block])
    (case-expr [expr : Expression] [clauses : (List CaseClause)]))

  (define-type FunctionArg
    (function-arg
      [pattern : Pattern]
      [pre-type : PreType]))

  (define-type CaseClause
    (case-clause [pattern : Pattern] [body : Block]))

  (define-type Pattern
    (bytes-pattern [v : Bytes])
    (int-pattern [v : Int])
    (variable-pattern [v : Bytes])
    (ignore-pattern)
    (abstraction-pattern [name : Bytes] [patterns : (List Pattern)])))

(define [a] (right/bytes [v : a]) : (Either Bytes a)
  (right v))
(define (nothing/pre-type) : (Maybe PreType)
  (nothing))

(define [a b r]
  (either-app2
    [f : (a b -> r)]
    [e1 : (Either Bytes a)]
    [e2 : (Either Bytes b)]) : (Either Bytes r)
  (case e1
    [(left v) (left v)]
    [(right v1)
     (case e2
       [(left v) (left v)]
       [(right v2)
        (right (f v1 v2))])]))

(define [a b c r]
  (either-app3
    [f : (a b c -> r)]
    [e1 : (Either Bytes a)]
    [e2 : (Either Bytes b)]
    [e3 : (Either Bytes c)]) : (Either Bytes r)
  (case e1
    [(left v) (left v)]
    [(right v1)
     (case e2
       [(left v) (left v)]
       [(right v2)
        (case e3
          [(left v) (left v)]
          [(right v3)
           (right (f v1 v2 v3))])])]))

(define (parse-imports [sexps : (List Sexp)]) : (Either Bytes (List Imports))
  (case sexps
    [(empty)
     (right (empty))]
    [(cons (brace-node (cons (node module-name _) import-elems) _) next-imports)
     (case (parse-module-name module-name)
       [(left v) (left v)]
       [(right module-name)
        (case (parse-import-elems module-name import-elems)
          [(left v) (left v)]
          [(right imports)
           (case (parse-imports next-imports)
             [(left err) (left err)]
             [(right importss) (right (cons imports importss))])])])]
    [(cons (node module-name _) next-imports)
     (case (parse-module-name module-name)
       [(left v) (left v)]
       [(right module-name)
        (case (parse-imports next-imports)
          [(left err) (left err)]
          [(right importss) (right (cons (full-imports module-name) importss))])])]
    [_
     (left #"Bad import form")]))


(define (parse-partial-import-items [sexps : (List Sexp)]) : (Either Bytes (List Import))
  (parse-partial-import-items* sexps (empty)))

(define (parse-partial-import-items* [sexps : (List Sexp)] [acc : (List Import)])
  : (Either Bytes (List Import))
  (case sexps
    [(empty)
     (right (reverse acc))]
    [(cons (symbol-sexp name _) sexps)
     (parse-partial-import-items* sexps (cons (import name name) acc))]
    [(cons (bracket-node (cons (symbol-sexp exported-name _) (cons (symbol-sexp local-name _) (empty)))
                         _)
           sexps)
     (parse-partial-import-items* sexps (cons (import exported-name local-name) acc))]
    [_
     (left #"Bad input, invalid partial import item")]))

(define (parse-partial-imports-section [section : Bytes] [sexps : (List Sexp)])
  : (Either Bytes (Tuple2 (List Import) (List Sexp)))
  (case sexps
    [(cons (brace-node (cons (keyword-sexp actual-section _) inner-sexps) _) next-sexps)
     (if (bytes=? actual-section section)
         (case (parse-partial-import-items inner-sexps)
           [(right imports)
            (right (tuple2 imports next-sexps))]
           [(left v)
            (left v)])
         (right (tuple2 (empty) sexps)))]
    [_
     (right (tuple2 (empty) sexps))]))

(define (parse-import-elems [mod-name : ModName] [sexps : (List Sexp)]) : (Either Bytes Imports)
  (case (parse-partial-imports-section #"types" sexps)
    [(left v)
     (left v)]
    [(right (tuple2 types sexps))
     (case (parse-partial-imports-section #"values" sexps)
       [(left v)
        (left v)]
       [(right (tuple2 values sexps))
        (case (parse-partial-imports-section #"patterns" sexps)
          [(left v)
           (left v)]
          [(right (tuple2 patterns sexps))
           (case sexps
             [(empty)
              (right (partial-imports mod-name types values patterns))]
             [_
              (left #"Not a valid imports clause")])])])]))


(define (parse-exports/top [sexp : Sexp]) : (Either Bytes Exports)
  (case sexp
    [(node (cons (symbol-sexp #"export" _) (empty)) _)
     (right (exports (empty) (empty) (empty)))]
    [(node
       (cons (symbol-sexp #"export" _)
         (cons (node (cons (keyword-sexp #"types" _) type-exports) _)
           (cons (node (cons (keyword-sexp #"values" _) value-exports) _)
             (cons (node (cons (keyword-sexp #"patterns" _) pattern-exports) _)
               (empty)))))
       _)
     (case (extract-rights (map parse-exported-symbol type-exports))
       [(left v) (left v)]
       [(right type-names)
        (case (extract-rights (map parse-exported-symbol value-exports))
          [(left v) (left v)]
          [(right value-names)
           (case (extract-rights (map parse-exported-symbol pattern-exports))
             [(left v) (left v)]
             [(right pattern-names)
              (let ([convert (lambda ([name : Bytes]) (export name name))])
                (right (exports
                         (map convert type-names)
                         (map convert value-names)
                         (map convert pattern-names))))])])])]

    [_ (left #"Bad exports")]))

(define (parse-exported-symbol [sexp : Sexp]) : (Either Bytes Bytes)
  (case sexp
    [(symbol-sexp bytes _) (right bytes)]
    [_ (left #"Not a valid export")]))


(define (parse-types/top [sexp : Sexp]) : (Either Bytes (List TypeDefinition))
  (case sexp
    [(node (cons (symbol-sexp #"types" _) type-definitions) _)
     (extract-rights (map parse-type-definition type-definitions))]
    [_ (left #"Bad types")]))

(define (parse-type-definition [sexp : Sexp]) : (Either Bytes TypeDefinition)
  (case sexp
    [(node (cons (symbol-sexp #"define-type" _) (cons type-name/vars variants)) _)
     (case (extract-type-name type-name/vars)
       [(left v) (left v)]
       [(right type-name)
        (case (extract-type-vars type-name/vars)
          [(left v) (left v)]
          [(right type-vars)
           (case (extract-rights (map parse-variant variants))
             [(left v) (left v)]
             [(right variants)
              (right (type-definition type-name type-vars variants))])])])]
    [_ (left #"Bad type definition: expecting (define-type ...)")]))

(define (parse-variant [sexp : Sexp]) : (Either Bytes VariantDefinition)
  (case sexp
    [(node (cons (symbol-sexp variant-name _) fields) _)
     (case (extract-rights (map parse-variant-field fields))
       [(left v) (left v)]
       [(right fields)
        (right (variant-definition variant-name fields))])]
    [_ (left #"Bad variant definition")]))

(define (parse-variant-field [sexp : Sexp]) : (Either Bytes VariantField)
  (case sexp
    [(bracket-node
       (cons (symbol-sexp field-name _) (cons (symbol-sexp #":" _) (cons type (empty))))
       _)
     (case (parse-pre-type type)
       [(left v) (left v)]
       [(right type)
        (right (variant-field field-name type))])]
    [_ (left #"Bad variant field")]))

(define (extract-type-name [sexp : Sexp]) : (Either Bytes Bytes)
  (case sexp
    [(symbol-sexp type-name _)
     (right type-name)]
    [(node (cons (symbol-sexp type-name _) _) _)
     (right type-name)]
    [_ (left #"Bad type-name/vars")]))

(define (extract-type-vars [sexp : Sexp]) : (Either Bytes (Maybe (List Bytes)))
  (case sexp
    [(symbol-sexp _ _)
     (right (nothing))]
    [(node (cons _ type-var-sexps) _)
     (case (extract-rights (map parse-type-var-symbol type-var-sexps))
       [(left v) (left v)]
       [(right type-vars)
        (right (just type-vars))])]
    [_ (left #"Bad type-name/vars")]))

(define (parse-type-var-symbol [sexp : Sexp]) : (Either Bytes Bytes)
  (case sexp
    [(symbol-sexp bytes _) (right bytes)]
    [_ (left #"Not a valid type variable")]))


(define (parse-pre-type [sexp : Sexp]) : (Either Bytes PreType)
  (case sexp
    [(symbol-sexp v _) (right (var-pre-type v))]
    ;; TODO Make function parsing better
    [(node (cons (symbol-sexp #"->" _) (cons result (empty))) _)
     (case (parse-pre-type result)
       [(left v) (left v)]
       [(right result)
        (right (fun-pre-type (empty) (empty) result))])]
    [(node (cons arg1 (cons (symbol-sexp #"->" _) (cons result (empty)))) _)
     (case (parse-pre-type arg1)
       [(left v) (left v)]
       [(right arg1)
        (case (parse-pre-type result)
          [(left v) (left v)]
          [(right result)
           (right (fun-pre-type (empty) (cons arg1 (empty)) result))])])]
    [(node (cons arg1 (cons arg2 (cons (symbol-sexp #"->" _) (cons result (empty))))) _)
     (case (parse-pre-type arg1)
       [(left v) (left v)]
       [(right arg1)
        (case (parse-pre-type arg2)
          [(left v) (left v)]
          [(right arg2)
           (case (parse-pre-type result)
             [(left v) (left v)]
             [(right result)
              (right (fun-pre-type (empty) (cons arg1 (cons arg2 (empty))) result))])])])]
    [(node (cons arg1 (cons arg2 (cons arg3 (cons (symbol-sexp #"->" _) (cons result (empty)))))) _)
     (case (parse-pre-type arg1)
       [(left v) (left v)]
       [(right arg1)
        (case (parse-pre-type arg2)
          [(left v) (left v)]
          [(right arg2)
           (case (parse-pre-type arg3)
             [(left v) (left v)]
             [(right arg3)
              (case (parse-pre-type result)
                [(left v) (left v)]
                [(right result)
                 (right (fun-pre-type (empty) (cons arg1 (cons arg2 (cons arg3 (empty)))) result))])])])])]
    [(node (cons (symbol-sexp constructor _) args) _)
     (case (extract-rights (map parse-pre-type args))
       [(left v) (left v)]
       [(right args)
        (right (type-app-pre-type constructor args))])]
    [_ (left #"Not a valid Type")]))

(define (parse-function-definition [sexp : Sexp]) : (Either Bytes FunctionDefinition)
  (case sexp
    [(node parts _)
     (case parts
       [(cons (symbol-sexp #"define" _) parts)
        (match-define (tuple2 type-vars parts) : (Tuple2 (List Sexp) (List Sexp))
          (case parts
            [(cons (bracket-node type-vars _) parts)
             (tuple2 type-vars parts)]
            [parts
             (tuple2 (empty) parts)]))
        (case parts
          [(cons (node name+args _) parts)
           (case name+args
             [(empty)
              (left #"Invalid function definition: empty name and args.")]
             [(cons (symbol-sexp function-name _) args)
              (parse-function-definition* function-name type-vars args parts)]
             [_
              (left #"Invalid function definition: name is not a symbol")])]
          [_
           (left #"Invalid function definition: couldn't parse name and args.") ])]
       [_
        (left #"Invalid function definition: doesn't start with define.")])]
    [_
     (left #"Invalid function definition: not a node")]))
(define (parse-function-definition*
          [function-name : Bytes]
          [type-vars : (List Sexp)]
          [args : (List Sexp)]
          [parts : (List Sexp)]) : (Either Bytes FunctionDefinition)
  (match-define error
    (lambda ([message : Bytes]) : (Either Bytes FunctionDefinition)
      (left (bytes-append (varargs list #"Invalid function definition '" function-name #"': "
                                   message)))))

  (case (extract-rights (map parse-type-var-symbol type-vars))
    [(left v) (error v)]
    [(right type-vars)
     (case (extract-rights (map parse-arg args))
       [(left v) (error v)]
       [(right parsed-args)
        (case parts
          [(cons (symbol-sexp #":" _) (cons result-type body))
           (case (parse-pre-type result-type)
             [(left v) (error v)]
             [(right result-type)
              (case (parse-block #t body)
                [(left v) (error v)]
                [(right body)
                 (right
                   (function-definition
                     function-name
                     type-vars
                     parsed-args
                     result-type
                     body))])])]
          [_
           (error #"Couldn't parse result type")])])]))

(define (parse-arg [sexp : Sexp]) : (Either Bytes FunctionArg)
  (case sexp
    [(bracket-node (cons pattern (cons (symbol-sexp #":" _) (cons type (empty)))) _)
     (case (parse-pattern pattern)
       [(left v) (left v)]
       [(right pattern)
        (case (parse-pre-type type)
          [(left v) (left v)]
          [(right pre-type)
           (right (function-arg pattern pre-type))])])]
    [_ (left #"Not a valid argument")]))

(define (parse-block [tail-position : Boolean] [sexps : (List Sexp)]) : (Either Bytes Block)
  (parse-block* tail-position sexps (empty)))

(define (parse-block* [tail-position : Boolean] [sexps : (List Sexp)] [rev-defs : (List BlockDefinition)])
  : (Either Bytes Block)
  (case sexps
    [(empty) (left #"Block must have at least one form")]
    [(cons expr (empty))
     (case (parse-expression tail-position expr)
       [(left v) (left v)]
       [(right expr)
        (right (block (reverse rev-defs) expr))])]
    [(cons def sexps)
     (case (parse-block-definition def)
       [(left v) (left v)]
       [(right def)
        (parse-block* tail-position sexps (cons def rev-defs))])]))

(define (parse-block-definition [sexp : Sexp]) : (Either Bytes BlockDefinition)
  (case sexp
    [(node (cons (symbol-sexp #"match-define" _) match-sexps) _)
     (case match-sexps
       [(cons pattern-sexp (cons expr-sexp (empty)))
        (case (parse-pattern pattern-sexp)
          [(left v) (left v)]
          [(right pattern)
           (case (parse-expression #f expr-sexp)
             [(left v) (left v)]
             [(right expr)
              (right (match-def pattern (nothing) expr))])])]
       [(cons pattern-sexp (cons (symbol-sexp #":" _) (cons type-sexp (cons expr-sexp (empty)))))
        (case (parse-pattern pattern-sexp)
          [(left v) (left v)]
          [(right pattern)
           (case (parse-pre-type type-sexp)
             [(left v) (left v)]
             [(right type)
              (case (parse-expression #f expr-sexp)
                [(left v) (left v)]
                [(right expr)
                 (right (match-def pattern (just type) expr))])])])]
       [_
        (left #"Match-define: couldn't be parsed")])]
    [_ (left #"Not a valid block definition")]))

(define (parse-expression [tail-position : Boolean] [sexp : Sexp]) : (Either Bytes Expression)
  (case sexp
    [(number-sexp v _) (right (int-literal v))]
    [(bytes-sexp v _) (right (bytes-literal v))]
    [(boolean-sexp v _) (right (boolean-literal v))]
    [(symbol-sexp v _) (right (var-expr v))]
    [(node (cons (symbol-sexp #"if" _) exprs) _)
     (case exprs
       [(cons cond (cons true (cons false (empty))))
        (either-app3 if-expr
          (parse-expression #f cond)
          (parse-expression tail-position true)
          (parse-expression tail-position false))]
       [_
        (left #"If: requires exactly three expressions")])]
    [(node (cons (symbol-sexp #"if" _) (cons cond (cons true (cons false (empty))))) _)
     (either-app3 if-expr
       (parse-expression #f cond)
       (parse-expression tail-position true)
       (parse-expression tail-position false))]
    [(node (cons (symbol-sexp #"begin" _) exprs) _)
     (case (reverse exprs)
       [(empty)
        (left #"Begin requires at least one expression")]
       [(cons last-expr exprs)
        (either-app2 begin-expr
          (extract-rights (map (lambda ([s : Sexp]) (parse-expression #f s)) (reverse exprs)))
          (parse-expression tail-position last-expr))])]
    [(node (cons (symbol-sexp #"varargs" _) (cons op-expr exprs)) _)
     (case (parse-expression #f op-expr)
       [(left v) (left v)]
       [(right op-expr)
        (case (extract-rights (map (lambda ([s : Sexp]) (parse-expression #f s)) exprs))
          [(left v) (left v)]
          [(right exprs)
           (right (varargs-app-expr tail-position op-expr exprs))])])]
    [(node (cons (symbol-sexp #"let" _) other-sexps) _)
     (parse-let-sexps tail-position other-sexps)]
    [(node (cons (symbol-sexp #"case" _) (cons expr clauses)) _)
     (either-app2 case-expr
       (parse-expression #f expr)
       (extract-rights (map (lambda ([s : Sexp]) (parse-case-clause tail-position s))
                            clauses)))]
    [(node (cons (symbol-sexp #"lambda" _) lambda-sexps) _)
     (parse-lambda-sexps lambda-sexps)]

    [(node (cons (symbol-sexp #"ann" _)
                 (cons pre-type (cons expr (empty)))) _)
     (case (parse-pre-type pre-type)
       [(left v) (left v)]
       [(right pre-type)
        (case (parse-expression tail-position expr)
          [(left v) (left v)]
          [(right expr)
           (right (annotated-expr pre-type expr))])])]
    [(node (cons (symbol-sexp #"match-define" _) _) _)
     (left #"Definitions are not valid expressions")]
    [(node (cons op-expr arg-exprs) _)
     (case (parse-expression #f op-expr)
       [(left v) (left v)]
       [(right op-expr)
        (case (extract-rights (map (lambda ([s : Sexp]) (parse-expression #f s)) arg-exprs))
          [(left v) (left v)]
          [(right arg-exprs)
           (right (app-expr tail-position op-expr arg-exprs))])])]
    [(node (empty) _)
     (left #"Application needs an operator")]
    [(bracket-node _ _)
     (left #"Bracketed nodes are not valid expressions")]
    [(brace-node _ _)
     (left #"Braced nodes are not valid expressions")]
    [(keyword-sexp _ _)
     (left #"Keywords are not valid expressions")]))

(define (parse-let-sexps [tail-position : Boolean] [sexps : (List Sexp)]) : (Either Bytes Expression)
  (case sexps
    [(empty)
     (left #"Let: not enough subparts")]
    [(cons _ (empty))
     (left #"Let: not enough subparts")]
    [(cons _ (cons _ (cons _ _)))
     (left #"Let: too many subparts")]
    [(cons bindings body)
     (case bindings
       [(node bindings-list _)
        (case bindings-list
          [(cons (bracket-node (cons (symbol-sexp name _) (cons expr (empty))) _) (empty))
           (either-app3 let-expr
             (right/bytes name) (parse-expression #f expr) (parse-block tail-position body))]
          [_
           (left #"Let bindings: couldn't be parsed")])]
       [_
        (left #"Let bindings: couldn't be parsed")])]))

(define (parse-lambda-sexps [sexps : (List Sexp)]) : (Either Bytes Expression)
  (case sexps
    [(cons (node arg+tys _)
           (cons (symbol-sexp #":" _)
                 (cons type-expr body)))
     (case (parse-pre-type type-expr)
       [(left v) (left v)]
       [(right pre-type)
        (either-app3 lambda-expr
          (extract-rights (map parse-arg arg+tys))
          (right/bytes (just pre-type))
          (parse-block #t body))])]
    [(cons (node arg+tys _) body)
     (either-app3 lambda-expr
       (extract-rights (map parse-arg arg+tys))
       (right/bytes (nothing/pre-type))
       (parse-block #t body))]
    [_
     (left #"Lambda: couldn't be parsed")]))



(define (parse-case-clause [tail-position : Boolean] [sexp : Sexp]) : (Either Bytes CaseClause)
  (case sexp
    [(bracket-node (cons pattern body) _)
     (either-app2 case-clause (parse-pattern pattern) (parse-block tail-position body))]
    [_ (left #"Not a valid case clause")]))

(define (parse-pattern [sexp : Sexp]) : (Either Bytes Pattern)
  (case sexp
    [(symbol-sexp sym _)
     (right
       (if (starts-with? sym #"_")
           (ignore-pattern)
           (variable-pattern sym)))]
    [(bytes-sexp v _) (right (bytes-pattern v))]
    [(number-sexp v _) (right (int-pattern v))]
    [(node (cons (symbol-sexp name _) patterns) _)
     (either-app2 abstraction-pattern
       (right/bytes name)
       (extract-rights (map parse-pattern patterns)))]
    [_ (left #"Not a valid pattern")]))


(define (parse-module [sexp : (SourceSpanAnnotated (List Sexp))]) : (Either Bytes Module)
  (case sexp
    [(source-span-annotated _ (cons (keyword-sexp #"module" _) bodies))
     (parse-module-inner bodies)]
    [_ (left #"Bad module form")]))

(define (parse-module-inner [bodies : (List Sexp)]) : (Either Bytes Module)
  (case bodies
    [(cons (node module-name-parts _)
           (cons (keyword-sexp #"import" _)
                 (cons (brace-node import-sexps _)
                       (cons exports
                             (cons types
                                   definitions)))))
     (case (parse-module-name module-name-parts)
       [(left v) (left v)]
       [(right module-name)
        (case (parse-imports import-sexps)
          [(left v) (left v)]
          [(right imports)
           (case (parse-exports/top exports)
             [(left v) (left v)]
             [(right exports)
              (case (parse-types/top types)
                [(left v) (left v)]
                [(right types)
                 (case (extract-rights (map parse-function-definition definitions))
                   [(left v) (left v)]
                   [(right defs)
                    (right (module module-name imports exports types defs))])])])])])]
    [_ (left #"Bad module form")]))

(define (parse-module-name [forms : (List Sexp)]) : (Either Bytes ModName)
  (case (extract-justs (map parse-symbol forms))
    [(just vs) (right (mod-name vs))]
    [(nothing) (left #"Bod module name")]))

(define (parse-symbol [form : Sexp]) : (Maybe Bytes)
  (case form
    [(symbol-sexp v _) (just v)]
    [_ (nothing)]))
