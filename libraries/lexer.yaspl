#:module (lexer)
#:import {
  (byte-escapes)
  (bytes)
  (either)
  (list)
  (numbers)
  (prim)
}
(export
  (#:types Lexer Result Lexeme)
  (#:values make-lexer run-lexer lexer-remaining-input)
  (#:patterns end-of-input bad-input lex-result
              symbol-lexeme decimal-number-lexeme hexadecimal-number-lexeme
              left-paren-lexeme right-paren-lexeme
              left-brace-lexeme right-brace-lexeme
              left-bracket-lexeme right-bracket-lexeme comment-lexeme
              bytes-lexeme boolean-lexeme
              keyword-lexeme))
(types
  (define-type Lexer
    (lexer [ctx : LexerContext] [pos : Int]))
  (define-type LexerContext
    (lexer-context
      [bytes : Bytes]))

  (define-type Lexeme
    (left-paren-lexeme)
    (right-paren-lexeme)
    (left-bracket-lexeme)
    (right-bracket-lexeme)
    (left-brace-lexeme)
    (right-brace-lexeme)
    (comment-lexeme)
    (symbol-lexeme [v : Bytes])
    (boolean-lexeme [v : Boolean])
    (bytes-lexeme [v : Bytes])
    (keyword-lexeme [v : Bytes])
    (decimal-number-lexeme [v : Bytes])
    (hexadecimal-number-lexeme [v : Bytes]))

  (define-type Result
    (lex-result [v : Lexeme] [next : Lexer])
    (end-of-input)
    (bad-input [v : Bytes])))

(define (decimal-start-byte? [v : U8]) : Boolean
  (digit? v))
(define (decimal-continue-byte? [v : U8]) : Boolean
  (digit? v))

(define (hexadecimal-byte? [v : U8]) : Boolean
  (or (digit? v)
      (let ([v (u8->s64 v)])
        (or (and (<= 65 v) (<= v 70))
            (and (<= 97 v) (<= v 102))))))

(define (math-symbol? [v : U8]) : Boolean
  (let ([v (u8->s64 v)])
    (or (= v 42)
        (or (= v 43)
            (or (= v 45)
                (= v 47))))))

(define (letter? [v : U8]) : Boolean
  (let ([v (u8->s64 v)])
    (or (and (<= 97 v) (< v 123))
        (and (<= 65 v) (< v 91)))))

(define (lexer-remaining-input [lexer : Lexer]) : Bytes
  (match-define (lexer (lexer-context b) pos) lexer)
  (subbytes b pos (bytes-length b)))

;; Symbol ok values
;; (set-ok! 33)
;; (set-ok! 36 38)
;; (set-ok! 42 43)
;; (set-ok! 45 47)
;; ;(set-ok! 48 57) ;; Only for continue bytes
;; (set-ok! 58)
;; (set-ok! 60 90)
;; (set-ok! 94 95)
;; (set-ok! 97 122)
;; (set-ok! 126)

;; Make this saner
(define (symbol-start-byte? [v : U8]) : Boolean
  (let ([valid #"                                 X  XXX   XX XXX          X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   XX XXXXXXXXXXXXXXXXXXXXXXXXXX   X "])
    (= (u8->s64 (bytes-ref valid (u8->s64 v))) 88)))

;; Make this saner
(define (symbol-continue-byte? [v : U8]) : Boolean
  (let ([valid #"                                 X  XXX   XX XXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   XX XXXXXXXXXXXXXXXXXXXXXXXXXX   X "])
    (= (u8->s64 (bytes-ref valid (u8->s64 v))) 88)))

(define (keyword-continue-byte? [v : U8]) : Boolean
  (or (math-symbol? v)
      (letter? v)))

(define (bytes-continue-byte? [v : U8]) : Boolean
  (let ([int (u8->s64 v)])
    (and (and (<= 32 int) (< int 127))
         (not (double-quote? v)))))

(define (newline? [v : U8]) : Boolean
  (= (u8->s64 v) 10))

(define (space? [v : U8]) : Boolean
  (= (u8->s64 v) 32))

(define (double-quote? [v : U8]) : Boolean
  (= (u8->s64 v) 34))

(define (hash? [v : U8]) : Boolean
  (= (u8->s64 v) 35))

(define (colon? [v : U8]) : Boolean
  (= (u8->s64 v) 58))

(define (semi-colon? [v : U8]) : Boolean
  (= (u8->s64 v) 59))

(define (back-slash? [v : U8]) : Boolean
  (= (u8->s64 v) 92))

(define (lex-symbol [ctx : LexerContext] [start : Int] [cur : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (lex-result (symbol-lexeme (subbytes bytes start cur))
                  (lexer ctx cur))
      (if (symbol-continue-byte? (bytes-ref bytes cur))
          (lex-symbol ctx start (+ 1 cur))
          (lex-result (symbol-lexeme (subbytes bytes start cur))
                      (lexer ctx cur)))))


(define (lex-after-hash [ctx : LexerContext] [pos : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) pos)
      (bad-input #"Input ended with hash")
      (let ([byte (bytes-ref bytes pos)])
        (let ([next-pos (+ 1 pos)])
          (if (colon? byte)
              (lex-keyword ctx next-pos next-pos)
              (if (double-quote? byte)
                  (lex-bytes ctx next-pos next-pos)
                  (if (= (u8->s64 byte) 116)
                      (lex-result (boolean-lexeme #t) (lexer ctx next-pos))
                      (if (= (u8->s64 byte) 102)
                          (lex-result (boolean-lexeme #f) (lexer ctx next-pos))
                          (if (= (u8->s64 byte) 120)
                              (lex-hexadecimal ctx next-pos next-pos)
                              (bad-input #"Unsupported character after hash"))))))))))


(define (lex-keyword [ctx : LexerContext] [start : Int] [cur : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (lex-result (keyword-lexeme (subbytes bytes start cur))
                  (lexer ctx cur))
      (if (keyword-continue-byte? (bytes-ref bytes cur))
          (lex-keyword ctx start (+ 1 cur))
          (lex-result (keyword-lexeme (subbytes bytes start cur))
                      (lexer ctx cur)))))

(define (lex-bytes [ctx : LexerContext] [start : Int] [cur : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (bad-input #"Input ended in the middle of bytes literal")
      (let ([byte (bytes-ref bytes cur)])
        (if (back-slash? byte)
            (let ([cur (+ 1 cur)])
              (let ([byte (bytes-ref bytes cur)])
                (if (= (bytes-length bytes) cur)
                    (bad-input #"Input ended with backslash")
                    (if (or (or (double-quote? byte)
                                (back-slash? byte))
                            (or (= (u8->s64 byte) 110) ;; n
                                (or (= (u8->s64 byte) 114) ;; r
                                    (= (u8->s64 byte) 120)))) ;; x
                        (lex-bytes ctx start (+ 1 cur))
                        (bad-input #"Unknown character after backslash.")))))
            (if (bytes-continue-byte? byte)
                (lex-bytes ctx start (+ 1 cur))
                (if (double-quote? byte)
                    (case (unescape-bytes (subbytes bytes start cur))
                      [(left _) (bad-input #"Bytes literal couldn't be unescaped")]
                      [(right v)
                       (lex-result (bytes-lexeme v) (lexer ctx (+ 1 cur)))])
                    (bad-input (bytes-append (varargs list #"Unsupported character in bytes literal: #x"
                                                           (integer->hex-bytes (u8->s64 byte)))))))))))

(define (lex-decimal [ctx : LexerContext] [start : Int] [cur : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (lex-result (decimal-number-lexeme (subbytes bytes start cur))
                  (lexer ctx cur))
      (if (decimal-continue-byte? (bytes-ref bytes cur))
          (lex-decimal ctx start (+ 1 cur))
          (lex-result (decimal-number-lexeme (subbytes bytes start cur))
                      (lexer ctx cur)))))

(define (lex-hexadecimal [ctx : LexerContext] [start : Int] [cur : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (lex-result (hexadecimal-number-lexeme (subbytes bytes start cur))
                  (lexer ctx cur))
      (if (hexadecimal-byte? (bytes-ref bytes cur))
          (lex-hexadecimal ctx start (+ 1 cur))
          (lex-result (hexadecimal-number-lexeme (subbytes bytes start cur))
                      (lexer ctx cur)))))


(define (lex-line-comment [ctx : LexerContext] [pos : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) pos)
      (lex-result (comment-lexeme) (lexer ctx pos))
      (if (newline? (bytes-ref bytes pos))
          (lex-result (comment-lexeme) (lexer ctx pos))
          (lex-line-comment ctx (+ 1 pos)))))



(define (make-lexer [bytes : Bytes]) : Lexer
  (lexer (lexer-context bytes) 0))

(define (run-lexer [lexer : Lexer]) : Result
  (run (lexer-ctx lexer) (lexer-pos lexer)))

(define (run [ctx : LexerContext] [pos : Int]) : Result
  (match-define bytes (lexer-context-bytes ctx))
  (if (= pos (bytes-length bytes))
      (end-of-input)
      (let ([byte/u8 (bytes-ref bytes pos)])
        (let ([byte (u8->s64 byte/u8)])
          (if (= byte 40)
              (lex-result (left-paren-lexeme) (lexer ctx (+ pos 1)))
              (if (= byte 41)
                  (lex-result (right-paren-lexeme) (lexer ctx (+ pos 1)))
                  (if (= byte 91)
                      (lex-result (left-bracket-lexeme) (lexer ctx (+ pos 1)))
                      (if (= byte 93)
                          (lex-result (right-bracket-lexeme) (lexer ctx (+ pos 1)))
                          (if (= byte 123)
                              (lex-result (left-brace-lexeme) (lexer ctx (+ pos 1)))
                              (if (= byte 125)
                                  (lex-result (right-brace-lexeme) (lexer ctx (+ pos 1)))
                                  (if (or (newline? byte/u8) (space? byte/u8))
                                      (run ctx (+ 1 pos))
                                      (if (symbol-start-byte? byte/u8)
                                          (lex-symbol ctx pos (+ pos 1))
                                          (if (decimal-start-byte? byte/u8)
                                              (lex-decimal ctx pos (+ pos 1))
                                              (if (hash? (u8 byte))
                                                  (lex-after-hash ctx (+ pos 1))
                                                  (if (semi-colon? byte/u8)
                                                      (lex-line-comment ctx (+ pos 1))
                                                      (if (double-quote? byte/u8)
                                                          (bad-input #"String literals not supported")
                                                          (bad-input
                                                            (bytes-append
                                                              (varargs list
                                                                #"Unsupported character at start "
                                                                #"of lexeme #x"
                                                                (integer->hex-bytes
                                                                  byte))))))))))))))))))))
