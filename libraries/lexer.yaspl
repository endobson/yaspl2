#:module (lexer)
#:import {
  (bytes)
  (data range-map)
  (data source-location)
  (maybe)
  (prim)
}
(export
  (#:types Lexer Result LexerContext InnerResult)
  (#:values make-lexer run-lexer lexer-remaining-input
            lexer-context-get-span
            lexer-context-bytes
            lex-result/inner bad-input/inner end-of-input/inner)
  (#:patterns end-of-input bad-input lex-result))
(types
  (define-type (Lexer V)
    (lexer [ctx : LexerContext] [pos : Int]
           [impl : (LexerContext Int -> (InnerResult V))]))
  (define-type LexerContext
    (lexer-context
      [bytes : Bytes]
      [source : Source]
      [line-start-map : (IntRangeMap LineStart)]))
  (define-type LineStart
    (line-start [line-number : Int] [start-pos : Int]))

  (define-type (InnerResult V)
    (lex-result/inner [v : (SourceSpanAnnotated V)] [next-pos : Int])
    (end-of-input/inner [v : SourceSpan])
    (bad-input/inner [v : Bytes] [source : SourceSpan]))

  (define-type (Result V)
    (lex-result [v : (SourceSpanAnnotated V)] [next : (Lexer V)])
    (end-of-input [v : SourceSpan])
    (bad-input [v : Bytes] [source : SourceSpan])))

(define (newline? [v : U8]) : Boolean
  (= (u8->s64 v) 10))

(define [V] (lexer-remaining-input [lexer : (Lexer V)]) : Bytes
  (match-define (lexer (lexer-context b _ _) pos _) lexer)
  (subbytes b pos (bytes-length b)))

(define (lexer-context-get-span [ctx : LexerContext] [start : Int] [end : Int])
  : SourceSpan
  (match-define (lexer-context _ source line-map) ctx)
  (case (int-range-map-lookup line-map start)
    [(nothing) (panic #"No line number for start")]
    [(just (line-start start-line start-line-start))
     (case (int-range-map-lookup line-map end)
       [(nothing) (panic #"No line number for end")]
       [(just (line-start end-line end-line-start))
        (source-span source start-line (+ (- start start-line-start) 1)
                     end-line (+ (- end end-line-start) 1))])]))


(define [V] (make-lexer [sbytes : SourcedBytes] [impl : (LexerContext Int -> (InnerResult V))])
  : (Lexer V)
  (match-define (sourced-bytes source contents) sbytes)
  (lexer (lexer-context contents source (make-line-start-map contents)) 0 impl))

(define [V] (run-lexer [l : (Lexer V)]) : (Result V)
  (match-define (lexer ctx pos impl) l)
  (case (impl ctx pos)
    [(lex-result/inner v next-pos) (lex-result v (lexer ctx next-pos impl))]
    [(end-of-input/inner v) (end-of-input v)]
    [(bad-input/inner v source) (bad-input v source)]))

(define (make-line-start-map [bytes : Bytes]) : (IntRangeMap LineStart)
  (make-line-start-map* bytes 1 0 0 (make-int-range-map)))

(define (make-line-start-map*
          [bytes : Bytes] [line : Int] [start-of-line : Int] [pos : Int] [acc : (IntRangeMap LineStart)])
  : (IntRangeMap LineStart)
  (if (= pos (bytes-length bytes))
      (int-range-map-set acc (clopen-int-range start-of-line (+ pos 1)) (line-start line start-of-line))
      (let ([byte (bytes-ref bytes pos)])
        (let ([next-pos (+ 1 pos)])
          (if (newline? byte)
              (make-line-start-map*
                bytes (+ 1 line) next-pos next-pos
                (int-range-map-set acc (clopen-int-range start-of-line next-pos)
                                   (line-start line start-of-line)))
              (make-line-start-map* bytes line start-of-line next-pos acc))))))
