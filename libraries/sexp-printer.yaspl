(module sexp-printer
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (bytes bytes-append)
    (list
      #:types (List)
      #:values (cons empty map)
      #:patterns (cons empty))
    (join-list
      #:types (JoinList)
      #:values (single-jl jl->list join-list cons-jl snoc-jl list->jl append-jl empty-jl)
      #:patterns ())
    (numbers integer->decimal-bytes)
    (sexp-parser
      #:types (Sexp)
      #:values ()
      #:patterns (node symbol-sexp bytes-sexp keyword-sexp boolean-sexp number-sexp
                  bracket paren)))
  (export
    #:types ()
    #:values (print-sexp)
    #:patterns ())
  (types)

  (define (print-sexp [sexp : Sexp]) : Bytes
    (bytes-append (jl->list (print-sexp* sexp))))


  (define (print-sexp* [sexp : Sexp]) : (JoinList Bytes)
    (case sexp
      [(boolean-sexp v) (single-jl (if v #"#t" #"#f"))]
      [(bytes-sexp v) (varargs join-list #"#\"" v #"\"")]
      [(keyword-sexp v) (varargs join-list #"#:" v)]
      [(symbol-sexp v) (single-jl v)]
      [(number-sexp v) (single-jl (integer->decimal-bytes v))]
      [(node v)
       (cons-jl
         #"("
         (snoc-jl
           (concat-jl (join (map print-sexp* v) (single-jl #" ")))
           #")"))]))

  (define (a) (concat-jl [l : (List (JoinList a))]) : (JoinList a)
    (case l
      [(empty) (empty-jl)]
      [(cons e l) (append-jl e (concat-jl l))]))

  (define (a) (join [vs : (List a)] [sep : a]) : (List a)
    (case vs
      [(empty) (empty)]
      [(cons v vs)
       (cons v (join* vs sep))]))

  (define (a) (join* [vs : (List a)] [sep : a]) : (List a)
    (case vs
      [(empty) (empty)]
      [(cons v vs)
       (cons sep (cons v (join* vs sep)))])))
