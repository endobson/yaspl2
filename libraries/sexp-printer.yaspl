#:module (sexp-printer)
#:import {
  (bytes)
  (formats sexp)
  (join-list)
  (list)
  (numbers)
  (prim)
}
(export
  (#:types Sexp/P)
  (#:values
    print-sexp print-sexp*
    node/p bytes-sexp/p number-sexp/p boolean-sexp/p symbol-sexp/p bracket-node/p)
  (#:patterns
    node/p brace-node/p bracket-node/p
    boolean-sexp/p bytes-sexp/p keyword-sexp/p number-sexp/p symbol-sexp/p))
(types
  (define-type Sexp/P
    (node/p [list : (List Sexp/P)])
    (bracket-node/p [list : (List Sexp/P)])
    (brace-node/p [list : (List Sexp/P)])
    (symbol-sexp/p [bytes : Bytes])
    (bytes-sexp/p [bytes : Bytes])
    (keyword-sexp/p [bytes : Bytes])
    (boolean-sexp/p [v : Boolean])
    (number-sexp/p [byte : Int])))

(define (print-sexp [sexp : Sexp/P]) : Bytes
  (bytes-append (jl->list (print-sexp/jl sexp))))
(define (print-sexp* [sexp : Sexp]) : Bytes
  (print-sexp (sexp/drop-source sexp)))

(define (sexp/drop-source [s : Sexp]) : Sexp/P
  (case s
    [(node vs _) (node/p (map sexp/drop-source vs))]
    [(bracket-node vs _) (bracket-node/p (map sexp/drop-source vs))]
    [(brace-node vs _) (brace-node/p (map sexp/drop-source vs))]
    [(symbol-sexp v _) (symbol-sexp/p v)]
    [(bytes-sexp v _) (bytes-sexp/p v)]
    [(keyword-sexp v _) (keyword-sexp/p v)]
    [(boolean-sexp v _) (boolean-sexp/p v)]
    [(number-sexp v _) (number-sexp/p v)]))

(define (print-sexp/jl [sexp : Sexp/P]) : (JoinList Bytes)
  (case sexp
    [(boolean-sexp/p v) (single-jl (if v #"#t" #"#f"))]
    [(bytes-sexp/p v) (varargs join-list #"#\"" v #"\"")]
    [(keyword-sexp/p v) (varargs join-list #"#:" v)]
    [(symbol-sexp/p v) (single-jl v)]
    [(number-sexp/p v) (single-jl (integer->decimal-bytes v))]
    [(node/p v)
     (cons-jl
       #"("
       (snoc-jl
         (concat-jl (interleave (map print-sexp/jl v) (single-jl #" ")))
         #")"))]
    [(bracket-node/p v)
     (cons-jl
       #"["
       (snoc-jl
         (concat-jl (interleave (map print-sexp/jl v) (single-jl #" ")))
         #"]"))]
    [(brace-node/p v)
     (cons-jl
       #"{"
       (snoc-jl
         (concat-jl (interleave (map print-sexp/jl v) (single-jl #" ")))
         #"}"))]))
