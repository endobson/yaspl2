#:module (assembler)
#:import {
  (bytes)
  (either)
  (join-list)
  (list)
  (maybe)
  (prim)
  (set)
  (tuples)
  (yaspl x86-64-assembly)
  (yaspl x86-64-instruction-assembler)
}
(export
  #:types (AssembledSection Relocation DefinedSymbol)
  #:values (assemble-text-section assemble-const-section
            relocation-symbol
            defined-symbol< defined-symbol-name)
  #:patterns (branch-relocation signed-relocation))
(types
  (define-type AssembledSection
    (assembled-section
      [content : Bytes]
      [relocations : (List Relocation)]
      [defined-symbols : (List DefinedSymbol)]))
  (define-type Relocation
    (relocation
      [kind : RelocationKind] [offset : Int] [symbol : Bytes]))

  ;; branch-relocation and signed relocation are treated exactly the same, but are still distinquished
  ;; in the object file.
  (define-type RelocationKind
    (branch-relocation)
    (signed-relocation)
    (unsigned-relocation))

  (define-type DefinedSymbol
    (defined-symbol [name : Bytes] [offset : Int])))

(define (defined-symbol< [x : DefinedSymbol] [y : DefinedSymbol]) : Boolean
  (bytes< (defined-symbol-name x) (defined-symbol-name y)))

(define (assemble-text-commands [commands : (List MCCommand)]) : Bytes
  (bytes-append
    (map
      (lambda ([command : MCCommand]) : Bytes
        (case command
          [(mc-bytes bytes) bytes]
          [(mc-branch-relocation symbol) #""]
          [(mc-signed-relocation symbol) #""]))
      commands)))

(define (fragments->mc-commands [fragments : (List TextFragment)]) : (List MCCommand)
  (jl->list
    (concat-map-jl
      (lambda ([fragment : TextFragment]) : (JoinList MCCommand)
        (case fragment
          [(function-fragment name sections)
           (concat-map-jl
             (lambda ([s : Section])
               (case s
                 [(section blocks)
                  (concat-map-jl
                    (lambda ([bb : BasicBlock])
                      (case bb
                        [(basic-block block-name instructions)
                         (concat-map-jl instruction->mc-commands instructions)]))
                    (list->jl blocks))]))
             (list->jl sections))]))
      (list->jl fragments))))

(define (compute-text-section-relocations [commands : (List MCCommand)])
  : (List Relocation)
  (compute-text-section-relocations* commands (empty) 0))

(define (compute-text-section-relocations*
          [commands : (List MCCommand)]
          [acc : (List Relocation)]
          [offset : Int])
  : (List Relocation)
  (case commands
    [(empty) acc]
    [(cons command commands)
     (case command
       [(mc-bytes bytes)
        (compute-text-section-relocations* commands acc (+ (bytes-length bytes) offset))]
       [(mc-branch-relocation name)
        (compute-text-section-relocations*
          commands
          (cons (relocation (branch-relocation) offset name) acc)
          offset)]
       [(mc-signed-relocation name)
        (compute-text-section-relocations*
          commands
          (cons (relocation (signed-relocation) offset name) acc)
          offset)])]))


(define (collect-global-symbols [fragments : (List TextFragment)]) : (Set Bytes)
  (set-add-all
    (make-set bytes-cmp)
    (map
      (lambda ([f : TextFragment])
        (case f
          [(function-fragment name _) name]))
      fragments)))

(define (collect-defined-text-symbols [fragments : (List TextFragment)])
  : (List DefinedSymbol)
  (collect-defined-text-symbols* fragments 0 (empty)))


(define (collect-defined-text-symbols*
          [fragments : (List TextFragment)]
          [text-offset : Int]
          [acc : (List DefinedSymbol)])
  : (List DefinedSymbol)
  (case fragments
    [(empty) acc]
    [(cons fragment fragments)
     (case fragment
       [(function-fragment name sections)
        (collect-defined-symbols/blocks
          (append* (map section-blocks sections))
          fragments text-offset acc)])]))

(define (collect-defined-symbols/blocks
          [blocks : (List BasicBlock)]
          [fragments : (List TextFragment)]
          [text-offset : Int]
          [acc : (List DefinedSymbol)])
  : (List DefinedSymbol)
  (case blocks
    [(empty)
     (collect-defined-text-symbols* fragments text-offset acc)]
    [(cons (basic-block block-name instructions) blocks)
     (collect-defined-symbols/blocks
       blocks fragments
       (+ text-offset (sum (map instruction-length (jl->list instructions))))
       (cons (defined-symbol block-name text-offset) acc))]))

(define (command-length [command : MCCommand]) : Int
  (case command
    [(mc-bytes bytes) (bytes-length bytes)]
    [(mc-branch-relocation symbol) 0]
    [(mc-signed-relocation symbol) 0]))

(define (instruction-length [inst : Instruction]) : Int
  (foldl + (map command-length (jl->list (instruction->mc-commands inst))) 0))

(define (partition-text-section-relocations
          [relocations : (List Relocation)]
          [local-acc : (List Relocation)]
          [global-acc : (List Relocation)]
          [defined-symbols : (Set Bytes)])
  : (Tuple2 (List Relocation) (List Relocation))
  (case relocations
    [(empty) (tuple2 local-acc global-acc)]
    [(cons reloc relocations)
     (match-define local (set-member? defined-symbols (relocation-symbol reloc)))
     (partition-text-section-relocations
       relocations
       (if local (cons reloc local-acc) local-acc)
       (if local global-acc (cons reloc global-acc))
       defined-symbols)]))

(define (apply-local-text-relocations
          [relocs : (List Relocation)]
          [symbols : (List DefinedSymbol)]
          [text : Bytes]) : Void
  (case relocs
    [(empty) (void)]
    [(cons (relocation _ offset symbol) relocs)
     (begin
        (case (find/maybe (lambda ([x : DefinedSymbol]) : (Maybe Int)
                            (case x
                              [(defined-symbol name offset)
                               (if (bytes=? symbol name)
                                   (just offset)
                                   (nothing))])) symbols)
          [(nothing)
           (panic #"Bad local relocation")]
          [(just symbol-offset)
           (bytes-set!/quad-le
             text
             offset
             (u32 (- (- symbol-offset offset) 4)))])
       (apply-local-text-relocations relocs symbols text))]))

(define (assemble-text-section [text-fragments : (List TextFragment)]) : AssembledSection
  (match-define commands (fragments->mc-commands text-fragments))
  (match-define text-section-relocations (compute-text-section-relocations commands))
  (match-define defined-text-symbols
    (collect-defined-text-symbols text-fragments))
  (match-define defined-text-symbol-names
    (set-add-all
      (make-set bytes-cmp)
      (map
        defined-symbol-name
        (collect-defined-text-symbols text-fragments))))
  (match-define text-bytes
    (assemble-text-commands commands))
  (match-define (tuple2 local-text-section-relocations global-text-section-relocations)
    (partition-text-section-relocations text-section-relocations (empty) (empty)
                                        defined-text-symbol-names))
  (match-define global-symbols (collect-global-symbols text-fragments))
  (match-define global-defined-text-symbols
    (filter
      (lambda ([d : DefinedSymbol])
        (case d
          [(defined-symbol name _) (set-member? global-symbols name)]))
      defined-text-symbols))

  (begin
    (apply-local-text-relocations local-text-section-relocations defined-text-symbols text-bytes)
    (assembled-section
      text-bytes
      global-text-section-relocations
      global-defined-text-symbols)))

(define (compute-const-section-relocations [fragments : (List ConstFragment)])
  : (List Relocation)
  (compute-const-section-relocations-helper
    0
    (jl->list
      (concat-map-jl
        (lambda ([fragment : ConstFragment]) : (JoinList (Either Int Bytes))
          (case fragment
            [(address-fragment _ value)
             (varargs join-list (right value) (left 8))]
            [(bytes-fragment _ _) (empty-jl)]))
        (list->jl fragments)))))

(define (compute-const-section-relocations-helper [offset : Int]
                                                  [pieces : (List (Either Int Bytes))])
  : (List Relocation)
  (case pieces
    [(empty) (empty)]
    [(cons (left v) pieces)
     (compute-const-section-relocations-helper (+ v offset) pieces)]
    [(cons (right value) pieces)
     (cons (relocation (unsigned-relocation) offset value)
           (compute-const-section-relocations-helper offset pieces))]))

(define (assemble-const-section-bytes [fragments : (List ConstFragment)]) : Bytes
  (bytes-append
    (jl->list
      (concat-map-jl
        (lambda ([fragment : ConstFragment]) : (JoinList Bytes)
          (case fragment
            [(address-fragment name value)
             (single-jl (varargs bytes 0 0 0 0 0 0 0 0))]
            [(bytes-fragment name value)
             (let ([length-buf (make-bytes 8)])
               (begin
                 (bytes-set!/eight-bytes-le length-buf 0 (int->eight-bytes-le (bytes-length value)))
                 (varargs join-list length-buf value)))]))
        (list->jl fragments)))))


(define (collect-defined-const-symbols [fragments : (List ConstFragment)])
  : (List DefinedSymbol)
  (collect-defined-const-symbols* fragments 0 (empty)))

(define (collect-defined-const-symbols*
          [fragments : (List ConstFragment)]
          [const-offset : Int]
          [acc : (List DefinedSymbol)])
  : (List DefinedSymbol)
  (case fragments
    [(empty) acc]
    [(cons fragment fragments)
     (case fragment
       [(address-fragment name value)
        (collect-defined-const-symbols*
          fragments (+ const-offset 8)
          (cons (defined-symbol name const-offset) acc))]
       [(bytes-fragment name value)
        (collect-defined-const-symbols*
          fragments (+ const-offset (+ 8 (bytes-length value)))
          (cons (defined-symbol name const-offset) acc))])]))

(define (assemble-const-section [fragments : (List ConstFragment)]) : AssembledSection
  (assembled-section
    (assemble-const-section-bytes fragments)
    (compute-const-section-relocations fragments)
    (collect-defined-const-symbols fragments)))
