#:module (assembler)
#:import {
  (aligned-bytes)
  (bytes)
  (join-list)
  (list)
  (maybe)
  (numbers)
  (prim)
  (set)
  (structured-mach-o)
  (tuples)
  (yaspl x86-64-assembly)
  (yaspl x86-64-instruction-assembler)
}
(export
  #:types ()
  #:values (assemble-text-segment assemble-text-section assemble-const-section)
  #:patterns ())
(types
  (define-type EMCCommand
    (emc-mc [command : MCCommand])
    (emc-global-symbol [name : Bytes])
    (emc-local-symbol [name : Bytes])))

(define (assemble-text-segment [fragments : AssemblyFragments])
  : (Tuple2 TextSegmentSection TextSegmentSection)
  (match-define (assembly-fragments text-fragments const-fragments) fragments)
  (tuple2
    (assemble-text-section text-fragments)
    (assemble-const-section const-fragments)))


(define (fragments->mc-commands [fragments : (List TextFragment)]) : (List EMCCommand)
  (jl->list
    (concat-map-jl
      (lambda ([fragment : TextFragment]) : (JoinList EMCCommand)
        (case fragment
          [(function-fragment fun-name sections)
           (cons-jl
             (emc-global-symbol fun-name)
             (concat-map-jl
               (lambda ([s : Section])
                 (case s
                   [(section blocks)
                    (concat-map-jl
                      (lambda ([bb : BasicBlock])
                        (case bb
                          [(basic-block block-name instructions)
                           (cons-jl
                             (emc-local-symbol block-name)
                             (map-jl emc-mc (concat-map-jl instruction->mc-commands instructions)))]))
                      (list->jl blocks))]))
               (list->jl sections)))]))
      (list->jl fragments))))

(define (partition-text-section-relocations
          [relocations : (List Relocation)]
          [local-acc : (List Relocation)]
          [global-acc : (List Relocation)]
          [defined-symbols : (Set Bytes)])
  : (Tuple2 (List Relocation) (List Relocation))
  (case relocations
    [(empty) (tuple2 local-acc global-acc)]
    [(cons reloc relocations)
     (match-define local (set-member? defined-symbols (relocation-symbol reloc)))
     (partition-text-section-relocations
       relocations
       (if local (cons reloc local-acc) local-acc)
       (if local global-acc (cons reloc global-acc))
       defined-symbols)]))

(define (apply-local-text-relocations
          [relocs : (List Relocation)]
          [symbols : (List DefinedSymbol)]
          [text : Bytes]) : Void
  (case relocs
    [(empty) (void)]
    [(cons (relocation _ offset symbol) relocs)
     (begin
        (case (find/maybe (lambda ([x : DefinedSymbol]) : (Maybe Int)
                            (case x
                              [(defined-symbol name offset)
                               (if (bytes=? symbol name)
                                   (just offset)
                                   (nothing))])) symbols)
          [(nothing)
           (panic #"Bad local relocation")]
          [(just symbol-offset)
           (bytes-set!/s32-le
             text
             offset
             (s32 (- (- symbol-offset offset) 4)))])
       (apply-local-text-relocations relocs symbols text))]))

(define (text-section-fold
          [commands : (List EMCCommand)]
          [global-symbols : (List DefinedSymbol)]
          [reversed-contents : (List Bytes)]
          [offset : Int]
          [max-alignment : Int]
          [defined-symbols : (List DefinedSymbol)]
          [relocations : (List Relocation)]) : TextSegmentSection
  (case commands
    [(cons (emc-mc (mc-bytes bytes)) commands)
     (text-section-fold
       commands
       global-symbols
       (cons bytes reversed-contents)
       (+ offset (bytes-length bytes))
       max-alignment
       defined-symbols
       relocations)]
    [(cons (emc-mc (mc-branch-relocation symbol)) commands)
     (text-section-fold
       commands
       global-symbols
       (cons #"\x00\x00\x00\x00" reversed-contents)
       (+ offset 4)
       max-alignment
       defined-symbols
       (cons (relocation (branch-relocation) offset symbol) relocations))]
    [(cons (emc-mc (mc-signed-relocation symbol)) commands)
     (text-section-fold
       commands
       global-symbols
       (cons #"\x00\x00\x00\x00" reversed-contents)
       (+ offset 4)
       max-alignment
       defined-symbols
       (cons (relocation (signed-relocation) offset symbol) relocations))]
    [(cons (emc-global-symbol symbol) commands)
     (text-section-fold
       commands
       (cons (defined-symbol symbol offset) global-symbols)
       reversed-contents
       offset
       max-alignment
       defined-symbols
       relocations)]
    [(cons (emc-local-symbol symbol) commands)
     (text-section-fold
       commands
       global-symbols
       reversed-contents
       offset
       max-alignment
       (cons (defined-symbol symbol offset) defined-symbols)
       relocations)]
    [(empty)
     (match-define defined-symbol-names
       (set-add-all
         (make-set bytes-cmp)
         (map defined-symbol-name defined-symbols)))

     (match-define (tuple2 local-text-section-relocations global-text-section-relocations)
       (partition-text-section-relocations relocations (empty) (empty)
                                           defined-symbol-names))
     (match-define text-bytes (bytes-append (reverse reversed-contents)))
     (begin
       (apply-local-text-relocations local-text-section-relocations defined-symbols text-bytes)
       (text-segment-section
         (aligned-bytes text-bytes max-alignment)
         global-text-section-relocations
         global-symbols))]))

(define (assemble-text-section [text-fragments : (List TextFragment)]) : TextSegmentSection
  (text-section-fold (fragments->mc-commands text-fragments) (empty) (empty) 0 0 (empty) (empty)))

(define (const-section-fold
          [fragments : (List ConstFragment)]
          [reversed-contents : (List Bytes)]
          [offset : Int]
          [max-alignment : Int]
          [symbols : (List DefinedSymbol)]
          [relocations : (List Relocation)]) : TextSegmentSection
  (case fragments
    [(empty)
     (text-segment-section
       (aligned-bytes (bytes-append (reverse reversed-contents)) max-alignment)
       relocations
       symbols)]
    [(cons (address-fragment name value) fragments)
     (match-define alignment 3)
     (match-define aligned-offset (round-up offset (logical-shift-left 1 alignment)))
     (match-define reversed-contents
       (if (= aligned-offset offset)
           reversed-contents
           (cons (make-bytes (- aligned-offset offset)) reversed-contents)))
     (const-section-fold
       fragments
       (cons (varargs bytes 0 0 0 0 0 0 0 0) reversed-contents)
       (+ aligned-offset 8)
       (max alignment max-alignment)
       (cons (defined-symbol name aligned-offset) symbols)
       (cons (relocation (unsigned-relocation) aligned-offset value) relocations))]
    [(cons (bytes-fragment name value) fragments)
     (const-section-fold
       fragments
       (cons value reversed-contents)
       (+ offset (bytes-length value))
       max-alignment
       (cons (defined-symbol name offset) symbols)
       relocations)]))

(define (assemble-const-section [fragments : (List ConstFragment)]) : TextSegmentSection
  (const-section-fold fragments (empty) 0 0 (empty) (empty)))
