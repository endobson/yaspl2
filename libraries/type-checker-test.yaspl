#:module (type-checker-test)
#:import {
  (bytes)
  (data source-location)
  (dict)
  (either)
  (join-list)
  (list)
  (maybe)
  (prim)
  (tuples)
  (type-checker)
  (type-checker-context)
  (types)
  (types-test-utils)
  (yaspl languages resolved-types-language)
  (yunit)
}
(export
  (#:values main))
(types)

(define (check-arbu
          [tvars : (List Bytes)]
          [result-type : Type]
          [expected-type : (Maybe Type)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (attempt-result-based-unification tvars result-type expected-type)
      [(nothing)
       (just (failure #"Couldn't unify"))]
      [(just _) (nothing)])))


(define (check-type-check
          [expr : Expression]
          [context : Context]
          [expected-type : (Maybe Type)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (type-check/expr expr context expected-type)
      [(left errors)
       (case (jl->list errors)
         [(empty) (panic #"Bad errors")]
         [(cons (local-type-check-error v _) _)
          (just (failure v))])]
      [(right _) (nothing)])))

(define (check-type-check/fail
          [expr : Expression]
          [context : Context]
          [expected-type : (Maybe Type)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (type-check/expr expr context expected-type)
      [(left _) (nothing)]
      [(right _) (just (failure #"Typecheck succeeded when it shouldn't have"))])))

(define (test-source-span) : SourceSpan
  (source-span (unnamed-source) 0 0 0 0))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"attempt-rbu (a) (List a) (just (List a))"
        (check-arbu
          (varargs list #"a")
          (list-type (var-type #"a"))
          (just (list-type (var-type #"a")))))
      (new-test-case #"attempt-rbu (a) (List a) (just (List b))"
        (check-arbu
          (varargs list #"a")
          (list-type (var-type #"a"))
          (just (list-type (var-type #"b")))))
      (new-test-case #"type-check: reverse"
        (check-type-check
          (app-expr
            #t
            (var-expr (identifier #"helper" (test-source-span)))
            (varargs list
              (var-expr (identifier #"l" (test-source-span)))
              (app-expr #f (var-expr (identifier #"empty" (test-source-span))) (empty) (test-source-span)))
            (test-source-span))
          (context
            (dict-add-all
              (make-dict bytes-cmp)
              (varargs list
                (tuple2
                  #"helper"
                  (fun-type
                    (varargs list #"a")
                    (varargs list
                      (list-type (var-type #"a"))
                      (list-type (var-type #"a")))
                    (list-type (var-type #"a"))))
                (tuple2 #"l" (list-type (var-type #"a")))
                (tuple2 #"empty"
                  (fun-type
                    (varargs list #"a")
                    (empty)
                    (list-type (var-type #"a"))))))
            (make-dict bytes-cmp)
            (make-dict bytes-cmp))
          (just (list-type (var-type #"a")))))
      (new-test-case #"type-check: two different case branches"
        (check-type-check/fail
          (case-expr (bytes-literal #"input" (test-source-span))
            (varargs list
              (case-clause (bytes-pattern #"v1" (test-source-span))
                           (block (empty) (int-literal 1 (test-source-span))))
              (case-clause (ignore-pattern (test-source-span))
                           (block (empty) (boolean-literal #f (test-source-span)))))
            (test-source-span))
          (context
            (make-dict bytes-cmp)
            (make-dict bytes-cmp)
            (make-dict bytes-cmp))
          (nothing)))
      )))
