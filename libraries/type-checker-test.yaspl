#:module (type-checker-test)
#:import {
  (bytes) {
    #:values
      bytes=?
  }
  (dict) {
    #:values
      dict-add-all
      make-dict
  }
  (either) {
    #:patterns
      left
      right
  }
  (list) {
    #:types
      List
    #:values
      empty
      list
  }
  (maybe) {
    #:types
      Maybe
    #:values
      just
      nothing
    #:patterns
      just
      nothing
  }
  (prim) {
    #:types
      Array
      Bytes
      InputPort
      Int
      OutputPort
  }
  (source-language) {
    #:types
      Expression
    #:values
      app-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      ignore-pattern
      int-literal
      var-expr
  }
  (tuples) {
    #:values
      tuple2
  }
  (type-checker) {
    #:values
      attempt-result-based-unification
      type-check/expr
  }
  (type-checker-context) {
    #:types
      Context
    #:values
      context
  }
  (types) {
    #:types
      Type
    #:values
      fun-type
      var-type
  }
  (types-test-utils) {
    #:values
      list-type
  }
  (yunit) {
    #:types
      FailedAssertion
    #:values
      failure
      new-test-case
      yunit/main
  }
}
(export)
(types)

(define (check-arbu
          [tvars : (List Bytes)]
          [result-type : Type]
          [expected-type : (Maybe Type)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (attempt-result-based-unification tvars result-type expected-type)
      [(nothing)
       (just (failure #"Couldn't unify"))]
      [(just _) (nothing)])))


(define (check-type-check
          [expr : Expression]
          [context : Context]
          [expected-type : (Maybe Type)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (type-check/expr expr context expected-type)
      [(left v) (just (failure v))]
      [(right v) (nothing)])))

(define (check-type-check/fail
          [expr : Expression]
          [context : Context]
          [expected-type : (Maybe Type)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (type-check/expr expr context expected-type)
      [(left v) (nothing)]
      [(right v) (just (failure #"Typecheck succeeded when it shouldn't have"))])))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"attempt-rbu (a) (List a) (just (List a))"
        (check-arbu
          (varargs list #"a")
          (list-type (var-type #"a"))
          (just (list-type (var-type #"a")))))
      (new-test-case #"attempt-rbu (a) (List a) (just (List b))"
        (check-arbu
          (varargs list #"a")
          (list-type (var-type #"a"))
          (just (list-type (var-type #"b")))))
      (new-test-case #"type-check: reverse"
        (check-type-check
          (app-expr
            (var-expr #"helper")
            (varargs list
              (var-expr #"l")
              (app-expr (var-expr #"empty") (empty))))
          (context
            (make-dict bytes=?)
            (make-dict bytes=?)
            (dict-add-all
              (make-dict bytes=?)
              (varargs list
                (tuple2
                  #"helper"
                  (fun-type
                    (varargs list #"a")
                    (varargs list
                      (list-type (var-type #"a"))
                      (list-type (var-type #"a")))
                    (list-type (var-type #"a"))))
                (tuple2 #"l" (list-type (var-type #"a")))
                (tuple2 #"empty"
                  (fun-type
                    (varargs list #"a")
                    (empty)
                    (list-type (var-type #"a")))))))
          (just (list-type (var-type #"a")))))
      (new-test-case #"type-check: two different case branches"
        (check-type-check/fail
          (case-expr (bytes-literal #"input")
            (varargs list
              (case-clause (bytes-pattern #"v1") (block (empty) (int-literal 1)))
              (case-clause (ignore-pattern) (block (empty) (boolean-literal #f)))))
          (context
            (make-dict bytes=?)
            (make-dict bytes=?)
            (make-dict bytes=?))
          (nothing)))
      )))
