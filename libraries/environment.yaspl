#:module (environment)
#:import {
  (dict)
  (maybe)
  (prim)
  (yaspl module-environment)
}
(export
  #:types (Environment VarReference)
  #:values (local-var free-var
            environment environment-tag-ref environment-value-ref environment-global-ref
            environment-value-set)
  #:patterns (local-var free-var))
(types
  (define-type Environment
    (environment
      [value-bindings : (Dict Bytes VarReference)]
      [module-env : ModuleEnvironment]))
  (define-type VarReference
    (local-var)
    (free-var [offset : Int])))
(define (environment-value-ref [env : Environment] [name : Bytes]) : (Maybe VarReference)
  (dict-ref (environment-value-bindings env) name))
(define (environment-global-ref [env : Environment] [name : Bytes]) : (Maybe Bytes)
  (module-environment-global-ref (environment-module-env env) name))

(define (environment-value-set [env : Environment] [name : Bytes] [val : VarReference])
  : Environment
  (case env
    [(environment vals mod)
     (environment (dict-set vals name val) mod)]))
(define (environment-tag-ref [env : Environment] [name : Bytes]) : (Maybe Int)
  (module-environment-tag-ref (environment-module-env env) name))
