(module environment
  (import
    (bytes bytes-append)
    (dict
      #:types (Dict)
      #:values (dict-ref dict-set)
      #:patterns ())
    (list
      #:types ()
      #:values (cons empty)
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values ()
      #:patterns (just nothing))
    (prim
      #:types (Bytes Int)
      #:values (panic)
      #:patterns ())
    (types
      #:types (Type)
      #:values ()
      #:patterns ()))
  (export
    #:types (Environment VariantInfo VarReference)
    #:values (local-var global-value free-var
              environment environment-tag-ref environment-value-ref environment-value-set
              environment-type-bindings
              variant-info)
    #:patterns (local-var free-var global-value))
  (types
    (define-type Environment
      (environment
        [value-bindings : (Dict Bytes VarReference)]
        [variant-bindings : (Dict Bytes VariantInfo)]
        [type-bindings : (Dict Bytes Type)]))
    (define-type VariantInfo
      (variant-info [tag : Int]))
    (define-type VarReference
      (local-var)
      (free-var [offset : Int])
      (global-value [name : Bytes])))
  (define (environment-value-ref [env : Environment] [name : Bytes]) : (Maybe VarReference)
    (dict-ref (environment-value-bindings env) name))
  (define (environment-value-set [env : Environment] [name : Bytes] [val : VarReference])
    : Environment
    (case env
      [(environment vals variants types)
       (environment (dict-set vals name val) variants types)]))
  (define (environment-tag-ref [env : Environment] [name : Bytes]) : Int
    (case (dict-ref (environment-variant-bindings env) name)
      [(nothing) (panic (bytes-append (cons #"No variant-information for: " (cons name (empty)))))]
      [(just tag) (variant-info-tag tag)])))
