#:module (code-http-server assembly)
#:import {
  (bytes)
  (formats html)
  (formats xml)
  (join-list)
  (list)
  (maybe)
  (prim)
  (protocols http http-response)
  (protocols http http-responses)
  (yaspl x86-64-assembly)
  (yaspl x86-64-assembly-printer)
}
(export
  (#:values serve-assembly-response))
(types)

(define (serve-assembly-response
          [fragments : AssemblyFragments]
          [name : Bytes]) : HttpResponse
  (if (= (bytes-length name) 0)
      (xhtml-ok-response
        (html
          (head (empty))
          (body
            (case fragments
              [(assembly-fragments text const zd)
               (append
                 (map text-fragment->node text)
                 (append
                   (map const-fragment->node const)
                   (map zero-data-fragment->node zd)))]))))
      (case (find-fragment name fragments)
        [(nothing) (not-found)]
        [(just fragment)
         (xhtml-ok-response
           (html
             (head (empty))
             (body
               (cons
                 (pre (code (text-node/escape
                              (assembly-commands->bytes
                                (jl->list
                                  (case fragment
                                    [(assembly-text-fragment text)
                                     (text-fragment->commands text)]
                                    [(assembly-const-fragment const)
                                     (const-fragment->commands const)]
                                    [(assembly-zero-data-fragment zd)
                                     (zero-data-fragment->commands zd)]))))))
                 (empty)))))])))

(define (text-fragment->node [fragment : TextFragment]) : Node
  (case fragment
    [(function-fragment name _)
     (div (link (single-jl name) (text-node/escape (single-jl name))))]))

(define (const-fragment->node [fragment : ConstFragment]) : Node
  (case fragment
    [(const-fragment name _ _)
     (div (link (single-jl name) (text-node/escape (single-jl name))))]))

(define (zero-data-fragment->node [fragment : ZeroDataFragment]) : Node
  (case fragment
    [(zero-data-fragment name _ _)
     (div (link (single-jl name) (text-node/escape (single-jl name))))]))

(define (find-fragment [name : Bytes] [fragments : AssemblyFragments])
  : (Maybe AssemblyFragment)
  (case fragments
    [(assembly-fragments text const zd)
     (case (find-text-fragment name text)
       [(just v) (just (assembly-text-fragment v))]
       [(nothing)
        (case (find-const-fragment name const)
          [(just v) (just (assembly-const-fragment v))]
          [(nothing)
           (case (find-zero-data-fragment name zd)
             [(just v) (just (assembly-zero-data-fragment v))]
             [(nothing) (nothing)])])])]))

(define (find-text-fragment [name : Bytes] [fragments : (List TextFragment)]) : (Maybe TextFragment)
  (findf
    (lambda ([frag : TextFragment])
      (case frag
        [(function-fragment name2 _)
         (bytes=? name name2)]))
    fragments))

(define (find-const-fragment [name : Bytes] [fragments : (List ConstFragment)]) : (Maybe ConstFragment)
  (findf
    (lambda ([frag : ConstFragment])
      (case frag
        [(const-fragment name2 _ _)
         (bytes=? name name2)]))
    fragments))

(define (find-zero-data-fragment [name : Bytes] [fragments : (List ZeroDataFragment)])
  : (Maybe ZeroDataFragment)
  (findf
    (lambda ([frag : ZeroDataFragment])
      (case frag
        [(zero-data-fragment name2 _ _)
         (bytes=? name name2)]))
    fragments))
