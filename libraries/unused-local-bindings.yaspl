#:module (unused-local-bindings)
#:import {
  (bytes)
  (data lifted-primitives)
  (dict)
  (join-list)
  (list)
  (maybe)
  (prim)
  (set)
  (source-language)
  (tuples)
}
(export
  (#:types UnusedLocalBindings UnusedFunctionLocalBindings)
  (#:values module-unused-local-bindings)
  (#:patterns unused-local-bindings unused-function-local-bindings))
(types
  (define-type UnusedLocalBindings
    (unused-local-bindings
      [functions : (List UnusedFunctionLocalBindings)]))
  (define-type UnusedFunctionLocalBindings
    (unused-function-local-bindings
      [function-name : Bytes]
      [variables : (List Bytes)]))
  (define-type State
    (state
      [bindings : (List (Dict Bytes LiftedBoolean))])))


(define (module-unused-local-bindings [mod : Module])
  : UnusedLocalBindings
  (case mod
    [(module _name _imports _exports _types definitions)
     (unused-local-bindings
       (filter-map
         function-unused-local-bindings
         definitions))]))

(define (function-unused-local-bindings [fun : FunctionDefinition])
  : (Maybe UnusedFunctionLocalBindings)
  (match-define (function-definition name _type-vars _args _return-type body) fun)
  (match-define (tuple2 _state unused)
    (unused-local-bindings/block body (state (empty))))
  (case (jl->list unused)
    [(empty) (nothing)]
    [unused
     (just (unused-function-local-bindings name unused))]))


(define (unused-local-bindings/expr [e : Expression] [state : State])
  : (Tuple2 State (JoinList Bytes))
  (case e
    [(int-literal _ _)
     (tuple2 state (empty-jl))]
    [(bytes-literal _ _)
     (tuple2 state (empty-jl))]
    [(boolean-literal _ _)
     (tuple2 state (empty-jl))]
    [(var-expr v _)
     (tuple2 (mark-var-used state v) (empty-jl))]
    [(annotated-expr _type e _)
     (unused-local-bindings/expr e state)]
    [(if-expr cond true false _)
     (match-define (tuple2 state cond-unused)
       (unused-local-bindings/expr cond state))
     (match-define (tuple2 state true-unused)
       (unused-local-bindings/expr true state))
     (match-define (tuple2 state false-unused)
       (unused-local-bindings/expr false state))
     (tuple2
       state
       (append-jl cond-unused (append-jl true-unused false-unused)))]
    [(begin-expr exprs last-expr _)
     (unused-local-bindings/exprs (cons last-expr exprs) state)]
    [(app-expr _tail-position op args _)
     (unused-local-bindings/exprs (cons op args) state)]
    [(varargs-app-expr _tail-position op args _)
     (unused-local-bindings/exprs (cons op args) state)]
    [(let-expr name expr body _)
     (match-define (tuple2 state expr-unused)
       (unused-local-bindings/expr expr state))
     (match-define (tuple2 state body-unused)
       (unused-local-bindings/binding
         (varargs list name)
         state
         body))
     (tuple2 state (append-jl expr-unused body-unused))]
    [(lambda-expr args _type body _)
     (unused-local-bindings/binding
       (function-args-bound-variables args)
       state
       body)]
    [(case-expr expr clauses _)
     (match-define (tuple2 state expr-unused)
       (unused-local-bindings/expr expr state))
     (match-define (tuple2 state clauses-unused)
       (unused-local-bindings/clauses clauses state))
     (tuple2 state (append-jl clauses-unused expr-unused))]))

(define (unused-local-bindings/exprs [es : (List Expression)] [state : State])
  : (Tuple2 State (JoinList Bytes))
  (case es
    [(empty) (tuple2 state (empty-jl))]
    [(cons e es)
     (match-define (tuple2 state e-unused)
       (unused-local-bindings/expr e state))
     (match-define (tuple2 state es-unused)
       (unused-local-bindings/exprs es state))
     (tuple2 state (append-jl e-unused es-unused))]))

(define (unused-local-bindings/clauses [cs : (List CaseClause)] [state : State])
  : (Tuple2 State (JoinList Bytes))
  (case cs
    [(empty) (tuple2 state (empty-jl))]
    [(cons c cs)
     (match-define (tuple2 state c-unused)
       (unused-local-bindings/clause c state))
     (match-define (tuple2 state cs-unused)
       (unused-local-bindings/clauses cs state))
     (tuple2 state (append-jl c-unused cs-unused))]))

(define (unused-local-bindings/clause [clause : CaseClause] [state : State])
  : (Tuple2 State (JoinList Bytes))
  (match-define (case-clause pattern body) clause)
  (match-define vars (pattern-bound-variables pattern (empty)))
  (unused-local-bindings/binding
    vars
    state
    body))

(define (function-args-bound-variables [args : (List FunctionArg)])
  : (List Bytes)
  (foldl
    (lambda ([arg : FunctionArg] [acc : (List Bytes)])
      (pattern-bound-variables (function-arg-pattern arg) acc))
    args
    (ann (List Bytes) (empty))))

(define (pattern-bound-variables [p : Pattern] [acc : (List Bytes)]) : (List Bytes)
  (case p
    [(bytes-pattern _ _) acc]
    [(int-pattern _ _) acc]
    [(ignore-pattern _) acc]
    [(variable-pattern v _) (cons v acc)]
    [(abstraction-pattern _ pats _) (pattern-bound-variables/list pats acc)]))

(define (pattern-bound-variables/list [ps : (List Pattern)] [acc : (List Bytes)]) : (List Bytes)
  (case ps
    [(empty) acc]
    [(cons p ps) (pattern-bound-variables/list ps (pattern-bound-variables p acc))]))

(define (unused-local-bindings/block [b : Block] [state : State])
  : (Tuple2 State (JoinList Bytes))
  (case b
    [(block (empty) expr)
     (unused-local-bindings/expr expr state)]
    [(block (cons (match-def pat _type expr) defs) body-expr)
     (match-define (tuple2 state _expr-unused)
       (unused-local-bindings/expr expr state))
     (unused-local-bindings/binding
       (pattern-bound-variables pat (empty))
       state
       (block defs body-expr))]))

(define (unused-local-bindings/binding
          [vars : (List Bytes)]
          [init-state : State]
          [body : Block])
  : (Tuple2 State (JoinList Bytes))
  (match-define (state bindings) init-state)

  (match-define inner-state
    (state
      (cons
        (foldl
          (lambda ([v : Bytes] [acc : (Dict Bytes LiftedBoolean)])
            (dict-add acc v (lifted-false)))
          vars
          (ann (Dict Bytes LiftedBoolean)
            (make-dict bytes-cmp)))
       bindings)))

  (match-define (tuple2 inner-state body-unused)
    (unused-local-bindings/block body inner-state))

  (match-define (tuple2 frame outer-bindings)
    : (Tuple2 (Dict Bytes LiftedBoolean) (List (Dict Bytes LiftedBoolean)))
    (case inner-state
      [(state (empty)) (panic #"State lost a frame")]
      [(state (cons frame outer-bindings))
       (tuple2 frame outer-bindings)]))

  (match-define unused-vars
    (list->jl
      (set->list
        (dict-keys
          (dict-filter
            frame
            (lambda ([v : Bytes] [used : LiftedBoolean])
              (case used
                [(lifted-true) #f]
                [(lifted-false) #t])))))))

  (tuple2
    (state outer-bindings)
    (append-jl unused-vars body-unused)))

(define (mark-var-used [s : State] [v : Bytes]) : State
  (match-define (state bindings) s)
  (state (mark-var-used/bindings bindings v)))

(define (mark-var-used/bindings [bindings : (List (Dict Bytes LiftedBoolean))] [v : Bytes])
  : (List (Dict Bytes LiftedBoolean))
  (case bindings
    [(empty) (empty)]
    [(cons frame bindings)
     (case (dict-ref frame v)
       [(just (lifted-false))
        (cons (dict-set frame v (lifted-true)) bindings)]
       [(just (lifted-true))
        (cons frame bindings)]
       [(nothing)
        (cons frame (mark-var-used/bindings bindings v))])]))
