#:module (tail-call-test)
#:import {
  (list)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (non-known-tail-caller [f : (-> Void)]) : Void
  (f))

(define (non-known-tail-call-loop [count : Int]) : Void
  (if (= 0 count)
      (void)
      (non-known-tail-caller (lambda () (non-known-tail-call-loop (- count 1))))))

(define (non-known-tail-call-loop2 [count : Int]) : Void
  (if (= 0 count)
      (void)
      (non-known-tail-caller (lambda () (non-known-tail-call-loop2 (- count 1))))))


(define (non-known-tail-call-test) : Boolean
  (begin
    (non-known-tail-call-loop 2000000)
    (non-known-tail-call-loop2 2000000)
    #t))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"non known tail-call test" non-known-tail-call-test))))
