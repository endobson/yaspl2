(module tail-call-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Void Int Boolean)
      #:values (void - =)
      #:patterns ())
    (yunit
      #:types ()
      #:values (yunit/main test-case)
      #:patterns ())
    (list
      #:types ()
      #:values (list)
      #:patterns ()))
  (export)
  (types)

  (define (A) (non-known-tail-caller [f : (-> A)]) : A
    (f))

  (define (non-known-tail-call-loop [count : Int]) : Void
    (if (= 0 count)
        (void)
        (non-known-tail-caller (lambda () (non-known-tail-call-loop (- count 1))))))

  (define (non-known-tail-call-loop2 [count : Int]) : Void
    (if (= 0 count)
        (void)
        (non-known-tail-caller (lambda () (non-known-tail-call-loop2 (- count 1))))))


  (define (non-known-tail-call-test) : Boolean
    (begin
      (non-known-tail-call-loop 5000000)
      #t))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (test-case #"non known tail-call test" non-known-tail-call-test) ))))
