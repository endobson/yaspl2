#:module byte-escapes
#:import {
  bytes {
    #:values
      bytes-ref/u8
  }
  either {
    #:types
      Either
    #:values
      left
      right
    #:patterns
      left
      right
  }
  prim {
    #:types
      Boolean
      Bytes
      Int
      U8
    #:values
      +
      -
      =
      bytes-length
      bytes-set!
      make-bytes
      or
      u8
      u8->s64
  }
}
(export
  #:types ()
  #:values (unescape-bytes escape-bytes)
  #:patterns ())
(types)

(define (unescape-bytes [bytes : Bytes]) : (Either Bytes Bytes)
  (let ([len (bytes-length bytes)])
    (case (count-escapes bytes 0 len 0)
      [(left v) (left v)]
      [(right num-escapes)
       (unescape-bytes* bytes 0 len (make-bytes (- len num-escapes)) 0)])))

(define (escape-bytes [bytes : Bytes]) : Bytes
  (escape-bytes* bytes 0 (make-bytes (+ (bytes-length bytes) (count-need-escapes bytes 0 0))) 0))

(define (newline? [v : U8]) : Boolean
  (= (u8->s64 v) 10))

(define (carriage-return? [v : U8]) : Boolean
  (= (u8->s64 v) 13))

(define (double-quote? [v : U8]) : Boolean
  (= (u8->s64 v) 34))

(define (back-slash? [v : U8]) : Boolean
  (= (u8->s64 v) 92))

(define (n? [v : U8]) : Boolean
  (= (u8->s64 v) 110))

(define (r? [v : U8]) : Boolean
  (= (u8->s64 v) 114))


(define (count-escapes [src : Bytes] [src-offset : Int] [src-end : Int] [num-escapes : Int])
  : (Either Bytes Int)
  (if (= src-offset src-end)
      (right num-escapes)
      (let ([byte (bytes-ref/u8 src src-offset)])
        (if (back-slash? byte)
            (if (= (+ src-offset 1) src-end)
                (left #"Bad escape: last character is \\")
                (count-escapes src (+ src-offset 2) src-end (+ num-escapes 1)))
            (count-escapes src (+ src-offset 1) src-end num-escapes)))))

(define (count-need-escapes [src : Bytes] [src-offset : Int] [num-escapes : Int]) : Int
  (if (= src-offset (bytes-length src))
      num-escapes
      (count-need-escapes src (+ src-offset 1)
        (let ([byte (bytes-ref/u8 src src-offset)])
          (if (or (back-slash? byte)
                  (or (double-quote? byte)
                      (or (newline? byte)
                          (carriage-return? byte))))
              (+ num-escapes 1)
              num-escapes)))))


(define (unescape-bytes*
          [src : Bytes] [src-offset : Int] [src-end : Int] [dest : Bytes] [dest-offset : Int])
  : (Either Bytes Bytes)
  (if (= src-offset src-end)
      (right dest)
      (let ([byte (bytes-ref/u8 src src-offset)])
        (if (back-slash? byte)
            (let ([src-offset (+ 1 src-offset)])
              (let ([byte (bytes-ref/u8 src src-offset)])
                (if (double-quote? byte)
                    (begin
                      (bytes-set! dest dest-offset byte)
                      (unescape-bytes* src (+ 1 src-offset) src-end dest (+ 1 dest-offset)))
                    (if (n? byte)
                        (begin
                          (bytes-set! dest dest-offset (u8 10)) ;; newline
                          (unescape-bytes* src (+ 1 src-offset) src-end dest (+ 1 dest-offset)))
                        (if (back-slash? byte)
                            (begin
                              (bytes-set! dest dest-offset (u8 92)) ;; backslash
                              (unescape-bytes* src (+ 1 src-offset) src-end dest (+ 1 dest-offset)))
                            (if (r? byte)
                                (begin
                                  (bytes-set! dest dest-offset (u8 13)) ;; carriage return
                                  (unescape-bytes* src (+ 1 src-offset) src-end dest (+ 1 dest-offset)))
                                (left #"Unknown escape")))))))
            (begin
              (bytes-set! dest dest-offset byte)
              (unescape-bytes* src (+ 1 src-offset) src-end dest (+ 1 dest-offset)))))))

(define (escape-bytes* [src : Bytes] [src-offset : Int] [dest : Bytes] [dest-offset : Int]) : Bytes
  (if (= src-offset (bytes-length src))
      dest
      (let ([byte (bytes-ref/u8 src src-offset)])
        (if (back-slash? byte)
            (begin
              (bytes-set! dest dest-offset (u8 92)) ;; backslash
              (bytes-set! dest (+ dest-offset 1) (u8 92)) ;; backslash
              (escape-bytes* src (+ src-offset 1) dest (+ dest-offset 2)))
            (if (double-quote? byte)
                (begin
                  (bytes-set! dest dest-offset (u8 92)) ;; backslash
                  (bytes-set! dest (+ dest-offset 1) (u8 34)) ;; double-quote
                  (escape-bytes* src (+ src-offset 1) dest (+ dest-offset 2)))
                (if (newline? byte)
                    (begin
                      (bytes-set! dest dest-offset (u8 92)) ;; backslash
                      (bytes-set! dest (+ dest-offset 1) (u8 10)) ;; newline
                      (escape-bytes* src (+ src-offset 1) dest (+ dest-offset 2)))
                    (if (newline? byte)
                        (begin
                          (bytes-set! dest dest-offset (u8 92)) ;; backslash
                          (bytes-set! dest (+ dest-offset 1) (u8 13)) ;; carriage-return
                          (escape-bytes* src (+ src-offset 1) dest (+ dest-offset 2)))
                        (begin
                          (bytes-set! dest dest-offset byte)
                          (escape-bytes* src (+ src-offset 1) dest (+ dest-offset 1))))))))))
