#:module (types-test)
#:import {
  (bytes)
  (data source-location)
  (formats sexp)
  (list)
  (maybe)
  (module-name)
  (prim)
  (prim-types)
  (sexp-printer)
  (types)
  (types-test-utils)
  (yunit)
}
(export
  (#:values main))
(types)

(define (check-types-equal? [t1 : Type] [t2 : Type]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (type=? t1 t2)
        (nothing)
        (just (failure #"Unequal types")))))

(define (check-types-not-equal? [t1 : Type] [t2 : Type]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (type=? t1 t2)
        (just (failure #"Equal types"))
        (nothing))))

(define (check-kinds-equal? [k1 : Kind] [k2 : Kind]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (kind=? k1 k2)
        (nothing)
        (just (failure #"Unequal kinds")))))

(define (check-kinds-not-equal? [k1 : Kind] [k2 : Kind]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (kind=? k1 k2)
        (just (failure #"Equal kinds"))
        (nothing))))

(define (check-kind-serialization [k : Kind] [expected : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (let ([actual (serialize-kind k)])
      (if (bytes=? actual expected)
          (nothing)
          (just (failure (bytes-append
                           (varargs list #"Expected: " expected #" Actual: " actual))))))))

(define (check-type-serialization [t : Type] [expected : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (let ([actual (serialize-type t)])
      (if (bytes=? actual expected)
          (nothing)
          (just (failure (bytes-append
                           (varargs list #"Expected: " expected #" Actual: " actual))))))))


(define (check-kind-round-trip [k : Kind]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (sexp->kind (sexp/add-source (kind->sexp k)))
      [(nothing) (just (failure #"Parsing kind failed"))]
      [(just k2)
       (if (kind=? k k2)
           (nothing)
           (just (failure #"Round tripped kind is different")))])))

(define (check-type-round-trip [t : Type]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (sexp->type (sexp/add-source (type->sexp t)))
      [(nothing) (just (failure #"Parsing type failed"))]
      [(just t2)
       (if (type=? t t2)
           (nothing)
           (just (failure (bytes-append
                            (varargs list
                              #"Round tripped type is different: Before: "
                              (serialize-type t)
                              #" After: "
                              (serialize-type t2))))))])))

(define (sexp/add-source [s : Sexp/P]) : Sexp
  (match-define source (source-span (unnamed-source) 0 0 0 0))
  (case s
    [(node/p vs) (node (map sexp/add-source vs) source)]
    [(bracket-node/p vs) (bracket-node (map sexp/add-source vs) source)]
    [(brace-node/p vs) (brace-node (map sexp/add-source vs) source)]
    [(symbol-sexp/p v) (symbol-sexp v source)]
    [(bytes-sexp/p v) (bytes-sexp v source)]
    [(keyword-sexp/p v) (keyword-sexp v source)]
    [(boolean-sexp/p v) (boolean-sexp v source)]
    [(number-sexp/p v) (number-sexp v source)]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"A = A"
        (check-types-equal? (var-type #"A") (var-type #"A")))
      (test-case #"A != B"
        (check-types-not-equal? (var-type #"A") (var-type #"B")))
      (test-case #"Bytes = Bytes"
        (check-types-equal?
          (bytes-type)
          (bytes-type)))
      (test-case #"Bytes != Int"
        (check-types-not-equal?
          (bytes-type)
          (int-type)))
      (test-case #"(List Bytes) = (List Bytes)"
        (check-types-equal?
          (list-type (bytes-type))
          (list-type (bytes-type))))
      (test-case #"(List Bytes) != (List Int)"
        (check-types-not-equal?
          (list-type (bytes-type))
          (list-type (int-type))))
      (test-case #"(-> A) = (-> A)"
        (check-types-equal?
          (fun-type (empty) (empty) (empty) (var-type #"A"))
          (fun-type (empty) (empty) (empty) (var-type #"A"))))
      (test-case #"(-> A) = (-> B)"
        (check-types-not-equal?
          (fun-type (empty) (empty) (empty) (var-type #"A"))
          (fun-type (empty) (empty) (empty) (var-type #"B"))))
      (test-case #"(A -> A) = (-> A)"
        (check-types-not-equal?
          (fun-type (empty) (empty) (varargs list (var-type #"A")) (var-type #"A"))
          (fun-type (empty) (empty) (empty) (var-type #"A"))))
      (test-case #"(forall A. (A -> A)) = (forall A. (A -> A))"
        (check-types-equal?
          (fun-type (varargs list #"A") (empty) (varargs list (var-type #"A")) (var-type #"A"))
          (fun-type (varargs list #"A") (empty) (varargs list (var-type #"A")) (var-type #"A"))))
      (test-case #"(forall A B. (A -> B)) = (forall B A. (A -> B))"
        (check-types-not-equal?
          (fun-type (varargs list #"A" #"B") (empty) (varargs list (var-type #"A")) (var-type #"B"))
          (fun-type (varargs list #"B" #"A") (empty) (varargs list (var-type #"A")) (var-type #"B"))))
      (test-case #"List = List"
        (check-types-equal?
          (type-constructor (mod-name (varargs list #"list")) #"List" (varargs list (star-kind)))
          (type-constructor (mod-name (varargs list #"list")) #"List" (varargs list (star-kind)))))
      (test-case #"List = Tuple2"
        (check-types-not-equal?
          (type-constructor (mod-name (varargs list #"list")) #"List" (varargs list (star-kind)))
          (type-constructor (mod-name (varargs list #"tuples")) #"Tuple2" (varargs list (star-kind) (star-kind)))))

      (test-case #"* = *"
        (check-kinds-equal? (star-kind) (star-kind)))
      (test-case #"* != (-> *)"
        (check-kinds-not-equal? (star-kind) (fun-kind (empty) (star-kind))))
      (test-case #"(* -> *) = (* -> *)"
        (check-kinds-equal?
          (fun-kind (varargs list (star-kind)) (star-kind))
          (fun-kind (varargs list (star-kind)) (star-kind))))

      (test-case #"serialize *"
        (check-kind-serialization (star-kind) #"*"))
      (test-case #"serialize (() -> *)"
        (check-kind-serialization (fun-kind (empty) (star-kind)) #"(() -> *)"))
      (test-case #"serialize ((* *) -> *)"
        (check-kind-serialization (fun-kind (varargs list (star-kind) (star-kind)) (star-kind))
                                  #"((* *) -> *)"))

      (test-case #"serialize a"
        (check-type-serialization (var-type #"a") #"(var #\"a\")"))
      (test-case #"serialize (a -> b)"
        (check-type-serialization
          (fun-type (empty) (empty) (varargs list (var-type #"a")) (var-type #"b"))
          #"(fun () () (var #\"a\") (var #\"b\"))"))
      (test-case #"serialize (forall (a b) (a b -> b))"
        (check-type-serialization
          (fun-type (varargs list #"a" #"b") (empty)
                    (varargs list (var-type #"a") (var-type #"b")) (var-type #"b"))
          #"(fun (#\"a\" #\"b\") () (var #\"a\") (var #\"b\") (var #\"b\"))"))
      (test-case #"serialize Bytes"
        (check-type-serialization (bytes-type)
                                  #"(abstract (prim) #\"Bytes\" *)"))
      (test-case #"serialize (List Bytes)"
        (check-type-serialization
          (list-type (bytes-type))
          #"(abstract (list) #\"List\" * (abstract (prim) #\"Bytes\" *))"))
      (test-case #"serialize List"
        (check-type-serialization
          (type-constructor (mod-name (varargs list #"list")) #"List" (varargs list (star-kind)))
          #"(tcon (list) #\"List\" *)"))


      (test-case #"round-trip *"
        (check-kind-round-trip (star-kind)))
      (test-case #"round-trip (-> *)"
        (check-kind-round-trip (fun-kind (empty) (star-kind))))
      (test-case #"round-trip (* * -> *)"
        (check-kind-round-trip (fun-kind (varargs list (star-kind) (star-kind)) (star-kind))))

      (test-case #"round-trip a"
        (check-type-round-trip (var-type #"a")))
      (test-case #"round-trip (a -> b)"
        (check-type-round-trip
          (fun-type (empty) (empty) (varargs list (var-type #"a")) (var-type #"b"))))
      (test-case #"round-trip (forall (a b) (a b -> b))"
        (check-type-round-trip
          (fun-type (varargs list #"a" #"b")
                    (empty)
                    (varargs list (var-type #"a") (var-type #"b"))
                    (var-type #"b"))))
      (test-case #"round-trip Bytes"
        (check-type-round-trip
          (bytes-type)))
      (test-case #"round-trip U8"
        (check-type-round-trip
          (u8-type)))
      (test-case #"round-trip U16"
        (check-type-round-trip
          (u16-type)))
      (test-case #"round-trip U32"
        (check-type-round-trip
          (u32-type)))
      (test-case #"round-trip U64"
        (check-type-round-trip
          (u64-type)))
      (test-case #"round-trip U8[]*"
        (check-type-round-trip
          (pointer-type (array-type (u8-type)))))
      (test-case #"round-trip (List a)"
        (check-type-round-trip
          (list-type (var-type #"a"))))
      (test-case #"round-trip List"
        (check-type-round-trip
          (type-constructor (mod-name (varargs list #"list")) #"List" (varargs list (star-kind))))))))
