#:module types-test
#:import {
  bytes {
    #:values
      bytes-append
      bytes=?
  }
  list {
    #:values
      empty
      list
  }
  maybe {
    #:types
      Maybe
    #:values
      just
      nothing
    #:patterns
      just
      nothing
  }
  prim {
    #:types
      Array
      Bytes
      InputPort
      Int
      OutputPort
  }
  types {
    #:types
      Kind
      Type
    #:values
      abstract-type
      fun-kind
      fun-type
      kind->sexp
      kind=?
      serialize-kind
      serialize-type
      sexp->kind
      sexp->type
      star-kind
      type->sexp
      type-constructor
      type=?
      var-type
  }
  yunit {
    #:types
      FailedAssertion
    #:values
      failure
      new-test-case
      yunit/main
  }
}
(export)
(types)

(define (check-types-equal? [t1 : Type] [t2 : Type]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (type=? t1 t2)
        (nothing)
        (just (failure #"Unequal types")))))

(define (check-types-not-equal? [t1 : Type] [t2 : Type]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (type=? t1 t2)
        (just (failure #"Equal types"))
        (nothing))))

(define (check-kinds-equal? [k1 : Kind] [k2 : Kind]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (kind=? k1 k2)
        (nothing)
        (just (failure #"Unequal kinds")))))

(define (check-kinds-not-equal? [k1 : Kind] [k2 : Kind]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (kind=? k1 k2)
        (just (failure #"Equal kinds"))
        (nothing))))

(define (check-kind-serialization [k : Kind] [expected : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (let ([actual (serialize-kind k)])
      (if (bytes=? actual expected)
          (nothing)
          (just (failure (bytes-append
                           (varargs list #"Expected: " expected #" Actual: " actual))))))))

(define (check-type-serialization [t : Type] [expected : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (let ([actual (serialize-type t)])
      (if (bytes=? actual expected)
          (nothing)
          (just (failure (bytes-append
                           (varargs list #"Expected: " expected #" Actual: " actual))))))))


(define (check-kind-round-trip [k : Kind]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (sexp->kind (kind->sexp k))
      [(nothing) (just (failure #"Parsing kind failed"))]
      [(just k2)
       (if (kind=? k k2)
           (nothing)
           (just (failure #"Round triped kind is different")))])))

(define (check-type-round-trip [t : Type]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (sexp->type (type->sexp t))
      [(nothing) (just (failure #"Parsing type failed"))]
      [(just t2)
       (if (type=? t t2)
           (nothing)
           (just (failure #"Round triped type is different")))])))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"A = A"
        (check-types-equal? (var-type #"A") (var-type #"A")))
      (new-test-case #"A != B"
        (check-types-not-equal? (var-type #"A") (var-type #"B")))
      (new-test-case #"Bytes = Bytes"
        (check-types-equal?
          (abstract-type #"prim" #"Bytes" (empty))
          (abstract-type #"prim" #"Bytes" (empty))))
      (new-test-case #"Bytes != Int"
        (check-types-not-equal?
          (abstract-type #"prim" #"Bytes" (empty))
          (abstract-type #"prim" #"Int" (empty))))
      (new-test-case #"(List Bytes) = (List Bytes)"
        (check-types-equal?
          (abstract-type #"list" #"List"
            (varargs list (abstract-type #"prim" #"Bytes" (empty))))
          (abstract-type #"list" #"List"
            (varargs list (abstract-type #"prim" #"Bytes" (empty))))))
      (new-test-case #"(List Bytes) != (List Int)"
        (check-types-not-equal?
          (abstract-type #"list" #"List"
            (varargs list (abstract-type #"prim" #"Bytes" (empty))))
          (abstract-type #"list" #"List"
            (varargs list (abstract-type #"prim" #"Int" (empty))))))
      (new-test-case #"(-> A) = (-> A)"
        (check-types-equal?
          (fun-type (empty) (empty) (var-type #"A"))
          (fun-type (empty) (empty) (var-type #"A"))))
      (new-test-case #"(-> A) = (-> B)"
        (check-types-not-equal?
          (fun-type (empty) (empty) (var-type #"A"))
          (fun-type (empty) (empty) (var-type #"B"))))
      (new-test-case #"(A -> A) = (-> A)"
        (check-types-not-equal?
          (fun-type (empty) (varargs list (var-type #"A")) (var-type #"A"))
          (fun-type (empty) (empty) (var-type #"A"))))
      (new-test-case #"(forall A. (A -> A)) = (forall A. (A -> A))"
        (check-types-equal?
          (fun-type (varargs list #"A") (varargs list (var-type #"A")) (var-type #"A"))
          (fun-type (varargs list #"A") (varargs list (var-type #"A")) (var-type #"A"))))
      (new-test-case #"(forall A B. (A -> B)) = (forall B A. (A -> B))"
        (check-types-not-equal?
          (fun-type (varargs list #"A" #"B") (varargs list (var-type #"A")) (var-type #"B"))
          (fun-type (varargs list #"B" #"A") (varargs list (var-type #"A")) (var-type #"B"))))
      (new-test-case #"List = List"
        (check-types-equal?
          (type-constructor #"list" #"List" (varargs list (star-kind)))
          (type-constructor #"list" #"List" (varargs list (star-kind)))))
      (new-test-case #"List = Tuple2"
        (check-types-not-equal?
          (type-constructor #"list" #"List" (varargs list (star-kind)))
          (type-constructor #"tuples" #"Tuple2" (varargs list (star-kind) (star-kind)))))

      (new-test-case #"* = *"
        (check-kinds-equal? (star-kind) (star-kind)))
      (new-test-case #"* != (-> *)"
        (check-kinds-not-equal? (star-kind) (fun-kind (empty) (star-kind))))
      (new-test-case #"(* -> *) = (* -> *)"
        (check-kinds-equal?
          (fun-kind (varargs list (star-kind)) (star-kind))
          (fun-kind (varargs list (star-kind)) (star-kind))))

      (new-test-case #"serialize *"
        (check-kind-serialization (star-kind) #"*"))
      (new-test-case #"serialize (() -> *)"
        (check-kind-serialization (fun-kind (empty) (star-kind)) #"(() -> *)"))
      (new-test-case #"serialize ((* *) -> *)"
        (check-kind-serialization (fun-kind (varargs list (star-kind) (star-kind)) (star-kind))
                                  #"((* *) -> *)"))

      (new-test-case #"serialize a"
        (check-type-serialization (var-type #"a") #"(var #\"a\")"))
      (new-test-case #"serialize (a -> b)"
        (check-type-serialization
          (fun-type (empty) (varargs list (var-type #"a")) (var-type #"b"))
          #"(fun () (var #\"a\") (var #\"b\"))"))
      (new-test-case #"serialize (forall (a b) (a b -> b))"
        (check-type-serialization
          (fun-type (varargs list #"a" #"b") (varargs list (var-type #"a") (var-type #"b")) (var-type #"b"))
          #"(fun (#\"a\" #\"b\") (var #\"a\") (var #\"b\") (var #\"b\"))"))
      (new-test-case #"serialize Bytes"
        (check-type-serialization (abstract-type #"prim" #"Bytes" (empty))
                                  #"(abstract #\"prim\" #\"Bytes\")"))
      (new-test-case #"serialize (List Bytes)"
        (check-type-serialization
          (abstract-type #"list" #"List" (varargs list (abstract-type #"prim" #"Bytes" (empty))))
          #"(abstract #\"list\" #\"List\" (abstract #\"prim\" #\"Bytes\"))"))
      (new-test-case #"serialize (Int -> Bytes)"
        (check-type-serialization
          (abstract-type #"list" #"List" (varargs list (abstract-type #"prim" #"Bytes" (empty))))
          #"(abstract #\"list\" #\"List\" (abstract #\"prim\" #\"Bytes\"))"))
      (new-test-case #"serialize List"
        (check-type-serialization
          (type-constructor #"list" #"List" (varargs list (star-kind)))
          #"(tcon #\"list\" #\"List\" *)"))


      (new-test-case #"round-trip *"
        (check-kind-round-trip (star-kind)))
      (new-test-case #"round-trip (-> *)"
        (check-kind-round-trip (fun-kind (empty) (star-kind))))
      (new-test-case #"round-trip (* * -> *)"
        (check-kind-round-trip (fun-kind (varargs list (star-kind) (star-kind)) (star-kind))))

      (new-test-case #"round-trip a"
        (check-type-round-trip (var-type #"a")))
      (new-test-case #"round-trip (a -> b)"
        (check-type-round-trip
          (fun-type (empty) (varargs list (var-type #"a")) (var-type #"b"))))
      (new-test-case #"round-trip (forall (a b) (a b -> b))"
        (check-type-round-trip
          (fun-type (varargs list #"a" #"b")
                    (varargs list (var-type #"a") (var-type #"b"))
                    (var-type #"b"))))
      (new-test-case #"round-trip Bytes"
        (check-type-round-trip
          (abstract-type #"prim" #"Bytes" (empty))))
      (new-test-case #"round-trip (List a)"
        (check-type-round-trip
          (abstract-type #"list" #"List" (varargs list (var-type #"a")))))
      (new-test-case #"round-trip List"
        (check-type-round-trip
          (type-constructor #"list" #"List" (varargs list (star-kind))))))))
