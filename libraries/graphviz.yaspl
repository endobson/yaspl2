#:module (graphviz)
#:import {
  (bytes)
  (dict)
  (join-list)
  (maybe)
  (prim)
  (tuples)
  (undirected-graph)
}
(export
  (#:types VertexData EdgeData)
  (#:values graph->graphviz vertex-data edge-data))
(types
  (define-type VertexData
    (vertex-data [name : Bytes]))
  (define-type EdgeData
    (edge-data [style : Bytes])))

(define [I] (graph->graphviz [g : (Graph I VertexData EdgeData)])
  : Bytes
  (bytes-append
    (jl->list
      (varargs append-jl*
        (single-jl #"graph {\n")
        (concat-jl
          (dict-map
            (graph-vertices g)
            (lambda ([_i : I] [v : VertexData])
              (case v
                [(vertex-data name)
                 (varargs join-list name #"\n")]))))
        (concat-jl
          (dict-map
            (graph-edges g)
            (lambda ([edge : (Tuple2 I I)] [e : EdgeData]) : (JoinList Bytes)
              (case edge
                [(tuple2 i1 i2)
                 (case (tuple2 (graph-vertex-label g i1) (graph-vertex-label g i2))
                   [(tuple2 (just (vertex-data name1)) (just (vertex-data name2)))
                    (case e
                      [(edge-data style)
                       (varargs join-list name1 #" -- " name2 #"[style=" style #"]\n")])]
                   [_ (panic #"bad graph")])]))))
        (single-jl #"}\n")))))
