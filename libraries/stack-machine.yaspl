(module stack-machine
  (import
    (prim void)
    (arithmetic-expr parse-arith-expr)
    (list cons empty cons-head length)
    (sexp-parser parse-sexp)
    (io read-all-bytes write-all-bytes write-newline)
    (numbers integer->decimal-bytes)
    (either right-v))
  (export compile-module stack-function-blocks stack-basic-block-cmds)
  (types
    (define-type StackCmd
      (num-lit-cmd [v Byte])
      (fun-call-cmd [name Bytes] [num-args Byte])
      (eval-op-cmd [v NumOp]))
    (define-type StackTerminal
      (return))
    (define-type StackBasicBlock
      (stack-basic-block [cmds (List StackCmd)] [terminal StackTerminal]))
    (define-type StackFunction
      (stack-function [name Bytes] [blocks (List StackBasicBlock)])))

  (define (compile-module mod)
    (case mod
      [(module functions)
       (compile-functions functions)]))


  (define (compile-functions functions)
    (case functions
      [(empty) (empty)]
      [(cons function functions)
       (cons (compile-function function) (compile-functions functions))]))

  (define (compile-function function)
    (case function
      [(function name arg-names body)
       (stack-function
         name
         (cons (stack-basic-block (compile-arith-expr body (empty)) (return))
               (empty)))]))

  (define (compile-arith-expr expr cmds)
    (case expr
      [(num-op-expr op left right)
       (compile-arith-expr left (compile-arith-expr right (cons (eval-op-cmd op) cmds)))]
      [(fun-call-expr bytes args)
       (compile-arith-exprs args (cons (fun-call-cmd bytes (length args)) cmds))]
      [(num-lit v)
       (cons (num-lit-cmd v) cmds)]))

  (define (compile-arith-exprs exprs cmds)
    (case exprs
      [(empty) cmds]
      [(cons expr exprs)
       (compile-arith-exprs exprs (compile-arith-expr expr cmd))]))


  (define (print-function sfun output)
    (print-cmds (stack-basic-block-cmds (cons-head (stack-function-blocks sfun))) output))

  (define (print-cmds cmds output)
    (case cmds
      [(empty) (void)]
      [(cons cmd cmds)
       (case cmd
         [(num-lit-cmd v)
          (begin
            (write-all-bytes (integer->decimal-bytes v) output)
            (write-newline output)
            (print-cmds cmds output))]
         [(eval-op-cmd op)
          (begin
            (write-all-bytes (num-op->bytes op) output)
            (write-newline output)
            (print-cmds cmds output))])]))

  (define (num-op->bytes op)
    (case op
      [(plus-op) #"+"]
      [(minus-op) #"-"]
      [(times-op) #"*"])))
