(module sexp-printer-test
  (import
    (bytes bytes=?)
    (either
      #:types ()
      #:values ()
      #:patterns (left right))
    (list
      #:types ()
      #:values (list)
      #:patterns ())
    (prim
      #:types (Array Bytes InputPort OutputPort Boolean Int)
      #:values ()
      #:patterns ())
    (sexp-parser
      #:types ()
      #:values (parse-sexp)
      #:patterns ())
    (sexp-printer
      #:types ()
      #:values (print-sexp)
      #:patterns ())
    (yunit
      #:types ()
      #:values (yunit/main test-case)
      #:patterns ()))
  (export)
  (types)


  (define (canonical-sexp [bytes : Bytes]) : (-> Boolean)
    (lambda ()
      (case (parse-sexp bytes)
        [(left _) #f]
        [(right sexp)
         (bytes=? (print-sexp sexp) bytes)])))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (test-case #"#t" (canonical-sexp #"#t"))
        (test-case #"#f" (canonical-sexp #"#f"))
        (test-case #"symbol abc" (canonical-sexp #"abc"))
        (test-case #"bytes abc" (canonical-sexp #"#\"abc\""))
        (test-case #"keyword abc" (canonical-sexp #"#:abc"))
        (test-case #"number 123" (canonical-sexp #"123"))
        (test-case #"parens ()" (canonical-sexp #"()"))
        (test-case #"parens (())" (canonical-sexp #"(())"))
        (test-case #"parens (() ())" (canonical-sexp #"(() ())"))
        (test-case #"complex ((123 456 seven) #:eight (#\"nine\"))"
                   (canonical-sexp #"((123 456 seven) #:eight (#\"nine\"))"))
        ))))
