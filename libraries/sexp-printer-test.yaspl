#:module (sexp-printer-test)
#:import {
  (data source-location)
  (either)
  (list)
  (maybe)
  (prim)
  (sexp-parser)
  (sexp-printer)
  (yunit)
}
(export
  (#:values main))
(types)


(define (canonical-sexp [bytes : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (parse-single-sexp (sourced-bytes (unnamed-source) bytes))
      [(left _) (just (failure #"Unparseable sexp"))]
      [(right sexp)
       (expect-equal/bytes (print-sexp* sexp) bytes)])))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"#t" (canonical-sexp #"#t"))
      (new-test-case #"#f" (canonical-sexp #"#f"))
      (new-test-case #"symbol abc" (canonical-sexp #"abc"))
      (new-test-case #"bytes abc" (canonical-sexp #"#\"abc\""))
      (new-test-case #"keyword abc" (canonical-sexp #"#:abc"))
      (new-test-case #"number 123" (canonical-sexp #"123"))
      (new-test-case #"parens ()" (canonical-sexp #"()"))
      (new-test-case #"parens (())" (canonical-sexp #"(())"))
      (new-test-case #"parens (() ())" (canonical-sexp #"(() ())"))
      (new-test-case #"complex ((123 456 seven) #:eight (#\"nine\"))"
                     (canonical-sexp #"((123 456 seven) #:eight (#\"nine\"))")))))
