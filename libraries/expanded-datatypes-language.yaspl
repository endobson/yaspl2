#:module (expanded-datatypes-language)
#:import {
  (bytes)
  (data lifted-primitives)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  {(resolved-types-language)
    {#:types
      Block
      BlockDefinition
      CaseClause
      Export
      [Exports rt:Exports]
      Expression
      FunctionArg
      FunctionDefinition
      [Imports rt:Imports]
      [Module rt:Module]
      Pattern
      StaticDefinition
      TypeDefinition
      TypeExport
      VariantDefinition
      VariantField
    }
    {#:values
      case-clause-pattern
      function-arg-pattern
      function-arg-type
      function-definition-name
      [imports-patterns rt:imports-patterns]
      pattern-source-span
      variant-definition-name
      variant-field-name
      variant-field-type
    }
    {#:patterns
      abstraction-pattern
      annotated-expr
      app-expr
      begin-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      export
      [exports rt:exports]
      function-arg
      function-definition
      if-expr
      ignore-pattern
      [imports rt:imports]
      int-literal
      int-pattern
      lambda-expr
      let-expr
      match-def
      [module rt:module]
      type-definition
      type-export
      var-expr
      varargs-app-expr
      varargs-definition
      variable-pattern
      variant-definition
      variant-field
    }
  }
  (top-level-name)
  (tuples)
  (types)
  (variant-info)
}
(export
  (#:types
    Block BlockDefinition CaseClause DatatypeDefinition Exports Expression FieldDescriptor
    FunctionDefinition FunctionArg Imports Module Pattern StaticDefinition Export TypeExport
    PatternExport)
  (#:values
   expand-datatypes
   module exports module-definitions module-imports module-name
   module-static-definitions module-patterns
   function-arg-pattern function-arg-type function-definition-name
   pattern-source-span case-clause-pattern)
  (#:patterns
    module annotated-expr app-expr type-export export exports begin-expr block boolean-literal
    bytes-literal case-clause case-expr function-definition function-arg
    if-expr int-literal lambda-expr let-expr
    match-def var-expr varargs-app-expr varargs-definition
    imports abstraction-pattern bytes-pattern ignore-pattern
    int-pattern variable-pattern pattern-export
    variant-constructor variant-accessor))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [definitions : (List FunctionDefinition)]
            [datatype-definitions : (List DatatypeDefinition)]
            [patterns : (Dict Bytes PatternSignature)]
            [static-definitions : (List StaticDefinition)]))

  (define-type DatatypeDefinition
    (variant-constructor
      [variant-name : Bytes]
      [type : Type]
      [fields : (List FieldDescriptor)]
      [tag : U8])
    (variant-accessor
      [accessor-name : Bytes]
      [type : Type]
      [field-offset : Int]))

  (define-type FieldDescriptor
    (field-descriptor [name : Bytes] [runtime-index : Int]))

  (define-type Imports
    (imports
      [values : (Dict Bytes ValueSignature)]
      [static-bindings : (Dict Bytes StaticSignature)]
      [static-info : (Dict TopLevelName TopLevelSignature)]))

  (define-type Exports
    (exports [types : (List TypeExport)]
             [values : (List Export)]
             [patterns : (List PatternExport)]
             [statics : (List Export)]))
  (define-type PatternExport
    (pattern-export [exported-name : Bytes] [desc : PatternSignature])))

(define (expand-datatypes [mod : rt:Module]) : (Either Bytes Module)
  (case mod
    [(rt:module name imports exports types definitions statics)
     (match-define type-defs (expand-datatypes/type-definitions name types))
     (match-define patterns
       (merge-dicts
         (rt:imports-patterns imports)
         (expand-datatypes/patterns name types)))
     (match-define imports (expand-datatypes/imports imports))
     (case (expand-datatypes/exports exports patterns)
       [(left v) (left v)]
       [(right exports)
        (right (module name imports exports definitions type-defs patterns statics))])]))

(define (expand-datatypes/imports [is : rt:Imports]) : Imports
  (case is
    [(rt:imports values _ static-bindings static-info)
     (imports values static-bindings static-info)]))

(define (expand-datatypes/type-definitions [mod-name : ModName] [defs : (List TypeDefinition)])
  : (List DatatypeDefinition)
  (foldl
    (lambda ([def : TypeDefinition] [acc : (List DatatypeDefinition)])
      (case def
        [(type-definition name type-vars variants)
         (match-define simple-type-vars (simplify-type-vars type-vars))
         (match-define self-type
           (abstract-type mod-name name (map var-type simple-type-vars) (star-kind)))
         (case variants
           [(cons variant (empty))
            (match-define (variant-definition variant-name fields) variant)
            (variant-definition->accessors
              (variant-definition->constructor
                acc (u8 0) simple-type-vars self-type variant)
              0 variant-name simple-type-vars self-type fields)]
           [_
            (variant-definitions->constructors
              acc 0 simple-type-vars self-type variants)])]))
    defs
    (ann (List DatatypeDefinition) (empty))))

(define (expand-datatypes/patterns [mod-name : ModName] [defs : (List TypeDefinition)])
  : (Dict Bytes PatternSignature)
  (foldl
    (lambda ([def : TypeDefinition] [acc : (Dict Bytes PatternSignature)])
      (match-define (type-definition type-name type-vars variants) def)
      (match-define simple-type-vars (simplify-type-vars type-vars))
      (match-define all-variant-names (map variant-definition-name variants))
      (match-define all-variant-tags
        (map/indexed (lambda ([_ : VariantDefinition] [tag : Int]) (lifted-u8 (u8 tag)))
                     variants))
      (dict-add-all
        acc
        (map/indexed
          (lambda ([var : VariantDefinition] [tag : Int])
            (match-define (variant-definition name fields) var)
            (tuple2
              name
              (pattern-signature
                (source-variant-info mod-name type-name simple-type-vars
                                     (map variant-field-type fields))
                (variant-destruction-info name (u8 tag) (length fields)
                                          all-variant-names
                                          all-variant-tags))))
          variants)))
    defs
    (ann (Dict Bytes PatternSignature) (make-dict bytes-cmp))))

(define (simplify-type-vars [type-vars : (Maybe (List Bytes))]) : (List Bytes)
  (case type-vars
    [(nothing) (empty)]
    [(just vars) vars]))


(define (variant-definitions->constructors
          [acc : (List DatatypeDefinition)]
          [tag : Int]
          [type-vars : (List Bytes)]
          [self-type : Type]
          [defs : (List VariantDefinition)]) : (List DatatypeDefinition)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (variant-definitions->constructors
       (variant-definition->constructor acc (u8 tag) type-vars self-type def)
       (+ 1 tag)
       type-vars
       self-type
       defs)]))

(define (variant-definition->constructor
          [acc : (List DatatypeDefinition)]
          [tag : U8]
          [type-vars : (List Bytes)]
          [self-type : Type]
          [def : VariantDefinition]) : (List DatatypeDefinition)
  (case def
    [(variant-definition name fields)
     (match-define field-descriptors
       (map/indexed
         (lambda ([v : VariantField] [i : Int])
           (field-descriptor (variant-field-name v) i))
         fields))
     (match-define type
       (fun-type type-vars (map variant-field-type fields) self-type))
     (cons
       (variant-constructor name type field-descriptors tag)
       acc)]))

(define (variant-definition->accessors
          [acc : (List DatatypeDefinition)]
          [offset : Int]
          [variant-name : Bytes]
          [type-vars : (List Bytes)]
          [self-type : Type]
          [fields : (List VariantField)]) : (List DatatypeDefinition)
  (case fields
    [(empty) acc]
    [(cons (variant-field name field-type) fields)
     (match-define type (fun-type type-vars (varargs list self-type) field-type))
     (variant-definition->accessors
       (cons
         (variant-accessor (bytes-append (varargs list variant-name #"-" name)) type offset)
         acc)
       (+ offset 1)
       variant-name
       type-vars
       self-type
       fields)]))

(define (expand-datatypes/exports
          [orig-exports : rt:Exports]
          [local-patterns : (Dict Bytes PatternSignature)])
  : (Either Bytes Exports)
  (match-define (rt:exports types values patterns statics) orig-exports)
  (case (expand-datatypes/pattern-exports patterns local-patterns)
    [(left v) (left v)]
    [(right patterns)
     (right (exports types values patterns statics))]))

(define (expand-datatypes/pattern-exports [exports : (List Export)]
                                          [patterns : (Dict Bytes PatternSignature)])
  : (Either Bytes (List PatternExport))
  (extract-rights
    (map
      (lambda ([export : Export]) : (Either Bytes PatternExport)
        (match-define (export local-name exported-name) export)
        (case (dict-ref patterns local-name)
            [(nothing) (left (bytes-append (varargs list #"Unbound exported pattern:" local-name)))]
            [(just v)
             (right (pattern-export exported-name v))]))
      exports)))
