#:module (linker)
#:import {
  (bytes)
  (data indexed-set)
  (data ordering)
  (either)
  (list)
  (mach-o)
  (maybe)
  (prim)
  (structured-mach-o)
}
(export
  (#:types)
  (#:values parsed-mach-o parsed-mach-o-text-section parsed-mach-o-const-section
            apply-relocations
            symbol-table-entry-name< symbol-table-entry-name-cmp parse-mach-o)
  (#:patterns))
(types
  (define-type ParsedMachO
    (parsed-mach-o
      [text-section : TextSegmentSection]
      [const-section : TextSegmentSection])))


(define (symbol-table-entry-name-cmp [s1 : SymbolTableEntry] [s2 : SymbolTableEntry]) : Ordering
  (case s1
    [(symbol-table-entry name1 _ _ _ _)
     (case s2
       [(symbol-table-entry name2 _ _ _ _)
        (bytes-cmp name1 name2)])]))

(define (symbol-table-entry-name< [s1 : SymbolTableEntry] [s2 : SymbolTableEntry]) : Boolean
  (case s1
    [(symbol-table-entry name1 _ _ _ _)
     (case s2
       [(symbol-table-entry name2 _ _ _ _)
        (bytes< name1 name2)])]))

(define (parse-mach-o [mach-o : MachOFile]) : (Either Bytes ParsedMachO)
  (match-define all-symbols (read-symbol-table mach-o))
  (right
    (parsed-mach-o
      (parse-text-section mach-o all-symbols)
      (parse-const-section mach-o all-symbols))))


(define (find-symbol-entry [symbol : Bytes] [symbols : (IndexedSet SymbolTableEntry Bytes)])
  : (Either Bytes SymbolTableEntry)
  (case (indexed-set-ref symbols symbol)
    [(nothing) (left (bytes-append (varargs list #"Couldn't find symbol: " symbol)))]
    [(just entry) (right entry)]))

(define (apply-u64-absolute-relocation
          [section : Bytes]
          [offset : Int]
          [value : Int]) : Void
  (bytes-set!/u64-le
    section
    offset
    (u64 (+ (u64->s64 (bytes-ref/u64-le section offset))
         value))))

(define (apply-s32-pc-relative-relocation
          [section : Bytes]
          [offset : Int]
          [addr : Int]
          [section-start-addr : Int]) : Void
  ;; We adjust the value by 4 because the PC differs by 4 from the start of the relocated value,
  ;; when the calculation is done.
  (bytes-set!/s32-le
    section
    offset
    (s32
      (+ (bytes-ref/quad-le section offset)
         (- addr (+ (+ offset 4) section-start-addr))))))

(define (apply-relocations
          [rels : (List Relocation)]
          [symbols : (IndexedSet SymbolTableEntry Bytes)]
          [section-contents : Bytes]
          [section-start-addr : Int]) : (Maybe Bytes)
  (case rels
    [(empty) (nothing)]
    [(cons (relocation rel-kind offset symbol) rels)
     (case (find-symbol-entry symbol symbols)
       [(left msg) (just msg)]
       [(right entry)
        (match-define value (u64->s64 (symbol-table-entry-value entry)))
        (begin
          (case rel-kind
            [(branch-relocation)
             (apply-s32-pc-relative-relocation section-contents offset value section-start-addr)]
            [(signed-relocation)
             (apply-s32-pc-relative-relocation section-contents offset value section-start-addr)]
            [(unsigned-relocation)
             (apply-u64-absolute-relocation section-contents offset value)])
          (apply-relocations rels symbols section-contents section-start-addr))])]))
