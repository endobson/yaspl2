#:module (linker)
#:import {
  (bytes)
  (data indexed-set)
  (data ordering)
  (either)
  (list)
  (mach-o)
  (maybe)
  (prim)
  (structured-mach-o)
}
(export
  #:types ()
  #:values (parsed-mach-o parsed-mach-o-text-section parsed-mach-o-const-section
            apply-relocations
            symbol-table-entry-name< symbol-table-entry-name-cmp parse-mach-o)
  #:patterns ())
(types
  (define-type ParsedMachO
    (parsed-mach-o
      [text-section : SectionPart]
      [const-section : SectionPart])))

(define (find-symbol-table [load-commands : (List MachOLoadCommand)]) : SymbolTable
  (case load-commands
    [(empty) (panic #"No symbol table")]
    [(cons (lc-symbol-table v) _) v]
    [(cons _ lc) (find-symbol-table lc)]))

(define (find-text-section [load-commands : (List MachOLoadCommand)]) : Section64
  (case load-commands
    [(empty) (panic #"No text section")]
    [(cons (lc-load-segment64 (load-segment64 _ _ _ _ _ _ _ _ sections)) lc)
     (case (find-text-section* sections)
       [(just sec) sec]
       [_ (find-text-section lc)])]
    [(cons _ lc) (find-text-section lc)]))

(define (find-text-section* [sections : (List Section64)]) : (Maybe Section64)
  (case sections
    [(empty) (nothing)]
    [(cons sec secs)
     (case sec
       [(section64 #"__text" #"__TEXT" _ _ _ _ _ _ _)
        (just sec)]
       [_ (find-text-section* secs)])]))

(define (find-const-section [load-commands : (List MachOLoadCommand)]) : Section64
  (case load-commands
    [(empty) (panic #"No const section")]
    [(cons (lc-load-segment64 (load-segment64 _ _ _ _ _ _ _ _ sections)) lc)
     (case (find-const-section* sections)
       [(just sec) sec]
       [_ (find-const-section lc)])]
    [(cons _ lc) (find-const-section lc)]))

(define (find-const-section* [sections : (List Section64)]) : (Maybe Section64)
  (case sections
    [(empty) (nothing)]
    [(cons sec secs)
     (case sec
       [(section64 #"__const" #"__TEXT" _ _ _ _ _ _ _)
        (just sec)]
       [_ (find-const-section* secs)])]))

(define (text-symbol? [entry : SymbolTableEntry]) : Boolean
  (case entry
    [(symbol-table-entry _ _ section _ _)
     (= (u8->s64 section) 1)]))
(define (const-symbol? [entry : SymbolTableEntry]) : Boolean
  (case entry
    [(symbol-table-entry _ _ section _ _)
     (= (u8->s64 section) 2)]))

(define (symbol-entries->defined-symbols
          [section-base-address : Int]
          [entries : (List SymbolTableEntry)]) : (List DefinedSymbol)
  (map
    (lambda ([entry : SymbolTableEntry])
      (case entry
        [(symbol-table-entry name _ _ _ value)
         (defined-symbol name (- (u64->s64 value) section-base-address))]))
    entries))

(define (read-symbol-table [mach-o : MachOFile]) : (List SymbolTableEntry)
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-symbol-table load-commands)
       [(symbol-table offset num-symbols string-offset string-size)
        (match-define offset (u32->s64 offset))
        (match-define num-symbols (u32->s64 num-symbols))
        (match-define string-offset (u32->s64 string-offset))
        (match-define string-size (u32->s64 string-size))
        (read-symbol-table/symbols
          0
          (subbytes bytes offset (+ offset (* num-symbols 16)))
          (subbytes bytes string-offset (+ string-offset string-size)))])]))

(define (read-relocations [num : Int] [offset : Int] [bytes : Bytes]) : (List RelocationEntry)
  (if (= 0 num)
      (empty)
      (cons
        (read-relocation-entry offset bytes)
        (read-relocations (- num 1) (+ offset 8) bytes))))

(define (read-text-section [mach-o : MachOFile]) : Bytes
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-text-section load-commands)
       [(section64 _ _ _ size offset _ _ _ _)
        (match-define size (u64->s64 size))
        (match-define offset (u32->s64 offset))
        (subbytes bytes offset (+ offset size))])]))

(define (read-text-relocations [mach-o : MachOFile]) : (List RelocationEntry)
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-text-section load-commands)
       [(section64 _ _ _ _ _ _ relocation-offset num-relocations _)
        (match-define relocation-offset (u32->s64 relocation-offset))
        (match-define num-relocations (u32->s64 num-relocations))
        (read-relocations num-relocations relocation-offset bytes)])]))


(define (read-const-section [mach-o : MachOFile]) : Bytes
  (case mach-o
    [(mach-o-file header load-commands bytes)
      (case (find-const-section load-commands)
       [(section64 _ _ _ size offset _ _ _ _)
        (match-define size (u64->s64 size))
        (match-define offset (u32->s64 offset))
        (subbytes bytes offset (+ offset size))])]))

(define (read-const-relocations [mach-o : MachOFile]) : (List RelocationEntry)
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-const-section load-commands)
       [(section64 _ _ _ _ _ _ relocation-offset num-relocations _)
        (match-define relocation-offset (u32->s64 relocation-offset))
        (match-define num-relocations (u32->s64 num-relocations))
        (read-relocations num-relocations relocation-offset bytes)])]))

(define (symbol-table-entry-name-cmp [s1 : SymbolTableEntry] [s2 : SymbolTableEntry]) : Ordering
  (case s1
    [(symbol-table-entry name1 _ _ _ _)
     (case s2
       [(symbol-table-entry name2 _ _ _ _)
        (bytes-cmp name1 name2)])]))

(define (symbol-table-entry-name< [s1 : SymbolTableEntry] [s2 : SymbolTableEntry]) : Boolean
  (case s1
    [(symbol-table-entry name1 _ _ _ _)
     (case s2
       [(symbol-table-entry name2 _ _ _ _)
        (bytes< name1 name2)])]))

(define (parse-mach-o [mach-o : MachOFile]) : (Either Bytes ParsedMachO)
  (match-define all-symbols (read-symbol-table mach-o))
  (match-define text-section (read-text-section mach-o))
  ;; TODO actually read the alignment
  (right
    (parsed-mach-o
      (section-part
        text-section
        0
        (resolve-relocations (read-text-relocations mach-o) all-symbols)
        (symbol-entries->defined-symbols 0 (filter text-symbol? all-symbols)))
      (section-part
        (read-const-section mach-o)
        0
        (resolve-relocations (read-const-relocations mach-o) all-symbols)
        (symbol-entries->defined-symbols (bytes-length text-section)
                                         (filter const-symbol? all-symbols))))))

(define (lookup-symbol [symbols : (List SymbolTableEntry)] [symbol-num : Int])
  : (Maybe SymbolTableEntry)
  (list-ref symbols symbol-num))

(define (resolve-relocations
          [relocations : (List RelocationEntry)]
          [symbols : (List SymbolTableEntry)]) : (List Relocation)
  (map
    (lambda ([entry : RelocationEntry]) : Relocation
      (case entry
        [(relocation-entry address symbol-num type)
         (case (lookup-symbol symbols (u32->s64 symbol-num))
           [(nothing) (panic #"Not a valid symbol number")]
           [(just symbol-entry)
            (relocation
              (u8->relocation-kind type)
              (u32->s64 address)
              (symbol-table-entry-name symbol-entry))])]))
    relocations))


(define (find-symbol-entry [symbol : Bytes] [symbols : (IndexedSet SymbolTableEntry Bytes)])
  : (Either Bytes SymbolTableEntry)
  (case (indexed-set-ref symbols symbol)
    [(nothing) (left (bytes-append (varargs list #"Couldn't find symbol: " symbol)))]
    [(just entry) (right entry)]))

(define (apply-u64-absolute-relocation
          [section : Bytes]
          [offset : Int]
          [value : Int]) : Void
  (bytes-set!/u64-le
    section
    offset
    (u64 (+ (u64->s64 (bytes-ref/u64-le section offset))
         value))))

(define (apply-s32-pc-relative-relocation
          [section : Bytes]
          [offset : Int]
          [addr : Int]
          [section-start-addr : Int]) : Void
  ;; We adjust the value by 4 because the PC differs by 4 from the start of the relocated value,
  ;; when the calculation is done.
  (bytes-set!/s32-le
    section
    offset
    (s32
      (+ (bytes-ref/quad-le section offset)
         (- addr (+ (+ offset 4) section-start-addr))))))

(define (apply-relocations
          [rels : (List Relocation)]
          [symbols : (IndexedSet SymbolTableEntry Bytes)]
          [section-contents : Bytes]
          [section-start-addr : Int]) : (Maybe Bytes)
  (case rels
    [(empty) (nothing)]
    [(cons (relocation rel-kind offset symbol) rels)
     (case (find-symbol-entry symbol symbols)
       [(left msg) (just msg)]
       [(right entry)
        (match-define value (u64->s64 (symbol-table-entry-value entry)))
        (begin
          (case rel-kind
            [(branch-relocation)
             (apply-s32-pc-relative-relocation section-contents offset value section-start-addr)]
            [(signed-relocation)
             (apply-s32-pc-relative-relocation section-contents offset value section-start-addr)]
            [(unsigned-relocation)
             (apply-u64-absolute-relocation section-contents offset value)])
          (apply-relocations rels symbols section-contents section-start-addr))])]))
