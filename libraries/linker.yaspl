#:module (linker)
#:import {
  (bytes)
  (data boolean)
  (either)
  (list)
  (data indexed-set)
  (mach-o)
  (maybe)
  (prim)
}
(export
  #:types ()
  #:values (parsed-mach-o parsed-mach-o-text-section parsed-mach-o-const-section
            apply-text-relocations apply-const-relocations get-relocation-markers
            symbol-table-entry-name< get-offset-symbols symbol-table-entry-name=? parse-mach-o)
  #:patterns ())
(types
  (define-type ParsedMachO
    (parsed-mach-o
      [text-section : Bytes]
      [const-section : Bytes]
      [text-relocations : (List RelocationEntry)]
      [const-relocations : (List RelocationEntry)]
      [symbols : (List SymbolTableEntry)]))
  (define-type RelocationMarker
    (relocation-marker
      [address : Int]
      [symbol : Bytes]
      ;; Type should be a U8 but then pattern matching doesn't work
      [type : Int])))

(define (find-symbol-table [load-commands : (List MachOLoadCommand)]) : SymbolTable
  (case load-commands
    [(empty) (panic #"No symbol table")]
    [(cons (lc-symtab v) _) v]
    [(cons _ lc) (find-symbol-table lc)]))

(define (find-text-section [load-commands : (List MachOLoadCommand)]) : Section64
  (case load-commands
    [(empty) (panic #"No text section")]
    [(cons (lc-segment64 (load-segment64 _ _ _ _ _ _ _ _ sections)) lc)
     (case (find-text-section* sections)
       [(just sec) sec]
       [_ (find-text-section lc)])]
    [(cons _ lc) (find-text-section lc)]))

(define (find-text-section* [sections : (List Section64)]) : (Maybe Section64)
  (case sections
    [(empty) (nothing)]
    [(cons sec secs)
     (case sec
       [(section64 #"__text" #"__TEXT" _ _ _ _ _ _)
        (just sec)]
       [_ (find-text-section* secs)])]))

(define (find-const-section [load-commands : (List MachOLoadCommand)]) : Section64
  (case load-commands
    [(empty) (panic #"No const section")]
    [(cons (lc-segment64 (load-segment64 _ _ _ _ _ _ _ _ sections)) lc)
     (case (find-const-section* sections)
       [(just sec) sec]
       [_ (find-const-section lc)])]
    [(cons _ lc) (find-const-section lc)]))

(define (find-const-section* [sections : (List Section64)]) : (Maybe Section64)
  (case sections
    [(empty) (nothing)]
    [(cons sec secs)
     (case sec
       [(section64 #"__const" #"__TEXT" _ _ _ _ _ _)
        (just sec)]
       [_ (find-const-section* secs)])]))

(define (read-symbol-table [mach-o : MachOFile]) : (List SymbolTableEntry)
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-symbol-table load-commands)
       [(symbol-table offset num-symbols string-offset string-size)
        (read-symbol-table/symbols
          0
          ;; Need to accout for 32 bytes of mach-header and  the load commands.
          (let ([start (- offset (+ 32 (u32->s64 (mach-o-header-commands-size header))))])
            (subbytes bytes start (+ start (* num-symbols 16))))
          ;; Need to accout for 32 bytes of mach-header and  the load commands.
          (let ([start (- string-offset (+ 32 (u32->s64 (mach-o-header-commands-size header))))])
            (subbytes bytes start (+ start string-size))))])]))

(define (read-relocations [num : Int] [offset : Int] [bytes : Bytes]) : (List RelocationEntry)
  (if (= 0 num)
      (empty)
      (cons
        (read-relocation-entry offset bytes)
        (read-relocations (- num 1) (+ offset 8) bytes))))

(define (read-text-section [mach-o : MachOFile]) : Bytes
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-text-section load-commands)
      [(section64 _ _ _ size offset _ _ _)
       ;; Need to accout for 32 bytes of mach-header and the load commands
       (let ([start (- offset (+ 32 (u32->s64 (mach-o-header-commands-size header))))])
         (subbytes bytes start (+ start (eight-bytes-le->int size))))])]))

(define (read-text-relocations [mach-o : MachOFile]) : (List RelocationEntry)
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-text-section load-commands)
      [(section64 _ _ _ _ _ relocation-offset num-relocations _)
       ;; Need to accout for 32 bytes of mach-header and the load commands
       (let ([start (- relocation-offset (+ 32 (u32->s64 (mach-o-header-commands-size header))))])
         (read-relocations num-relocations start bytes))])]))


(define (read-const-section [mach-o : MachOFile]) : Bytes
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-const-section load-commands)
      [(section64 _ _ _ size offset _ _ _)
       ;; Need to accout for 32 bytes of mach-header and the load commands
       (let ([start (- offset (+ 32 (u32->s64 (mach-o-header-commands-size header))))])
         (subbytes bytes start (+ start (eight-bytes-le->int size))))])]))

(define (read-const-relocations [mach-o : MachOFile]) : (List RelocationEntry)
  (case mach-o
    [(mach-o-file header load-commands bytes)
     (case (find-const-section load-commands)
      [(section64 _ _ _ _ _ relocation-offset num-relocations _)
       ;; Need to accout for 32 bytes of mach-header and the load commands
       (let ([start (- relocation-offset (+ 32 (u32->s64 (mach-o-header-commands-size header))))])
         (read-relocations num-relocations start bytes))])]))

(define (symbol-table-entry-name=? [s1 : SymbolTableEntry] [s2 : SymbolTableEntry]) : Boolean
  (case s1
    [(symbol-table-entry name1 _ _ _ _)
     (case s2
       [(symbol-table-entry name2 _ _ _ _)
        (bytes=? name1 name2)])]))

(define (symbol-table-entry-name< [s1 : SymbolTableEntry] [s2 : SymbolTableEntry]) : Boolean
  (case s1
    [(symbol-table-entry name1 _ _ _ _)
     (case s2
       [(symbol-table-entry name2 _ _ _ _)
        (bytes< name1 name2)])]))

(define (parse-mach-o [mach-o : MachOFile]) : (Either Bytes ParsedMachO)
  (right
    (parsed-mach-o
      (read-text-section mach-o)
      (read-const-section mach-o)
      (read-text-relocations mach-o)
      (read-const-relocations mach-o)
      (read-symbol-table mach-o))))


(define (get-offset-symbols
          [parsed-mach-os : (List ParsedMachO)]
          [text-offset : Int]
          [const-offset : Int])
  : (List SymbolTableEntry)
  (case parsed-mach-os
    [(empty) (empty)]
    [(cons (parsed-mach-o text const _ _ symbols) parsed-mach-os)
     (append
       (filter
         (lambda ([entry : SymbolTableEntry])
           (case entry
             [(symbol-table-entry _ type _ _ _)
              (not (= (u8->s64 type) 1))]))
         (map
           (lambda ([entry : SymbolTableEntry])
             (case entry
               [(symbol-table-entry name type sect desc value)
                (symbol-table-entry name type sect desc
                  (case (u8->s64 sect)
                    [1 (+ text-offset value)]
                    [2 (- (+ const-offset value) (bytes-length text))]
                    [_ value]))]))
           symbols))
       (get-offset-symbols parsed-mach-os
                           (+ text-offset (bytes-length text))
                           (+ const-offset (bytes-length const))))]))


(define (lookup-symbol [symbols : (List SymbolTableEntry)] [symbol-num : Int])
  : (Maybe SymbolTableEntry)
  (list-ref symbols symbol-num))

(define (get-relocation-markers
          [parsed-mach-os : (List ParsedMachO)]
          [text-offset : Int]
          [const-offset : Int])
  : (List RelocationMarker)
  (case parsed-mach-os
    [(empty) (empty)]
    [(cons (parsed-mach-o text const text-relocations const-relocations symbols) parsed-mach-os)
     (append
       (map
         (lambda ([entry : RelocationEntry]) : RelocationMarker
           (case entry
             [(relocation-entry address symbol-num type)
              (case (lookup-symbol symbols symbol-num)
                [(nothing) (panic #"Not a valid symbol number")]
                [(just symbol-entry)
                 (relocation-marker
                   (+ text-offset address)
                   (symbol-table-entry-name symbol-entry)
                   (u8->s64 type))])]))
         text-relocations)
       (append
         (map
           (lambda ([entry : RelocationEntry]) : RelocationMarker
             (case entry
               [(relocation-entry address symbol-num type)
                (case (lookup-symbol symbols symbol-num)
                  [(nothing) (panic #"Not a valid symbol number")]
                  [(just symbol-entry)
                   (relocation-marker
                     (+ const-offset address)
                     (symbol-table-entry-name symbol-entry)
                     (u8->s64 type))])]))
           const-relocations)
         (get-relocation-markers parsed-mach-os
                                 (+ text-offset (bytes-length text))
                                 (+ const-offset (bytes-length const)))))]))

(define (find-symbol-entry [symbol : Bytes] [symbols : (IndexedSet SymbolTableEntry Bytes)])
  : (Either Bytes SymbolTableEntry)
  (case (indexed-set-ref symbols symbol)
    [(nothing) (left (bytes-append (varargs list #"Couldn't find symbol: " symbol)))]
    [(just entry) (right entry)]))

(define (apply-const-relocations
          [rels : (List RelocationMarker)]
          [symbols : (IndexedSet SymbolTableEntry Bytes)]
          [const-section : Bytes]) : (Maybe Bytes)
  (case rels
    [(empty) (nothing)]
    [(cons (relocation-marker offset symbol #x0E) rels)
     (case (find-symbol-entry symbol symbols)
       [(left msg) (just msg)]
       [(right entry)
        (begin
          (bytes-set!/octo-le
            const-section
            offset
            (+ (eight-bytes-le->int (bytes-ref/eight-bytes-le const-section offset))
               (symbol-table-entry-value entry)))
         (apply-const-relocations rels symbols const-section))])]
    [(cons _ rels)
     (apply-const-relocations rels symbols const-section)]))


(define (apply-text-relocations
          [rels : (List RelocationMarker)]
          [symbols : (IndexedSet SymbolTableEntry Bytes)]
          [text-section : Bytes]
          [text-start-offset : Int]) : (Maybe Bytes)
  (case rels
    [(empty) (nothing)]
    [(cons (relocation-marker offset symbol #x2D) rels)
     (case (find-symbol-entry symbol symbols)
       [(left msg) (just msg)]
       [(right entry)
        (begin
          (bytes-set!/quad-le
            text-section
            offset
            (u32
              (+ (bytes-ref/quad-le text-section offset)
                 (- (symbol-table-entry-value entry)
                    (+ (+ offset 4) text-start-offset)))))
          (apply-text-relocations rels symbols text-section text-start-offset))])]
    [(cons (relocation-marker offset symbol #x1D) rels)
     (case (find-symbol-entry symbol symbols)
       [(left msg) (just msg)]
       [(right entry)
        (begin
          (bytes-set!/quad-le
            text-section
            offset
            (u32
              (+ (bytes-ref/quad-le text-section offset)
                 (- (symbol-table-entry-value entry)
                    (+ (+ offset 4) text-start-offset)))))
          (apply-text-relocations rels symbols text-section text-start-offset))])]
    [(cons _ rels)
     (apply-text-relocations rels symbols text-section text-start-offset)]))
