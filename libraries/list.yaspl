(module list
  (import
    (prim
      #:types (Byte)
      #:values (+)
      #:patterns ()))
  (export List cons empty cons-head cons-tail reverse length)
  (types
    (define-type (List a)
      (cons [head a] [tail (List a)])
      (empty)))
                                                        
  ;; TODO figure out how to specify a polymorphic function 
  (define (reverse [list : (List Byte)]) : (List Byte)
    (reverse-helper list (empty)))
  (define (reverse-helper [l1 : (List Byte)] [l2 : (List Byte)]) : (List Byte)
    (case l1
      [(empty) l2]
      [(cons hd tl) (reverse-helper tl (cons hd l2))]))


  (define (length [l : (List Byte)]) : Byte
    (case l
      [(empty) 0]
      [(cons e l) (+ 1 (length l))])))
