(module mach-o-writer
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array Void)
      #:values (- < = array-length array-ref open-output-file read-bytes make-bytes
                panic void bytes-ref)
      #:patterns ())
    (io write-line write-all-bytes)
    (numbers integer->hex-bytes integer->decimal-bytes)
    (bytes bytes bytes-ref/quad-le make-null-terminated))
  (export)
  (types
    (define-type MachOHeader
      (mach-o-header)))


  (define (write-mach-o-header [header : MachOHeader] [output : OutputPort]) : Void
    (begin
      (write-all-bytes (varargs bytes #xcf #xfa #xed #xfe) output)
      ;; CPU type
      (write-all-bytes (varargs bytes #x07 #x00 #x00 #x01) output)
      ;; CPU subtype
      (write-all-bytes (varargs bytes #x03 #x00 #x00 #x00) output)
      ;; File type
      (write-all-bytes (varargs bytes #x02 #x00 #x00 #x00) output)

      ;; Number of commands 
      (write-all-bytes (varargs bytes #x02 #x00 #x00 #x00) output)
      ;; Size of commands 
      (write-all-bytes (varargs bytes #x50 #x01 #x00 #x00) output)

      ;; Flags
      (write-all-bytes (varargs bytes #x01 #x00 #x00 #x00) output)
      ;; Reserved
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (void)))

  (define (write-load-segment [output : OutputPort]) : Void
    (begin
      ;; LC_SEGMENT_64
      (write-all-bytes (varargs bytes #x19 #x00 #x00 #x00) output)
      ;; Command size
      (write-all-bytes (varargs bytes #x98 #x00 #x00 #x00) output)

      (write-all-bytes (varargs bytes #x5f #x5f #x54 #x45) output)
      (write-all-bytes (varargs bytes #x58 #x54 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)


      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x01 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x10 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)


      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x01 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)


      (write-all-bytes (varargs bytes #x07 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x05 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x01 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      
      ;; Section start
      (write-all-bytes (varargs bytes #x5f #x5f #x74 #x65) output)
      (write-all-bytes (varargs bytes #x78 #x74 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      

      (write-all-bytes (varargs bytes #x5f #x5f #x54 #x45) output)
      (write-all-bytes (varargs bytes #x58 #x54 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      

      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x01 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x01 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)


      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)

      (write-all-bytes (varargs bytes #x00 #x04 #x00 #x80) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      

      ))



  (define (write-unix-thread [output : OutputPort]) : Void
    (begin
      ;; LC_UNIXTHREAD
      (write-all-bytes (varargs bytes #x05 #x00 #x00 #x00) output)
      ;; Command size
      (write-all-bytes (varargs bytes #xb8 #x00 #x00 #x00) output)
      ;; Thread Flavor
      (write-all-bytes (varargs bytes #x04 #x00 #x00 #x00) output)
      ;; Thread Count
      (write-all-bytes (varargs bytes #x2a #x00 #x00 #x00) output)

      ;; Registers
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x01 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (write-all-bytes (varargs bytes #x00 #x00 #x00 #x00) output)
      (void)))



  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (let ([output (open-output-file (make-null-terminated (array-ref args 1)))])
          (begin
            (write-mach-o-header (mach-o-header) output)
            (write-unix-thread output)
            (write-load-segment output)
            0)))))
