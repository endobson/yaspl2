#:module mach-o-writer
(import
  (bytes bytes bytes-set!/octo-le bytes-set!/quad-le)
  (dict
    #:types (Dict)
    #:values ()
    #:patterns ())
  (io write-all-bytes)
  (list
    #:types (List)
    #:values (length)
    #:patterns (cons empty))
  (prim
    #:types (Bytes Int OutputPort U32 U8 Void)
    #:values (* + - > bytes-length make-bytes panic u32 u32->s64 u8->s64 void)
    #:patterns ()))
(export
  #:types ()
  #:values (lc-load-segment64 load-segment64 section64 write-mach-o-header mach-o-header
            mach-o-executable-file mach-o-library-file
            lc-version-min-macosx version-min lc-dynamic-symbol-table dynamic-symbol-table
            lc-symbol-table symbol-table lc-data-in-code linkedit-data lc-source-version
            lc-unix-thread unix-thread)
  #:patterns ())
(types
  (define-type MachOHeader
    (mach-o-header
      [file-type : MachOFileType]
      [commands : (List MachOLoadCommand)]))
  (define-type MachOFileType
    (mach-o-library-file)
    (mach-o-executable-file))
  (define-type MachOLoadCommand
    (lc-unix-thread [v : UnixThread])
    (lc-version-min-macosx [v : VersionMin])
    (lc-source-version)
    (lc-symbol-table [v : SymbolTable])
    (lc-data-in-code [v : LinkeditData])
    (lc-dynamic-symbol-table [v : DynamicSymbolTable])
    (lc-load-segment64 [v : LoadSegment64]))
  (define-type LoadSegment64
    (load-segment64
      [name : Bytes]
      [vm-addr : Int]
      [vm-size : Int]
      [file-offset : Int]
      [file-size : Int]
      [max-protection : U32]
      [init-protection : U32]
      [flags : U32]
      [sections : (List Section64)]))

  (define-type Section64
    (section64
      [segment-name : Bytes]
      [name : Bytes]
      [addr : Int]
      [size : Int]
      [offset : Int]
      [relocation-offset : Int]
      [num-relocations : Int]
      [flags : U32]))

  (define-type UnixThread
    (unix-thread
      [start-address : Int]))

  (define-type VersionMin
    (version-min
      [version-major : U8] ;; TODO this should be a u16
      [version-minor : U8]
      [version-patch : U8]
      [sdk-major : U8] ;; TODO this should be a u16
      [sdk-minor : U8]
      [sdk-patch : U8]))

  (define-type SymbolTable
    (symbol-table
      [offset : Int]
      [number : Int]
      [string-offset : Int]
      [string-size : Int]))

  (define-type DynamicSymbolTable
    (dynamic-symbol-table
      [index-externally-defined-symbols : U32]
      [count-externally-defined-symbols : U32]
      [index-undefined-symbols : U32]
      [count-undefined-symbols : U32]))

  (define-type LinkeditData
    (linkedit-data
      [offset : U32]
      [size : U32]))

  (define-type RelocationEntry
    (branch-reloc-entry [name : Bytes])
    (unsigned-reloc-entry [name : Bytes]))

  (define-type AssemblyBlock
    (assembly-block
      [data : Bytes]
      [symbols : (Dict Bytes Int)]
      [relocations : (Dict Int RelocationEntry)])))


;; TODO Make this take in a U8
(define (write-byte [v : Int] [output : OutputPort]) : Void
  (write-all-bytes (varargs bytes v) output))

;; TODO Make this take in a U32/S32
(define (write-quad-le [v : Int] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 4)])
    (begin
      (bytes-set!/quad-le bytes 0 (u32 v))
      (write-all-bytes bytes output))))

;; TODO delete this
(define (write-octo-le [v : Int] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 8)])
    (begin
      (bytes-set!/octo-le bytes 0 v)
      (write-all-bytes bytes output))))


(define (load-commands-size [lcs : (List MachOLoadCommand)]) : Int
  (case lcs
    [(empty) 0]
    [(cons lc lcs)
     (+ (load-command-size lc) (load-commands-size lcs))]))

(define (load-command-size [lc : MachOLoadCommand]) : Int
  (case lc
    [(lc-unix-thread _) #xb8]
    [(lc-source-version) #x10]
    [(lc-version-min-macosx _) #x10]
    [(lc-data-in-code _) #x10]
    [(lc-load-segment64 load-seg)
     (+ 72 (* (length (load-segment64-sections load-seg)) 80))]
    [(lc-symbol-table _) #x18]
    [(lc-dynamic-symbol-table _) #x50]))


(define (write-mach-o-header [header : MachOHeader] [output : OutputPort]) : Void
  (match-define (mach-o-header file-type commands) header)
  (begin
    (write-quad-le #xfeedfacf output)
    ;; CPU type
    (write-quad-le #x01000007 output)
    ;; CPU subtype
    (write-quad-le #x03 output)
    ;; File type
    (write-quad-le
      (case file-type
        [(mach-o-library-file) #x01]
        [(mach-o-executable-file) #x02])
      output)

    ;; Number of commands
    (write-quad-le (length commands) output)
    ;; Size of commands
    (write-quad-le (load-commands-size commands) output)

    ;; Flags
    ;; TODO actually compute these instead of guessing at them based on file type
    (write-quad-le
      (case file-type
        [(mach-o-library-file) #x00]
        [(mach-o-executable-file) #x01])
      output)
    ;; Reserved
    (write-quad-le #x00 output)

    (write-load-commands commands output)))

(define (write-load-commands [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (case commands
    [(empty) (void)]
    [(cons (lc-unix-thread ut) commands)
     (begin
       (write-unix-thread ut output)
       (write-load-commands commands output))]
    [(cons (lc-version-min-macosx vm) commands)
     (begin
       (write-version-min vm output)
       (write-load-commands commands output))]
    [(cons (lc-source-version) commands)
     (begin
       (write-source-version output)
       (write-load-commands commands output))]
    [(cons (lc-data-in-code v) commands)
     (begin
       (write-linkedit-data v output)
       (write-load-commands commands output))]
    [(cons (lc-load-segment64 ls) commands)
     (begin
       (write-load-segment64 ls output)
       (write-load-commands commands output))]
    [(cons (lc-symbol-table st) commands)
     (begin
       (write-symbol-table st output)
       (write-load-commands commands output))]
    [(cons (lc-dynamic-symbol-table dst) commands)
     (begin
       (write-dynamic-symbol-table dst output)
       (write-load-commands commands output))]))

(define (write-16-byte-name [bytes : Bytes] [output : OutputPort]) : Void
  (if (> (bytes-length bytes) 16)
      (panic #"Too Long")
      (begin
        (write-all-bytes bytes output)
        (write-all-bytes (make-bytes (- 16 (bytes-length bytes))) output))))

(define (write-load-segment64 [seg : LoadSegment64] [output : OutputPort]) : Void
  (match-define (load-segment64 name vm-addr vm-size file-offset file-size max-protection
                                init-protection flags sections)
    seg)
  (begin
    ;; LC_SEGMENT_64
    (write-quad-le #x19 output)
    ;; Command size
    (write-quad-le (+ 72 (* (length sections) 80)) output)

    (write-16-byte-name name output)

    (write-octo-le vm-addr output)
    (write-octo-le vm-size output)

    (write-octo-le file-offset output)
    (write-octo-le file-size output)

    (write-quad-le (u32->s64 max-protection) output)
    (write-quad-le (u32->s64 init-protection) output)
    (write-quad-le (length sections) output)
    (write-quad-le (u32->s64 flags) output)

    (write-sections sections output)))

(define (write-sections [sections : (List Section64)] [output : OutputPort]) : Void
  (case sections
    [(empty) (void)]
    [(cons section sections)
     (begin
       (write-section section output)
       (write-sections sections output))]))

(define (write-section [section : Section64] [output : OutputPort]) : Void
  (match-define (section64 seg-name name addr size offset rel-offset num-rels flags) section)
  (begin
    (write-16-byte-name name output)
    (write-16-byte-name seg-name output)

    (write-octo-le addr output)
    (write-octo-le size output)
    (write-quad-le offset output)

    (write-quad-le #x00 output)
    (write-quad-le rel-offset output)
    (write-quad-le num-rels output)


    (write-quad-le (u32->s64 flags) output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)))


(define (write-source-version [output : OutputPort]) : Void
  (begin
    ;; LC_UNIXTHREAD
    (write-quad-le #x2A output)
    ;; Command size
    (write-quad-le #x10 output)

    (write-octo-le #x00 output)))

;; TODO make this not hardcoded to LC_VERSION_MIN_MACOSX
;; TODO support more than one major byte this the real values
(define (write-version-min [vm : VersionMin] [output : OutputPort]) : Void
  (match-define (version-min v-major v-minor v-patch sdk-major sdk-minor sdk-patch) vm)
  (begin
    ;; LC_VERSION_MIN_MACOSX
    (write-quad-le #x24 output)
    ;; Command size
    (write-quad-le #x10 output)

    (write-byte (u8->s64 v-patch) output)
    (write-byte (u8->s64 v-minor) output)
    (write-byte (u8->s64 v-major) output)
    (write-byte 0 output)
    (write-byte (u8->s64 sdk-patch) output)
    (write-byte (u8->s64 sdk-minor) output)
    (write-byte (u8->s64 sdk-major) output)
    (write-byte 0 output)))

(define (write-linkedit-data [v : LinkeditData] [output : OutputPort]) : Void
  (match-define (linkedit-data offset size) v)
  (begin
    ;; LC_DATA_IN_CODE
    (write-quad-le #x29 output)
    ;; Command size
    (write-quad-le #x10 output)
    (write-quad-le (u32->s64 offset) output)
    (write-quad-le (u32->s64 size) output)))

(define (write-unix-thread [ut : UnixThread] [output : OutputPort]) : Void
  (match-define (unix-thread start-address) ut)
  (begin
    ;; LC_UNIXTHREAD
    (write-quad-le #x05 output)
    ;; Command size
    (write-quad-le #xb8 output)
    ;; Thread Flavor
    (write-quad-le #x04 output)
    ;; Thread Count
    (write-quad-le #x2a output)

    ;; Registers
    ;; rax
    (write-octo-le #x0000000000000000 output)
    ;; rbx
    (write-octo-le #x0000000000000000 output)
    ;; rcx
    (write-octo-le #x0000000000000000 output)
    ;; rdx
    (write-octo-le #x0000000000000000 output)
    ;; rdi
    (write-octo-le #x0000000000000000 output)
    ;; rsi
    (write-octo-le #x0000000000000000 output)
    ;; rbp
    (write-octo-le #x0000000000000000 output)
    ;; rsp
    (write-octo-le #x0000000000000000 output)
    ;; r8
    (write-octo-le #x0000000000000000 output)
    ;; r9
    (write-octo-le #x0000000000000000 output)
    ;; r10
    (write-octo-le #x0000000000000000 output)
    ;; r11
    (write-octo-le #x0000000000000000 output)
    ;; r12
    (write-octo-le #x0000000000000000 output)
    ;; r13
    (write-octo-le #x0000000000000000 output)
    ;; r14
    (write-octo-le #x0000000000000000 output)
    ;; r15
    (write-octo-le #x0000000000000000 output)

    ;; rip
    (write-octo-le start-address output)
    ;; rflags
    (write-octo-le #x0000000000000000 output)
    ;; cs
    (write-octo-le #x0000000000000000 output)
    ;; fs
    (write-octo-le #x0000000000000000 output)
    ;; gs
    (write-octo-le #x0000000000000000 output)))

(define (write-symbol-table [st : SymbolTable] [output : OutputPort]) : Void
  (match-define (symbol-table offset number-syms string-offset string-size) st)
  (begin
    ;; LC_SYMTAB
    (write-quad-le #x02 output)
    ;; Command size
    (write-quad-le #x18 output)

    (write-quad-le offset output)
    (write-quad-le number-syms output)
    (write-quad-le string-offset output)
    (write-quad-le string-size output)))

;; TODO actually write out real values
(define (write-dynamic-symbol-table [dst : DynamicSymbolTable] [output : OutputPort]) : Void
  (match-define (dynamic-symbol-table external-index external-count undefined-index undefined-count)
    dst)
  (begin
    ;; LC_DYSYMTAB
    (write-quad-le #x0B output)
    ;; Command size
    (write-quad-le #x50 output)

    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le (u32->s64 external-index) output)
    (write-quad-le (u32->s64 external-count) output)
    (write-quad-le (u32->s64 undefined-index) output)
    (write-quad-le (u32->s64 undefined-count) output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)
    (write-quad-le #x00 output)))
