#:module (mach-o-writer)
#:import {
  (bytes)
  (data indexed-set)
  (either)
  (io)
  (linker)
  (list)
  (mach-o)
  (maybe)
  (prim)
  (set)
  (structured-mach-o)
}
(export
  #:types ()
  #:values (write-mach-o-library write-mach-o-executable)
  #:patterns ())
(types
  (define-type MachOFileType
    (mach-o-library-file)
    (mach-o-executable-file)))


;; These assume that the text section is the first section and the const section is the second.
(define (text-symbol-table-entry [name : Bytes] [value : U64]) : SymbolTableEntry
  (symbol-table-entry name (u8 #x0f) (u8 #x01) (u8 #x20) value))
(define (const-symbol-table-entry [name : Bytes] [value : U64]) : SymbolTableEntry
  (symbol-table-entry name (u8 #x0f) (u8 #x02) (u8 #x20) value))
(define (undefined-symbol-table-entry [name : Bytes]) : SymbolTableEntry
  (symbol-table-entry name (u8 #x01) (u8 #x00) (u8 #x00) (u64 0)))

(define (construct-symbol-table-entries
          [text-segment-start-address : Int]
          [text-segment : TextSegment])
  : (List SymbolTableEntry)
  (match-define
    (text-segment
      contents
      (text-segment-section text-section-offset text-section-size
                            text-relocations text-symbols)
      (text-segment-section const-section-offset const-section-size
                            const-relocations const-symbols))
    text-segment)

  (match-define undefined-symbols
    (set->list
      (set-remove-all
        (set-add-all
          (make-set bytes-cmp)
          (map relocation-symbol (append text-relocations const-relocations)))
        (map defined-symbol-name (append text-symbols const-symbols)))))
  (append
    (append
      (map
        (lambda ([s : DefinedSymbol])
          (case s
            [(defined-symbol name offset)
             (text-symbol-table-entry
               name
               (u64 (+ text-segment-start-address (+ text-section-offset offset))))]))
        (sort text-symbols defined-symbol<))
      (map
        (lambda ([s : DefinedSymbol])
          (case s
            [(defined-symbol name offset)
             (const-symbol-table-entry
               name
               (u64 (+ text-segment-start-address (+ const-section-offset offset))))]))
        (sort const-symbols defined-symbol<)))
    (map
      undefined-symbol-table-entry
      (sort undefined-symbols bytes<))))

(define (round-up [v : Int] [mod : Int]) : Int
  (let ([rem (remainder v mod)])
    (if (= 0 rem)
        v
        (+ (- v rem) mod))))

(define (write-symbol-strings [symbols : (List SymbolTableEntry)] [output : OutputPort]) : Void
  (case symbols
    [(empty) (void)]
    [(cons (symbol-table-entry name _ _ _ _) symbols)
     (begin
       (write-all-bytes name output)
       (write-all-bytes (make-bytes 1) output)
       (write-symbol-strings symbols output))]))

(define (write-symbol-entries
          [symbols : (List SymbolTableEntry)]
          [string-offset : Int] [output : OutputPort]) : Void
  (case symbols
    [(empty) (void)]
    [(cons (symbol-table-entry name type sect desc value) symbols)
     ;; TODO actually use high bits of description
     (begin
       (write-u32-le (u32 string-offset) output)
       (write-all-bytes (varargs bytes (u8->s64 type) (u8->s64 sect) (u8->s64 desc) 0) output)
       (write-u64-le value output)
       (write-symbol-entries symbols (+ string-offset (+ 1 (bytes-length name))) output))]))

(define (write-relocations
          [relocations : (List Relocation)]
          [symbols : (List Bytes)]
          [output : OutputPort]) : Void
  (case relocations
    [(empty) (void)]
    [(cons (relocation reloc-kind offset symbol) relocations)
     (begin
       (write-u32-le (u32 offset) output)
       (case (find-index (lambda ([x : Bytes]) (bytes=? symbol x))
                         symbols)
         [(nothing)
          (panic #"Bad symbol")]
         [(just index)
          (let ([reloc-byte (u8->s64 (relocation-kind->u8 reloc-kind))])
            (write-u32-le (u32 (bitwise-ior index (logical-shift-left reloc-byte 24))) output))])
       (write-relocations relocations symbols output))]))

(define (find-start-address [symbols : (List SymbolTableEntry)]) : U64
  (case (findf (lambda ([entry : SymbolTableEntry])
                 (case entry [(symbol-table-entry name _ _ _ _) (bytes=? #"start" name)]))
               symbols)
    [(nothing) (panic #"Couldn't find symbol")]
    [(just v) (symbol-table-entry-value v)]))

(define (empty/relocation) : (List Relocation)
  (empty))

(define (write-mach-o-executable
          [text-segment : TextSegment]
          [output-file-name : Bytes])
  : (Either Bytes Void)
  (match-define
    (text-segment
      contents
      (text-segment-section text-section-offset text-section-size
                  text-relocations text-symbols)
      (text-segment-section const-section-offset const-section-size
                  const-relocations const-symbols))
    text-segment)
  (match-define raw-text-segment-length (bytes-length contents))
  (match-define mach-o-header-size #x310)
  (match-define rounded-text-segment-length
    (round-up (+ raw-text-segment-length mach-o-header-size) #x1000))
  (match-define text-segment-padding-size
    (- rounded-text-segment-length (+ raw-text-segment-length mach-o-header-size)))
  (match-define page-zero-size #x0000000100000000)

  ;; This is where the actual content starts.
  (match-define text-segment-start-offset #x310)
  (match-define text-segment-start-address
    (+ page-zero-size text-segment-start-offset))
  (match-define text-section-start
    (+ text-segment-start-offset text-section-offset))
  (match-define const-section-start
    (+ text-segment-start-offset const-section-offset))
  (match-define text-section-start-address
    (+ page-zero-size text-section-start))
  (match-define const-section-start-address
    (+ page-zero-size const-section-start))

  (match-define symbol-table-entries
    (construct-symbol-table-entries text-segment-start-address text-segment))

  (match-define symbol-table-lookup
    (foldl
      (lambda ([e : SymbolTableEntry] [acc : (IndexedSet SymbolTableEntry Bytes)])
        (indexed-set-add acc e))
      symbol-table-entries
      (make-indexed-set symbol-table-entry-name bytes-cmp)))
  (case (apply-relocations
          text-relocations
          symbol-table-lookup
          text-section-offset
          contents
          text-segment-start-address)
    [(just msg)
     (left msg)]
    [(nothing)
     (case (apply-relocations
             const-relocations
             symbol-table-lookup
             const-section-offset
             contents
             text-segment-start-address)
       [(just msg)
        (left msg)]
       [(nothing)
        (match-define num-symbols (length symbol-table-entries))
        (match-define symbols-length-unrounded
          (+ (+ 2 (length symbol-table-entries))
             (sum (map bytes-length (map symbol-table-entry-name
                                         symbol-table-entries)))))
        (match-define symbols-length (round-up symbols-length-unrounded 8))
        (match-define start-address (find-start-address symbol-table-entries))
        (call-with-output-file output-file-name
          (lambda ([output : OutputPort])
            (begin
              (write-executable-mach-o-header-and-load-commands
                (varargs list
                  (lc-load-segment64
                    (load-segment64 #"__PAGEZERO"
                      (u64 #x0000000000000000)
                      (u64 page-zero-size)
                      (u64 0)
                      (u64 0)
                      (u32 #x00)
                      (u32 #x00)
                      (u32 0)
                      (empty)))
                  (lc-load-segment64
                    (load-segment64 #"__TEXT"
                      (u64 page-zero-size)
                      (u64 rounded-text-segment-length)
                      (u64 #x0)
                      (u64 rounded-text-segment-length)
                      (u32 #x07)
                      (u32 #x05)
                      (u32 0)
                      (varargs list
                        (section64 #"__text" #"__TEXT"
                                   (u64 text-section-start)
                                   (u64 text-section-size)
                                   (u32 text-section-start)
                                   (u32 0) ;; TODO compute a sensible alignment
                                   (u32 0)
                                   (u32 0)
                                   (u32 #x80000400))
                        (section64 #"__const" #"__TEXT"
                                   (u64 const-section-start)
                                   (u64 const-section-size)
                                   (u32 const-section-start)
                                   (u32 0) ;; TODO compute a sensible alignment
                                   (u32 0)
                                   (u32 0)
                                   (u32 0)))))
                  (lc-load-segment64
                    (load-segment64 #"__DATA"
                      (u64 (+ page-zero-size rounded-text-segment-length))
                      (u64 #x0000000000000000)
                      (u64 rounded-text-segment-length)
                      (u64 #x0)
                      (u32 #x07)
                      (u32 #x03)
                      (u32 #x04)
                      (varargs list
                        (section64 #"__data" #"__DATA"
                                   (u64 (+ page-zero-size rounded-text-segment-length))
                                   (u64 #x0000000000000000)
                                   (u32 rounded-text-segment-length)
                                   (u32 0) ;; TODO compute a sensible alignment
                                   (u32 0)
                                   (u32 0)
                                   (u32 0)))))
                  (lc-load-segment64
                    (load-segment64 #"__LINKEDIT"
                      (u64 (+ page-zero-size rounded-text-segment-length))
                      (u64 (round-up
                             (+ (* num-symbols 16) symbols-length)
                             #x1000))
                      (u64 rounded-text-segment-length)
                      (u64 (+ (* num-symbols 16) symbols-length))
                      (u32 #x07)
                      (u32 #x01)
                      (u32 #x00)
                      (empty)))
                  (lc-symbol-table
                    (symbol-table
                      (u32 rounded-text-segment-length)
                      (u32 num-symbols)
                      (u32 (+ rounded-text-segment-length (* num-symbols 16)))
                      (u32 symbols-length)))
                  (lc-source-version)
                  (lc-unix-thread (unix-thread start-address)))
                output)
              (write-all-bytes contents output)
              ;; Write all the extra padding that is needed
              (write-all-bytes
                (make-bytes text-segment-padding-size)
                output)
              (write-symbol-entries symbol-table-entries 2 output)
              ;(write-all-bytes (make-bytes (- (* num-symbols 16) 2)) output)

              (write-all-bytes (varargs bytes 32 0) output)
              (write-symbol-strings symbol-table-entries output)
              (write-all-bytes
                (make-bytes
                  (- symbols-length symbols-length-unrounded))
                output)

              (right (void)))))])]))

(define (write-mach-o-library
          [text-segment : TextSegment]
          [output-file-name : Bytes])
  : (Either Bytes Void)
  (match-define
    (text-segment
      contents
      (text-segment-section text-section-offset text-section-size
                            text-relocations text-symbols)
      (text-segment-section const-section-offset const-section-size
                            const-relocations const-symbols))
    text-segment)

  (match-define exported-symbols (construct-symbol-table-entries 0 text-segment))
  (match-define num-text-relocations (length text-relocations))
  (match-define num-const-relocations (length const-relocations))
  (match-define segment-size (bytes-length contents))
  (match-define reloc-base (+ 352 (round-up segment-size 8)))
  (call-with-output-file output-file-name
    (lambda ([output : OutputPort])
      (begin
        (write-library-mach-o-header-and-load-commands
          (varargs list
            (lc-load-segment64
              (load-segment64 #""
                (u64 #x0000000000000000)
                (u64 segment-size)
                (u64 352)
                (u64 segment-size)
                (u32 #x07)
                (u32 #x07)
                (u32 0)
                (varargs list
                  (section64 #"__text" #"__TEXT"
                             (u64 text-section-offset)
                             (u64 text-section-size)
                             (u32 352)
                             (u32 0) ;; TODO compute a sensible alignment
                             (u32 reloc-base)
                             (u32 num-text-relocations)
                             (u32 #x80000400))
                  (section64 #"__const" #"__TEXT"
                             (u64 const-section-offset)
                             (u64 const-section-size)
                             (u32 (+ 352 const-section-offset))
                             (u32 0) ;; TODO compute a sensible alignment
                             (u32 (+ reloc-base (* 8 num-text-relocations)))
                             (u32 num-const-relocations)
                             (u32 0)))))
            (lc-symbol-table
              (symbol-table
                (u32 (+ reloc-base (* 8 (+ num-text-relocations num-const-relocations))))
                (u32 (length exported-symbols))
                (u32 (+ (+ reloc-base
                           (* 8 (+ num-text-relocations
                                   num-const-relocations)))
                        (* (length exported-symbols) #x10)))
                (u32 (round-up
                       (+ (+ 2 (length exported-symbols))
                          (sum (map bytes-length
                                    (map symbol-table-entry-name exported-symbols))))
                       8))))
            (lc-version-min-macosx
              (version-min (u8 10) (u8 11) (u8 0) (u8 10) (u8 11) (u8 0)))
            (lc-data-in-code
              (linkedit-data
                (u32 (+ reloc-base (* 8 (+ num-text-relocations num-const-relocations))))
                (u32 0))))
          output)
        (write-all-bytes (make-bytes 32) output)
        (write-all-bytes contents output)
        (write-all-bytes
          (make-bytes
            (- (round-up segment-size 8) segment-size)) output)
        (write-relocations
          (append text-relocations const-relocations)
          (map symbol-table-entry-name exported-symbols)
          output)
        (write-symbol-entries exported-symbols 2 output)
        (write-all-bytes (varargs bytes 32 0) output)
        (write-symbol-strings exported-symbols output)
        (write-all-bytes
          (make-bytes
            (-
              (round-up
                (+ (+ 2 (length exported-symbols))
                   (sum (map bytes-length
                             (map symbol-table-entry-name exported-symbols))))
                8)
              (+ (+ 2 (length exported-symbols))
                 (sum (map bytes-length
                           (map symbol-table-entry-name exported-symbols))))))
          output)
        (right (void))))))

(define (write-u8 [v : U8] [output : OutputPort]) : Void
  (write-all-bytes (varargs bytes (u8->s64 v)) output))

(define (write-u32-le [v : U32] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 4)])
    (begin
      (bytes-set!/quad-le bytes 0 v)
      (write-all-bytes bytes output))))

(define (write-u64-le [v : U64] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 8)])
    (begin
      (bytes-set!/u64-le bytes 0 v)
      (write-all-bytes bytes output))))


(define (load-commands-size [lcs : (List MachOLoadCommand)]) : Int
  (case lcs
    [(empty) 0]
    [(cons lc lcs)
     (+ (load-command-size lc) (load-commands-size lcs))]))

(define (load-command-size [lc : MachOLoadCommand]) : Int
  (case lc
    [(lc-unix-thread _) #xb8]
    [(lc-source-version) #x10]
    [(lc-version-min-macosx _) #x10]
    [(lc-data-in-code _) #x10]
    [(lc-load-segment64 load-seg)
     (+ 72 (* (length (load-segment64-sections load-seg)) 80))]
    [(lc-symbol-table _) #x18]))

(define (write-library-mach-o-header-and-load-commands
          [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (begin
    (write-mach-o-header (make-mach-o-header (mach-o-library-file) commands) output)
    (write-load-commands commands output)))

(define (write-executable-mach-o-header-and-load-commands
          [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (begin
    (write-mach-o-header (make-mach-o-header (mach-o-executable-file) commands) output)
    (write-load-commands commands output)))

(define (make-mach-o-header [file-type : MachOFileType] [commands : (List MachOLoadCommand)])
  : MachOHeader
  (mach-o-header
    ;; Magic number
    (u32 #xfeedfacf)
    ;; CPU type
    (u32 #x01000007)
    ;; CPU subtype
    (u32 #x03)
    ;; File type
    (case file-type
      [(mach-o-library-file) (u32 #x01)]
      [(mach-o-executable-file) (u32 #x02)])
    ;; Number of commands
    (u32 (length commands))
    ;; Size of commands
    (u32 (load-commands-size commands))

    ;; Flags
    ;; TODO actually compute these instead of guessing at them based on file type
    (case file-type
      [(mach-o-library-file) (u32 #x00)]
      [(mach-o-executable-file) (u32 #x01)])
    ;; Reserved
    (u32 #x00)))

(define (write-mach-o-header [header : MachOHeader] [output : OutputPort]) : Void
  (match-define (mach-o-header magic cpu-type cpu-subtype file-type number-commands command-size flags
                               reserved) header)
  (begin
    (write-u32-le magic output)
    (write-u32-le cpu-type output)
    (write-u32-le cpu-subtype output)
    (write-u32-le file-type output)
    (write-u32-le number-commands output)
    (write-u32-le command-size output)
    (write-u32-le flags output)
    (write-u32-le reserved output)))


(define (write-load-commands [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (case commands
    [(empty) (void)]
    [(cons (lc-unix-thread ut) commands)
     (begin
       (write-unix-thread ut output)
       (write-load-commands commands output))]
    [(cons (lc-version-min-macosx vm) commands)
     (begin
       (write-version-min vm output)
       (write-load-commands commands output))]
    [(cons (lc-source-version) commands)
     (begin
       (write-source-version output)
       (write-load-commands commands output))]
    [(cons (lc-data-in-code v) commands)
     (begin
       (write-linkedit-data v output)
       (write-load-commands commands output))]
    [(cons (lc-load-segment64 ls) commands)
     (begin
       (write-load-segment64 ls output)
       (write-load-commands commands output))]
    [(cons (lc-symbol-table st) commands)
     (begin
       (write-symbol-table st output)
       (write-load-commands commands output))]))

(define (write-16-byte-name [bytes : Bytes] [output : OutputPort]) : Void
  (if (> (bytes-length bytes) 16)
      (panic #"Too Long")
      (begin
        (write-all-bytes bytes output)
        (write-all-bytes (make-bytes (- 16 (bytes-length bytes))) output))))

(define (write-load-segment64 [seg : LoadSegment64] [output : OutputPort]) : Void
  (match-define (load-segment64 name vm-addr vm-size file-offset file-size max-protection
                                init-protection flags sections)
    seg)
  (begin
    ;; LC_SEGMENT_64
    (write-u32-le (u32 #x19) output)
    ;; Command size
    (write-u32-le (u32 (+ 72 (* (length sections) 80))) output)

    (write-16-byte-name name output)

    (write-u64-le vm-addr output)
    (write-u64-le vm-size output)

    (write-u64-le file-offset output)
    (write-u64-le file-size output)

    (write-u32-le max-protection output)
    (write-u32-le init-protection output)
    (write-u32-le (u32 (length sections)) output)
    (write-u32-le flags output)

    (write-sections sections output)))

(define (write-sections [sections : (List Section64)] [output : OutputPort]) : Void
  (case sections
    [(empty) (void)]
    [(cons section sections)
     (begin
       (write-section section output)
       (write-sections sections output))]))

(define (write-section [section : Section64] [output : OutputPort]) : Void
  (match-define (section64 name seg-name addr size align offset rel-offset num-rels flags) section)
  (begin
    (write-16-byte-name name output)
    (write-16-byte-name seg-name output)
    (write-u64-le addr output)
    (write-u64-le size output)
    (write-u32-le offset output)
    (write-u32-le align output)
    (write-u32-le rel-offset output)
    (write-u32-le num-rels output)
    (write-u32-le flags output)
    (write-u32-le (u32 #x00) output)
    (write-u32-le (u32 #x00) output)
    (write-u32-le (u32 #x00) output)))


(define (write-source-version [output : OutputPort]) : Void
  (begin
    ;; LC_UNIXTHREAD
    (write-u32-le (u32 #x2A) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)

    (write-u64-le (u64 #x00) output)))

;; TODO make this not hardcoded to LC_VERSION_MIN_MACOSX
;; TODO support more than one major byte this the real values
(define (write-version-min [vm : VersionMin] [output : OutputPort]) : Void
  (match-define (version-min v-major v-minor v-patch sdk-major sdk-minor sdk-patch) vm)
  (begin
    ;; LC_VERSION_MIN_MACOSX
    (write-u32-le (u32 #x24) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)

    (write-u8 v-patch output)
    (write-u8 v-minor output)
    (write-u8 v-major output)
    (write-u8 (u8 0) output)
    (write-u8 sdk-patch output)
    (write-u8 sdk-minor output)
    (write-u8 sdk-major output)
    (write-u8 (u8 0) output)))

(define (write-linkedit-data [v : LinkeditData] [output : OutputPort]) : Void
  (match-define (linkedit-data offset size) v)
  (begin
    ;; LC_DATA_IN_CODE
    (write-u32-le (u32 #x29) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)
    (write-u32-le offset output)
    (write-u32-le size output)))

(define (write-unix-thread [ut : UnixThread] [output : OutputPort]) : Void
  (match-define (unix-thread start-address) ut)
  (begin
    ;; LC_UNIXTHREAD
    (write-u32-le (u32 #x05) output)
    ;; Command size
    (write-u32-le (u32 #xb8) output)
    ;; Thread Flavor
    (write-u32-le (u32 #x04) output)
    ;; Thread Count
    (write-u32-le (u32 #x2a) output)

    ;; Registers
    ;; rax
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rbx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rcx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rdx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rdi
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rsi
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rbp
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rsp
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r8
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r9
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r10
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r11
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r12
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r13
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r14
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r15
    (write-u64-le (u64 #x0000000000000000) output)

    ;; rip
    (write-u64-le start-address output)
    ;; rflags
    (write-u64-le (u64 #x0000000000000000) output)
    ;; cs
    (write-u64-le (u64 #x0000000000000000) output)
    ;; fs
    (write-u64-le (u64 #x0000000000000000) output)
    ;; gs
    (write-u64-le (u64 #x0000000000000000) output)))

(define (write-symbol-table [st : SymbolTable] [output : OutputPort]) : Void
  (match-define (symbol-table offset number-syms string-offset string-size) st)
  (begin
    ;; LC_SYMTAB
    (write-u32-le (u32 #x02) output)
    ;; Command size
    (write-u32-le (u32 #x18) output)

    (write-u32-le offset output)
    (write-u32-le number-syms output)
    (write-u32-le string-offset output)
    (write-u32-le string-size output)))
