#:module (mach-o-writer)
#:import {
  (bytes)
  (io)
  (list)
  (mach-o)
  (prim)
}
(export
  #:types ()
  #:values (write-mach-o-header-and-load-commands mach-o-header-and-load-commands
            mach-o-executable-file mach-o-library-file)
  #:patterns ())
(types
  (define-type MachOHeaderAndLoadCommands
    (mach-o-header-and-load-commands
      [file-type : MachOFileType]
      [commands : (List MachOLoadCommand)]))
  (define-type MachOFileType
    (mach-o-library-file)
    (mach-o-executable-file)))


(define (write-u8 [v : U8] [output : OutputPort]) : Void
  (write-all-bytes (varargs bytes (u8->s64 v)) output))

(define (write-u32-le [v : U32] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 4)])
    (begin
      (bytes-set!/quad-le bytes 0 v)
      (write-all-bytes bytes output))))

(define (write-u64-le [v : U64] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 8)])
    (begin
      (bytes-set!/u64-le bytes 0 v)
      (write-all-bytes bytes output))))


(define (load-commands-size [lcs : (List MachOLoadCommand)]) : Int
  (case lcs
    [(empty) 0]
    [(cons lc lcs)
     (+ (load-command-size lc) (load-commands-size lcs))]))

(define (load-command-size [lc : MachOLoadCommand]) : Int
  (case lc
    [(lc-unix-thread _) #xb8]
    [(lc-source-version) #x10]
    [(lc-version-min-macosx _) #x10]
    [(lc-data-in-code _) #x10]
    [(lc-load-segment64 load-seg)
     (+ 72 (* (length (load-segment64-sections load-seg)) 80))]
    [(lc-symbol-table _) #x18]))


(define (write-mach-o-header-and-load-commands
          [header : MachOHeaderAndLoadCommands] [output : OutputPort]) : Void
  (match-define (mach-o-header-and-load-commands file-type commands) header)
  (begin
    (write-mach-o-header (make-mach-o-header file-type commands) output)
    (write-load-commands commands output)))

(define (make-mach-o-header [file-type : MachOFileType] [commands : (List MachOLoadCommand)])
  : MachOHeader
  (mach-o-header
    ;; Magic number
    (u32 #xfeedfacf)
    ;; CPU type
    (u32 #x01000007)
    ;; CPU subtype
    (u32 #x03)
    ;; File type
    (case file-type
      [(mach-o-library-file) (u32 #x01)]
      [(mach-o-executable-file) (u32 #x02)])
    ;; Number of commands
    (u32 (length commands))
    ;; Size of commands
    (u32 (load-commands-size commands))

    ;; Flags
    ;; TODO actually compute these instead of guessing at them based on file type
    (case file-type
      [(mach-o-library-file) (u32 #x00)]
      [(mach-o-executable-file) (u32 #x01)])
    ;; Reserved
    (u32 #x00)))

(define (write-mach-o-header [header : MachOHeader] [output : OutputPort]) : Void
  (match-define (mach-o-header magic cpu-type cpu-subtype file-type number-commands command-size flags
                               reserved) header)
  (begin
    (write-u32-le magic output)
    (write-u32-le cpu-type output)
    (write-u32-le cpu-subtype output)
    (write-u32-le file-type output)
    (write-u32-le number-commands output)
    (write-u32-le command-size output)
    (write-u32-le flags output)
    (write-u32-le reserved output)))


(define (write-load-commands [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (case commands
    [(empty) (void)]
    [(cons (lc-unix-thread ut) commands)
     (begin
       (write-unix-thread ut output)
       (write-load-commands commands output))]
    [(cons (lc-version-min-macosx vm) commands)
     (begin
       (write-version-min vm output)
       (write-load-commands commands output))]
    [(cons (lc-source-version) commands)
     (begin
       (write-source-version output)
       (write-load-commands commands output))]
    [(cons (lc-data-in-code v) commands)
     (begin
       (write-linkedit-data v output)
       (write-load-commands commands output))]
    [(cons (lc-load-segment64 ls) commands)
     (begin
       (write-load-segment64 ls output)
       (write-load-commands commands output))]
    [(cons (lc-symbol-table st) commands)
     (begin
       (write-symbol-table st output)
       (write-load-commands commands output))]))

(define (write-16-byte-name [bytes : Bytes] [output : OutputPort]) : Void
  (if (> (bytes-length bytes) 16)
      (panic #"Too Long")
      (begin
        (write-all-bytes bytes output)
        (write-all-bytes (make-bytes (- 16 (bytes-length bytes))) output))))

(define (write-load-segment64 [seg : LoadSegment64] [output : OutputPort]) : Void
  (match-define (load-segment64 name vm-addr vm-size file-offset file-size max-protection
                                init-protection flags sections)
    seg)
  (begin
    ;; LC_SEGMENT_64
    (write-u32-le (u32 #x19) output)
    ;; Command size
    (write-u32-le (u32 (+ 72 (* (length sections) 80))) output)

    (write-16-byte-name name output)

    (write-u64-le vm-addr output)
    (write-u64-le vm-size output)

    (write-u64-le file-offset output)
    (write-u64-le file-size output)

    (write-u32-le max-protection output)
    (write-u32-le init-protection output)
    (write-u32-le (u32 (length sections)) output)
    (write-u32-le flags output)

    (write-sections sections output)))

(define (write-sections [sections : (List Section64)] [output : OutputPort]) : Void
  (case sections
    [(empty) (void)]
    [(cons section sections)
     (begin
       (write-section section output)
       (write-sections sections output))]))

(define (write-section [section : Section64] [output : OutputPort]) : Void
  (match-define (section64 name seg-name addr size offset rel-offset num-rels flags) section)
  (begin
    (write-16-byte-name name output)
    (write-16-byte-name seg-name output)

    (write-u64-le addr output)
    (write-u64-le size output)
    (write-u32-le (u32 offset) output)

    (write-u32-le (u32 #x00) output)
    (write-u32-le (u32 rel-offset) output)
    (write-u32-le (u32 num-rels) output)


    (write-u32-le flags output)
    (write-u32-le (u32 #x00) output)
    (write-u32-le (u32 #x00) output)
    (write-u32-le (u32 #x00) output)))


(define (write-source-version [output : OutputPort]) : Void
  (begin
    ;; LC_UNIXTHREAD
    (write-u32-le (u32 #x2A) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)

    (write-u64-le (u64 #x00) output)))

;; TODO make this not hardcoded to LC_VERSION_MIN_MACOSX
;; TODO support more than one major byte this the real values
(define (write-version-min [vm : VersionMin] [output : OutputPort]) : Void
  (match-define (version-min v-major v-minor v-patch sdk-major sdk-minor sdk-patch) vm)
  (begin
    ;; LC_VERSION_MIN_MACOSX
    (write-u32-le (u32 #x24) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)

    (write-u8 v-patch output)
    (write-u8 v-minor output)
    (write-u8 v-major output)
    (write-u8 (u8 0) output)
    (write-u8 sdk-patch output)
    (write-u8 sdk-minor output)
    (write-u8 sdk-major output)
    (write-u8 (u8 0) output)))

(define (write-linkedit-data [v : LinkeditData] [output : OutputPort]) : Void
  (match-define (linkedit-data offset size) v)
  (begin
    ;; LC_DATA_IN_CODE
    (write-u32-le (u32 #x29) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)
    (write-u32-le offset output)
    (write-u32-le size output)))

(define (write-unix-thread [ut : UnixThread] [output : OutputPort]) : Void
  (match-define (unix-thread start-address) ut)
  (begin
    ;; LC_UNIXTHREAD
    (write-u32-le (u32 #x05) output)
    ;; Command size
    (write-u32-le (u32 #xb8) output)
    ;; Thread Flavor
    (write-u32-le (u32 #x04) output)
    ;; Thread Count
    (write-u32-le (u32 #x2a) output)

    ;; Registers
    ;; rax
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rbx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rcx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rdx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rdi
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rsi
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rbp
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rsp
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r8
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r9
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r10
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r11
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r12
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r13
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r14
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r15
    (write-u64-le (u64 #x0000000000000000) output)

    ;; rip
    (write-u64-le (u64 start-address) output)
    ;; rflags
    (write-u64-le (u64 #x0000000000000000) output)
    ;; cs
    (write-u64-le (u64 #x0000000000000000) output)
    ;; fs
    (write-u64-le (u64 #x0000000000000000) output)
    ;; gs
    (write-u64-le (u64 #x0000000000000000) output)))

(define (write-symbol-table [st : SymbolTable] [output : OutputPort]) : Void
  (match-define (symbol-table offset number-syms string-offset string-size) st)
  (begin
    ;; LC_SYMTAB
    (write-u32-le (u32 #x02) output)
    ;; Command size
    (write-u32-le (u32 #x18) output)

    (write-u32-le (u32 offset) output)
    (write-u32-le (u32 number-syms) output)
    (write-u32-le (u32 string-offset) output)
    (write-u32-le (u32 string-size) output)))
