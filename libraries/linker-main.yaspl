#:module (linker-main)
#:import {
  (either)
  (io)
  (linker)
  (list)
  (mach-o)
  (mach-o-writer)
  (prim)
  (structured-mach-o)
}
(export)
(types)

(define (read-mach-o-files [object-files : (List Bytes)]) : (Either Bytes (List MachOFile))
  (extract-rights
    (map
      (lambda ([input-path : Bytes])
        (call-with-input-file input-path
          (lambda ([input-file : InputPort])
            (read-mach-o input-file))))
      object-files)))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No output executable file name supplied." stderr)
       1)]
    [(cons _ (cons output-file-name object-files))
     (case (read-mach-o-files object-files)
       [(left msg)
        (begin
          (write-line msg stderr)
          1)]
       [(right mach-o-files)
        (case (extract-rights (map parse-mach-o mach-o-files))
          [(left msg)
           (begin
             (write-line msg stderr)
             1)]
          [(right parsed-mach-o-files)
           (case (write-mach-o-executable
                   (combine-sections (map parsed-mach-o-text-section parsed-mach-o-files))
                   (combine-sections (map parsed-mach-o-const-section parsed-mach-o-files))
                   output-file-name)
             [(left v)
              (begin
                (write-line v stderr)
                1)]
             [(right _)
              0])])])]))
