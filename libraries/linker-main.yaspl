#:module linker-main
(import
  (bytes bytes-append)
  (either
    #:types ()
    #:values ()
    #:patterns (left right))
  (io call-with-input-file write-line)
  (linker
    #:types ()
    #:values (apply-const-relocations apply-text-relocations get-offset-symbols
              get-relocation-markers parse-mach-o parsed-mach-o-const-section
              parsed-mach-o-text-section symbol-table-entry-name< symbol-table-entry-name=?)
    #:patterns ())
  (list
    #:types ()
    #:values (array->list cons map sort)
    #:patterns (cons empty))
  (mach-o
    #:types (MachOFile)
    #:values (read-mach-o symbol-table-entry)
    #:patterns ())
  (mach-o-writer2 write-mach-o-executable)
  (maybe
    #:types ()
    #:values ()
    #:patterns ())
  (prim
    #:types (Array Bytes InputPort Int OutputPort)
    #:values (* + - bytes-length panic quotient u8)
    #:patterns ())
  (set make-set set->list set-add-all))
(export)
(types)

(define (panic/mach-o-file [v : Bytes]) : MachOFile
  (panic v))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No output executable file name supplied." stderr)
       1)]
    [(cons _ (cons output-file-name object-files))
     (let ([mach-o-files
            (map
              (lambda ([input-path : Bytes])
                (call-with-input-file input-path
                  (lambda ([input-file : InputPort])
                    (case (read-mach-o input-file)
                      [(right mach-o-file)
                       mach-o-file]
                      [(left msg)
                       (panic/mach-o-file msg)]))))
              object-files)])
       (let ([parsed-mach-o-files (map parse-mach-o mach-o-files)])
         (let ([text-section
                 (bytes-append (map parsed-mach-o-text-section parsed-mach-o-files))])
           (let ([const-section
                   (bytes-append (map parsed-mach-o-const-section parsed-mach-o-files))])
             (let ([rounded-text-segment-length
                    (let ([text-segment-length
                           (+ (bytes-length text-section)
                              (bytes-length const-section))])
                      (* #x1000 (+ (quotient (+ text-segment-length #x330) #x1000) 1)))])
               (let ([symbol-table-entries
                      (sort
                        (set->list
                          (set-add-all
                            ;; TODO make sure that the right definition is kept
                            (make-set symbol-table-entry-name=?)
                            (cons (symbol-table-entry
                                    #"__mh_execute_header" (u8 3) (u8 1) (u8 #x10)
                                    #x100000000)
                                  (get-offset-symbols parsed-mach-o-files
                                                      (+ #x100000000
                                                         (- rounded-text-segment-length
                                                            (+ (bytes-length
                                                                 text-section)
                                                               (bytes-length
                                                                 const-section))))
                                                      (+ #x100000000
                                                         (- rounded-text-segment-length
                                                            (bytes-length
                                                               const-section)))))))
                        symbol-table-entry-name<)])
                 (let ([relocation-markers
                        (get-relocation-markers parsed-mach-o-files 0 0)])
                   (begin
                     (apply-const-relocations
                       relocation-markers
                       symbol-table-entries
                       const-section)
                     (apply-text-relocations
                       relocation-markers
                       symbol-table-entries
                       text-section
                       (+ #x100000000
                          (- rounded-text-segment-length
                             (+ (bytes-length
                                  text-section)
                                (bytes-length
                                  const-section)))))
                     (case (write-mach-o-executable
                             symbol-table-entries
                             text-section const-section
                             output-file-name)
                       [(left v)
                        (begin
                          (write-line v stderr)
                          1)]
                       [(right _)
                        0])))))))))]))
