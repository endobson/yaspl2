#:module (linker-main)
#:import {
  (bytes)
  (data indexed-set)
  (either)
  (io)
  (linker)
  (list)
  (mach-o)
  (mach-o-writer2)
  (maybe)
  (prim)
  (set)
}
(export)
(types)


(define (read-mach-o-files [object-files : (List Bytes)]) : (Either Bytes (List MachOFile))
  (extract-rights
    (map
      (lambda ([input-path : Bytes])
        (call-with-input-file input-path
          (lambda ([input-file : InputPort])
            (read-mach-o input-file))))
      object-files)))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No output executable file name supplied." stderr)
       1)]
    [(cons _ (cons output-file-name object-files))
     (case (read-mach-o-files object-files)
       [(left msg)
        (begin
          (write-line msg stderr)
          1)]
       [(right mach-o-files)
        (case (extract-rights (map parse-mach-o mach-o-files))
          [(left msg)
           (begin
             (write-line msg stderr)
             1)]
          [(right parsed-mach-o-files)
           (let ([text-section
                   (bytes-append (map parsed-mach-o-text-section parsed-mach-o-files))])
             (let ([const-section
                     (bytes-append (map parsed-mach-o-const-section parsed-mach-o-files))])
               (let ([rounded-text-segment-length
                      (let ([text-segment-length
                             (+ (bytes-length text-section)
                                (bytes-length const-section))])
                        (* #x1000 (+ (quotient (+ text-segment-length #x330) #x1000) 1)))])
                 (let ([symbol-table-entries
                        (sort
                          (set->list
                            (set-add-all
                              ;; TODO make sure that the right definition is kept
                              (make-set symbol-table-entry-name-cmp)
                              (cons (symbol-table-entry
                                      #"__mh_execute_header" (u8 3) (u8 1) (u8 #x10)
                                      #x100000000)
                                    (get-offset-symbols parsed-mach-o-files
                                                        (+ #x100000000
                                                           (- rounded-text-segment-length
                                                              (+ (bytes-length
                                                                   text-section)
                                                                 (bytes-length
                                                                   const-section))))
                                                        (+ #x100000000
                                                           (- rounded-text-segment-length
                                                              (bytes-length
                                                                 const-section)))))))
                          symbol-table-entry-name<)])
                   (let ([symbol-table-lookup
                          (foldl
                            (lambda ([e : SymbolTableEntry] [acc : (IndexedSet SymbolTableEntry Bytes)])
                              (indexed-set-add acc e))
                            symbol-table-entries
                            (make-indexed-set symbol-table-entry-name bytes-cmp))])
                   (let ([relocation-markers
                          (get-relocation-markers parsed-mach-o-files 0 0)])
                     (case (apply-const-relocations
                             relocation-markers
                             symbol-table-lookup
                             const-section)
                       [(just msg)
                        (begin
                          (write-line msg stderr)
                          1)]
                       [(nothing)
                        (case (apply-text-relocations
                                 relocation-markers
                                 symbol-table-lookup
                                 text-section
                                 (+ #x100000000
                                    (- rounded-text-segment-length
                                       (+ (bytes-length
                                            text-section)
                                          (bytes-length
                                            const-section)))))
                          [(just msg)
                           (begin
                             (write-line msg stderr)
                             1)]
                          [(nothing)
                           (case (write-mach-o-executable
                                   symbol-table-entries
                                   text-section const-section
                                   output-file-name)
                             [(left v)
                              (begin
                                (write-line v stderr)
                                1)]
                             [(right _)
                              0])])])))))))])])]))
