#:module (linker-main)
#:import {
  (either)
  (formats elf)
  (formats elf-writer)
  (io)
  (list)
  (mach-o)
  (mach-o-writer)
  (maybe)
  (prim)
  (structured-mach-o)
  (structured-native-code)
}
(export)
(types
  (define-type Platform
    (mach-osx)
    (elf-linux)))

(define (read-mach-o-files [object-files : (List Bytes)]) : (Either Bytes (List MachOFile))
  (extract-rights
    (map
      (lambda ([input-path : Bytes])
        (call-with-input-file input-path
          (lambda ([input-file : InputPort])
            (read-mach-o input-file))))
      object-files)))


(define (read-elf-files [object-files : (List Bytes)]) : (Either Bytes (List ElfFile))
  (extract-rights
    (map
      (lambda ([input-path : Bytes])
        (call-with-input-file input-path
          (lambda ([input-file : InputPort])
            (read-elf input-file))))
      object-files)))


(define (run [args : (Array Bytes)]) : (Maybe Bytes)
  (case (array->list args)
    [(empty)
     (just #"No executable specified???")]
    [(cons _ (empty))
     (just #"No platform name supplied.")]
    [(cons _ (cons _ (empty)))
     (just #"No output executable file name supplied.")]
    [(cons _ (cons platform-bytes (cons output-file-name object-files)))
     (case
       (ann (Either Bytes Platform)
         (case platform-bytes
           [#"osx" (right (mach-osx))]
           [#"linux" (right (elf-linux))]
           [_ (left #"Unknown platform")]))
       [(left v) (just v)]
       [(right (mach-osx))
        (case (read-mach-o-files object-files)
          [(left v) (just v)]
          [(right mach-o-files)
           (case (extract-rights (map parse-mach-o mach-o-files))
             [(left v) (just v)]
             [(right parsed-mach-o-files)
              (write-mach-o-executable
                (combine-sections (map parsed-mach-o-text-section parsed-mach-o-files))
                (combine-sections (map parsed-mach-o-const-section parsed-mach-o-files))
                output-file-name)])])]
       [(right (elf-linux))
        (case (read-elf-files object-files)
          [(left v) (just v)]
          [(right (empty))
           (just #"Need at least one file")]
          [(right (cons _ (cons _ _)))
           (just #"Linking more than one file not yet supported")]
          [(right (cons elf-file (empty)))
           (case (elf-file->text-contents elf-file)
             [(left v) (just v)]
             [(right text-contents)
              (write-elf-executable
                text-contents
                output-file-name)])])])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (run args)
    [(just v)
     (begin
       (write-line v stderr)
       1)]
    [(nothing)
     0]))
