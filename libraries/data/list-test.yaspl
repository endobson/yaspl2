(module list-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Boolean Int)
      #:values (= remainder)
      #:patterns ())
    (boolean not)
    (bytes bytes=?)
    (yunit
      #:types () 
      #:values (yunit/main test-case)
      #:patterns ())
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (tuples
      #:types ()
      #:values (tuple2 tuple2=?)
      #:patterns ())
    (list
      #:types ()
      #:values (list length empty list=? andmap zip)
      #:patterns (cons empty)))
  (export)
  (types)

  (define (even? [x : Int]) : Boolean
    (= 0 (remainder x 2)))

  (define (test-list=?-empty-empty) : Boolean
    ((list=? =) (empty) (empty)))

  (define (test-list=?-empty-nonempty) : Boolean
    (not ((list=? =) (empty) (varargs list 1 2 3))))

  (define (test-list=?-123-123) : Boolean
    ((list=? =) (varargs list 1 2 3) (varargs list 1 2 3)))

  (define (test-list=?-12-123) : Boolean
    (not ((list=? =) (varargs list 1 2) (varargs list 1 2 3))))

  (define (test-list=?-12-13) : Boolean
    (not ((list=? =) (varargs list 1 2) (varargs list 1 3))))

  (define (test-andmap-even-empty) : Boolean
    (andmap even? (empty)))

  (define (test-andmap-even-246) : Boolean
    (andmap even? (varargs list 2 4 6)))

  (define (test-andmap-even-276) : Boolean
    (not (andmap even? (varargs list 2 7 6))))

  (define (test-zip-12-ab) : Boolean
    (case (zip (varargs list 1 2) (varargs list #"a" #"b"))
      [(nothing) #f]
      [(just v)
       ((list=? (tuple2=? = bytes=?))
        v
        (varargs list (tuple2 1 #"a") (tuple2 2 #"b"))) ]))

  (define (test-zip-123-ab) : Boolean
    (case (zip (varargs list 1 2 3) (varargs list #"a" #"b"))
      [(nothing) #t]
      [(just _) #f]))
  (define (test-zip-12-abc) : Boolean
    (case (zip (varargs list 1 2) (varargs list #"a" #"b" #"c"))
      [(nothing) #t]
      [(just _) #f]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (test-case #"list equal empty empty" test-list=?-empty-empty)
        (test-case #"list equal empty nonempty" test-list=?-empty-nonempty)
        (test-case #"list equal (1 2 3) (1 2 3)" test-list=?-123-123)
        (test-case #"list equal (1 2) (1 2 3)" test-list=?-12-123)
        (test-case #"list equal (1 2) (1 3)" test-list=?-12-13)
        (test-case #"list andmap even ()" test-andmap-even-empty)
        (test-case #"list andmap even (2 4 6)" test-andmap-even-246)
        (test-case #"list andmap even (2 7 6)" test-andmap-even-276)
        (test-case #"list zip (1 2) (a b)" test-zip-12-ab)
        (test-case #"list zip (1 2 3) (a b)" test-zip-123-ab)
        (test-case #"list zip (1 2) (a b c)" test-zip-12-abc)))))
