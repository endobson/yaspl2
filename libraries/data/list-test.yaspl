#:module (list-test)
#:import {
  (bytes)
  (data lifted-primitives)
  (list)
  (maybe)
  (prim)
  (sexp-printer)
  (tuples)
  (yunit)
}
(export
  (#:values main))
(types)

(define (expect-equal/bytes-list [actual : (List Bytes)] [expected : (List Bytes)])
  : (Maybe FailedAssertion)
  ((expect-equal (list=? bytes=?) print/bytes-list)
   actual expected))

(define (expect-not-equal/bytes-list [actual : (List Bytes)] [expected : (List Bytes)])
  : (Maybe FailedAssertion)
  ((expect-not-equal (list=? bytes=?) print/bytes-list)
   actual expected))

(define (expect-all [pred : (LiftedInt -> Boolean)] [v : (List LiftedInt)])
  : (Maybe FailedAssertion)
  (if (andmap pred v)
      (nothing)
      (just (failure #"Expected all elements to match"))))

(define (expect-not-all [pred : (LiftedInt -> Boolean)] [v : (List LiftedInt)])
  : (Maybe FailedAssertion)
  (if (andmap pred v)
      (just (failure #"Expected some elements to not match"))
      (nothing)))

(define (expect-some [pred : (LiftedInt -> Boolean)] [v : (List LiftedInt)])
  : (Maybe FailedAssertion)
  (if (ormap pred v)
      (nothing)
      (just (failure #"Expected some elements to match"))))

(define (expect-none [pred : (LiftedInt -> Boolean)] [v : (List LiftedInt)])
  : (Maybe FailedAssertion)
  (if (ormap pred v)
      (just (failure #"Expected no elements to match"))
      (nothing)))

(define (print/bytes-list [v : (List Bytes)]) : Bytes
  (print-sexp (node/p (map bytes-sexp/p v))))

(define (even? [x : LiftedInt]) : Boolean
  (match-define (lifted-int x) x)
  (= 0 (remainder x 2)))

(define (test-list=?-empty-empty) : (Maybe FailedAssertion)
  (expect-equal/bytes-list
    (empty)
    (empty)))

(define (test-list=?-empty-nonempty) : (Maybe FailedAssertion)
  (expect-not-equal/bytes-list
    (empty)
    (varargs list #"1" #"2" #"3")))

(define (test-list=?-123-123) : (Maybe FailedAssertion)
  (expect-equal/bytes-list
    (varargs list #"1" #"2" #"3")
    (varargs list #"1" #"2" #"3")))

(define (test-list=?-12-123) : (Maybe FailedAssertion)
  (expect-not-equal/bytes-list
    (varargs list #"1" #"2")
    (varargs list #"1" #"2" #"3")))

(define (test-list=?-12-13) : (Maybe FailedAssertion)
  (expect-not-equal/bytes-list
    (varargs list #"1" #"2")
    (varargs list #"1" #"3")))

(define (empty/int) : (List LiftedInt)
  (empty))

(define (test-andmap-even-empty) : (Maybe FailedAssertion)
  (expect-all even? (empty/int)))

(define (test-andmap-even-246) : (Maybe FailedAssertion)
  (expect-all even? (varargs list (lifted-int 2) (lifted-int 4) (lifted-int 6))))

(define (test-andmap-even-276) : (Maybe FailedAssertion)
  (expect-not-all even? (varargs list (lifted-int 2) (lifted-int 7) (lifted-int 6))))

(define (test-ormap-even-empty) : (Maybe FailedAssertion)
  (expect-none even? (empty/int)))

(define (test-ormap-even-135) : (Maybe FailedAssertion)
  (expect-none even? (varargs list (lifted-int 1) (lifted-int 3) (lifted-int 5))))

(define (test-ormap-even-145) : (Maybe FailedAssertion)
  (expect-some even? (varargs list (lifted-int 1) (lifted-int 4) (lifted-int 5))))

(define (test-zip-12-ab) : Boolean
  (case (zip (varargs list #"1" #"2") (varargs list #"a" #"b"))
    [(nothing) #f]
    [(just v)
     ((list=? (tuple2=? bytes=? bytes=?))
      v
      (varargs list (tuple2 #"1" #"a") (tuple2 #"2" #"b")))]))

(define (test-zip-123-ab) : Boolean
  (case (zip (varargs list #"1" #"2" #"3") (varargs list #"a" #"b"))
    [(nothing) #t]
    [(just _) #f]))
(define (test-zip-12-abc) : Boolean
  (case (zip (varargs list #"1" #"2") (varargs list #"a" #"b" #"c"))
    [(nothing) #t]
    [(just _) #f]))

(define (test-extract-justs-j1j2) : Boolean
  ((maybe=? (list=? bytes=?))
   (extract-justs (varargs list (just #"1") (just #"2")))
   (just (varargs list #"1" #"2"))))

(define (test-extract-justs-j1n) : Boolean
  ((maybe=? (list=? bytes=?))
   (extract-justs (varargs list (just #"1") (nothing)))
   (nothing)))

(define (test-find/maybe-135) : Boolean
  ((maybe=? lifted-int=?)
   (find/maybe
     (lambda ([x : LiftedInt]) : (Maybe LiftedInt) (if (even? x) (just x) (nothing)))
     (varargs list (lifted-int 1) (lifted-int 3) (lifted-int 5)))
   (nothing)))

(define (test-find/maybe-146) : Boolean
  ((maybe=? lifted-int=?)
   (find/maybe
     (lambda ([x : LiftedInt]) : (Maybe LiftedInt) (if (even? x) (just x) (nothing)))
     (varargs list (lifted-int 1) (lifted-int 4) (lifted-int 6)))
   (just (lifted-int 4))))

(define (test-filter-map-146) : Boolean
  ((list=? lifted-int=?)
   (filter-map
     (lambda ([x : LiftedInt]) : (Maybe LiftedInt) (if (even? x) (just x) (nothing)))
     (varargs list (lifted-int 1) (lifted-int 4) (lifted-int 6)))
   (varargs list (lifted-int 4) (lifted-int 6))))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"list equal empty empty" test-list=?-empty-empty)
      (new-test-case #"list equal empty nonempty" test-list=?-empty-nonempty)
      (new-test-case #"list equal (1 2 3) (1 2 3)" test-list=?-123-123)
      (new-test-case #"list equal (1 2) (1 2 3)" test-list=?-12-123)
      (new-test-case #"list equal (1 2) (1 3)" test-list=?-12-13)
      (new-test-case #"list andmap even ()" test-andmap-even-empty)
      (new-test-case #"list andmap even (2 4 6)" test-andmap-even-246)
      (new-test-case #"list andmap even (2 7 6)" test-andmap-even-276)
      (new-test-case #"list ormap even ()" test-ormap-even-empty)
      (new-test-case #"list ormap even (1 3 5)" test-ormap-even-135)
      (new-test-case #"list ormap even (1 4 5)" test-ormap-even-145)
      (test-case #"list zip (1 2) (a b)" test-zip-12-ab)
      (test-case #"list zip (1 2 3) (a b)" test-zip-123-ab)
      (test-case #"list zip (1 2) (a b c)" test-zip-12-abc)
      (test-case #"list extract-justs ((just 1) (just 2))" test-extract-justs-j1j2)
      (test-case #"list extract-justs ((just 1) nothing)" test-extract-justs-j1n)
      (test-case #"list find/maybe 135" test-find/maybe-135)
      (test-case #"list find/maybe 146" test-find/maybe-146)
      (test-case #"list find/maybe 146" test-filter-map-146))))
