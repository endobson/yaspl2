#:module list-test
(import
  (boolean not)
  (bytes bytes=?)
  (list
    #:types (List)
    #:values (andmap empty extract-justs filter-map find/maybe list list=? ormap zip)
    #:patterns ())
  (maybe
    #:types (Maybe)
    #:values (just maybe=? nothing)
    #:patterns (just nothing))
  (prim
    #:types (Array Boolean Bytes InputPort Int OutputPort)
    #:values (+ = remainder)
    #:patterns ())
  (tuples
    #:types ()
    #:values (tuple2 tuple2=?)
    #:patterns ())
  (yunit
    #:types ()
    #:values (test-case yunit/main)
    #:patterns ()))
(export)
(types)

(define (even? [x : Int]) : Boolean
  (= 0 (remainder x 2)))

(define (test-list=?-empty-empty) : Boolean
  ((list=? =) (empty) (empty)))

(define (test-list=?-empty-nonempty) : Boolean
  (not ((list=? =) (empty) (varargs list 1 2 3))))

(define (test-list=?-123-123) : Boolean
  ((list=? =) (varargs list 1 2 3) (varargs list 1 2 3)))

(define (test-list=?-12-123) : Boolean
  (not ((list=? =) (varargs list 1 2) (varargs list 1 2 3))))

(define (test-list=?-12-13) : Boolean
  (not ((list=? =) (varargs list 1 2) (varargs list 1 3))))

(define (empty/int) : (List Int)
  (empty))

(define (test-andmap-even-empty) : Boolean
  (andmap even? (empty/int)))

(define (test-andmap-even-246) : Boolean
  (andmap even? (varargs list 2 4 6)))

(define (test-andmap-even-276) : Boolean
  (not (andmap even? (varargs list 2 7 6))))

(define (test-ormap-even-empty) : Boolean
  (not (ormap even? (empty/int))))

(define (test-ormap-even-135) : Boolean
  (not (ormap even? (varargs list 1 3 5))))

(define (test-ormap-even-145) : Boolean
  (ormap even? (varargs list 1 4 5)))

(define (test-zip-12-ab) : Boolean
  (case (zip (varargs list 1 2) (varargs list #"a" #"b"))
    [(nothing) #f]
    [(just v)
     ((list=? (tuple2=? = bytes=?))
      v
      (varargs list (tuple2 1 #"a") (tuple2 2 #"b")))]))

(define (test-zip-123-ab) : Boolean
  (case (zip (varargs list 1 2 3) (varargs list #"a" #"b"))
    [(nothing) #t]
    [(just _) #f]))
(define (test-zip-12-abc) : Boolean
  (case (zip (varargs list 1 2) (varargs list #"a" #"b" #"c"))
    [(nothing) #t]
    [(just _) #f]))

(define (test-extract-justs-j1j2) : Boolean
  ((maybe=? (list=? =))
   (extract-justs (varargs list (just 1) (just 2)))
   (just (varargs list 1 2))))

(define (test-extract-justs-j1n) : Boolean
  ((maybe=? (list=? =))
   (extract-justs (varargs list (just 1) (nothing)))
   (nothing)))

(define (test-find/maybe-135) : Boolean
  ((maybe=? =)
   (find/maybe
     (lambda ([x : Int]) : (Maybe Int) (if (even? x) (just (+ 1 x)) (nothing)))
     (varargs list 1 3 5))
   (nothing)))

(define (test-find/maybe-146) : Boolean
  ((maybe=? =)
   (find/maybe
     (lambda ([x : Int]) : (Maybe Int) (if (even? x) (just (+ 1 x)) (nothing)))
     (varargs list 1 4 6))
   (just 5)))

(define (test-filter-map-146) : Boolean
  ((list=? =)
   (filter-map
     (lambda ([x : Int]) : (Maybe Int) (if (even? x) (just (+ 1 x)) (nothing)))
     (varargs list 1 4 6))
   (varargs list 5 7)))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"list equal empty empty" test-list=?-empty-empty)
      (test-case #"list equal empty nonempty" test-list=?-empty-nonempty)
      (test-case #"list equal (1 2 3) (1 2 3)" test-list=?-123-123)
      (test-case #"list equal (1 2) (1 2 3)" test-list=?-12-123)
      (test-case #"list equal (1 2) (1 3)" test-list=?-12-13)
      (test-case #"list andmap even ()" test-andmap-even-empty)
      (test-case #"list andmap even (2 4 6)" test-andmap-even-246)
      (test-case #"list andmap even (2 7 6)" test-andmap-even-276)
      (test-case #"list ormap even ()" test-ormap-even-empty)
      (test-case #"list ormap even (1 3 5)" test-ormap-even-135)
      (test-case #"list ormap even (1 4 5)" test-ormap-even-145)
      (test-case #"list zip (1 2) (a b)" test-zip-12-ab)
      (test-case #"list zip (1 2 3) (a b)" test-zip-123-ab)
      (test-case #"list zip (1 2) (a b c)" test-zip-12-abc)
      (test-case #"list extract-justs ((just 1) (just 2))" test-extract-justs-j1j2)
      (test-case #"list extract-justs ((just 1) nothing)" test-extract-justs-j1n)
      (test-case #"list find/maybe 135" test-find/maybe-135)
      (test-case #"list find/maybe 146" test-find/maybe-146)
      (test-case #"list find/maybe 146" test-filter-map-146))))
