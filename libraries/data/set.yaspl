#:module (set)
#:import {
  (data ordering)
  (data red-black-tree)
  (list)
  (maybe)
  (prim)
  (tuples)
}
(export
  #:types (Set)
  #:values (make-set set-add set->list set-member? set-remove set-add-all
            set-remove-all set-count set-intersect set-difference set=? set-union set-union*
            set-split set-filter)
  #:patterns ())
(types
  (define-type (Set a)
    (set [v : (RedBlackTree a Void)])))

(define (a) (make-set [cmp : (a a -> Ordering)]) : (Set a)
  (set (make-rb-tree cmp)))

(define (a) (set->list [s : (Set a)]) : (List a)
  (rb-tree-fold-inorder
    (set-v s)
    (lambda ([a : a] [b : Void] [acc : (List a)])
      (cons a acc))
    ((lambda () : (List a) (empty)))))

(define (a) (set-count [s : (Set a)]) : Int
  (length (set->list s)))

(define (a) (set-add [s : (Set a)] [v : a]) : (Set a)
  (set (rb-tree-set (set-v s) v (void))))

(define (a) (set-add-all [s : (Set a)] [vs : (List a)])  : (Set a)
  (case vs
    [(empty) s]
    [(cons v vs) (set-add-all (set-add s v) vs)]))

(define (a) (set-remove [s : (Set a)] [v : a]) : (Set a)
  (set (rb-tree-remove (set-v s) v)))

(define (a) (set-remove-all [s : (Set a)] [vs : (List a)]) : (Set a)
  (case vs
    [(empty) s]
    [(cons v vs) (set-remove-all (set-remove s v) vs)]))

(define (a) (set-split [s : (Set a)]) : (Maybe (Tuple2 a (Set a)))
  (case (rb-tree-split (set-v s))
    [(nothing) (nothing)]
    [(just (tuple2 (tuple2 a _) tree))
     (just (tuple2 a (set tree)))]))

(define (a) (set-member? [s : (Set a)] [v : a]) : Boolean
  (case (rb-tree-ref (set-v s) v)
    [(nothing) #f]
    [(just v) #t]))


(define (a) (set-intersect [s1 : (Set a)] [s2 : (Set a)]) : (Set a)
  (set-filter s2 (lambda ([k : a]) : Boolean (set-member? s1 k))))

(define (a) (set-filter [s1 : (Set a)] [f : (a -> Boolean)]) : (Set a)
  (set
    (rb-tree-filter-map
      (set-v s1)
      (lambda ([k : a] [v : Void]) : (Maybe Void)
        (if (f k)
            (just v)
            (nothing))))))

(define (a) (set-difference [s1 : (Set a)] [s2 : (Set a)]) : (Set a)
  (foldl
    (lambda ([e : a] [s : (Set a)])
      (set-remove s e))
    (set->list s2)
    s1))

(define (a) (set-union [s1 : (Set a)] [s2 : (Set a)]) : (Set a)
  (foldl
    (lambda ([e : a] [s : (Set a)])
      (set-add s e))
    (set->list s2)
    s1))

(define (a) (set-union* [s1 : (Set a)] [ss : (List (Set a))]) : (Set a)
  (foldl
    (lambda ([new-set : (Set a)] [acc : (Set a)])
      (set-union acc new-set))
    ss
    s1))

(define (a) (set=? [s1 : (Set a)] [s2 : (Set a)]) : Boolean
  (and (= (set-count s1) (set-count s2))
       (andmap
         (lambda ([v : a]) (set-member? s2 v))
         (set->list s1))))
