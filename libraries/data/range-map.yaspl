#:module (data range-map)
#:import {
  (data lifted-primitives)
  (data red-black-tree)
  (maybe)
  (prim)
  (tuples)
}
(export
  (#:types IntRange IntRangeMap)
  (#:values int-range-map-set int-range-map-lookup make-int-range-map clopen-int-range))

(types
  (define-type IntRange
    (clopen-int-range [low : Int] [high : Int]))
  (define-type (IntRangeMap V)
    (int-range-map [tree : (RedBlackTree LiftedInt (Maybe V))])))

(define [V] (make-int-range-map) : (IntRangeMap V)
  (int-range-map (make-rb-tree lifted-int-cmp)))

(define [V] (int-range-map-set [rm : (IntRangeMap V)] [range : IntRange] [v : V])
  : (IntRangeMap V)
  (match-define (int-range-map tree) rm)
  (match-define (clopen-int-range low high) range)
  (match-define l-low (lifted-int low))
  (match-define l-high (lifted-int high))
  (match-define old-high-value (int-range-map-lookup rm high))
  (int-range-map
    (rb-tree-set (rb-tree-set (clear-rb-tree tree low l-high) l-low (just v)) l-high old-high-value)))

(define [V] (clear-rb-tree [tree : (RedBlackTree LiftedInt V)] [low : Int] [l-high : LiftedInt])
  : (RedBlackTree LiftedInt V)
  (case (rb-tree-infimum tree l-high)
    [(nothing) tree]
    [(just (tuple2 l-key _v))
     (match-define (lifted-int key) l-key)
     (if (<= low key)
         (clear-rb-tree (rb-tree-remove tree l-key) low l-high)
         tree)]))

(define [V] (int-range-map-lookup [rm : (IntRangeMap V)] [i : Int]) : (Maybe V)
  (match-define (int-range-map tree) rm)
  (case (rb-tree-infimum tree (lifted-int i))
    [(nothing) (nothing)]
    [(just (tuple2 _key v)) v]))
