#:module bytes
#:import {
  list {
    #:types
      List
    #:values
      cons
      empty
      map
    #:patterns
      cons
      empty
  }
  prim {
    #:types
      Array
      Boolean
      Bytes
      Int
      S32
      U32
      U8
      Void
    #:values
      *
      +
      -
      <
      =
      >=
      array-length
      array-ref
      bitwise-and
      bytes-length
      bytes-ref
      bytes-set!
      make-bytes
      or
      quotient
      s32/le-byte0
      s32/le-byte1
      s32/le-byte2
      s32/le-byte3
      u32/le-byte0
      u32/le-byte1
      u32/le-byte2
      u32/le-byte3
      u8
      void
  }
}
(export
  #:types (EightBytesLe)
  #:values (bytes-copy! bytes=? subbytes bytes-append bytes make-null-terminated
            starts-with? ends-with?
            bytes-ref/u8
            bytes-ref/quad-le bytes-set!/quad-le bytes-set!/s32-le
            bytes-ref/eight-bytes-le bytes-set!/eight-bytes-le
            bytes-set!/octo-le sum bytes<
            int->eight-bytes-le eight-bytes-le->int
            bytes-split)
  #:patterns ())
(types
  (define-type EightBytesLe
    (eight-bytes-le [bytes : Bytes])))

(define (bytes< [left : Bytes] [right : Bytes]) : Boolean
  (bytes<-helper 0 left right))
(define (bytes<-helper [offset : Int] [left : Bytes] [right : Bytes]) : Boolean
  (if (or (>= offset (bytes-length left)) (>= offset (bytes-length right)))
      (< (bytes-length left) (bytes-length right))
      (let ([l-value (bytes-ref left offset)])
        (let ([r-value (bytes-ref right offset)])
          (if (< l-value r-value)
              #t
              (if (< r-value l-value)
                  #f
                  (bytes<-helper (+ offset 1) left right)))))))

(define (bytes-copy! [src : Bytes] [s-start : Int] [s-end : Int] [dest : Bytes] [d-start : Int])
  : Void
  (if (= s-start s-end)
      (void)
      (begin
        (bytes-set! dest d-start (u8 (bytes-ref src s-start)))
        (bytes-copy! src (+ s-start 1) s-end dest (+ d-start 1)))))


(define (starts-with? [bytes : Bytes] [prefix : Bytes]) : Boolean
  (if (>= (bytes-length bytes) (bytes-length prefix))
      (bytes=? (subbytes bytes 0 (bytes-length prefix)) prefix)
      #f))

(define (ends-with? [bytes : Bytes] [suffix : Bytes]) : Boolean
  (if (>= (bytes-length bytes) (bytes-length suffix))
      (bytes=? (subbytes bytes (- (bytes-length bytes) (bytes-length suffix)) (bytes-length bytes)) suffix)
      #f))

(define (subbytes [src : Bytes] [start : Int] [end : Int]) : Bytes
  (let ([new-bytes (make-bytes (- end start))])
    (begin
      (bytes-copy! src start end new-bytes 0)
      new-bytes)))

(define (bytes=? [b1 : Bytes] [b2 : Bytes]) : Boolean
  (if (= (bytes-length b1) (bytes-length b2))
      (inner-bytes=? b1 b2 0)
      #f))
(define (inner-bytes=? [b1 : Bytes] [b2 : Bytes] [offset : Int]) : Boolean
  (if (= offset (bytes-length b1))
      #t
      (if (= (bytes-ref b1 offset) (bytes-ref b2 offset))
          (inner-bytes=? b1 b2 (+ 1 offset))
          #f)))

;; TODO move this to a better module
(define (sum [nums : (List Int)]) : Int
  (sum-helper nums 0))
(define (sum-helper [nums : (List Int)] [acc : Int]) : Int
  (case nums
    [(empty) acc]
    [(cons num nums) (sum-helper nums (+ num acc))]))


(define (bytes-append [bytess : (List Bytes)]) : Bytes
  (let ([acc (make-bytes (sum (map bytes-length bytess)))])
    (bytes-append-helper acc 0 bytess)))
(define (bytes-append-helper [acc : Bytes] [offset : Int] [bytess : (List Bytes)]) : Bytes
  (case bytess
    [(empty) acc]
    [(cons input bytess)
     (let ([len (bytes-length input)])
       (begin
         (bytes-copy! input 0 len acc offset)
         (bytes-append-helper acc (+ offset len) bytess)))]))

;; TODO make this take U8s
(define (bytes [vs : (Array Int)]) : Bytes
  (let ([acc (make-bytes (array-length vs))])
    (bytes-helper vs 0 acc)))
(define (bytes-helper [vs : (Array Int)] [offset : Int] [acc : Bytes]) : Bytes
  (if (= offset (array-length vs))
      acc
      (begin
        (bytes-set! acc offset (u8 (array-ref vs offset)))
        (bytes-helper vs (+ 1 offset) acc))))

(define (make-null-terminated [bytes : Bytes]) : Bytes
  (let ([new-bytes (make-bytes (+ (bytes-length bytes) 1))])
    (begin
      (bytes-copy! bytes 0 (bytes-length bytes) new-bytes 0)
      new-bytes)))

;; TODO replace bytes-ref with this
(define (bytes-ref/u8 [bytes : Bytes] [offset : Int]) : U8
  (u8 (bytes-ref bytes offset)))

;; TODO make this return S32/U32
(define (bytes-ref/quad-le [bytes : Bytes] [offset : Int]) : Int
  (+ (bytes-ref bytes (+ offset 0))
     (* 256
        (+ (bytes-ref bytes (+ offset 1))
            (* 256
               (+ (bytes-ref bytes (+ offset 2))
                  (* 256
                     (bytes-ref bytes (+ offset 3)))))))))


(define (bytes-ref/eight-bytes-le [bytes : Bytes] [offset : Int]) : EightBytesLe
  (eight-bytes-le (subbytes bytes offset (+ offset 8))))

(define (bytes-set!/quad-le [bytes : Bytes] [offset : Int] [v : U32]) : Void
  (begin
    (bytes-set! bytes offset       (u32/le-byte0 v))
    (bytes-set! bytes (+ offset 1) (u32/le-byte1 v))
    (bytes-set! bytes (+ offset 2) (u32/le-byte2 v))
    (bytes-set! bytes (+ offset 3) (u32/le-byte3 v))))

(define (bytes-set!/s32-le [bytes : Bytes] [offset : Int] [v : S32]) : Void
  (begin
    (bytes-set! bytes offset       (s32/le-byte0 v))
    (bytes-set! bytes (+ offset 1) (s32/le-byte1 v))
    (bytes-set! bytes (+ offset 2) (s32/le-byte2 v))
    (bytes-set! bytes (+ offset 3) (s32/le-byte3 v))))

;; TODO remove this once bytes-set!/octo-le is dead
(define (arithmetic-shift-left [v : Int] [amount : Int]) : Int
  (if (= amount 0)
      v
      (arithmetic-shift-left (quotient v 2) (- amount 1))))

;; TODO(endobson): This is possibly buggy because of the shift
;; TODO remove this once it is dead
(define (bytes-set!/octo-le [bytes : Bytes] [offset : Int] [v : Int]) : Void
  (begin
    (bytes-set! bytes offset       (u8 (bitwise-and v #xFF)))
    (bytes-set! bytes (+ offset 1) (u8 (bitwise-and (arithmetic-shift-left v 8) #xFF)))
    (bytes-set! bytes (+ offset 2) (u8 (bitwise-and (arithmetic-shift-left v 16) #xFF)))
    (bytes-set! bytes (+ offset 3) (u8 (bitwise-and (arithmetic-shift-left v 24) #xFF)))
    (bytes-set! bytes (+ offset 4) (u8 (bitwise-and (arithmetic-shift-left v 32) #xFF)))
    (bytes-set! bytes (+ offset 5) (u8 (bitwise-and (arithmetic-shift-left v 40) #xFF)))
    (bytes-set! bytes (+ offset 6) (u8 (bitwise-and (arithmetic-shift-left v 48) #xFF)))
    (bytes-set! bytes (+ offset 7) (u8 (bitwise-and (arithmetic-shift-left v 56) #xFF)))))

(define (int->eight-bytes-le [v : Int]) : EightBytesLe
  (let ([bytes (make-bytes 8)])
    (begin
      (bytes-set!/octo-le bytes 0 v)
      (eight-bytes-le bytes))))

;; TODO delete this once there are workarounds
;; The issue is that this can cause overflow or have issues with sign/unsigned confusion
(define (eight-bytes-le->int [v : EightBytesLe]) : Int
  (let ([bytes (eight-bytes-le-bytes v)])
    (+ (bytes-ref bytes 0)
       (* 256
          (+ (bytes-ref bytes 1)
              (* 256
                 (+ (bytes-ref bytes 2)
                    (* 256
                       (+ (bytes-ref bytes 3)
                          (* 256
                             (+ (bytes-ref bytes 4)
                                (* 256
                                   (+ (bytes-ref bytes 5)
                                       (* 256
                                          (+ (bytes-ref bytes 6)
                                             (* 256
                                                (bytes-ref bytes 7)))))))))))))))))


(define (bytes-set!/eight-bytes-le [bytes : Bytes] [offset : Int] [v : EightBytesLe]) : Void
  (bytes-copy! (eight-bytes-le-bytes v) 0 8 bytes offset))

(define (bytes-split [bytes : Bytes] [sep : Bytes]) : (List Bytes)
  (bytes-split* bytes 0 0 sep))

(define (bytes-split* [bytes : Bytes] [start : Int] [cur : Int] [sep : Bytes]) : (List Bytes)
  (if (= cur (bytes-length bytes))
      (cons (subbytes bytes start cur) (empty))
      (if (starts-with? (subbytes bytes cur (bytes-length bytes)) sep)
          (cons (subbytes bytes start cur)
                (bytes-split* bytes (+ cur (bytes-length sep)) (+ cur (bytes-length sep)) sep))
          (bytes-split* bytes start (+ 1 cur) sep))))
