#:module (bytes)
#:import {
  (data ordering)
  (list)
  (numbers)
  (prim)
}
(export
  (#:values bytes-copy! bytes=? subbytes bytes-append make-bytes/fill
            make-null-terminated read-null-terminated-bytes
            starts-with? ends-with?
            bytes-map
            bytes-ref/quad-le bytes-set!/quad-le
            bytes/s8
            bytes/u8
            bytes-ref/u16-le
            bytes/u16-le bytes-set!/u16-le
            bytes/s32-le bytes-set!/s32-le
            bytes/u32-le
            bytes/u64-le bytes-ref/u64-le bytes-set!/u64-le
            bytes< bytes-split bytes-cmp
            bytes/1 bytes/2 bytes/3 bytes/4 bytes/5 bytes/6 bytes/7 bytes/8 bytes/9 bytes/10 bytes/11
            bytes-reverse
            args->list))
(types)

(define (bytes< [left : Bytes] [right : Bytes]) : Boolean
  (case (bytes-cmp left right)
    [(less-than) #t]
    [_ #f]))

(define (bytes-cmp [left : Bytes] [right : Bytes]) : Ordering
  (bytes-cmp-helper 0 left right))

(define (bytes-cmp-helper [offset : Int] [left : Bytes] [right : Bytes]) : Ordering
  (if (or (>= offset (bytes-length left)) (>= offset (bytes-length right)))
      (int-cmp (bytes-length left) (bytes-length right))
      (let ([l-value (u8->s64 (bytes-ref left offset))])
        (let ([r-value (u8->s64 (bytes-ref right offset))])
          (if (< l-value r-value)
              (less-than)
              (if (< r-value l-value)
                  (greater-than)
                  (bytes-cmp-helper (+ offset 1) left right)))))))

(define (bytes-copy! [src : Bytes] [s-start : Int] [s-end : Int] [dest : Bytes] [d-start : Int])
  : Void
  (if (= s-start s-end)
      (void)
      (begin
        (bytes-set! dest d-start (bytes-ref src s-start))
        (bytes-copy! src (+ s-start 1) s-end dest (+ d-start 1)))))

(define (make-bytes/fill [size : Int] [fill : U8]) : Bytes
  (make-bytes/fill* 0 fill (make-bytes size)))
(define (make-bytes/fill* [offset : Int] [fill : U8] [b : Bytes]) : Bytes
  (if (= offset (bytes-length b))
      b
      (begin
        (bytes-set! b offset fill)
        (make-bytes/fill* (+ 1 offset) fill b))))

(define (starts-with? [bytes : Bytes] [prefix : Bytes]) : Boolean
  (if (>= (bytes-length bytes) (bytes-length prefix))
      (bytes=? (subbytes bytes 0 (bytes-length prefix)) prefix)
      #f))

(define (ends-with? [bytes : Bytes] [suffix : Bytes]) : Boolean
  (if (>= (bytes-length bytes) (bytes-length suffix))
      (bytes=? (subbytes bytes (- (bytes-length bytes) (bytes-length suffix)) (bytes-length bytes)) suffix)
      #f))

(define (subbytes [src : Bytes] [start : Int] [end : Int]) : Bytes
  (if (< end start)
      (panic #"subbytes: end must be after start")
      (let ([new-bytes (make-bytes (- end start))])
        (begin
          (bytes-copy! src start end new-bytes 0)
          new-bytes))))

(define (bytes=? [b1 : Bytes] [b2 : Bytes]) : Boolean
  (case (bytes-cmp b1 b2)
    [(equal-to) #t]
    [_ #f]))

(define (bytes-append [bytess : (List Bytes)]) : Bytes
  (let ([acc (make-bytes (sum bytes-length bytess))])
    (bytes-append-helper acc 0 bytess)))
(define (bytes-append-helper [acc : Bytes] [offset : Int] [bytess : (List Bytes)]) : Bytes
  (case bytess
    [(empty) acc]
    [(cons input bytess)
     (let ([len (bytes-length input)])
       (begin
         (bytes-copy! input 0 len acc offset)
         (bytes-append-helper acc (+ offset len) bytess)))]))

(define (bytes/1 [v0 : U8]) : Bytes
  (let ([bytes (make-bytes 1)])
    (begin
      (bytes-set! bytes 0 v0)
      bytes)))
(define (bytes/2 [v0 : U8] [v1 : U8]) : Bytes
  (let ([bytes (make-bytes 2)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      bytes)))
(define (bytes/3 [v0 : U8] [v1 : U8] [v2 : U8]) : Bytes
  (let ([bytes (make-bytes 3)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      bytes)))
(define (bytes/4 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8]) : Bytes
  (let ([bytes (make-bytes 4)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      bytes)))
(define (bytes/5 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8] [v4 : U8]) : Bytes
  (let ([bytes (make-bytes 5)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      (bytes-set! bytes 4 v4)
      bytes)))
(define (bytes/6 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8] [v4 : U8] [v5 : U8]) : Bytes
  (let ([bytes (make-bytes 6)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      (bytes-set! bytes 4 v4)
      (bytes-set! bytes 5 v5)
      bytes)))
(define (bytes/7 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8] [v4 : U8] [v5 : U8] [v6 : U8]) : Bytes
  (let ([bytes (make-bytes 7)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      (bytes-set! bytes 4 v4)
      (bytes-set! bytes 5 v5)
      (bytes-set! bytes 6 v6)
      bytes)))
(define (bytes/8 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8]
                 [v4 : U8] [v5 : U8] [v6 : U8] [v7 : U8]) : Bytes
  (let ([bytes (make-bytes 8)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      (bytes-set! bytes 4 v4)
      (bytes-set! bytes 5 v5)
      (bytes-set! bytes 6 v6)
      (bytes-set! bytes 7 v7)
      bytes)))
(define (bytes/9 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8]
                 [v4 : U8] [v5 : U8] [v6 : U8] [v7 : U8] [v8 : U8]) : Bytes
  (let ([bytes (make-bytes 9)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      (bytes-set! bytes 4 v4)
      (bytes-set! bytes 5 v5)
      (bytes-set! bytes 6 v6)
      (bytes-set! bytes 7 v7)
      (bytes-set! bytes 8 v8)
      bytes)))
(define (bytes/10 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8] [v4 : U8]
                  [v5 : U8] [v6 : U8] [v7 : U8] [v8 : U8] [v9 : U8]) : Bytes
  (let ([bytes (make-bytes 10)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      (bytes-set! bytes 4 v4)
      (bytes-set! bytes 5 v5)
      (bytes-set! bytes 6 v6)
      (bytes-set! bytes 7 v7)
      (bytes-set! bytes 8 v8)
      (bytes-set! bytes 9 v9)
      bytes)))
(define (bytes/11 [v0 : U8] [v1 : U8] [v2 : U8] [v3 : U8] [v4 : U8]
                  [v5 : U8] [v6 : U8] [v7 : U8] [v8 : U8] [v9 : U8] [v10 : U8]) : Bytes
  (let ([bytes (make-bytes 11)])
    (begin
      (bytes-set! bytes 0 v0)
      (bytes-set! bytes 1 v1)
      (bytes-set! bytes 2 v2)
      (bytes-set! bytes 3 v3)
      (bytes-set! bytes 4 v4)
      (bytes-set! bytes 5 v5)
      (bytes-set! bytes 6 v6)
      (bytes-set! bytes 7 v7)
      (bytes-set! bytes 8 v8)
      (bytes-set! bytes 9 v9)
      (bytes-set! bytes 10 v10)
      bytes)))


(define (make-null-terminated [bytes : Bytes]) : Bytes
  (let ([new-bytes (make-bytes (+ (bytes-length bytes) 1))])
    (begin
      (bytes-copy! bytes 0 (bytes-length bytes) new-bytes 0)
      new-bytes)))

;; TODO make this return a U16
(define (bytes-ref/u16-le [bytes : Bytes] [offset : Int]) : Int
  (+ (u8->s64 (bytes-ref bytes (+ offset 0)))
     (* 256
        (u8->s64 (bytes-ref bytes (+ offset 1))))))


;; TODO make this return S32/U32
(define (bytes-ref/quad-le [bytes : Bytes] [offset : Int]) : Int
  (+ (u8->s64 (bytes-ref bytes (+ offset 0)))
     (* 256
        (+ (u8->s64 (bytes-ref bytes (+ offset 1)))
            (* 256
               (+ (u8->s64 (bytes-ref bytes (+ offset 2)))
                  (* 256
                     (u8->s64 (bytes-ref bytes (+ offset 3))))))))))

(define (bytes-ref/u64-le [bytes : Bytes] [offset : Int]) : U64
  (u64
    (+ (u8->s64 (bytes-ref bytes (+ offset 0)))
       (* 256
          (+ (u8->s64 (bytes-ref bytes (+ offset 1)))
             (* 256
                (+ (u8->s64 (bytes-ref bytes (+ offset 2)))
                   (* 256
                      (+ (u8->s64 (bytes-ref bytes (+ offset 3)))
                         (* 256
                            (+ (u8->s64 (bytes-ref bytes (+ offset 4)))
                               (* 256
                                  (+ (u8->s64 (bytes-ref bytes (+ offset 5)))
                                     (* 256
                                        (+ (u8->s64 (bytes-ref bytes (+ offset 6)))
                                           (* 256
                                              (u8->s64 (bytes-ref bytes (+ offset 7)))))))))))))))))))


(define (bytes-set!/quad-le [bytes : Bytes] [offset : Int] [v : U32]) : Void
  (begin
    (bytes-set! bytes offset       (u32/le-byte0 v))
    (bytes-set! bytes (+ offset 1) (u32/le-byte1 v))
    (bytes-set! bytes (+ offset 2) (u32/le-byte2 v))
    (bytes-set! bytes (+ offset 3) (u32/le-byte3 v))))

(define (bytes/s8 [v : S8]) : Bytes
  (bytes/1 (u8 (bitwise-and (s8->s64 v) #xFF))))

;; A rename of bytes/1 to match the style of others
(define (bytes/u8 [v : U8]) : Bytes
  (bytes/1 v))

(define (bytes-set!/s32-le [bytes : Bytes] [offset : Int] [v : S32]) : Void
  (begin
    (bytes-set! bytes offset       (s32/le-byte0 v))
    (bytes-set! bytes (+ offset 1) (s32/le-byte1 v))
    (bytes-set! bytes (+ offset 2) (s32/le-byte2 v))
    (bytes-set! bytes (+ offset 3) (s32/le-byte3 v))))

(define (bytes/s32-le [v : S32]) : Bytes
  (bytes/4 (s32/le-byte0 v) (s32/le-byte1 v) (s32/le-byte2 v) (s32/le-byte3 v)))

(define (bytes/u32-le [v : U32]) : Bytes
  (bytes/4 (u32/le-byte0 v) (u32/le-byte1 v) (u32/le-byte2 v) (u32/le-byte3 v)))

(define (bytes-set!/u16-le [bytes : Bytes] [offset : Int] [v : U16]) : Void
  (begin
    (bytes-set! bytes offset       (u16/le-byte0 v))
    (bytes-set! bytes (+ offset 1) (u16/le-byte1 v))))

(define (bytes/u16-le [v : U16]) : Bytes
  (bytes/2 (u16/le-byte0 v) (u16/le-byte1 v)))


(define (bytes-set!/u64-le [bytes : Bytes] [offset : Int] [u : U64]) : Void
  (match-define v (u64->s64 u))
  (begin
    (bytes-set! bytes offset       (u8 (bitwise-and v #xFF)))
    (bytes-set! bytes (+ offset 1) (u8 (bitwise-and (logical-shift-right v 8) #xFF)))
    (bytes-set! bytes (+ offset 2) (u8 (bitwise-and (logical-shift-right v 16) #xFF)))
    (bytes-set! bytes (+ offset 3) (u8 (bitwise-and (logical-shift-right v 24) #xFF)))
    (bytes-set! bytes (+ offset 4) (u8 (bitwise-and (logical-shift-right v 32) #xFF)))
    (bytes-set! bytes (+ offset 5) (u8 (bitwise-and (logical-shift-right v 40) #xFF)))
    (bytes-set! bytes (+ offset 6) (u8 (bitwise-and (logical-shift-right v 48) #xFF)))
    (bytes-set! bytes (+ offset 7) (u8 (bitwise-and (logical-shift-right v 56) #xFF)))))

(define (bytes/u64-le [u : U64]) : Bytes
  (let ([v (make-bytes 8)])
    (begin
      (bytes-set!/u64-le v 0 u)
      v)))

(define (bytes-split [bytes : Bytes] [sep : Bytes]) : (List Bytes)
  (bytes-split* bytes 0 0 sep))

(define (bytes-split* [bytes : Bytes] [start : Int] [cur : Int] [sep : Bytes]) : (List Bytes)
  (cond
    [(= cur (bytes-length bytes))
     (cons (subbytes bytes start cur) (empty))]
    [(starts-with? (subbytes bytes cur (bytes-length bytes)) sep)
     (cons (subbytes bytes start cur)
           (bytes-split* bytes (+ cur (bytes-length sep)) (+ cur (bytes-length sep)) sep))]
    [else
     (bytes-split* bytes start (+ 1 cur) sep)]))

(define (read-null-terminated-bytes [bytes : Bytes] [init : Int]) : Bytes
  (read-null-terminated-bytes* bytes init init))

(define (read-null-terminated-bytes* [bytes : Bytes] [init : Int] [end : Int]) : Bytes
  (if (>= end (bytes-length bytes))
      (panic #"Bad null terminated bytes")
      (case (u8->s64 (bytes-ref bytes end))
        [0 (subbytes bytes init end)]
        [_ (read-null-terminated-bytes* bytes init (+ 1 end))])))

(define [A] (bytes-map [bytes : Bytes] [f : (U8 -> A)]) : (List A)
  (bytes-map* bytes f (- (bytes-length bytes) 1) (empty)))

(define [A] (bytes-map* [bytes : Bytes] [f : (U8 -> A)] [cur-offset : Int] [acc : (List A)]) : (List A)
  (if (< cur-offset 0)
      acc
      (bytes-map* bytes f (- cur-offset 1) (cons (f (bytes-ref bytes cur-offset)) acc))))

(define (args->list [bytes : Bytes]) : (List Bytes)
  (read-null-terminated-byte-array bytes))

(define (read-null-terminated-byte-array [bytes : Bytes]) : (List Bytes)
  (read-null-terminated-byte-array* bytes 0))

(define (read-null-terminated-byte-array* [bytes : Bytes] [offset : Int]) : (List Bytes)
  (if (= offset (bytes-length bytes))
      (empty)
      (let ([elem (read-null-terminated-bytes bytes offset)])
        (cons elem (read-null-terminated-byte-array* bytes (+ offset (+ (bytes-length elem) 1)))))))

(define (bytes-reverse [bytes : Bytes]) : Bytes
  (bytes-reverse* bytes 0 (make-bytes (bytes-length bytes))))

(define (bytes-reverse* [bytes : Bytes] [index : Int] [acc : Bytes]) : Bytes
  (if (= index (bytes-length bytes))
      acc
      (begin
        (bytes-set! acc index (bytes-ref bytes (- (bytes-length bytes) (+ index 1))))
        (bytes-reverse* bytes (+ index 1) acc))))
