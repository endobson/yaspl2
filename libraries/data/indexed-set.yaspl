#:module (data indexed-set)
#:import {
  (data ordering)
  (dict)
  (either)
  (list)
  (maybe)
  (prim)
  (set)
  (tuples)
}
(export
  (#:types IndexedSet)
  (#:values make-indexed-set indexed-set-add indexed-set-maybe-add
            indexed-set-maybe-add-all indexed-set-add-all
            indexed-set-ref indexed-set->list indexed-set-fold
            indexed-set-value-map indexed-set-filter
            indexed-set->keys)
  (#:patterns))
(types
  (define-type (IndexedSet E I)
    (indexed-set [extractor : (E -> I)] [index : (Dict I E)])))

(define [E I] (make-indexed-set [extractor : (E -> I)] [cmp : (I I -> Ordering)]) :
  (IndexedSet E I)
  (indexed-set extractor (make-dict cmp)))

(define [E I] (indexed-set-add [s : (IndexedSet E I)] [e : E]) : (IndexedSet E I)
  (match-define (indexed-set extract index) s)
  (indexed-set extract (dict-add index (extract e) e)))

(define [E I] (indexed-set-maybe-add [s : (IndexedSet E I)] [e : E]) : (Maybe (IndexedSet E I))
  (match-define (indexed-set extract index) s)
  (case (dict-maybe-add index (extract e) e)
    [(nothing) (nothing)]
    [(just index)
     (just (indexed-set extract index))]))

(define [E I] (indexed-set-add-all [s : (IndexedSet E I)] [es : (List E)]) : (IndexedSet E I)
  (match-define (indexed-set extract index) s)
  (indexed-set extract (dict-add-all index (map (lambda ([e : E]) (tuple2 (extract e) e)) es))))

(define [E I] (indexed-set-maybe-add-all [s : (IndexedSet E I)] [es : (List E)])
  : (Either E (IndexedSet E I))
  (match-define (indexed-set extract index) s)
  (case (dict-maybe-add-all index (map (lambda ([e : E]) (tuple2 (extract e) e)) es))
    [(left (tuple2 _ e)) (left e)]
    [(right index)
     (right (indexed-set extract index))]))

(define [E I] (indexed-set-ref [s : (IndexedSet E I)] [i : I]) : (Maybe E)
  (dict-ref (indexed-set-index s) i))

(define [E I] (indexed-set->list [s : (IndexedSet E I)]) : (List E)
  (dict-values (indexed-set-index s)))

(define [E I] (indexed-set->keys [s : (IndexedSet E I)]) : (Set I)
  (dict-keys (indexed-set-index s)))


(define [E I A] (indexed-set-fold [s : (IndexedSet E I)]
                                  [f : (E A -> A)]
                                  [acc : A]) : A
  (dict-fold
    (indexed-set-index s)
    (lambda ([_k : I] [v : E] [acc : A])
      (f v acc))
    acc))

(define [E I] (indexed-set-value-map [s : (IndexedSet E I)] [f : (E -> E)]) : (IndexedSet E I)
  (match-define (indexed-set extractor index) s)
  (indexed-set
    extractor
    (dict-value-map
      index
      (lambda ([v : E]) : E
        ;; DO NOT SUBMIT check the index on this
        (f v)))))

(define [E I] (indexed-set-filter [s : (IndexedSet E I)] [f : (E -> Boolean)]) : (IndexedSet E I)
  (match-define (indexed-set extractor index) s)
  (indexed-set
    extractor
    (dict-filter
      index
      (lambda ([_k : I] [v : E]) : Boolean
        (f v)))))
