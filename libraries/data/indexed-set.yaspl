#:module (data indexed-set)
#:import {
  (dict) {
    #:types
      Dict
    #:values
      dict-add
      dict-ref
      make-dict
  }
  (maybe) {
    #:types
      Maybe
  }
  (prim) {
    #:types
      Boolean
  }
}
(export
  #:types (IndexedSet)
  #:values (make-indexed-set indexed-set-add indexed-set-ref)
  #:patterns ())
(types
  (define-type (IndexedSet E I)
    (indexed-set [extractor : (E -> I)] [index : (Dict I E)])))

(define (E I) (make-indexed-set [extractor : (E -> I)] [eq? : (I I -> Boolean)]) :
  (IndexedSet E I)
  (indexed-set extractor (make-dict eq?)))

(define (E I) (indexed-set-add [s : (IndexedSet E I)] [e : E]) : (IndexedSet E I)
  (match-define (indexed-set extract index) s)
  (indexed-set extract (dict-add index (extract e) e)))

(define (E I) (indexed-set-ref [s : (IndexedSet E I)] [i : I]) : (Maybe E)
  (dict-ref (indexed-set-index s) i))
