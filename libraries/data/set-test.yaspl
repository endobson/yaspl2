#:module (set-test)
#:import {
  (bytes)
  (list)
  (maybe)
  (prim)
  (set)
  (yunit)
}
(export
  (#:values main))
(types)

(define [A] (expect-set-size [s : (Set A)] [expected : Int])
  : (Maybe FailedAssertion)
  (expect-equal/int (set-count s) expected))

(define [A] (expect-set-member [s : (Set A)] [elem : A] [expected : Boolean])
  : (Maybe FailedAssertion)
  (expect-equal/boolean (set-member? s elem) expected))

(define (test-set-size-empty) : (Maybe FailedAssertion)
  (expect-set-size (make-set bytes-cmp) 0))

(define (test-set-size-a) : (Maybe FailedAssertion)
  (expect-set-size (set-add (make-set bytes-cmp) #"1") 1))

(define (test-set-size-aa) : (Maybe FailedAssertion)
  (expect-set-size (set-add (set-add (make-set bytes-cmp) #"1") #"1") 1))

(define (test-set-size-ab) : (Maybe FailedAssertion)
  (expect-set-size (set-add (set-add (make-set bytes-cmp) #"1") #"2") 2))

(define (test-set-size-aba) : (Maybe FailedAssertion)
  (expect-set-size (set-add (set-add (set-add (make-set bytes-cmp) #"1") #"2") #"1") 2))

(define (test-set-member-empty) : (Maybe FailedAssertion)
  (expect-set-member (make-set bytes-cmp) #"1" #f))

(define (test-set-member-a) : (Maybe FailedAssertion)
  (expect-set-member (set-add (make-set bytes-cmp) #"1") #"1" #t))

(define (test-set-member-b) : (Maybe FailedAssertion)
  (expect-set-member (set-add (make-set bytes-cmp) #"2") #"1" #f))

(define (test-set-member-ab) : (Maybe FailedAssertion)
  (expect-set-member (set-add (set-add (make-set bytes-cmp) #"1") #"2") #"1" #t))

(define (test-set-remove-empty) : (Maybe FailedAssertion)
  (expect-set-size (set-remove (make-set bytes-cmp) #"1") 0))

(define (test-set-remove-a) : (Maybe FailedAssertion)
  (expect-set-size (set-remove (set-add (make-set bytes-cmp) #"1") #"1") 0))

(define (test-set-remove-b) : (Maybe FailedAssertion)
  (expect-set-size (set-remove (set-add (make-set bytes-cmp) #"2") #"1") 1))

(define (test-set-remove-ab) : (Maybe FailedAssertion)
  (expect-set-size (set-remove (set-add (set-add (make-set bytes-cmp) #"1") #"2") #"1") 1))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"set size empty" test-set-size-empty)
      (new-test-case #"set size a" test-set-size-a)
      (new-test-case #"set size aa" test-set-size-aa)
      (new-test-case #"set size ab" test-set-size-ab)
      (new-test-case #"set size aba" test-set-size-aba)

      (new-test-case #"set member empty" test-set-member-empty)
      (new-test-case #"set member a" test-set-member-a)
      (new-test-case #"set member b" test-set-member-b)
      (new-test-case #"set member ab" test-set-member-ab)

      (new-test-case #"set remove empty" test-set-remove-empty)
      (new-test-case #"set remove a" test-set-remove-a)
      (new-test-case #"set remove b" test-set-remove-b)
      (new-test-case #"set remove ab" test-set-remove-ab))))
