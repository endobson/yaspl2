#:module (directed-graph)
#:import {
  (data lifted-primitives)
  (dict)
  (maybe)
  (prim)
  (tuples)
}
(export
  (#:types Graph)
  (#:values empty-graph graph-add-vertex graph-add-edge graph-vertex-value graph-vertex-edges)
  (#:patterns))
(types
  (define-type (Graph V E)
    (graph [connections : (Dict LiftedInt (Tuple2 V (Dict LiftedInt E)))])))


(define (V E) (empty-graph) : (Graph V E)
  (graph (make-dict lifted-int-cmp)))

(define (V E) (graph-add-vertex [g : (Graph V E)] [index : Int] [v : V] [edges : (Dict LiftedInt E)])
  : (Maybe (Graph V E))
  (case g
    [(graph con)
     (case (dict-maybe-add con (lifted-int index) (tuple2 v edges))
       [(just v) (just (graph v))]
       [(nothing) (nothing)])]))

(define (V E) (graph-add-edge [g : (Graph V E)] [src : Int] [dest : Int] [label : E])
  : (Maybe (Graph V E))
  (case g
    [(graph con)
     (case (dict-ref con (lifted-int src))
       [(nothing) (nothing)]
       [(just (tuple2 v edges))
        (case (dict-maybe-add edges (lifted-int dest) label)
          [(nothing) (nothing)]
          [(just new-edges)
           (just (graph (dict-replace con (lifted-int src) (tuple2 v new-edges))))])])]))

(define (V E) (graph-vertex-value [g : (Graph V E)] [v : Int]) : (Maybe V)
  (case g
    [(graph con)
     (case (dict-ref con (lifted-int v))
       [(nothing) (nothing)]
       [(just (tuple2 v _)) (just v)])]))

(define (V E) (graph-vertex-edges [g : (Graph V E)] [src : Int]) : (Maybe (Dict LiftedInt E))
  (case g
    [(graph con)
     (case (dict-ref con (lifted-int src))
       [(nothing) (nothing)]
       [(just (tuple2 _ edges)) (just edges)])]))
