#:module (directed-graph)
#:import {
  (data ordering)
  (dict)
  (maybe)
  (prim)
  (tuples)
}
(export
  (#:types Graph)
  (#:values
    empty-graph
    graph-add-vertex-if-absent
    graph-add-edge graph-add-edge-if-absent
    graph-vertices graph-edges))
(types
  (define-type (Graph I V E)
    (graph [cmp : (I I -> Ordering)] [connections : (Dict I (Tuple2 V (Dict I E)))])))

(define [I V E] (empty-graph [cmp : (I I -> Ordering)]) : (Graph I V E)
  (graph cmp (make-dict cmp)))

(define [I V E] (graph-add-vertex-if-absent [g : (Graph I V E)] [index : I] [v : V])
  : (Graph I V E)
  (case g
    [(graph cmp con)
     (if (dict-has-key? con index)
         g
         (graph cmp (dict-add con index (tuple2 v (make-dict cmp)))))]))

;; Figure out how to differentiate edge existing from vertices not existing
(define [I V E] (graph-add-edge [g : (Graph I V E)] [src : I] [dest : I] [label : E])
  : (Maybe (Graph I V E))
  (case g
    [(graph cmp con)
     (if (dict-has-key? con dest)
         (case (dict-ref con src)
           [(nothing) (nothing)]
           [(just (tuple2 v edges))
            (case (dict-maybe-add edges dest label)
              [(nothing) (nothing)]
              [(just new-edges)
               (just (graph cmp (dict-replace con src (tuple2 v new-edges))))])])
         (nothing))]))

(define [I V E] (graph-add-edge-if-absent [g : (Graph I V E)] [src : I] [dest : I] [label : E])
  : (Graph I V E)
  (case (graph-add-edge g src dest label)
    [(nothing) g]
    [(just g) g]))

(define [I V E] (graph-vertices [g : (Graph I V E)]) : (Dict I V)
  (match-define (graph _ con) g)
  (dict-value-map
    con
    (lambda ([t : (Tuple2 V (Dict I E))])
      (case t [(tuple2 v _) v]))))

(define [I V E] (graph-edges [g : (Graph I V E)]) : (Dict (Tuple2 I I) E)
  (match-define (graph cmp con) g)
  (graph-edges* con (ann (Dict (Tuple2 I I) E) (make-dict (tuple2-cmp cmp cmp)))))

(define [I V E] (graph-edges*
                  [con : (Dict I (Tuple2 V (Dict I E)))]
                  [acc : (Dict (Tuple2 I I) E)]) : (Dict (Tuple2 I I) E)
  (case (dict-split con)
    [(nothing) acc]
    [(just (tuple2 (tuple2 i (tuple2 _ other-edges)) con))
     (graph-edges*
       con
       (dict-fold
         other-edges
         (lambda ([i2 : I] [e : E] [acc : (Dict (Tuple2 I I) E)])
           (dict-add acc (tuple2 i i2) e))
         acc))]))
