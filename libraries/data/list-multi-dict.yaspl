#:module (list-multi-dict)
#:import {
  (data ordering)
  (dict)
  (list)
  (maybe)
  (prim)
}
(export
  (#:types ListMultiDict)
  (#:values make-list-multi-dict dict->list-multi-dict
            list-multi-dict-add list-multi-dict-ref/empty
            list-multi-dict-fold list-multi-dict-empty?))
(types
  (define-type (ListMultiDict A B)
    (list-multi-dict [dict : (Dict A (List B))])))

(define [A B] (make-list-multi-dict [cmp-a : (A A -> Ordering)])
  : (ListMultiDict A B)
  (list-multi-dict (make-dict cmp-a)))

(define [A B] (dict->list-multi-dict [d : (Dict A B)])
  : (ListMultiDict A B)
  (list-multi-dict (dict-value-map d (lambda ([b : B]) (varargs list b)))))

(define [A B] (list-multi-dict-add [l : (ListMultiDict A B)] [a : A] [b : B])
  : (ListMultiDict A B)
  (match-define (list-multi-dict dict) l)
  (list-multi-dict
    (dict-update dict a (lambda ([l : (List B)]) (cons b l)) (empty))))

(define [A B] (list-multi-dict-empty? [l : (ListMultiDict A B)]) : Boolean
  (match-define (list-multi-dict dict) l)
  (dict-empty? dict))

(define [A B] (list-multi-dict-ref/empty [l : (ListMultiDict A B)] [a : A]) : (List B)
  (match-define (list-multi-dict dict) l)
  (case (dict-ref dict a)
    [(nothing) (empty)]
    [(just l) l]))

(define [A B C] (list-multi-dict-fold [l : (ListMultiDict A B)] [f : (A (List B) C -> C)] [acc : C]) : C
  (match-define (list-multi-dict dict) l)
  (dict-fold dict f acc))
