#:module regexp-test
(import
  (list
    #:types ()
    #:values (list)
    #:patterns ())
  (maybe
    #:types (Maybe)
    #:values (just nothing)
    #:patterns ())
  (prim
    #:types (Array Bytes InputPort Int OutputPort)
    #:values (u8)
    #:patterns ())
  (regexp
    #:types (Regexp)
    #:values (alt-regexp any-regexp empty-regexp epsilon-regexp group-regexp lit-regexp
              regexp-match? rep-regexp)
    #:patterns ())
  (yunit
    #:types (FailedAssertion)
    #:values (failure new-test-case yunit/main)
    #:patterns ()))

(export)
(types)

(define (regexp-a) : Regexp
  (lit-regexp (u8 97)))

(define (regexp-b) : Regexp
  (lit-regexp (u8 98)))

(define (regexp-dash) : Regexp
  (lit-regexp (u8 45)))

(define (check-match [regexp : Regexp] [bytes : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (regexp-match? regexp bytes)
        (nothing)
        (just (failure #"Failed to match")))))

(define (check-no-match [regexp : Regexp] [bytes : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (regexp-match? regexp bytes)
        (just (failure #"Unexpectedly matched"))
        (nothing))))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"epsilon empty"
        (check-match (epsilon-regexp) #""))
      (new-test-case #"empty empty"
        (check-no-match (empty-regexp) #""))
      (new-test-case #"epsilon non-empty"
        (check-no-match (epsilon-regexp) #"a"))
      (new-test-case #"empty non-empty"
        (check-no-match (empty-regexp) #"a"))
      (new-test-case #"lit empty"
        (check-no-match (regexp-a) #""))
      (new-test-case #"lit nonmatching"
        (check-no-match (regexp-a) #"-"))
      (new-test-case #"lit matching"
        (check-match (regexp-a) #"a"))
      (new-test-case #"any empty"
        (check-no-match (any-regexp) #""))
      (new-test-case #"any non-empty"
        (check-match (any-regexp) #"-"))
      (new-test-case #"group empty"
        (check-no-match (group-regexp (any-regexp)) #""))
      (new-test-case #"group non-empty"
        (check-match (group-regexp (any-regexp)) #"-"))
      (new-test-case #"alt empty"
        (check-no-match (alt-regexp (regexp-a) (regexp-b)) #""))
      (new-test-case #"alt nonmatching"
        (check-no-match (alt-regexp (regexp-a) (regexp-b)) #"c"))
      (new-test-case #"alt match left"
        (check-match (alt-regexp (regexp-a) (regexp-b)) #"a"))
      (new-test-case #"alt match right"
        (check-match (alt-regexp (regexp-a) (regexp-b)) #"b"))
      (new-test-case #"rep empty"
        (check-match (rep-regexp (regexp-dash)) #""))
      (new-test-case #"rep single"
        (check-match (rep-regexp (regexp-dash)) #"-"))
      (new-test-case #"rep double"
        (check-match (rep-regexp (regexp-dash)) #"--"))
      (new-test-case #"rep nonmatching"
        (check-no-match (rep-regexp (regexp-dash)) #"+")))))
