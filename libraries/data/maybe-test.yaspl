#:module (maybe-test)
#:import {
  (bytes)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (check-maybe-equal? [m1 : (Maybe Bytes)] [m2 : (Maybe Bytes)]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if ((maybe=? bytes=?) m1 m2)
        (nothing)
        (just (failure #"Values are unequal")))))

(define (check-maybe-not-equal? [m1 : (Maybe Bytes)] [m2 : (Maybe Bytes)]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if ((maybe=? bytes=?) m1 m2)
        (just (failure #"Values are equal"))
        (nothing))))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"maybe equal (just #\"1\") (just #\"1\")"
        (check-maybe-equal? (just #"1") (just #"1")))
      (test-case #"maybe equal (just #\"1\") (just #\"2\")"
        (check-maybe-not-equal? (just #"1") (just #"2")))
      (test-case #"maybe equal (nothing) (nothing)"
        (check-maybe-equal? (nothing) (nothing)))
      (test-case #"maybe equal (just #\"1\") (nothing)"
        (check-maybe-not-equal? (just #"1") (nothing)))
      (test-case #"maybe equal (nothing) (just #\"1\")"
        (check-maybe-not-equal? (nothing) (just #"1"))))))
