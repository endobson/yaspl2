#:module (aligned-bytes-test)
#:import {
  (aligned-bytes)
  (bytes)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (check-aligned-bytes=? [v1 : AlignedBytes] [v2 : AlignedBytes]) : (Maybe FailedAssertion)
  (match-define (aligned-bytes b1 align1) v1)
  (match-define (aligned-bytes b2 align2) v2)
  (if (not (bytes=? b1 b2))
      (just (failure #"Aligned bytes have different values"))
      (if (not (= align1 align2))
          (just (failure #"Aligned bytes have different alignments"))
          (nothing))))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"aligned-bytes-append: empty"
        (lambda ()
          (check-aligned-bytes=?
            (aligned-bytes-append (empty))
            (aligned-bytes #"" 0))))
      (test-case #"aligned-bytes-append: single"
        (lambda ()
          (check-aligned-bytes=?
            (aligned-bytes-append
              (varargs list
                (aligned-bytes #"hello" 2)))
            (aligned-bytes #"hello" 2))))
      (test-case #"aligned-bytes-append: two elements"
        (lambda ()
          (check-aligned-bytes=?
            (aligned-bytes-append
              (varargs list
                (aligned-bytes #"hello" 1)
                (aligned-bytes #"world" 2)))
            (aligned-bytes #"hello\x00\x00\x00world" 2))))
      )))
