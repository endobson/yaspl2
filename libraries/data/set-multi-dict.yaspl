#:module set-multi-dict
#:import {
  dict {
    #:types
      Dict
    #:values
      dict-count
      dict-ref
      dict-remove
      dict-replace
      dict-update
      make-dict
  }
  maybe {
    #:patterns
      just
      nothing
  }
  prim {
    #:types
      Boolean
    #:values
      =
  }
  set {
    #:types
      Set
    #:values
      make-set
      set-add
      set-count
      set-remove
  }
}
(export
  #:types (SetMultiDict)
  #:values (make-set-multi-dict set-multi-dict-add set-multi-dict-remove set-multi-dict-ref/empty
            set-multi-dict-empty?)
  #:patterns ())
(types
  (define-type (SetMultiDict A B)
    (set-multi-dict [dict : (Dict A (Set B))] [eq : (B B -> Boolean)])))

(define (A B) (make-set-multi-dict [eq?-a : (A A -> Boolean)] [eq?-b : (B B -> Boolean)])
  : (SetMultiDict A B)
  (set-multi-dict (make-dict eq?-a) eq?-b))

(define (A B) (set-multi-dict-add [s : (SetMultiDict A B)] [a : A] [b : B])
  : (SetMultiDict A B)
  (match-define (set-multi-dict dict eq) s)
  (set-multi-dict
    (dict-update dict a (lambda ([s : (Set B)]) (set-add s b)) (make-set eq))
    eq))


(define (A B) (set-multi-dict-empty? [s : (SetMultiDict A B)]) : Boolean
  (match-define (set-multi-dict dict _) s)
  (= 0 (dict-count dict)))


(define (A B) (set-multi-dict-remove [s : (SetMultiDict A B)] [a : A] [b : B])
  : (SetMultiDict A B)
  (match-define (set-multi-dict dict eq) s)
  (case (dict-ref dict a)
    [(nothing) s]
    [(just set)
     (let ([set (set-remove set b)])
       (if (= 0 (set-count set))
           (set-multi-dict (dict-remove dict a) eq)
           (set-multi-dict (dict-replace dict a set) eq)))]))

(define (A B) (set-multi-dict-ref/empty [s : (SetMultiDict A B)] [a : A]) : (Set B)
  (match-define (set-multi-dict dict eq) s)
  (case (dict-ref dict a)
    [(nothing) (make-set eq)]
    [(just set) set]))
