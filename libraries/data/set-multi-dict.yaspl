#:module (set-multi-dict)
#:import {
  (data ordering)
  (dict)
  (maybe)
  (prim)
  (set)
}
(export
  (#:types SetMultiDict)
  (#:values make-set-multi-dict set-multi-dict-add set-multi-dict-remove set-multi-dict-ref/empty
            set-multi-dict-empty?)
  (#:patterns))
(types
  (define-type (SetMultiDict A B)
    (set-multi-dict [dict : (Dict A (Set B))] [cmp-b : (B B -> Ordering)])))

(define [A B] (make-set-multi-dict [cmp-a : (A A -> Ordering)] [cmp-b : (B B -> Ordering)])
  : (SetMultiDict A B)
  (set-multi-dict (make-dict cmp-a) cmp-b))

(define [A B] (set-multi-dict-add [s : (SetMultiDict A B)] [a : A] [b : B])
  : (SetMultiDict A B)
  (match-define (set-multi-dict dict eq) s)
  (set-multi-dict
    (dict-update dict a (lambda ([s : (Set B)]) (set-add s b)) (make-set eq))
    eq))


(define [A B] (set-multi-dict-empty? [s : (SetMultiDict A B)]) : Boolean
  (match-define (set-multi-dict dict _) s)
  (dict-empty? dict))


(define [A B] (set-multi-dict-remove [s : (SetMultiDict A B)] [a : A] [b : B])
  : (SetMultiDict A B)
  (match-define (set-multi-dict dict eq) s)
  (case (dict-ref dict a)
    [(nothing) s]
    [(just set)
     (let ([set (set-remove set b)])
       (if (set-empty? set)
           (set-multi-dict (dict-remove dict a) eq)
           (set-multi-dict (dict-replace dict a set) eq)))]))

(define [A B] (set-multi-dict-ref/empty [s : (SetMultiDict A B)] [a : A]) : (Set B)
  (match-define (set-multi-dict dict eq) s)
  (case (dict-ref dict a)
    [(nothing) (make-set eq)]
    [(just set) set]))
