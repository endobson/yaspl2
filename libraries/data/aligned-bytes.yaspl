#:module (aligned-bytes)
#:import {
  (bytes)
  (list)
  (numbers)
  (prim)
}
(export
  (#:types AlignedBytes)
  (#:values aligned-bytes aligned-bytes-append)
  (#:patterns aligned-bytes))
(types
  (define-type AlignedBytes
    ;; alignment is the number of bits that need to be 0
    (aligned-bytes [v : Bytes] [alignment : Int])))

(define (aligned-bytes-append [vs : (List AlignedBytes)]) : AlignedBytes
  (aligned-bytes-fold vs 0 0 (empty)))

(define (aligned-bytes-fold
          [vs : (List AlignedBytes)]
          [offset : Int]
          [max-alignment : Int]
          [acc : (List Bytes)]) : AlignedBytes
  (case vs
    [(empty)
     (aligned-bytes (bytes-append (reverse acc)) max-alignment)]
    [(cons (aligned-bytes v alignment) vs)
     (match-define aligned-offset (round-up offset (logical-shift-left 1 alignment)))
     (match-define acc
       (if (= aligned-offset offset)
           acc
           (cons (make-bytes (- aligned-offset offset)) acc)))
     (aligned-bytes-fold vs (+ aligned-offset (bytes-length v)) (max alignment max-alignment)
                         (cons v acc))]))
