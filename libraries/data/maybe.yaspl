#:module (maybe)
#:import {
  (prim) {
    #:types
      Boolean
  }
}
(export
  #:types (Maybe)
  #:values (just nothing maybe=?)
  #:patterns (just nothing))
(types
  (define-type (Maybe a)
    (just [v : a])
    (nothing)))

(define (A) (maybe=? [=? : (A A -> Boolean)]) : ((Maybe A) (Maybe A) -> Boolean)
  (lambda ([m1 : (Maybe A)] [m2 : (Maybe A)])
    (case m1
      [(just v1)
       (case m2
         [(just v2) (=? v1 v2)]
         [(nothing) #f])]
      [(nothing)
       (case m2
         [(just v2) #f]
         [(nothing) #t])])))
