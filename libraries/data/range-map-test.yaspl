#:module (data range-map-test)
#:import {
  (bytes)
  (data range-map)
  (list)
  (maybe)
  (prim)
  (tuples)
  (yunit)
}
(export
  (#:values main))
(types)

(define (test-lookup [ranges : (List (Tuple2 IntRange Bytes))] [index : Int] [expected : (Maybe Bytes)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (int-range-map-lookup (add-all-ranges (make-int-range-map) ranges) index)
      [(nothing)
       (case expected
         [(nothing)
          (nothing)]
         [(just _)
          (just (failure #"No entry found"))])]
      [(just actual)
       (case expected
         [(nothing)
          (just (failure #"Found entry when no entry expected"))]
         [(just expected)
          (if (bytes=? actual expected)
              (nothing)
              (just (failure #"Actual value doesn't match expected")))])])))

(define (add-all-ranges [rm : (IntRangeMap Bytes)] [ranges : (List (Tuple2 IntRange Bytes))])
  : (IntRangeMap Bytes)
  (case ranges
    [(empty) rm]
    [(cons (tuple2 range v) ranges)
     (add-all-ranges (int-range-map-set rm range v) ranges)]))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"empty" (test-lookup (empty) 1 (nothing)))
      (new-test-case #"before"
        (test-lookup
          (varargs list
            (tuple2 (clopen-int-range 1 10) #"entry"))
          0 (nothing)))
      (new-test-case #"inside"
        (test-lookup
          (varargs list
            (tuple2 (clopen-int-range 1 10) #"entry"))
          5 (just #"entry")))
      (new-test-case #"after"
        (test-lookup
          (varargs list
            (tuple2 (clopen-int-range 1 10) #"entry"))
          10 (nothing)))
      (new-test-case #"intersection"
        (test-lookup
          (varargs list
            (tuple2 (clopen-int-range 1 10) #"one")
            (tuple2 (clopen-int-range 5 15) #"two"))
          7 (just #"two")))
      (new-test-case #"intersection"
        (test-lookup
          (varargs list
            (tuple2 (clopen-int-range 1 10) #"one")
            (tuple2 (clopen-int-range 5 15) #"two"))
          3 (just #"one")))
    )))
