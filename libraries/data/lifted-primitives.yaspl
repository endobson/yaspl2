#:module (data lifted-primitives)
#:import {
  (data ordering)
  (prim)
}
(export
  (#:types LiftedBoolean LiftedVoid LiftedU8 LiftedS32 LiftedInt)
  (#:values lifted-true lifted-false lifted-void lifted-u8 lifted-s32 lifted-int
            lifted-u8=? lifted-u8-cmp lifted-int-cmp)
  (#:patterns lifted-true lifted-false lifted-void lifted-u8 lifted-s32 lifted-int))
(types
  (define-type LiftedBoolean
    (lifted-false)
    (lifted-true))
  (define-type LiftedVoid
    (lifted-void))
  (define-type LiftedU8
    (lifted-u8 [v : U8]))
  (define-type LiftedS32
    (lifted-s32 [v : S32]))
  (define-type LiftedInt
    (lifted-int [v : Int])))

(define (lifted-u8=? [l : LiftedU8] [r : LiftedU8]) : Boolean
  (match-define (lifted-u8 i1) l)
  (match-define (lifted-u8 i2) r)
  (= (u8->s64 i1) (u8->s64 i2)))

(define (lifted-u8-cmp [l : LiftedU8] [r : LiftedU8]) : Ordering
  (match-define (lifted-u8 i1) l)
  (match-define (lifted-u8 i2) r)
  (int-cmp (u8->s64 i1) (u8->s64 i2)))

(define (lifted-int-cmp [l : LiftedInt] [r : LiftedInt]) : Ordering
  (match-define (lifted-int i1) l)
  (match-define (lifted-int i2) r)
  (int-cmp i1 i2))

(define (int-cmp [i1 : Int] [i2 : Int]) : Ordering
  (if (= i1 i2)
      (equal-to)
      (if (< i1 i2)
          (less-than)
          (greater-than))))
