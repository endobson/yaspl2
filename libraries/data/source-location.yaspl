#:module (data source-location)
#:import {
  (bytes)
  (prim)
  (tuples)
}
(export
  (#:types Source SourceSpan SourceSpanAnnotated
           SourcedBytes)
  (#:values unnamed-source source-file source-span
            source-span-annotated sourced-bytes
            source-span-source
            source=? source-span=?)
  (#:patterns unnamed-source source-file source-span
              source-span-annotated sourced-bytes))
(types
  (define-type Source
    (unnamed-source)
    (source-file [file-name : Bytes]))
  (define-type SourcePoint
    (source-point [source : Source] [line : Int] [column : Int]))
  (define-type SourceSpan
    (source-span [source : Source]
                 [start-line : Int] [start-column : Int]
                 [end-line : Int] [end-column : Int]))

  (define-type SourcedBytes
    (sourced-bytes [source : Source] [bytes : Bytes]))

  (define-type (SourceSpanAnnotated T)
    (source-span-annotated
      [annotation : SourceSpan]
      [value : T])))

(define (source=? [s1 : Source] [s2 : Source]) : Boolean
  (case (tuple2 s1 s2)
    [(tuple2 (unnamed-source) (unnamed-source)) #t]
    [(tuple2 (source-file f1) (source-file f2))
     (bytes=? f1 f2)]
    [_ #f]))

(define (source-span=? [span1 : SourceSpan] [span2 : SourceSpan]) : Boolean
  (match-define (source-span s1 sl1 sc1 el1 ec1) span1)
  (match-define (source-span s2 sl2 sc2 el2 ec2) span2)
  (and (source=? s1 s2) (and (= sl1 sl2) (and (= sc1 sc2) (and (= el1 el2) (= ec1 ec2))))))
