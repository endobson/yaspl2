#:module (regexp)
#:import {
  (bytes)
  (list)
  (maybe)
  (prim)
  (tuples)
}
(export
  #:types (Regexp)
  #:values (regexp-match? empty-regexp epsilon-regexp any-regexp lit-regexp group-regexp
            alt-regexp rep-regexp non-greedy-rep-regexp regexp-match seq-regexp digit-regexp)
  #:patterns ())
(types
  (define-type Regexp
    (empty-regexp)
    (epsilon-regexp)
    (bitmask-regexp [v : (Array Boolean)])
    (lit-regexp [v : U8])
    (seq-regexp [l : Regexp] [r : Regexp])
    (alt-regexp [l : Regexp] [r : Regexp])
    (rep-regexp [v : Regexp])
    (non-greedy-rep-regexp [v : Regexp])
    (group-regexp [v : Regexp]))
  (define-type GroupState
    (group-state
      [open : (List Int)]
      [closed : (List (Tuple2 Int Int))]))
  (define-type RegexpCommand
    (match-command [regexp : Regexp])
    (close-group-command))
  (define-type RegexpMatcherState
    (regexp-matcher-state
      [b : Bytes]
      [index : Int]
      [groups : GroupState]
      [current : (List RegexpCommand)]
      [other : (Maybe RegexpMatcherState)]))
  (define-type RegexpMatcherResult
    (regexp-matcher-result
      [index : Int]
      [groups : (List Bytes)]
      [other : (Maybe RegexpMatcherState)])))

(define (any-regexp) : Regexp
  (bitmask-regexp (make-array 128 #t)))

(define (digit-regexp) : Regexp
  (let ([array (make-array 128 #f)])
    (begin
      (array-set! array 48 #t)
      (array-set! array 49 #t)
      (array-set! array 50 #t)
      (array-set! array 51 #t)
      (array-set! array 52 #t)
      (array-set! array 53 #t)
      (array-set! array 54 #t)
      (array-set! array 55 #t)
      (array-set! array 56 #t)
      (array-set! array 57 #t)
      (bitmask-regexp array))))


(define (regexp-match? [r : Regexp] [b : Bytes]) : Boolean
  (case (regexp-match-full/inner (initial-state r b) (bytes-length b))
    [(nothing) #f]
    [(just _) #t]))

(define (regexp-match [r : Regexp] [b : Bytes]) : (Maybe (List Bytes))
  (regexp-match-full/inner (initial-state r b) (bytes-length b)))


(define (initial-state [r : Regexp] [b : Bytes]) : RegexpMatcherState
  (regexp-matcher-state b 0 (group-state (empty) (empty)) (cons (match-command r) (empty)) (nothing)))


(define (regexp-match-full/inner [s : RegexpMatcherState] [l : Int]) : (Maybe (List Bytes))
  (case (run-regexp-match s)
    [(just (regexp-matcher-result i groups other))
     (if (= i l)
         (just groups)
         (case other
           [(nothing) (nothing)]
           [(just state) (regexp-match-full/inner state l)]))]
    [(nothing) (nothing)]))

(define (run-extractions [b : Bytes] [groups : (List (Tuple2 Int Int))]) : (List Bytes)
  (map (lambda ([group : (Tuple2 Int Int)])
         (case group
           [(tuple2 start end) (subbytes b start end)])) groups))

(define (run-regexp-match [s : RegexpMatcherState]) : (Maybe RegexpMatcherResult)
  (case s
    [(regexp-matcher-state b i (group-state open-groups closed-groups) (empty) other)
     (case open-groups
       [(empty)
        (just (regexp-matcher-result
                i (cons (subbytes b 0 i) (run-extractions b (reverse closed-groups))) other))]
       [_ (panic #"Groups don't match up correctly")])]
    [(regexp-matcher-state b i (group-state open-groups closed-groups) (cons (close-group-command) rs) other)
     (run-regexp-match
       (case open-groups
         [(empty) (panic #"Groups don't match up correctly")]
         [(cons start open-groups)
          (regexp-matcher-state
            b i (group-state open-groups (cons (tuple2 start i) closed-groups)) rs other)]))]
    [(regexp-matcher-state b i gs (cons (match-command r) rs) other)
     (case r
       [(empty-regexp)
        (case other
          [(nothing) (nothing)]
          [(just state) (run-regexp-match state)])]
       [(epsilon-regexp)
        (run-regexp-match (regexp-matcher-state b i gs rs other))]
       [(bitmask-regexp v)
        (if (>= i (bytes-length b))
            (case other
              [(nothing) (nothing)]
              [(just state) (run-regexp-match state)])
            (if (array-ref v (bytes-ref b i))
                (run-regexp-match (regexp-matcher-state b (+ 1 i) gs rs other))
                (case other
                  [(nothing) (nothing)]
                  [(just state) (run-regexp-match state)])))]
       [(lit-regexp v)
        (if (>= i (bytes-length b))
            (case other
              [(nothing) (nothing)]
              [(just state) (run-regexp-match state)])
            (if (= (bytes-ref b i) (u8->s64 v))
                (run-regexp-match (regexp-matcher-state b (+ 1 i) gs rs other))
                (case other
                  [(nothing) (nothing)]
                  [(just state) (run-regexp-match state)])))]
       [(seq-regexp l r)
        (run-regexp-match
          (regexp-matcher-state b i gs (cons (match-command l) (cons (match-command r) rs)) other))]
       [(alt-regexp l r)
        (run-regexp-match
          (regexp-matcher-state
            b i gs (cons (match-command l) rs)
            (just (regexp-matcher-state b i gs (cons (match-command r) rs) other))))]
       [(rep-regexp r)
        (run-regexp-match
          (regexp-matcher-state
            b i gs (cons (match-command r) (cons (match-command (rep-regexp r)) rs))
            (just (regexp-matcher-state b i gs rs other))))]
       [(non-greedy-rep-regexp r)
        (run-regexp-match
          (regexp-matcher-state
            b i gs rs
            (just (regexp-matcher-state b i gs
                    (cons (match-command r) (cons (match-command (non-greedy-rep-regexp r)) rs)) other))))]
       [(group-regexp r)
        (case gs
          [(group-state open-groups closed-groups)
           (run-regexp-match
             (regexp-matcher-state
               b i (group-state (cons i open-groups) closed-groups)
               (cons (match-command r) (cons (close-group-command) rs)) other))])])]))
