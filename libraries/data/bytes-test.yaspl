(module bytes-test
  (import
    (bytes bytes-split bytes=?)
    (list
      #:types (List)
      #:values (list list=?)
      #:patterns ())
    (prim
      #:types (Array Bytes InputPort OutputPort Boolean Int)
      #:values ()
      #:patterns ())
    (yunit
      #:types ()
      #:values (yunit/main test-case)
      #:patterns ()))
  (export)
  (types)

  (define (test-split [x : Bytes] [sep : Bytes] [expected : (List Bytes)]) : (-> Boolean)
    (lambda ()
      ((list=? bytes=?) (bytes-split x sep) expected)))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (test-case #"split empty" (test-split #"" #"," (varargs list #"")))
        (test-case #"split hello" (test-split #"hello" #"," (varargs list #"hello")))
        (test-case #"split ,hello," (test-split #",hello," #"," (varargs list #"" #"hello" #"")))
        (test-case #"split hello,world,goodbye,world"
                   (test-split #"hello,world,goodbye,world" #","
                               (varargs list #"hello" #"world" #"goodbye" #"world")))
        (test-case #"split abXYcdXYef" (test-split #"abXYcdXYef" #"XY"
                                                   (varargs list #"ab" #"cd" #"ef")))))))
