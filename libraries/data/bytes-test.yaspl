#:module (bytes-test)
#:import {
  (bytes)
  (data ordering)
  (list)
  (maybe)
  (prim)
  (tuples)
  (yunit)
}
(export
  (#:values main))
(types)

(define (test-split [x : Bytes] [sep : Bytes] [expected : (List Bytes)]) : (-> (Maybe FailedAssertion))
  (lambda ()
    ((expect-equal (eq/list (eq/bytes))) (bytes-split x sep) expected)))

(define (test-bytes-cmp [x : Bytes] [y : Bytes] [expected : Ordering]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (tuple2 (bytes-cmp x y) expected)
      [(tuple2 (equal-to) (equal-to)) (nothing)]
      [(tuple2 (less-than) (less-than)) (nothing)]
      [(tuple2 (greater-than) (greater-than)) (nothing)]
      [_ (just (failure #"Comparison result did not match expected"))])))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"split empty" (test-split #"" #"," (varargs list #"")))
      (test-case #"split hello" (test-split #"hello" #"," (varargs list #"hello")))
      (test-case #"split ,hello," (test-split #",hello," #"," (varargs list #"" #"hello" #"")))
      (test-case #"split hello,world,goodbye,world"
                     (test-split #"hello,world,goodbye,world" #","
                                 (varargs list #"hello" #"world" #"goodbye" #"world")))
      (test-case #"split abXYcdXYef" (test-split #"abXYcdXYef" #"XY"
                                                     (varargs list #"ab" #"cd" #"ef")))
      (test-case #"bytes-cmp '' 'a'" (test-bytes-cmp #"" #"a" (less-than)))
      (test-case #"bytes-cmp 'a' 'a'" (test-bytes-cmp #"a" #"a" (equal-to)))
      (test-case #"bytes-cmp 'ac' 'ab'" (test-bytes-cmp #"ac" #"ab" (greater-than)))
      )))
