(module graph
  (import
    (dict
      #:types (Dict)
      #:values (make-dict dict-maybe-add dict-replace dict-ref)
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (prim
      #:types (Int)
      #:values (=)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2)))
  (export
    #:types (Graph)
    #:values (empty-graph graph-add-vertex graph-add-edge graph-vertex-value graph-vertex-edges)
    #:patterns ())
  (types
    (define-type (Graph V E)
      (graph [connections : (Dict Int (Tuple2 V (Dict Int E)))])))


  (define (V E) (empty-graph) : (Graph V E)
    (graph (make-dict =)))

  (define (V E) (graph-add-vertex [g : (Graph V E)] [index : Int] [v : V] [edges : (Dict Int E)])
    : (Maybe (Graph V E))
    (case g
      [(graph con)
       (case (dict-maybe-add con index (tuple2 v edges))
         [(just v) (just (graph v))]
         [(nothing) (nothing)])]))

  (define (V E) (graph-add-edge [g : (Graph V E)] [src : Int] [dest : Int] [label : E])
    : (Maybe (Graph V E))
    (case g
      [(graph con)
       (case (dict-ref con src)
         [(nothing) (nothing)]
         [(just (tuple2 v edges))
          (case (dict-maybe-add edges dest label)
            [(nothing) (nothing)]
            [(just new-edges)
             (just (graph (dict-replace con src (tuple2 v new-edges))))])])]))

  (define (V E) (graph-vertex-value [g : (Graph V E)] [v : Int]) : (Maybe V)
    (case g
      [(graph con)
       (case (dict-ref con v)
         [(nothing) (nothing)]
         [(just (tuple2 v _)) (just v)])]))

  (define (V E) (graph-vertex-edges [g : (Graph V E)] [src : Int]) : (Maybe (Dict Int E))
    (case g
      [(graph con)
       (case (dict-ref con src)
         [(nothing) (nothing)]
         [(just (tuple2 _ edges)) (just edges)])])))
