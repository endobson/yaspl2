#:module (numbers)
#:import {
  (data lifted-primitives)
  (data ordering)
  (list)
  (maybe)
  (prim)
}
(export
  (#:types)
  (#:values digit? decimal-bytes->integer hexadecimal-bytes->integer integer->decimal-bytes
            integer->hex-bytes int-cmp maybe-s32 max max* round-up)
  (#:patterns))
(types)

(define (int-cmp [i1 : Int] [i2 : Int]) : Ordering
  (if (= i1 i2)
      (equal-to)
      (if (< i1 i2)
          (less-than)
          (greater-than))))


(define (digit? [v : U8]) : Boolean
  (let ([v (u8->s64 v)])
    (and (<= 48 v) (< v 58))))

(define (decimal-bytes->integer [bytes : Bytes]) : (Maybe Int)
  (decimal-bytes->integer/loop bytes 0 (bytes-length bytes) 0))

(define (decimal-bytes->integer/loop [bytes : Bytes] [start : Int] [end : Int] [acc : Int])
  : (Maybe Int)
  (if (= start end)
      (just acc)
      (let ([char-val (bytes-ref bytes start)])
        (if (digit? char-val)
            (let ([acc (+ (* 10 acc) (- (u8->s64 char-val) 48))])
              (decimal-bytes->integer/loop bytes (+ 1 start) end acc))
            (nothing)))))

(define (hexadecimal-digit? [v : U8]) : Boolean
  (let ([v (u8->s64 v)])
    (or (and (<= 48 v) (< v 58))
        (or (and (<= 65 v) (< v 71))
            (and (<= 97 v) (< v 103))))))

(define (hexadecimal-bytes->integer [bytes : Bytes]) : (Maybe Int)
  (hexadecimal-bytes->integer/loop bytes 0 (bytes-length bytes) 0))

(define (hexadecimal-bytes->integer/loop [bytes : Bytes] [start : Int] [end : Int] [acc : Int])
  : (Maybe Int)
  (if (= start end)
      (just acc)
      (let ([char-val/u8 (bytes-ref bytes start)])
        (let ([char-val (u8->s64 char-val/u8)])
          (if (hexadecimal-digit? char-val/u8)
              (let ([val (if (< char-val 58)
                             (- char-val 48)
                             (if (< char-val 91)
                                 (- char-val 55)
                                 (- char-val 87)))])
                (hexadecimal-bytes->integer/loop bytes (+ 1 start) end (+ (* 16 acc) val)))
              (nothing))))))



(define (integer->decimal-bytes-length [v : Int]) : Int
  (if (< v 0)
      (+ 1 (integer->decimal-bytes-length (- 0 v)))
      (if (< v 10)
          1
          (+ 1 (integer->decimal-bytes-length (quotient v 10))))))

(define (integer->hex-bytes-length [v : Int]) : Int
  (if (< v 0)
      (+ 1 (integer->hex-bytes-length (- 0 v)))
      (if (< v 16)
          1
          (+ 1 (integer->hex-bytes-length (quotient v 16))))))


(define (write-decimal-bytes [v : Int] [bytes : Bytes] [offset : Int]) : Void
  (if (< v 0)
      (begin
        (bytes-set! bytes 0 (u8 45)) ;; '-'
        (write-decimal-bytes (- 0 v) bytes offset))
      (let ([b (remainder v 10)])
        (begin
          (bytes-set! bytes offset (u8 (+ b 48)))
          (let ([v (quotient v 10)])
            (if (> v 0)
                (write-decimal-bytes v bytes (- offset 1))
                (void)))))))


(define (write-hex-bytes [v : Int] [bytes : Bytes] [offset : Int]) : Void
  (if (< v 0)
      (begin
        (bytes-set! bytes 0 (u8 45)) ;; '-'
        (write-decimal-bytes (- 0 v) bytes offset))
      (let ([b (remainder v 16)])
        (begin
          (bytes-set! bytes offset (u8 (if (< b 10) (+ b 48) (+ b 55))))
          (let ([v (quotient v 16)])
            (if (> v 0)
                (write-hex-bytes v bytes (- offset 1))
                (void)))))))


(define (integer->decimal-bytes [v : Int]) : Bytes
  (let ([len (integer->decimal-bytes-length v)])
    (let ([bytes (make-bytes len)])
      (begin
        (write-decimal-bytes v bytes (- len 1))
        bytes))))


(define (integer->hex-bytes [v : Int]) : Bytes
  (let ([len (integer->hex-bytes-length v)])
    (let ([bytes (make-bytes len)])
      (begin
        (write-hex-bytes v bytes (- len 1))
        bytes))))

(define (maybe-s32 [v : Int]) : (Maybe LiftedS32)
  (if (and (<= (- 0 #x80000000) v) (<= v #x7FFFFFFF))
      (just (lifted-s32 (s32 v)))
      (nothing)))

(define (max [v1 : Int] [v2 : Int]) : Int
  (if (< v1 v2) v2 v1))
(define (max* [v : Int] [vs : (List Int)]) : Int
  (case vs
    [(empty) v]
    [(cons v2 vs) (max* (max v v2) vs)]))

(define (round-up [v : Int] [mod : Int]) : Int
  (let ([rem (remainder v mod)])
    (if (= 0 rem)
        v
        (+ (- v rem) mod))))
