#:module (dict)
#:import {
  (data ordering)
  (data red-black-tree)
  (list)
  (maybe)
  (prim)
  (set)
  (tuples)
}
(export
  #:types (Dict)
  #:values (make-dict dict-set dict-ref dict-add dict-add-all dict-replace dict-keys dict-values dict-update
            dict-map dict-value-map merge-dicts merge-dicts* dict-maybe-add dict-maybe-replace
            dict-replace-all dict=?  dict-fold dict-has-key? dict-update-existing dict-split
            dict-count dict-filter dict-filter-map dict-remove dict-entry-map)
  #:patterns ())
(types
  (define-type (Dict a b)
    (dict [v : (RedBlackTree a b)])))

(define (a b) (make-dict [cmp : (a a -> Ordering)]) : (Dict a b)
  (dict (make-rb-tree cmp)))

(define (a b) (dict-ref [d : (Dict a b)] [k : a]) : (Maybe b)
  (rb-tree-ref (dict-v d) k))

(define (a b) (dict-has-key? [d : (Dict a b)] [k : a]) : Boolean
  (case (dict-ref d k)
    [(just _) #t]
    [(nothing) #f]))

(define (a b) (dict-set [d : (Dict a b)] [k : a] [v : b]) : (Dict a b)
  (dict (rb-tree-set (dict-v d) k v)))

(define (a b) (dict-maybe-add [d : (Dict a b)] [k : a] [v : b]) : (Maybe (Dict a b))
  (case (rb-tree-add (dict-v d) k v)
    [(just v) (just (dict v))]
    [(nothing) (nothing)]))

(define (a b) (dict-maybe-replace [d : (Dict a b)] [k : a] [v : b]) : (Maybe (Dict a b))
  (case (rb-tree-update-existing (dict-v d) k (lambda ([v2 : b]) v))
    [(just v) (just (dict v))]
    [(nothing) (nothing)]))


;; Like dict-set but panics if there is already an entry for the key
(define (a b) (dict-add [d : (Dict a b)] [k : a] [v : b]) : (Dict a b)
  (case (dict-maybe-add d k v)
    [(nothing) (panic #"dict-add")]
    [(just v) v]))

(define (a b) (dict-add-all [d : (Dict a b)] [kvs : (List (Tuple2 a b))]) : (Dict a b)
  (case kvs
    [(empty) d]
    [(cons (tuple2 k v) kvs)
     (dict-add-all (dict-add d k v) kvs)]))

(define (a b) (dict-replace-all [d : (Dict a b)] [kvs : (List (Tuple2 a b))]) : (Dict a b)
  (case kvs
    [(empty) d]
    [(cons (tuple2 k v) kvs)
     (dict-replace-all (dict-replace d k v) kvs)]))

;; Like dict-set but panic if there is not an entry for the key
(define (a b) (dict-replace [d : (Dict a b)] [k : a] [v : b]) : (Dict a b)
  (dict-update-existing d k (lambda ([v2 : b]) v)))

(define (a b) (dict-update-existing [d : (Dict a b)] [k : a] [f : (b -> b)]) : (Dict a b)
  (case (rb-tree-update-existing (dict-v d) k f)
    [(just v) (dict v)]
    [(nothing) (panic #"dict-update-existing")]))

(define (a b) (dict-update [d : (Dict a b)] [k : a] [f : (b -> b)] [default : b]) : (Dict a b)
  (dict (rb-tree-update (dict-v d) k f default)))

(define (a b) (dict-remove [d : (Dict a b)] [k : a]) : (Dict a b)
  (dict (rb-tree-remove (dict-v d) k)))

(define (a b) (dict-count [d : (Dict a b)]) : Int
  (dict-fold
    d
    (lambda ([x : a] [y : b] [acc : Int]) (+ 1 acc))
    0))

(define (a b) (dict-split [d : (Dict a b)]) : (Maybe (Tuple2 (Tuple2 a b) (Dict a b)))
  (case (rb-tree-split (dict-v d))
    [(just (tuple2 p v)) (just (tuple2 p (dict v)))]
    [(nothing) (nothing)]))

(define (a b) (dict-keys [d : (Dict a b)]) : (Set a)
  (let ([order (rb-tree-order (dict-v d))])
    (dict-fold
      d
      (lambda ([a : a] [b : b] [s : (Set a)]) : (Set a)
        (set-add s a))
      (make-set order))))

(define (a b) (dict-values [d : (Dict a b)]) : (List b)
  (dict-fold
    d
    (lambda ([a : a] [b : b] [l : (List b)])
      (cons b l))
    ((lambda () : (List b) (empty)))))


(define (a b c) (dict-map [d : (Dict a b)] [f : (a b -> c)]) : (List c)
  (rb-tree-fold-reverseorder
    (dict-v d)
    (lambda ([a : a] [b : b] [l : (List c)])
      (cons (f a b) l))
    ((lambda () : (List c) (empty)))))

(define (a b c) (dict-value-map [d : (Dict a b)] [f : (b -> c)]) : (Dict a c)
  (dict-entry-map d (lambda ([a : a] [b : b]) (f b))))

(define (a b c) (dict-entry-map [d : (Dict a b)] [f : (a b -> c)]) : (Dict a c)
  (dict (rb-tree-entry-map (dict-v d) f)))

(define (a b c) (dict-filter [d : (Dict a b)] [f : (a b -> Boolean)]) : (Dict a b)
  (dict-filter-map
    d
    (lambda ([a : a] [b : b]) : (Maybe b)
      (if (f a b) (just b) (nothing)))))

(define (a b c) (dict-filter-map [d : (Dict a b)] [f : (a b -> (Maybe c))]) : (Dict a c)
  (dict (rb-tree-filter-map (dict-v d) f)))

(define (a b c) (dict-fold [d : (Dict a b)] [f : (a b c -> c)] [acc : c]) : c
  (rb-tree-fold-inorder (dict-v d) f acc))

(define (a b) (merge-dicts [d : (Dict a b)] [d2 : (Dict a b)]) : (Dict a b)
  (dict-fold
    d2
    (lambda ([a : a] [b : b] [d : (Dict a b)])
      (dict-add d a b))
    d))

(define (a b) (merge-dicts* [d : (Dict a b)] [ds : (List (Dict a b))]) : (Dict a b)
  (case ds
    [(empty) d]
    [(cons d2 ds)
     (merge-dicts* (merge-dicts d d2) ds)]))

(define (a b) (dict=? [val-eq? : (b b -> Boolean)]) : ((Dict a b) (Dict a b) -> Boolean)
  (lambda ([d1 : (Dict a b)] [d2 : (Dict a b)])
    (and (= (dict-count d1) (dict-count d2))
         (andmap
           (lambda ([x : Boolean]) x)
           (dict-map
             d2
             (lambda ([k : a] [v : b])
               (case (dict-ref d1 k)
                 [(nothing) #f]
                 [(just v2) (val-eq? v v2)])))))))
