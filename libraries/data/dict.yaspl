(module dict
  (import
    (prim
      #:types (Boolean)
      #:values (panic)
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (list
      #:types (List)
      #:values (cons empty map foldl)
      #:patterns (cons empty))
    (set
      #:types (Set)
      #:values (make-set set-add)
      #:patterns ()))
  (export
    #:types (Dict)
    #:values (make-dict dict-set dict-ref dict-add dict-add-all dict-replace dict-keys dict-values dict-update
              dict-map dict-value-map merge-dicts merge-dicts*)
    #:patterns ())
  (types
    (define-type (Dict a b)
      (dict [eq (a a -> Boolean)] [vs (List (Tuple2 a b))])))

  (define (a b) (make-dict [eq : (a a -> Boolean)]) : (Dict a b)
    (dict eq (empty)))

  (define (a b) (dict-ref [d : (Dict a b)] [k : a]) : (Maybe b)
    (case d
      [(dict eq nodes) (dict-ref-helper eq nodes k)]))

  (define (a b) (dict-ref-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]  [k : a]) : (Maybe b)
    (case nodes
      [(empty) (nothing)]
      [(cons (tuple2 a b) nodes)
       (if (eq a k) (just b) (dict-ref-helper eq nodes k))]))

  (define (a b) (dict-set [d : (Dict a b)] [k : a] [v : b]) : (Dict a b)
    (case d
      [(dict eq nodes)
       (dict eq (dict-set-helper eq nodes k v))]))

  (define (a b) (dict-set-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                                 [k : a] [v : b]) : (List (Tuple2 a b))
    (case nodes
      [(empty) (cons (tuple2 k v) (empty))]
      [(cons (tuple2 a b) nodes)
       (if (eq a k)
           (cons (tuple2 k v) nodes)
           (cons (tuple2 a b) (dict-set-helper eq nodes k v)))]))

  ;; Like dict-set but panics if there is already an entry for the key
  (define (a b) (dict-add [d : (Dict a b)] [k : a] [v : b]) : (Dict a b)
    (case d
      [(dict eq nodes)
       (dict eq (dict-add-helper eq nodes k v))]))

  (define (a b) (dict-add-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                                 [k : a] [v : b]) : (List (Tuple2 a b))
    (case nodes
      [(empty) (cons (tuple2 k v) (empty))]
      [(cons (tuple2 a b) nodes)
       (if (eq a k)
           (panic #"dict-add")
           (cons (tuple2 a b) (dict-add-helper eq nodes k v)))]))


  (define (a b) (dict-add-all [d : (Dict a b)] [kvs : (List (Tuple2 a b))]) : (Dict a b)
    (case kvs
      [(empty) d]
      [(cons (tuple2 k v) kvs)
       (dict-add-all (dict-add d k v) kvs)]))


  ;; Like dict-set but panic if there is not an entry for the key
  (define (a b) (dict-replace [d : (Dict a b)] [k : a] [v : b]) : (Dict a b)
    (case d
      [(dict eq nodes)
       (dict eq (dict-replace-helper eq nodes k v))]))

  (define (a b) (dict-replace-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                                     [k : a] [v : b]) : (List (Tuple2 a b))
    (case nodes
      [(empty) (panic #"dict-replace")]
      [(cons (tuple2 a b) nodes)
       (if (eq a k)
           (cons (tuple2 k v) nodes)
           (cons (tuple2 a b) (dict-replace-helper eq nodes k v)))]))


  (define (a b) (dict-update [d : (Dict a b)] [k : a] [f : (b -> b)] [default : b]) : (Dict a b)
    (case d
      [(dict eq nodes)
       (dict eq (dict-update-helper eq nodes k f default))]))

  (define (a b) (dict-update-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                                    [k : a] [f : (b -> b)] [default : b]) : (List (Tuple2 a b))
    (case nodes
      [(empty) (cons (tuple2 k (f default)) (empty))]
      [(cons (tuple2 a b) nodes)
       (if (eq a k)
           (cons (tuple2 k (f b)) nodes)
           (cons (tuple2 a b) (dict-update-helper eq nodes k f default)))]))

  (define (a b) (dict-keys [d : (Dict a b)]) : (Set a)
    (case d
      [(dict eq nodes) (dict-keys-helper nodes (make-set eq))]))

  (define (a b) (dict-keys-helper [entries : (List (Tuple2 a b))] [acc : (Set a)]) : (Set a)
    (case entries
      [(empty) acc]
      [(cons (tuple2 key _) entries)
       (dict-keys-helper entries (set-add acc key))]))


  (define (a b) (dict-values [d : (Dict a b)]) : (List b)
    (case d
      [(dict eq nodes) (dict-values-helper nodes)]))

  (define (a b) (dict-values-helper [entries : (List (Tuple2 a b))]) : (List b)
    (case entries
      [(empty) (empty)]
      [(cons (tuple2 _ value) entries)
       (cons value (dict-values-helper entries))]))

  (define (a b c) (dict-map [d : (Dict a b)] [f : (a b -> c)]) : (List c)
    (case d
      [(dict _ nodes)
       (map (lambda ([t : (Tuple2 a b)])
              (case t
                [(tuple2 a b) (f a b)]))
            nodes)]))

  (define (a b c) (dict-value-map [d : (Dict a b)] [f : (b -> c)]) : (Dict a c)
    (case d
      [(dict eq nodes)
       (dict
         eq
         (map (lambda ([t : (Tuple2 a b)])
                (case t
                  [(tuple2 a b) (tuple2 a (f b))]))
              nodes))]))

  
  (define (a b) (merge-dicts [d : (Dict a b)] [d2 : (Dict a b)]) : (Dict a b)
    (foldl (lambda ([entry : (Tuple2 a b)] [d : (Dict a b)])
             (case entry
               [(tuple2 k v) (dict-add d k v)])) (dict-vs d2) d))

  (define (a b) (merge-dicts* [d : (Dict a b)] [ds : (List (Dict a b))]) : (Dict a b)
    (case ds
      [(empty) d]
      [(cons d2 ds)
       (merge-dicts* (merge-dicts d d2) ds)])))
