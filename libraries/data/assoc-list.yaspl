#:module (data assoc-list)
#:import {
  (list)
  (maybe)
  (prim)
  (tuples)
}
(export
  #:types (AssocList)
  #:values (make-assoc-list
            assoc-list-ref
            assoc-list-set assoc-list-add assoc-list-update assoc-list-update-existing
            assoc-list-remove
            assoc-list-entry-map assoc-list-fold assoc-list-filter-map
            assoc-list-split)
  #:patterns ())
(types
  (define-type (AssocList a b)
    (assoc-list [eq : (a a -> Boolean)] [vs : (List (Tuple2 a b))])))

(define (a b) (make-assoc-list [eq : (a a -> Boolean)]) : (AssocList a b)
  (assoc-list eq (empty)))

(define (a b) (assoc-list-ref [d : (AssocList a b)] [k : a]) : (Maybe b)
  (case d
    [(assoc-list eq nodes) (assoc-list-ref-helper eq nodes k)]))


(define (a b) (assoc-list-ref-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]  [k : a]) : (Maybe b)
  (case nodes
    [(empty) (nothing)]
    [(cons (tuple2 a b) nodes)
     (if (eq a k) (just b) (assoc-list-ref-helper eq nodes k))]))

(define (a b) (assoc-list-set [d : (AssocList a b)] [k : a] [v : b]) : (AssocList a b)
  (case d
    [(assoc-list eq nodes)
     (assoc-list eq (assoc-list-set-helper eq nodes k v))]))

(define (a b) (assoc-list-set-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                               [k : a] [v : b]) : (List (Tuple2 a b))
  (case nodes
    [(empty) (cons (tuple2 k v) (empty))]
    [(cons (tuple2 a b) nodes)
     (if (eq a k)
         (cons (tuple2 k v) nodes)
         (cons (tuple2 a b) (assoc-list-set-helper eq nodes k v)))]))

(define (a b) (assoc-list-add [d : (AssocList a b)] [k : a] [v : b]) : (Maybe (AssocList a b))
  (case d
    [(assoc-list eq nodes)
     (case (assoc-list-add-helper eq nodes k v)
       [(just nodes) (just (assoc-list eq nodes))]
       [(nothing) (nothing)])]))

(define (a b) (assoc-list-add-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                                     [k : a] [v : b]) : (Maybe (List (Tuple2 a b)))
  (case nodes
    [(empty) (just (cons (tuple2 k v) (empty)))]
    [(cons (tuple2 a b) nodes)
     (if (eq a k)
         (nothing)
         (case (assoc-list-add-helper eq nodes k v)
           [(just v) (just (cons (tuple2 a b) v))]
           [(nothing) (nothing)]))]))

(define (a b) (assoc-list-update-existing [d : (AssocList a b)] [k : a] [f : (b -> b)])
  : (Maybe (AssocList a b))
  (case d
    [(assoc-list eq nodes)
     (case (assoc-list-update-existing-helper eq nodes k f)
       [(just nodes) (just (assoc-list eq nodes))]
       [(nothing) (nothing)])]))

(define (a b) (assoc-list-update-existing-helper
                [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                [k : a] [f : (b -> b)]) : (Maybe (List (Tuple2 a b)))
  (case nodes
    [(empty) (nothing)]
    [(cons (tuple2 a b) nodes)
     (if (eq a k)
         (just (cons (tuple2 k (f b)) nodes))
         (case (assoc-list-update-existing-helper eq nodes k f)
           [(just nodes) (just (cons (tuple2 a b) nodes))]
           [(nothing) (nothing)]))]))

(define (a b) (assoc-list-update [d : (AssocList a b)] [k : a] [f : (b -> b)] [default : b]) : (AssocList a b)
  (case d
    [(assoc-list eq nodes)
     (assoc-list eq (assoc-list-update-helper eq nodes k f default))]))

(define (a b) (assoc-list-update-helper [eq : (a a -> Boolean)] [nodes : (List (Tuple2 a b))]
                                  [k : a] [f : (b -> b)] [default : b]) : (List (Tuple2 a b))
  (case nodes
    [(empty) (cons (tuple2 k (f default)) (empty))]
    [(cons (tuple2 a b) nodes)
     (if (eq a k)
         (cons (tuple2 k (f b)) nodes)
         (cons (tuple2 a b) (assoc-list-update-helper eq nodes k f default)))]))

(define (a b) (assoc-list-remove [d : (AssocList a b)] [k : a]) : (AssocList a b)
  (case d
    [(assoc-list eq nodes)
     (assoc-list eq (filter
                (lambda ([t : (Tuple2 a b)])
                  (case t
                    [(tuple2 a _) (not (eq a k))]))
                nodes))]))

(define (a b) (assoc-list-split [d : (AssocList a b)]) : (Maybe (Tuple2 (Tuple2 a b) (AssocList a b)))
  (case d
    [(assoc-list eq (empty)) (nothing)]
    [(assoc-list eq (cons entry entries)) (just (tuple2 entry (assoc-list eq entries)))]))

(define (a b c) (assoc-list-entry-map [d : (AssocList a b)] [f : (a b -> c)]) : (AssocList a c)
  (case d
    [(assoc-list eq nodes)
     (assoc-list
       eq
       (map (lambda ([t : (Tuple2 a b)])
              (case t
                [(tuple2 a b) (tuple2 a (f a b))]))
            nodes))]))

(define (a b c) (assoc-list-filter-map [d : (AssocList a b)] [f : (a b -> (Maybe c))]) : (AssocList a c)
  (case d
    [(assoc-list eq nodes)
     (assoc-list
       eq
       (filter-map (lambda ([t : (Tuple2 a b)]) : (Maybe (Tuple2 a c))
                      (case t
                        [(tuple2 a b)
                         (case (f a b)
                           [(nothing) (nothing)]
                           [(just c) (just (tuple2 a c))])]))
                   nodes))]))

(define (a b c) (assoc-list-fold [d : (AssocList a b)] [f : (a b c -> c)] [acc : c]) : c
  (case d
    [(assoc-list _ nodes)
     (foldl
       (lambda ([t : (Tuple2 a b)] [acc : c])
         (case t
           [(tuple2 a b) (f a b acc)]))
       nodes
       acc)]))
