(module dict-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Boolean Int)
      #:values (=)
      #:patterns ())
    (yunit
      #:types (TestCase FailedAssertion)
      #:values (yunit/main test-case new-test-case failure)
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (dict
      #:types (Dict)
      #:values (make-dict dict-add dict-keys)
      #:patterns ())
    (set
      #:types (Set)
      #:values (set->list set-count set-member? make-set set-add-all)
      #:patterns ())
    (list
      #:types ()
      #:values (list andmap)
      #:patterns ()))
  (export)
  (types)

  (define (A) (check-set-equal [expected : (Set A)] [actual : (Set A)]) : (-> (Maybe FailedAssertion))
    (lambda ()
      (if (andmap (lambda ([x : A]) (set-member? actual x)) (set->list expected))
          (if (andmap (lambda ([x : A]) (set-member? expected x)) (set->list actual))
              (nothing)
              (just (failure #"Set has extra value")))
          (just (failure #"Set is missing a value")))))

  (define (A B) (check-keys-equal [expected : (Dict A B)] [actual : (Dict A B)])
    : (-> (Maybe FailedAssertion))
    (check-set-equal (set-add-all (make-set =) (dict-keys expected))
                     (set-add-all (make-set =) (dict-keys actual))))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (new-test-case #"dict-keys=? 1:a,2:b 1:b,2:a"
          (check-keys-equal
            (dict-add (dict-add (make-dict =) 1 #"a") 2 #"b")
            (dict-add (dict-add (make-dict =) 1 #"b") 2 #"a")))))))
