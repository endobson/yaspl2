#:module (dict-test)
#:import {
  (bytes)
  (dict)
  (list)
  (maybe)
  (prim)
  (set)
  (tuples)
  (yunit)
}
(export
  (#:values main))
(types)

(define [A] (check-set-equal [expected : (Set A)] [actual : (Set A)]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (andmap (lambda ([x : A]) (set-member? actual x)) (set->list expected))
        (if (andmap (lambda ([x : A]) (set-member? expected x)) (set->list actual))
            (nothing)
            (just (failure #"Set has extra value")))
        (just (failure #"Set is missing a value")))))

(define [A B] (check-keys-equal [expected : (Dict A B)] [actual : (Dict A B)])
  : (-> (Maybe FailedAssertion))
  (check-set-equal (dict-keys expected) (dict-keys actual)))

(define [A] (check-list-equal [=? : (A A -> Boolean)] [expected : (List A)] [actual : (List A)]) :
  (-> (Maybe FailedAssertion))
  (lambda ()
    (check-list-equal* =? expected actual)))

(define [A] (check-list-equal* [=? : (A A -> Boolean)] [expected : (List A)] [actual : (List A)]) :
  (Maybe FailedAssertion)
  (case (tuple2 expected actual)
    [(tuple2 (empty) (empty)) (nothing)]
    [(tuple2 (cons _ _)  (empty))
     (just (failure #"List is missing an element"))]
    [(tuple2 (empty) (cons _ _))
     (just (failure #"List has extra element"))]
    [(tuple2 (cons exp-e expected) (cons act-e actual))
     (if (=? exp-e act-e)
         (check-list-equal* =? expected actual)
         (just (failure #"Elements don't match")))]))

(define (make-dict/bytes-bytes) : (Dict Bytes Bytes)
  (make-dict bytes-cmp))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"dict-keys=? 1:a,2:b 1:b,2:a"
        (check-keys-equal
          (dict-add (dict-add (make-dict/bytes-bytes) #"1" #"a") #"2" #"b")
          (dict-add (dict-add (make-dict/bytes-bytes) #"1" #"b") #"2" #"a")))
      (new-test-case #"dict-map 1:2 bytes-append"
        (check-list-equal bytes=?
          (varargs list #"12")
          (dict-map (dict-add (make-dict/bytes-bytes) #"1" #"2")
                    (lambda ([k : Bytes] [v : Bytes])
                      (bytes-append (varargs list k v))))))
      (new-test-case #"dict-value-map a:1,b:2 add1"
         (check-dict=?
           bytes=?
           (dict-add (dict-add (make-dict/bytes-bytes) #"a" #"12") #"b" #"13")
           (dict-value-map
             (dict-add (dict-add (make-dict/bytes-bytes) #"a" #"2") #"b" #"3")
             (lambda ([x : Bytes]) (bytes-append (varargs list #"1" x)))))))))
