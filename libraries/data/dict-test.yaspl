#:module (dict-test)
#:import {
  (bytes) {
    #:values
      bytes=?
  }
  (dict) {
    #:types
      Dict
    #:values
      dict-add
      dict-keys
      dict-map
      dict-value-map
      make-dict
  }
  (list) {
    #:types
      List
    #:values
      andmap
      list
    #:patterns
      cons
      empty
  }
  (maybe) {
    #:types
      Maybe
    #:values
      just
      nothing
  }
  (prim) {
    #:types
      Array
      Boolean
      Bytes
      InputPort
      Int
      OutputPort
    #:values
      +
      =
  }
  (set) {
    #:types
      Set
    #:values
      set->list
      set-member?
  }
  (tuples) {
    #:values
      tuple2
    #:patterns
      tuple2
  }
  (yunit) {
    #:types
      FailedAssertion
    #:values
      check-dict=?
      failure
      new-test-case
      yunit/main
  }
}
(export)
(types)

(define (A) (check-set-equal [expected : (Set A)] [actual : (Set A)]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (andmap (lambda ([x : A]) (set-member? actual x)) (set->list expected))
        (if (andmap (lambda ([x : A]) (set-member? expected x)) (set->list actual))
            (nothing)
            (just (failure #"Set has extra value")))
        (just (failure #"Set is missing a value")))))

(define (A B) (check-keys-equal [expected : (Dict A B)] [actual : (Dict A B)])
  : (-> (Maybe FailedAssertion))
  (check-set-equal (dict-keys expected) (dict-keys actual)))

(define (A) (check-list-equal [=? : (A A -> Boolean)] [expected : (List A)] [actual : (List A)]) :
  (-> (Maybe FailedAssertion))
  (lambda ()
    (check-list-equal* =? expected actual)))

(define (A) (check-list-equal* [=? : (A A -> Boolean)] [expected : (List A)] [actual : (List A)]) :
  (Maybe FailedAssertion)
  (case (tuple2 expected actual)
    [(tuple2 (empty) (empty)) (nothing)]
    [(tuple2 (cons _ _)  (empty))
     (just (failure #"List is missing an element"))]
    [(tuple2 (empty) (cons _ _))
     (just (failure #"List has extra element"))]
    [(tuple2 (cons exp-e expected) (cons act-e actual))
     (if (=? exp-e act-e)
         (check-list-equal* =? expected actual)
         (just (failure #"Elements don't match")))]))

(define (make-dict/int-int) : (Dict Int Int)
  (make-dict =))
(define (make-dict/int-bytes) : (Dict Int Bytes)
  (make-dict =))
(define (make-dict/bytes-int) : (Dict Bytes Int)
  (make-dict bytes=?))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"dict-keys=? 1:a,2:b 1:b,2:a"
        (check-keys-equal
          (dict-add (dict-add (make-dict/int-bytes) 1 #"a") 2 #"b")
          (dict-add (dict-add (make-dict/int-bytes) 1 #"b") 2 #"a")))
      (new-test-case #"dict-map 1:2,2:3 +"
        (check-list-equal =
          (varargs list 3 5)
          (dict-map (dict-add (dict-add (make-dict/int-int) 1 2) 2 3) +)))
      (new-test-case #"dict-value-map a:1,b:2 add1"
         (check-dict=?
           =
           (dict-add (dict-add (make-dict/bytes-int) #"a" 2) #"b" 3)
           (dict-value-map
             (dict-add (dict-add (make-dict/bytes-int) #"a" 1) #"b" 2)
             (lambda ([x : Int]) (+ 1 x))))))))
