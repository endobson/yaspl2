(module dict-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Boolean Int)
      #:values (= +)
      #:patterns ())
    (yunit
      #:types (TestCase FailedAssertion)
      #:values (yunit/main test-case new-test-case failure
                check-dict=?)
      #:patterns ())
    (bytes bytes=?)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (dict
      #:types (Dict)
      #:values (make-dict dict-add dict-keys dict-map dict-value-map)
      #:patterns ())
    (set
      #:types (Set)
      #:values (set->list set-count set-member? make-set set-add-all)
      #:patterns ())
    (tuples
      #:types ()
      #:values (tuple2)
      #:patterns (tuple2))
    (list
      #:types (List)
      #:values (list andmap)
      #:patterns (cons empty)))
  (export)
  (types)

  (define (A) (check-set-equal [expected : (Set A)] [actual : (Set A)]) : (-> (Maybe FailedAssertion))
    (lambda ()
      (if (andmap (lambda ([x : A]) (set-member? actual x)) (set->list expected))
          (if (andmap (lambda ([x : A]) (set-member? expected x)) (set->list actual))
              (nothing)
              (just (failure #"Set has extra value")))
          (just (failure #"Set is missing a value")))))

  (define (A B) (check-keys-equal [expected : (Dict A B)] [actual : (Dict A B)])
    : (-> (Maybe FailedAssertion))
    (check-set-equal (dict-keys expected) (dict-keys actual)))

  (define (A) (check-list-equal [=? : (A A -> Boolean)] [expected : (List A)] [actual : (List A)]) :
    (-> (Maybe FailedAssertion))
    (lambda ()
      (check-list-equal* =? expected actual)))

  (define (A) (check-list-equal* [=? : (A A -> Boolean)] [expected : (List A)] [actual : (List A)]) :
    (Maybe FailedAssertion)
    (case (tuple2 expected actual)
      [(tuple2 (empty) (empty)) (nothing)]
      [(tuple2 (cons _ (empty))  (empty))
       (just (failure #"List is missing an element"))]
      [(tuple2 (empty) (cons _ (empty)))
       (just (failure #"List has extra element"))]
      [(tuple2 (cons exp-e expected) (cons act-e actual))
       (if (=? exp-e act-e)
           (check-list-equal* =? expected actual)
           (just (failure #"Elements don't match")))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (new-test-case #"dict-keys=? 1:a,2:b 1:b,2:a"
          (check-keys-equal
            (dict-add (dict-add (make-dict =) 1 #"a") 2 #"b")
            (dict-add (dict-add (make-dict =) 1 #"b") 2 #"a")))
        (new-test-case #"dict-map 1:2,2:3 +"
          (check-list-equal =
            (varargs list 3 5)
            (dict-map (dict-add (dict-add (make-dict =) 1 2) 2 3) +)))
        (new-test-case #"dict-value-map a:1,b:2 add1"
           (check-dict=?
             =
             (dict-add (dict-add (make-dict bytes=?) #"a" 2) #"b" 3)
             (dict-value-map
               (dict-add (dict-add (make-dict bytes=?) #"a" 1) #"b" 2)
               (lambda ([x : Int]) (+ 1 x)))))))))
