#:module (undirected-graph)
#:import {
  (data ordering)
  (dict)
  (either)
  (maybe)
  (prim)
  (tuples)
}
(export
  (#:types Graph)
  (#:values empty-graph graph-vertex-label graph-vertex-edges
            graph-add-vertex-if-absent
            graph-add-edge-if-absent graph-edges graph-vertices
            graph-remove-edge graph-remove-unconnected-vertex graph-update-edge
            graph-update-vertex graph-update-vertices))
(types
  (define-type (Graph I V E)
    (graph [cmp : (I I -> Ordering)] [connections : (Dict I (Tuple2 V (Dict I E)))])))

(define [I V E] (empty-graph [cmp : (I I -> Ordering)]) : (Graph I V E)
  (graph cmp (make-dict cmp)))

(define [I V E] (graph-add-vertex-if-absent [g : (Graph I V E)] [index : I] [v : V])
  : (Graph I V E)
  (case g
    [(graph cmp con)
     (if (dict-has-key? con index)
         g
         (graph cmp (dict-add con index (tuple2 v (make-dict cmp)))))]))

;; Figure out how to differentiate edge existing from vertices not existing
(define [I V E] (graph-add-edge [g : (Graph I V E)] [src : I] [dest : I] [label : E])
  : (Maybe (Graph I V E))
  (case g
    [(graph cmp con)
     (if (dict-has-key? con dest)
         (case (dict-ref con src)
           [(nothing) (nothing)]
           [(just (tuple2 v edges))
            (case (dict-maybe-add edges dest label)
              [(nothing) (nothing)]
              [(just new-edges)
               (case (cmp src dest)
                 [(equal-to) (just (graph cmp (dict-replace con src (tuple2 v new-edges))))]
                 [_
                  (just
                    (graph
                      cmp
                      (dict-update-existing
                        (dict-replace con src (tuple2 v new-edges))
                        dest
                        (lambda ([t : (Tuple2 V (Dict I E))])
                          (case t
                            [(tuple2 v neighbors)
                             (tuple2 v (dict-add neighbors src label))])))))])])])
         (nothing))]))

(define [I V E] (graph-add-edge-if-absent [g : (Graph I V E)] [src : I] [dest : I] [label : E])
  : (Graph I V E)
  (case (graph-add-edge g src dest label)
    [(nothing) g]
    [(just g) g]))



(define [I V E] (graph-remove-edge [g : (Graph I V E)] [src : I] [dest : I]) : (Graph I V E)
  (case g
    [(graph cmp con)
     (graph
       cmp
       (dict-update-existing
         (dict-update-existing
           con
           src
           (lambda ([t : (Tuple2 V (Dict I E))])
             (case t
              [(tuple2 v neighbors)
               (tuple2 v (dict-remove neighbors dest))])))
         dest
         (lambda ([t : (Tuple2 V (Dict I E))])
           (case t
            [(tuple2 v neighbors)
             (tuple2 v (dict-remove neighbors src))]))))]))


(define [I V E] (graph-update-edge [g : (Graph I V E)] [src : I] [dest : I] [f : (E -> E)] [label : E])
  : (Maybe (Graph I V E))
  (case g
    [(graph cmp con)
     (if (dict-has-key? con dest)
         (case (dict-ref con src)
           [(nothing) (nothing)]
           [(just (tuple2 v edges))
            (let ([new-edges (dict-update edges dest f label)])
              (case (cmp src dest)
                [(equal-to) (just (graph cmp (dict-replace con src (tuple2 v new-edges))))]
                [_
                 (just
                   (graph
                     cmp
                     (dict-update-existing
                       (dict-replace con src (tuple2 v new-edges))
                       dest
                       (lambda ([t : (Tuple2 V (Dict I E))])
                         (case t
                           [(tuple2 v neighbors)
                            (tuple2 v (dict-update neighbors src f label))])))))]))])
         (nothing))]))

(define [I V E] (graph-update-vertex [g : (Graph I V E)] [i : I] [f : (V -> V)])
  : (Maybe (Graph I V E))
  (case g
    [(graph cmp con)
     (if (dict-has-key? con i)
         (just
           (graph
             cmp
             (dict-update-existing
               con
               i
               (lambda ([t : (Tuple2 V (Dict I E))])
                 (case t
                   [(tuple2 v edges)
                    (tuple2 (f v) edges)])))))
         (nothing))]))

(define [I V E] (graph-update-vertices [g : (Graph I V E)] [f : (I V -> V)]) : (Graph I V E)
  (match-define (graph cmp con) g)
  (graph
    cmp
    (dict-entry-map
      con
      (lambda ([i : I] [t : (Tuple2 V (Dict I E))]) : (Tuple2 V (Dict I E))
        (case t
          [(tuple2 v edges)
           (tuple2 (f i v) edges)])))))


(define [I V E] (graph-remove-unconnected-vertex [g : (Graph I V E)] [v : I])
  : (Either (Maybe (Dict I E)) (Graph I V E))
  (case g
    [(graph eq con)
     (case (dict-ref con v)
       [(nothing) (left (nothing))]
       [(just (tuple2 _ edges))
        (if (dict-empty? edges)
            (right (graph eq (dict-remove con v)))
            (left (just edges)))])]))

(define [I V E] (graph-vertices [g : (Graph I V E)]) : (Dict I V)
  (match-define (graph _ con) g)
  (dict-value-map
    con
    (lambda ([t : (Tuple2 V (Dict I E))])
      (case t [(tuple2 v _) v]))))

(define [I V E] (graph-edges [g : (Graph I V E)]) : (Dict (Tuple2 I I) E)
  (match-define (graph cmp con) g)
  (graph-edges* con (ann (Dict (Tuple2 I I) E) (make-dict (tuple2-cmp cmp cmp)))))

(define [I V E] (graph-edges*
                  [con : (Dict I (Tuple2 V (Dict I E)))]
                  [acc : (Dict (Tuple2 I I) E)]) : (Dict (Tuple2 I I) E)
  (case (dict-split con)
    [(nothing) acc]
    [(just (tuple2 (tuple2 i (tuple2 _ other-edges)) con))
     (graph-edges*
       con
       (dict-fold
         other-edges
         (lambda ([i2 : I] [e : E] [acc : (Dict (Tuple2 I I) E)])
           (if (dict-has-key? con i2)
               acc
               (dict-add acc (tuple2 i i2) e)))
         acc))]))

(define [I V E] (graph-vertex-label [g : (Graph I V E)] [i : I]) : (Maybe V)
  (case g
    [(graph _ con)
     (case (dict-ref con i)
       [(nothing) (nothing)]
       [(just (tuple2 v _)) (just v)])]))

(define [I V E] (graph-vertex-edges [g : (Graph I V E)] [i : I]) : (Maybe (Dict I E))
  (case g
    [(graph _ con)
     (case (dict-ref con i)
       [(nothing) (nothing)]
       [(just (tuple2 _ edges)) (just edges)])]))
