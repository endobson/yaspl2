#:module undirected-graph
#:import {
  dict {
    #:types
      Dict
    #:values
      dict-add
      dict-fold
      dict-has-key?
      dict-maybe-add
      dict-ref
      dict-replace
      dict-split
      dict-update-existing
      dict-value-map
      make-dict
  }
  maybe {
    #:types
      Maybe
    #:values
      just
      nothing
    #:patterns
      just
      nothing
  }
  prim {
    #:types
      Boolean
  }
  tuples {
    #:types
      Tuple2
    #:values
      tuple2
      tuple2=?
    #:patterns
      tuple2
  }
}
(export
  #:types (Graph)
  #:values (empty-graph graph-vertex-label graph-vertex-edges
            graph-add-vertex-if-absent
            graph-add-edge-if-absent graph-edges graph-vertices)
  #:patterns ())
(types
  (define-type (Graph I V E)
    (graph [eq? : (I I -> Boolean)] [connections : (Dict I (Tuple2 V (Dict I E)))])))

(define (I V E) (empty-graph [eq? : (I I -> Boolean)]) : (Graph I V E)
  (graph eq? (make-dict eq?)))

(define (I V E) (graph-add-vertex-if-absent [g : (Graph I V E)] [index : I] [v : V])
  : (Graph I V E)
  (case g
    [(graph eq? con)
     (if (dict-has-key? con index)
         g
         (graph eq? (dict-add con index (tuple2 v (make-dict eq?)))))]))

;; Figure out how to differentiate edge existing from vertices not existing
(define (I V E) (graph-add-edge [g : (Graph I V E)] [src : I] [dest : I] [label : E])
  : (Maybe (Graph I V E))
  (case g
    [(graph eq? con)
     (if (dict-has-key? con dest)
         (case (dict-ref con src)
           [(nothing) (nothing)]
           [(just (tuple2 v edges))
            (case (dict-maybe-add edges dest label)
              [(nothing) (nothing)]
              [(just new-edges)
               (just
                 (graph
                   eq?
                   (dict-update-existing
                     (dict-replace con src (tuple2 v new-edges))
                     dest
                     (lambda ([t : (Tuple2 V (Dict I E))])
                       (case t
                         [(tuple2 v neighbors)
                          (tuple2 v (dict-add neighbors src label))])))))])])
         (nothing))]))

(define (I V E) (graph-add-edge-if-absent [g : (Graph I V E)] [src : I] [dest : I] [label : E])
  : (Graph I V E)
  (case (graph-add-edge g src dest label)
    [(nothing) g]
    [(just g) g]))

(define (I V E) (graph-vertices [g : (Graph I V E)]) : (Dict I V)
  (match-define (graph _ con) g)
  (dict-value-map
    con
    (lambda ([t : (Tuple2 V (Dict I E))])
      (case t [(tuple2 v _) v]))))

(define (I V E) (graph-edges [g : (Graph I V E)]) : (Dict (Tuple2 I I) E)
  (match-define (graph eq? con) g)
  (graph-edges* con ((lambda () : (Dict (Tuple2 I I) E) (make-dict (tuple2=? eq? eq?))))))

(define (I V E) (graph-edges*
                  [con : (Dict I (Tuple2 V (Dict I E)))]
                  [acc : (Dict (Tuple2 I I) E)]) : (Dict (Tuple2 I I) E)
  (case (dict-split con)
    [(nothing) acc]
    [(just (tuple2 (tuple2 i (tuple2 _ other-edges)) con))
     (graph-edges*
       con
       (dict-fold
         other-edges
         (lambda ([i2 : I] [e : E] [acc : (Dict (Tuple2 I I) E)])
           (if (dict-has-key? con i2)
               acc
               (dict-add acc (tuple2 i i2) e)))
         acc))]))

(define (I V E) (graph-vertex-label [g : (Graph I V E)] [i : I]) : (Maybe V)
  (case g
    [(graph _ con)
     (case (dict-ref con i)
       [(nothing) (nothing)]
       [(just (tuple2 v _)) (just v)])]))

(define (I V E) (graph-vertex-edges [g : (Graph I V E)] [i : I]) : (Maybe (Dict I E))
  (case g
    [(graph _ con)
     (case (dict-ref con i)
       [(nothing) (nothing)]
       [(just (tuple2 _ edges)) (just edges)])]))
