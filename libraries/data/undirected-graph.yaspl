(module undirected-graph
  (import
    (dict
      #:types (Dict)
      #:values (dict-add dict-fold dict-has-key? dict-keys dict-maybe-add dict-ref dict-replace
                dict-update-existing make-dict)
      #:patterns ())
    (list andmap)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (prim
      #:types (Int)
      #:values (=)
      #:patterns ())
    (set set->list)
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2)))
  (export
    #:types (Graph)
    #:values (empty-graph graph-add-vertex graph-add-edge graph-vertex-value graph-vertex-edges)
    #:patterns ())
  (types
    (define-type (Graph V E)
      (graph [connections : (Dict Int (Tuple2 V (Dict Int E)))])))

  (define (V E) (empty-graph) : (Graph V E)
    (graph (make-dict =)))

  (define (V E) (graph-add-vertex [g : (Graph V E)] [index : Int] [v : V] [edges : (Dict Int E)])
    : (Maybe (Graph V E))
    (case g
      [(graph con)
       (case (dict-maybe-add con index (tuple2 v edges))
         [(just con)
          (if (andmap
                (lambda ([v2 : Int])
                  (dict-has-key? con v2))
                (set->list (dict-keys con)))
              (just
                (graph
                  (dict-fold
                    edges
                    (lambda ([index2 : Int] [e : E] [con : (Dict Int (Tuple2 V (Dict Int E)))])
                      (if (= index2 index)
                          con
                          (dict-update-existing con index2
                            (lambda ([t : (Tuple2 V (Dict Int E))])
                              (case t
                                [(tuple2 v neighbors)
                                 (tuple2 v (dict-add neighbors index e))])))))
                    con)))
              (nothing))]
         [(nothing) (nothing)])]))

  (define (V E) (graph-add-edge [g : (Graph V E)] [src : Int] [dest : Int] [label : E])
    : (Maybe (Graph V E))
    (case g
      [(graph con)
       (case (dict-ref con src)
         [(nothing) (nothing)]
         [(just (tuple2 v edges))
          (case (dict-maybe-add edges dest label)
            [(nothing) (nothing)]
            [(just new-edges)
             (just
               (graph
                 (dict-update-existing
                   (dict-replace con src (tuple2 v new-edges))
                   dest
                   (lambda ([t : (Tuple2 V (Dict Int E))])
                     (case t
                       [(tuple2 v neighbors)
                        (tuple2 v (dict-add neighbors src label))])))))])])]))

  (define (V E) (graph-vertex-value [g : (Graph V E)] [v : Int]) : (Maybe V)
    (case g
      [(graph con)
       (case (dict-ref con v)
         [(nothing) (nothing)]
         [(just (tuple2 v _)) (just v)])]))

  (define (V E) (graph-vertex-edges [g : (Graph V E)] [src : Int]) : (Maybe (Dict Int E))
    (case g
      [(graph con)
       (case (dict-ref con src)
         [(nothing) (nothing)]
         [(just (tuple2 _ edges)) (just edges)])])))
