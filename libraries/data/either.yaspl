#:module (either)
#:import {
  (prim)
  (tuples)
}
(export
  (#:types Either)
  (#:values left right either=?)
  (#:patterns left right))
(types
  (define-type (Either a b)
    (left [v : a])
    (right [v : b])))

(define [A B] (either=? [a=? : (A A -> Boolean)] [b=? : (B B -> Boolean)])
  : ((Either A B) (Either A B) -> Boolean)
  (lambda ([v1 : (Either A B)] [v2 : (Either A B)])
    (case (tuple2 v1 v2)
      [(tuple2 (left a1) (left a2))
       (a=? a1 a2)]
      [(tuple2 (right b1) (right b2))
       (b=? b1 b2)]
      [_ #f])))
