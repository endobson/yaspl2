#:module (multi-set)
#:import {
  (data ordering)
  (data lifted-primitives)
  (dict)
  (list)
  (maybe)
  (prim)
  (set)
}
(export
  (#:types MultiSet)
  (#:values make-multi-set multi-set-add multi-set-keys multi-set-count multi-set-add-all)
  (#:patterns))
(types
  (define-type (MultiSet a)
    (multi-set [counts : (Dict a LiftedInt)])))

(define (a) (make-multi-set [cmp : (a a -> Ordering)]) : (MultiSet a)
  (multi-set (make-dict cmp)))

(define (a) (multi-set-add [ms : (MultiSet a)] [e : a]) : (MultiSet a)
  (case ms
    [(multi-set counts)
     (multi-set
       (dict-update counts e (lambda ([x : LiftedInt])
                               (case x
                                 [(lifted-int v) (lifted-int (+ v 1))]))
                    (lifted-int 0)))]))

(define (a) (multi-set-add-all [ms : (MultiSet a)] [es : (List a)]) : (MultiSet a)
  (case es
    [(empty) ms]
    [(cons e es)
     (multi-set-add-all (multi-set-add ms e) es)]))

(define (a) (multi-set-keys [ms : (MultiSet a)]) : (Set a)
  (dict-keys (multi-set-counts ms)))

(define (a) (multi-set-count [ms : (MultiSet a)] [e : a]) : Int
  (case (dict-ref (multi-set-counts ms) e)
    [(nothing) 0]
    [(just (lifted-int v)) v]))
