#:module (multi-set)
#:import {
  (dict) {
    #:types
      Dict
    #:values
      dict-keys
      dict-ref
      dict-update
      make-dict
  }
  (list) {
    #:types
      List
    #:patterns
      cons
      empty
  }
  (maybe) {
    #:patterns
      just
      nothing
  }
  (prim) {
    #:types
      Boolean
      Int
    #:values
      +
  }
  (set) {
    #:types
      Set
  }
}
(export
  #:types (MultiSet)
  #:values (make-multi-set multi-set-add multi-set-keys multi-set-count multi-set-add-all)
  #:patterns ())
(types
  (define-type (MultiSet a)
    (multi-set [counts : (Dict a Int)])))

(define (a) (make-multi-set [eq : (a a -> Boolean)]) : (MultiSet a)
  (multi-set (make-dict eq)))

(define (a) (multi-set-add [ms : (MultiSet a)] [e : a]) : (MultiSet a)
  (case ms
    [(multi-set counts)
     (multi-set (dict-update counts e (lambda ([x : Int]) (+ x 1)) 0))]))

(define (a) (multi-set-add-all [ms : (MultiSet a)] [es : (List a)]) : (MultiSet a)
  (case es
    [(empty) ms]
    [(cons e es)
     (multi-set-add-all (multi-set-add ms e) es)]))

(define (a) (multi-set-keys [ms : (MultiSet a)]) : (Set a)
  (dict-keys (multi-set-counts ms)))

(define (a) (multi-set-count [ms : (MultiSet a)] [e : a]) : Int
  (case (dict-ref (multi-set-counts ms) e)
    [(nothing) 0]
    [(just v) v]))
