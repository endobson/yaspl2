#:module (list)
#:import {
  (data lifted-primitives)
  (data ordering)
  (either)
  (maybe)
  (prim)
  (tuples)
}
(export
  (#:types List)
  (#:values cons empty reverse length map append
            findf append* list list-ref foldl sort find-index filter
            extract-rights extract-justs interleave array->list list=? list<
            build-list find/maybe filter-map
            ormap andmap zip zip/left unzip for-each reverse-map drop take
            partition-eithers list-cmp sum)
  (#:patterns cons empty))
(types
  (define-type (List a)
               (cons [head : a] [tail : (List a)])
               (empty)))

(define (a) (reverse [list : (List a)]) : (List a)
  (reverse-helper list (empty)))
(define (a) (reverse-helper [l1 : (List a)] [l2 : (List a)]) : (List a)
  (case l1
    [(empty) l2]
    [(cons hd tl) (reverse-helper tl (cons hd l2))]))

(define (a) (length [l : (List a)]) : Int
  (case l
    [(empty) 0]
    [(cons e l) (+ 1 (length l))]))

(define (a b) (map [f : (a -> b)] [l : (List a)]) : (List b)
  (case l
    [(empty) (empty)]
    [(cons e l) (cons (f e) (map f l))]))

(define (a b) (reverse-map [f : (a -> b)] [l : (List a)]) : (List b)
  (let ([reverse-map-fix (lambda ([f : (a -> b)] [l : (List a)] [acc : (List b)]) : (List b)
                           (reverse-map* f l acc))])
    (reverse-map-fix f l (empty))))

(define (a b) (reverse-map* [f : (a -> b)] [l : (List a)] [acc : (List b)]) : (List b)
  (case l
    [(empty) acc]
    [(cons e l) (reverse-map* f l (cons (f e) acc))]))

(define (a) (filter [f : (a -> Boolean)] [l : (List a)]) : (List a)
  (case l
    [(empty) (empty)]
    [(cons e l)
     (if (f e)
       (cons e (filter f l))
       (filter f l))]))

(define (a) (for-each [f : (a -> Void)] [l : (List a)]) : Void
  (case l
    [(empty) (void)]
    [(cons e l)
     (begin
       (f e)
       (for-each f l))]))

(define (a) (append [l1 : (List a)] [l2 : (List a)]) : (List a)
  (append-helper (reverse l1) l2))

(define (a) (append-helper [l1 : (List a)] [l2 : (List a)]) : (List a)
  (case l1
    [(empty) l2]
    [(cons e l1) (append-helper l1 (cons e l2))]))

(define (a) (append* [ls : (List (List a))]) : (List a)
  (append*-helper (reverse ls) (empty)))

(define (a) (append*-helper [ls : (List (List a))] [acc : (List a)]) : (List a)
  (case ls
    [(empty) acc]
    [(cons l ls) (append*-helper ls (append l acc))]))

(define (a) (findf [f : (a -> Boolean)] [l : (List a)]) : (Maybe a)
  (case l
    [(empty) (nothing)]
    [(cons a l) (if (f a) (just a) (findf f l))]))

(define (a) (find-index [f : (a -> Boolean)] [l : (List a)]) : (Maybe LiftedInt)
  (find-index-helper f l 0))

(define (a) (find-index-helper [f : (a -> Boolean)] [l : (List a)] [index : Int]) : (Maybe LiftedInt)
  (case l
    [(empty) (nothing)]
    [(cons a l) (if (f a) (just (lifted-int index)) (find-index-helper f l (+ 1 index)))]))

(define (a b) (find/maybe [f : (a -> (Maybe b))] [l : (List a)]) : (Maybe b)
  (case l
    [(empty) (nothing)]
    [(cons a l)
     (case (f a)
       [(just b) (just b)]
       [_ (find/maybe f l)])]))

(define (a) (list [args : (Array a)]) : (List a)
  (list-helper (- (array-length args) 1) args (empty)))

(define (a) (list-helper [index : Int] [args : (Array a)] [acc : (List a)]) : (List a)
  (if (< index 0)
    acc
    (list-helper (- index 1) args (cons (array-ref args index) acc))))

(define (a) (list-ref [l : (List a)] [n : Int]) : (Maybe a)
  (case l
    [(empty) (nothing)]
    [(cons e l) (if (= 0 n) (just e) (list-ref l (- n 1)))]))

(define (a b) (foldl [f : (a b -> b)] [l : (List a)] [acc : b]) : b
  (case l
    [(empty) acc]
    [(cons e l)
     (foldl f l (f e acc))]))

(define (a) (sort [l : (List a)] [< : (a a -> Boolean)]) : (List a)
  (case l
    [(empty) l]
    [(cons _ (empty)) l]
    [_ (merge-sort l < (empty) (empty))]))

(define (a) (merge-sort [l : (List a)] [< : (a a -> Boolean)] [left : (List a)] [right : (List a)]) : (List a)
  (case l
    [(empty)
     (merge < (sort left <) (sort right <))]
    [(cons e (empty))
     (merge < (sort (cons e left) <) (sort right <))]
    [(cons e1 (cons e2 l))
     (merge-sort l < (cons e1 left) (cons e2 right))]))

(define (a) (merge [< : (a a -> Boolean)] [left : (List a)] [right : (List a)]) : (List a)
  (case left
    [(empty) right]
    [(cons le left*)
     (case right
       [(empty) left]
       [(cons re right*)
        (if (< le re)
          (cons le (merge < left* right))
          (cons re (merge < left right*)))])]))

(define (A B) (extract-rights [vals : (List (Either B A))]) : (Either B (List A))
  (case vals
    [(empty) (right (empty))]
    [(cons (right v) vals)
     (case (extract-rights vals)
       [(right vs) (right (cons v vs))]
       [(left v) (left v)])]
    [(cons (left v) _)
     (left v)]))

(define (A B) (partition-eithers [vals : (List (Either A B))]) : (Tuple2 (List A) (List B))
  (partition-eithers* vals (empty) (empty)))
(define (A B) (partition-eithers* [vals : (List (Either A B))] [as : (List A)] [bs : (List B)])
  : (Tuple2 (List A) (List B))
  (case vals
    [(empty) (tuple2 (reverse as) (reverse bs))]
    [(cons (left a) vals)
     (partition-eithers* vals (cons a as) bs)]
    [(cons (right b) vals)
     (partition-eithers* vals as (cons b bs))]))


(define (A) (extract-justs [vals : (List (Maybe A))]) : (Maybe (List A))
  (case vals
    [(empty) (just (empty))]
    [(cons (just v) vals)
     (case (extract-justs vals)
       [(just vs) (just (cons v vs))]
       [(nothing) (nothing)])]
    [(cons (nothing) _)
     (nothing)]))

(define (A) (interleave [vs : (List A)] [sep : A]) : (List A)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (cons v (interleave* vs sep))]))

(define (A) (interleave* [vs : (List A)] [sep : A]) : (List A)
  (case vs
    [(empty) (empty)]
    [(cons v vs)
     (cons sep (cons v (interleave* vs sep)))]))

(define (a) (array->list [arr : (Array a)]) : (List a)
  (array->list* 0 arr))

(define (a) (array->list* [offset : Int] [arr : (Array a)]) : (List a)
  (if (= offset (array-length arr))
      (empty)
      (cons (array-ref arr offset) (array->list* (+ 1 offset) arr))))

(define (A) (list=? [mem-equal? : (A A -> Boolean)]) : ((List A) (List A) -> Boolean)
  (lambda ([l1 : (List A)] [l2 : (List A)])
    (case (tuple2 l1 l2)
      [(tuple2 (empty) (empty)) #t]
      [(tuple2 (cons e1 l1) (cons e2 l2))
       (if (mem-equal? e1 e2)
           ((list=? mem-equal?) l1 l2)
           #f)]
      [_ #f])))

(define (A) (list< [mem< : (A A -> Boolean)]) : ((List A) (List A) -> Boolean)
  (lambda ([l1 : (List A)] [l2 : (List A)])
    (case (tuple2 l1 l2)
      [(tuple2 (empty) (empty)) #f]
      [(tuple2 (cons _ _) (empty)) #f]
      [(tuple2 (empty) (cons _ _)) #t]
      [(tuple2 (cons e1 l1) (cons e2 l2))
       (if (mem< e1 e2)
           #t
           (if (mem< e2 e1)
               #f
               ((list< mem<) l1 l2)))])))

(define (A) (list-cmp [cmp : (A A -> Ordering)]) : ((List A) (List A) -> Ordering)
  (lambda ([l1 : (List A)] [l2 : (List A)])
    (case (tuple2 l1 l2)
      [(tuple2 (empty) (empty)) (equal-to)]
      [(tuple2 (cons _ _) (empty)) (greater-than)]
      [(tuple2 (empty) (cons _ _)) (less-than)]
      [(tuple2 (cons e1 l1) (cons e2 l2))
       (case (cmp e1 e2)
         [(equal-to) ((list-cmp cmp) l1 l2)]
         [res res])])))


(define (A) (andmap [f : (A -> Boolean)] [l : (List A)]) : Boolean
  (case l
    [(empty) #t]
    [(cons e l)
     (if (f e) (andmap f l) #f)]))

(define (A) (ormap [f : (A -> Boolean)] [l : (List A)]) : Boolean
  (case l
    [(empty) #f]
    [(cons e l)
     (if (f e) #t (ormap f l))]))

(define (A B) (zip [l1 : (List A)] [l2 : (List B)]) : (Maybe (List (Tuple2 A B)))
  (case (tuple2 l1 l2)
    [(tuple2 (empty) (empty))
     (just (empty))]
    [(tuple2 (cons e1 l1) (cons e2 l2))
     (case (zip l1 l2)
       [(nothing) (nothing)]
       [(just v) (just (cons (tuple2 e1 e2) v))])]
    [_ (nothing)]))

(define (A B) (zip/left [l1 : (List A)] [l2 : (List B)]) : (Maybe (List (Tuple2 A B)))
  (case (tuple2 l1 l2)
    [(tuple2 (empty) _)
     (just (empty))]
    [(tuple2 (cons e1 l1) (cons e2 l2))
     (case (zip/left l1 l2)
       [(nothing) (nothing)]
       [(just v) (just (cons (tuple2 e1 e2) v))])]
    [(tuple2 (cons e1 l1) (empty))
     (nothing)]))

(define (A B) (unzip [l : (List (Tuple2 A B))]) : (Tuple2 (List A) (List B))
  (case l
    [(empty) (tuple2 (empty) (empty))]
    [(cons (tuple2 lhs-e rhs-e) l)
     (case (unzip l)
       [(tuple2 lhs-l rhs-l)
        (tuple2 (cons lhs-e lhs-l) (cons rhs-e rhs-l))])]))

(define (A) (build-list [size : Int] [f : (Int -> A)]) : (List A)
  (build-list* 0 size f))

(define (A) (build-list* [index : Int] [size : Int] [f : (Int -> A)]) : (List A)
  (if (= index size)
      (empty)
      (cons (f index)
            (build-list* (+ 1 index) size f))))

(define (A B) (filter-map [f : (A -> (Maybe B))] [list : (List A)]) : (List B)
  (case list
    [(empty) (empty)]
    [(cons e list)
     (case (f e)
       [(nothing) (filter-map f list)]
       [(just v) (cons v (filter-map f list))])]))

(define (A) (take [n : Int] [l : (List A)]) : (List A)
  (if (= n 0)
      (empty)
      (if (< n 0)
          (panic #"Cannot take a negative amount")
          (case l
            [(empty) (panic #"Cannot take from empty list")]
            [(cons e l) (cons e (take (- n 1) l))]))))

(define (A) (drop [n : Int] [l : (List A)]) : (List A)
  (if (= n 0)
      l
      (if (< n 0)
          (panic #"Cannot drop a negative amount")
          (case l
            [(empty) (panic #"Cannot drop from empty list")]
            [(cons _ l) (drop (- n 1) l)]))))


(define (A) (sum [f : (A -> Int)] [vs : (List A)]) : Int
  (sum-helper f vs 0))
(define (A) (sum-helper [f : (A -> Int)] [vs : (List A)] [acc : Int]) : Int
  (case vs
    [(empty) acc]
    [(cons v vs) (sum-helper f vs (+ (f v) acc))]))
