(module list
  (import
    (prim
      #:types (Boolean Array Int)
      #:values (+ - < = array-ref array-length)
      #:patterns ())
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2)))
  (export
    #:types (List)
    #:values (cons empty cons-head cons-tail reverse length map append
              findf append* list list-ref foldl sort find-index filter
              extract-rights interleave array->list list=? andmap zip)
    #:patterns (cons empty))
  (types
    (define-type (List a)
      (cons [head a] [tail (List a)])
      (empty)))

  (define (a) (reverse [list : (List a)]) : (List a)
    (reverse-helper list (empty)))
  (define (a) (reverse-helper [l1 : (List a)] [l2 : (List a)]) : (List a)
    (case l1
      [(empty) l2]
      [(cons hd tl) (reverse-helper tl (cons hd l2))]))

  (define (a) (length [l : (List a)]) : Int
    (case l
      [(empty) 0]
      [(cons e l) (+ 1 (length l))]))

  (define (a b) (map [f : (a -> b)] [l : (List a)]) : (List b)
    (case l
      [(empty) (empty)]
      [(cons e l) (cons (f e) (map f l))]))

  (define (a) (filter [f : (a -> Boolean)] [l : (List a)]) : (List a)
    (case l
      [(empty) (empty)]
      [(cons e l)
       (if (f e)
           (cons e (filter f l))
           (filter f l))]))

  (define (a) (append [l1 : (List a)] [l2 : (List a)]) : (List a)
    (append-helper (reverse l1) l2))

  (define (a) (append-helper [l1 : (List a)] [l2 : (List a)]) : (List a)
    (case l1
      [(empty) l2]
      [(cons e l1) (append-helper l1 (cons e l2))]))

  (define (a) (append* [ls : (List (List a))]) : (List a)
    (case ls
      [(empty) (empty)]
      [(cons l ls) (append l (append* ls))]))

  (define (a) (findf [f : (a -> Boolean)] [l : (List a)]) : (Maybe a)
    (case l
      [(empty) (nothing)]
      [(cons a l) (if (f a) (just a) (findf f l))]))

  (define (a) (find-index [f : (a -> Boolean)] [l : (List a)]) : (Maybe Int)
    (find-index-helper f l 0))

  (define (a) (find-index-helper [f : (a -> Boolean)] [l : (List a)] [index : Int]) : (Maybe Int)
    (case l
      [(empty) (nothing)]
      [(cons a l) (if (f a) (just index) (find-index-helper f l (+ 1 index)))]))

  (define (a) (list [args : (Array a)]) : (List a)
    (list-helper (- (array-length args) 1) args (empty)))

  (define (a) (list-helper [index : Int] [args : (Array a)] [acc : (List a)]) : (List a)
    (if (< index 0)
        acc
        (list-helper (- index 1) args (cons (array-ref args index) acc))))

  (define (a) (list-ref [l : (List a)] [n : Int]) : (Maybe a)
    (case l
      [(empty) (nothing)]
      [(cons e l) (if (= 0 n) (just e) (list-ref l (- n 1)))]))

  (define (a b) (foldl [f : (a b -> b)] [l : (List a)] [acc : b]) : b
    (case l
      [(empty) acc]
      [(cons e l)
       (foldl f l (f e acc))]))

  (define (a) (sort [l : (List a)] [< : (a a -> Boolean)]) : (List a)
    (case l
      [(empty) l]
      [(cons _ (empty)) l]
      [_ (merge-sort l < (empty) (empty))]))

  (define (a) (merge-sort [l : (List a)] [< : (a a -> Boolean)] [left : (List a)] [right : (List a)]) : (List a)
    (case l
      [(empty)
       (merge < (sort left <) (sort right <))]
      [(cons e (empty))
       (merge < (sort (cons e left) <) (sort right <))]
      [(cons e1 (cons e2 l))
       (merge-sort l < (cons e1 left) (cons e2 right))]))

  (define (a) (merge [< : (a a -> Boolean)] [left : (List a)] [right : (List a)]) : (List a)
    (case left
      [(empty) right]
      [(cons le left*)
       (case right
         [(empty) left]
         [(cons re right*)
          (if (< le re)
              (cons le (merge < left* right))
              (cons re (merge < left right*)))])]))

  (define (A B) (extract-rights [vals : (List (Either B A))]) : (Either B (List A))
    (case vals
      [(empty) (right (empty))]
      [(cons (right v) vals)
       (case (extract-rights vals)
         [(right vs) (right (cons v vs))]
         [(left v) (left v)])]
      [(cons (left v) _)
       (left v)]))

  (define (A) (interleave [vs : (List A)] [sep : A]) : (List A)
    (case vs
      [(empty) (empty)]
      [(cons v vs)
       (cons v (interleave* vs sep))]))

  (define (A) (interleave* [vs : (List A)] [sep : A]) : (List A)
    (case vs
      [(empty) (empty)]
      [(cons v vs)
       (cons sep (cons v (interleave* vs sep)))]))

  (define (a) (array->list [arr : (Array a)]) : (List a)
    (array->list* 0 arr))

  (define (a) (array->list* [offset : Int] [arr : (Array a)]) : (List a)
    (if (= offset (array-length arr))
        (empty)
        (cons (array-ref arr offset) (array->list* (+ 1 offset) arr))))

  (define (A) (list=? [mem-equal? : (A A -> Boolean)]) : ((List A) (List A) -> Boolean)
    (lambda ([l1 : (List A)] [l2 : (List A)])
      (case (tuple2 l1 l2)
        [(tuple2 (empty) (empty)) #t]
        [(tuple2 (cons e1 l1) (cons e2 l2))
         (if (mem-equal? e1 e2)
             ((list=? mem-equal?) l1 l2)
             #f)]
        [_ #f])))

  (define (A) (andmap [f : (A -> Boolean)] [l : (List A)]) : Boolean
    (case l
      [(empty) #t]
      [(cons e l)
       (if (f e) (andmap f l) #f)]))

  (define (A B) (zip [l1 : (List A)] [l2 : (List B)]) : (Maybe (List (Tuple2 A B)))
    (case (tuple2 l1 l2)
      [(tuple2 (empty) (empty))
       (just (empty))]
      [(tuple2 (cons e1 l1) (cons e2 l2))
       (case (zip l1 l2)
         [(nothing) (nothing)]
         [(just v) (just (cons (tuple2 e1 e2) v))])]
      [_ (nothing)])))
