(module regexp
  (import
    (prim
      #:types ()
      #:values (bytes-length = + >= bytes-ref array-ref make-array panic)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (maybe
      #:types ()
      #:values (just nothing)
      #:patterns (just nothing))
    (list
      #:types ()
      #:values (cons empty)
      #:patterns (cons empty)))
  (export regexp-match? empty-regexp epsilon-regexp any-regexp lit-regexp group-regexp
          alt-regexp rep-regexp)
  (types
    (define-type Regexp
      (empty-regexp)
      (epsilon-regexp)
      (bitmask-regexp [v (Array Boolean)])
      (lit-regexp [v Byte])
      (seq-regexp [l Regexp] [r Regexp])
      (alt-regexp [l Regexp] [r Regexp])
      (rep-regexp [v Regexp])
      (group-regexp [v Regexp]))
    (define-type GroupState
      (group-state
        [open (List Byte)]
        [closed (List (Tuple2 Byte Byte))]))
    (define-type RegexpCommand
      (match-command [regexp Regexp])
      (close-group-command))
    (define-type RegexpMatcherState
      (regexp-matcher-state
        [b Bytes]
        [index Byte]
        [groups GroupState]
        [current (List RegexpCommand)]
        [other (Maybe RegexpMatcherState)]))
    (define-type RegexpMatcherResult
      (regexp-matcher-result
        [index Byte]
        [other (Maybe RegexpMatcherState)])))

  (define (any-regexp) : Regexp
    (bitmask-regexp (make-array 128 #t)))

  (define (regexp-match? [r : Regexp] [b : Bytes]) : Boolean
    (regexp-match-full?/inner (initial-state r b) (bytes-length b)))

  (define (initial-state [r : Regexp] [b : Bytes]) : RegexpMatcherState
    (regexp-matcher-state b 0 (group-state (empty) (empty)) (cons (match-command r) (empty)) (nothing)))


  (define (regexp-match-full?/inner [s : RegexpMatcherState] [l : Byte]) : Boolean
    (case (run-regexp-match s)
      [(just (regexp-matcher-result i other))
       (if (= i l)
           #t
           (case other
             [(nothing) #f]
             [(just state) (regexp-match-full?/inner state l)]))]
      [(nothing) #f]))

  (define (run-regexp-match [s : RegexpMatcherState]) : (Maybe RegexpMatcherResult)
    (case s
      [(regexp-matcher-state _ i _ (empty) other)
       (just (regexp-matcher-result i other))]
      [(regexp-matcher-state b i (group-state open-groups closed-groups) (cons (close-group-command) rs) other)
       (run-regexp-match
         (case open-groups
           [(empty) (panic #"Groups don't match up correctly")]
           [(cons start open-groups)
            (regexp-matcher-state
              b i (group-state open-groups (cons (tuple2 start i) closed-groups)) rs other)]))]
      [(regexp-matcher-state b i gs (cons (match-command r) rs) other)
       (case r
         [(empty-regexp)
          (case other
            [(nothing) (nothing)]
            [(just state) (run-regexp-match state)])]
         [(epsilon-regexp)
          (run-regexp-match (regexp-matcher-state b i gs rs other))]
         [(bitmask-regexp v)
          (if (>= i (bytes-length b))
              (case other
                [(nothing) (nothing)]
                [(just state) (run-regexp-match state)])
              (if (array-ref v (bytes-ref b i))
                  (run-regexp-match (regexp-matcher-state b (+ 1 i) gs rs other))
                  (case other
                    [(nothing) (nothing)]
                    [(just state) (run-regexp-match state)])))]
         [(lit-regexp v)
          (if (>= i (bytes-length b))
              (case other
                [(nothing) (nothing)]
                [(just state) (run-regexp-match state)])
              (if (= (bytes-ref b i) v)
                  (run-regexp-match (regexp-matcher-state b (+ 1 i) gs rs other))
                  (case other
                    [(nothing) (nothing)]
                    [(just state) (run-regexp-match state)])))]
         [(seq-regexp l r)
          (run-regexp-match
            (regexp-matcher-state b i gs (cons (match-command l) (cons (match-command r) rs)) other))]
         [(alt-regexp l r)
          (run-regexp-match
            (regexp-matcher-state
              b i gs (cons (match-command l) rs)
              (just (regexp-matcher-state b i gs (cons (match-command r) rs) other))))]
         [(rep-regexp r)
          (run-regexp-match
            (regexp-matcher-state
              b i gs (cons (match-command r) (cons (match-command (rep-regexp r)) rs))
              (just (regexp-matcher-state b i gs rs other))))]
         [(group-regexp r)
          (case gs
            [(group-state open-groups closed-groups)
             (run-regexp-match
               (regexp-matcher-state
                 b i (group-state (cons i open-groups) closed-groups)
                 (cons (match-command r) (cons (close-group-command) rs)) other))])])])))
