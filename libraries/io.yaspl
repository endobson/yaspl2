(module io
  (import
    (prim
      #:types (Byte Bytes InputPort OutputPort Void)
      #:values (panic void make-bytes write-bytes read-bytes + * - bytes-length =))
    (bytes bytes-copy!))
  (export read-all-bytes write-all-bytes write-newline)
  (types)

  (define (read-all-bytes [in : InputPort]) : Bytes
    (read-all-bytes-loop in (make-bytes 1) 0))

  (define (read-all-bytes-loop [in : InputPort] [buf : Bytes] [cur-size : Byte]) : Bytes
    (let ([amount-read (read-bytes buf in cur-size (bytes-length buf))])
      (if (= amount-read 0)
          (let ([trim-bytes (make-bytes cur-size)])
             (begin
               (bytes-copy! buf 0 cur-size trim-bytes 0)
               trim-bytes))
          (let ([new-size (+ amount-read cur-size)])
            (if (= new-size (bytes-length buf))
                (let ([new-buf (make-bytes (* 2 (bytes-length buf)))])
                  (begin
                    (bytes-copy! buf 0 new-size new-buf 0)
                    (read-all-bytes-loop in new-buf new-size)))
                (read-all-bytes-loop in buf new-size))))))

  (define (write-all-bytes [bytes : Bytes] [out : OutputPort]) : Void
    (let ([amount-written (write-bytes bytes out 0 (bytes-length bytes))])
      (if (= amount-written (bytes-length bytes))
          (void)
          (panic #"write-all-bytes: Didn't write all the bytes"))))

  (define (write-newline [out : OutputPort]) : Void
    (write-all-bytes #"\n" out)))
