(module dict
  (import
    (prim
      #:types (Boolean)
      #:values ()
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty)
      #:patterns (cons empty)))
  (export)
  (types
    (define-type (Dict a b)
      (dict [eq (a a -> Boolean)] [vs (List (Node a b))]))
    (define-type (Node a b)
      (node [key a] [val b])))

  (define (a b) (make-dict [eq : (a a -> Boolean)]) : (Dict a b)
    (dict eq (empty)))

  (define (a b) (dict-ref [d : (Dict a b)] [k : a]) : (Maybe b)
    (case d
      [(dict eq nodes) (dict-ref-helper eq nodes k)]))

  (define (a b) (dict-ref-helper [eq : (a a -> Boolean)] [nodes : (List (Node a b))]  [k : a]) : (Maybe b)
    (case nodes
      [(empty) (nothing)]
      [(cons (node a b) nodes)
       (if (eq a k) (just b) (dict-ref-helper eq nodes k))]))

  (define (a b) (dict-set [d : (Dict a b)] [k : a] [v : b]) : (Dict a b)
    (case d
      [(dict eq nodes)
       (dict eq (dict-set-helper eq nodes k v))]))

  (define (a b) (dict-set-helper [eq : (a a -> Boolean)] [nodes : (List (Node a b))]
                                 [k : a] [v : b]) : (List (Node a b))
    (case nodes
      [(empty) (cons (node k v) (empty))]
      [(cons (node a b) nodes)
       (if (eq a k)
           (cons (node k v) nodes)
           (cons (node a b) (dict-set-helper eq nodes k v)))])))
