#:module (resolved-vars-language)
#:import {
  (dict)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (top-level-name)
  {(type-checked-language)
    {#:types
      FieldDescriptor
      PatternExport
      TypeExport
    }
    {#:patterns
      pattern-export
      type-export
    }
  }
  (types)
  (variant-info)
  (yaspl var)
}
(export
  (#:types CaseClause DatatypeDefinition Exports Expression FunctionDefinition FunctionArg Imports
           Module Pattern PatternExport StaticExport TypeExport ValueExport
           FieldDescriptor)
  (#:values module-definitions module-imports module-name
            function-arg-name function-arg-type
            module imports exports value-export varargs-export
            function-definition variant-accessor
            variant-constructor function-arg case-clause case-expr
            local-var-expr varargs-app-expr app-expr let-expr begin-expr
            if-expr boolean-literal bytes-literal int-literal
            lambda-expr global-var-expr
            abstraction-pattern variable-pattern bytes-pattern int-pattern)
  (#:patterns abstraction-pattern app-expr begin-expr boolean-literal
              bytes-literal bytes-pattern case-clause case-expr exports function-definition function-arg
              global-var-expr if-expr imports int-literal int-pattern lambda-expr let-expr
              local-var-expr module pattern-export type-export value-export varargs-export
              varargs-app-expr variable-pattern variant-constructor variant-accessor))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [definitions : (List FunctionDefinition)]
            [datatype-definitions : (List DatatypeDefinition)]))

  (define-type Exports
    (exports [types : (List TypeExport)]
             [values : (List ValueExport)]
             [patterns : (List PatternExport)]
             [statics : (List StaticExport)]))
  (define-type ValueExport
    (value-export [exported-name : Bytes] [top-level-name : TopLevelName] [type : Type]))
  (define-type StaticExport
    (varargs-export
      [exported-name : Bytes]
      [type-vars : (List Bytes)]
      [arg-type : Type]
      [return-type : Type]
      [cons-func : TopLevelName]
      [empty-func : TopLevelName]))
  (define-type Imports
    (imports
      [static-info : (Dict TopLevelName TopLevelSignature)]))

  (define-type FunctionDefinition
    (function-definition
      [function-name : TopLevelName]
      [closure-name : TopLevelName]
      [type-vars : (List Bytes)]
      [args : (List FunctionArg)]
      [return-type : Type]
      [next-var : VarNumber]
      [body : Expression]))
  (define-type DatatypeDefinition
    (variant-constructor
      [variant-name : Bytes]
      [function-name : TopLevelName]
      [closure-name : TopLevelName]
      [const-name : TopLevelName]
      [descriptor-name : TopLevelName]
      [variant-name-name : TopLevelName]
      [star-field-count : Int]
      [i64-field-count : Int]
      [info : VariantConstructionInfo])
    (variant-accessor
      [function-name : TopLevelName]
      [closure-name : TopLevelName]
      [field-offset : Int]
      [info : VariantDestructionInfo]))
  (define-type FunctionArg
    (function-arg
      [name : Var]
      [type : Type]))

  (define-type Expression
    (int-literal [v : Int])
    (bytes-literal [v : Bytes])
    (boolean-literal [v : Boolean])
    (local-var-expr [v : Var])
    (global-var-expr [v : TopLevelName])
    (if-expr [cond : Expression] [true : Expression] [false : Expression])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression])
    (app-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)])
    (varargs-app-expr
      [tail-position : Boolean] [cons : TopLevelName] [empty : TopLevelName]
      [args : (List Expression)])
    (let-expr [var : Var] [expr : Expression] [body : Expression])
    (lambda-expr [args : (List FunctionArg)] [type : (Maybe Type)] [body : Expression])
    (case-expr [expr : Expression] [clauses : (List CaseClause)]))

  (define-type CaseClause
    (case-clause [pattern : Pattern] [body : Expression]))

  (define-type Pattern
    (bytes-pattern [v : Bytes])
    (int-pattern [v : Int])
    (variable-pattern [v : Var])
    (abstraction-pattern [descriptor : VariantDestructionInfo] [patterns : (List Pattern)])))
