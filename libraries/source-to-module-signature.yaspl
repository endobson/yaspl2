(module source-to-module-signature
  (import
    (prim
      #:types (Bytes Boolean Byte)
      #:values (panic + * - = > bytes-length bytes-ref bytes-set! make-bytes or)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty length append map append* reverse)
      #:patterns (cons empty))
    (bytes bytes=? bytes-append)
    (either
      #:types (Either)
      #:values (right left)
      #:patterns (right left))
    (environment
      #:types (Environment VariantInfo VarReference)
      #:values (global-value-name environment-tag-ref environment-value-ref)
      #:patterns ())
    (dict
      #:types (Dict)
      #:values (make-dict dict-ref dict-set)
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values ()
      #:patterns (just nothing))
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (join-list
      #:types ()
      #:values (jl->list empty-jl append-jl snoc-jl)
      #:patterns ())
    (source-language
      #:types (Module FunctionDefinition Expression Imports Import TypeDefinition VariantDefinition
               VariantField CaseClause Pattern)
      #:values (module-name module-definitions module-types
                function-definition-name
                type-definition-variants)
      #:patterns (module imports import function-definition bytes-literal byte-literal boolean-literal
                  let-expr var-expr app-expr if-expr begin-expr varargs-app-expr
                  variant-definition type-definition
                  variant-field case-expr case-clause ignore-pattern variable-pattern
                  abstraction-pattern bytes-pattern byte-pattern)))
  (export module-signature-name module-signature-value-exports module-signature-pattern-exports
          module-signature module->module-signature)
  (types
    (define-type ModuleSignature
      (module-signature
        [name Bytes]
        [value-exports (Dict Bytes Bytes)]
        [pattern-exports (Dict Bytes Byte)])))


  (define (module->module-signature [mod : Module] [env : Environment]) : ModuleSignature
    (case mod
      [(module name _ exports types _)
       (module-signature
         name
         (make-exports exports env (make-dict bytes=?))
         (make-exported-patterns types env (make-dict bytes=?)))]))

  (define (make-exports [exports : (List Bytes)] [env : Environment] [acc : (Dict Bytes Bytes)])
    : (Dict Bytes Bytes)
    (case exports
      [(empty) acc]
      [(cons export exports)
       (case (environment-value-ref env export)
         ;; TODO handle this case better (seperate out value and type exports)
         [(nothing)
          (make-exports exports env acc)]
         [(just exported-name)
          (make-exports
            exports
            env
            (dict-set
              acc
              export
              (global-value-name exported-name)))])]))


  (define (make-exported-patterns
            [types : (List TypeDefinition)]
            [env : Environment]
            [acc : (Dict Bytes Byte)]) : (Dict Bytes Byte)
    (case types
      [(empty) acc]
      [(cons (type-definition _ _ variants) types)
       (make-exported-patterns
         types
         env
         (make-exported-patterns/variants variants env acc))]))

  (define (make-exported-patterns/variants
            [variants : (List VariantDefinition)]
            [env : Environment]
            [acc : (Dict Bytes Byte)]) : (Dict Bytes Byte)
    (case variants
      [(empty) acc]
      [(cons (variant-definition name _) variants)
       (make-exported-patterns/variants
         variants
         env
         (dict-set acc name (environment-tag-ref env name)))]))
  )
