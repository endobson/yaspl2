(module send-udp-message
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort Void)
      #:values (sendto make-bytes bytes-set! write-bytes quotient
                remainder = void)
      #:patterns ())
    (io write-line write-all-bytes)
    (numbers integer->decimal-bytes)
    (bytes subbytes)
    (udp
      #:types (UdpSocket UdpAddress)
      #:values (make-udp-socket udp-socket-recv! udp-socket-bind udp-address
                udp-socket-send-to)
      #:patterns (udp-address))
    (tuples
      #:types ()
      #:values ()
      #:patterns (tuple2))
    (ip
      #:types ()
      #:values (ipv4-address ipv4-address-octet1 ipv4-address-octet2 ipv4-address-octet3 ipv4-address-octet4
                ipv4-address->bytes)
      #:patterns ()))
  (export)
  (types)

  (define (make-client-sock-addr) : Bytes
    (let ([bytes (make-bytes 16)])
      (let ([ip-addr (ipv4-address 127 0 0 1)])
        (let ([port 1026])
          (begin
            (bytes-set! bytes 0 0)
            (bytes-set! bytes 1 2) ;; Family: AF_INET
            ;; Port 1026
            (bytes-set! bytes 2 (quotient port 256))
            (bytes-set! bytes 3 (remainder port 256))
            ;; IP addr = 0.0.0.0
            (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
            (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
            (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
            (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
            ;; ZERO
            (bytes-set! bytes  8 0)
            (bytes-set! bytes  9 0)
            (bytes-set! bytes 10 0)
            (bytes-set! bytes 11 0)
            (bytes-set! bytes 12 0)
            (bytes-set! bytes 13 0)
            (bytes-set! bytes 14 0)
            (bytes-set! bytes 15 0)
            bytes)))))


  (define (make-server-sock-addr) : Bytes
    (let ([bytes (make-bytes 16)])
      (let ([ip-addr (ipv4-address 127 0 0 1)])
        (let ([port 1025])
          (begin
            (bytes-set! bytes 0 0)
            (bytes-set! bytes 1 2) ;; Family: AF_INET
            ;; Port 1025
            (bytes-set! bytes 2 (quotient port 256))
            (bytes-set! bytes 3 (remainder port 256))
            ;; IP address
            (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
            (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
            (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
            (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
            ;; ZERO
            (bytes-set! bytes  8 0)
            (bytes-set! bytes  9 0)
            (bytes-set! bytes 10 0)
            (bytes-set! bytes 11 0)
            (bytes-set! bytes 12 0)
            (bytes-set! bytes 13 0)
            (bytes-set! bytes 14 0)
            (bytes-set! bytes 15 0)
            bytes)))))

  (define (make-blank-sock-addr) : Bytes
    (make-bytes 16))

  (define (run-recv [sock : Byte] [buf : Bytes] [stdout : OutputPort]) : Void
    (case (udp-socket-recv! sock buf)
      [(tuple2 len remote-addr)
       (case remote-addr
         [(udp-address ip port)
          (if (= len 0)
              (void)
              (begin
                (write-all-bytes #"From " stdout)
                (write-all-bytes (ipv4-address->bytes ip) stdout)
                (write-all-bytes #":" stdout)
                (write-all-bytes (integer->decimal-bytes port) stdout)
                (write-all-bytes #"; " stdout)
                (write-bytes buf stdout 0 len)
                (udp-socket-send-to sock remote-addr (subbytes buf 0 len))
                (run-recv sock buf stdout)))])]))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (let ([sock (make-udp-socket)])
      (begin
        (udp-socket-bind sock (udp-address (ipv4-address 127 0 0 1) 1026))
        ;(let ([sock-addr (make-server-sock-addr)])
        ;  (sendto sock #"cba" 3 0 sock-addr (bytes-length sock-addr)))
        ;(let ([sock-addr (make-server-sock-addr)])
        ;  (sendto sock #"dbf" 3 0 sock-addr (bytes-length sock-addr)))
        (run-recv sock (make-bytes 1024) stdout)
        0))))
