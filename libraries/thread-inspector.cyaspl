(module thread-inspector

  (define (get-back-trace [return-addrs : Bytes]) : Int
    (let ([base-pointer (get-base-pointer)])
      (stack-loop base-pointer return-addrs 0 (quotient (bytes-length return-addrs) 8))))

  (define (stack-loop
            [base-pointer : U64]
            [return-addrs : Bytes]
            [num-entries : U64]
            [remaining-entries : U64]) : U64
      (if (or (= base-pointer 0) (= remaining-entries 0))
          num-entries
          (let ([next-base-pointer (deref base-pointer)])
            (let ([return-addr ])
              (begin
                (bytes-set! return-addrs (* 8 num-entries) (deref (+ base-pointer 8)))
                (stack-loop loop next-base-pointer return-addrs (+ num-entries 1) (- remaining-entries 1))))))))


