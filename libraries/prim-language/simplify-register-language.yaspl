#:module (simplify-register-language)
#:import {
  (block-number)
  (bytes)
  (data indexed-set)
  (data lifted-primitives)
  (dict)
  (list)
  (maybe)
  (numbers)
  (panic)
  (prim)
  (prim-language variant-info)
  (register-language)
  (register-language-used-vars)
  (set)
  (tuples)
  (yaspl math-operations)
  (yaspl var)
}
(export
  (#:types StaticInfo)
  (#:values simplify-function-definition static-info side-effect-free-instruction?
            find-reachable-blocks))
(types
  (define-type AbstractValue
    (av-negated [v : Var])
    (av-comparison [op : ComparisonBinOp] [left : Var] [right : Var])
    (av-memory-comparison [size : Var] [v1 : Var] [v2 : Var])
    (av-int [val : Int])
    (av-symbol [val : Bytes])
    (av-variant [tag : U8])
    (av-unknown))
  (define-type KnownVarCondition
    (known-var-condition [v : Var] [negated : Boolean]))

  (define-type StaticInfo
    (static-info
      [known-byte-constants : (Dict Bytes Bytes)])))

(define (simplify-function-definition
          [name : Bytes]
          [f : FunctionDefinition]
          [static-info : StaticInfo])
  : FunctionDefinition
  (match-define (function-definition calling-convention blocks next-var-number next-block-number) f)
  (match-define abstract-values (compute-abstract-values static-info blocks))
  (match-define new-blocks
    (remove-dead-blocks calling-convention
      (collapse-trivial-blocks
        (remove-dead-instructions
          (optimize-self-tail-calls name calling-convention
            (optimize-constants abstract-values
              (optimize-conditional-jumps abstract-values blocks)))))))
  (function-definition calling-convention new-blocks next-var-number next-block-number))

(define (optimize-conditional-jumps
          [abstract-values : (Dict Var AbstractValue)]
          [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (IndexedSet BasicBlock BlockNumber)
  (indexed-set-value-map blocks
    (lambda ([b : BasicBlock])
      (optimize-conditional-jumps/block abstract-values b))))

(define (optimize-conditional-jumps/block
          [abstract-values : (Dict Var AbstractValue)]
          [b : BasicBlock]) : BasicBlock
  (match-define (basic-block block-num args instructions terminal) b)
  (case terminal
    [(cond-jump (negated-variant-tag-condition v tag) t f)
     (case (abstract-value-resolve abstract-values v)
       [(av-variant actual-tag)
        (basic-block block-num args instructions
                     (if (= (u8->s64 tag) (u8->s64 actual-tag))
                         (jump f)
                         (jump t)))]
       [_ b])]
    [(cond-jump c t f)
     (case
       (ann (Maybe KnownVarCondition)
         (case c
           [(var-condition v) (just (known-var-condition v #f))]
           [(negated-var-condition v) (just (known-var-condition v #t))]
           [_ (nothing)]))
       [(nothing) b]
       [(just (known-var-condition v negated?))
        (case (abstract-value-resolve abstract-values v)
          [(av-comparison c l r)
           (basic-block block-num args instructions
             (cond-jump
               (comparison-condition (if negated? (negate-comparison-bin-op c) c)
                                     (compare-s64 (compare-mem-arg-val l) (var-or-s32-var r)))
               t f))]
          [(av-memory-comparison size v1 v2)
           (basic-block block-num args instructions
             (cond-jump
               (memory-compare-condition negated? size v1 v2)
               t f))]
          [_ b])])]
    [_ b]))

(define (remove-dead-instructions [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (IndexedSet BasicBlock BlockNumber)
  (match-define used-vars (compute-used-vars blocks))
  (indexed-set-value-map blocks
    (lambda ([b : BasicBlock])
      (remove-dead-instructions/block b used-vars))))

(define (remove-dead-instructions/block [b : BasicBlock] [used-vars : (Set Var)]) : BasicBlock
  (match-define (basic-block block-num args instructions terminal) b)
  (basic-block
    block-num
    args
    (filter
      (lambda ([i : Instruction])
        (if (side-effect-free-instruction? i)
            (case (output-var i)
              [(just v) (set-member? used-vars v)]
              [(nothing) (panic/boolean #"Pure instruction didn't have output var")])
            #t))
      instructions)
    terminal))

(define (side-effect-free-instruction? [i : Instruction]) : Boolean
  (case i
    [(function-allocate-inst _ _) #f]
    [(closure-allocate-inst _ _) #f]
    [(variant-allocate-inst _ _ _ _) #f]
    [(memory-compare-inst _ _ _ _) #f]
    [(pointer-set!-inst _ _ _ _) #f]
    [(pointer-ref-inst _ _ _ _) #t]
    [(variant-ref-inst _ _ _) #t]
    [(int-literal _ _) #t]
    [(symbol-address-inst _ _) #t]
    [(bin-op-inst _ _ _ _) #t]
    [(unary-op-inst _ _ _) #t]))

(define (optimize-constants
          [abstract-values : (Dict Var AbstractValue)]
          [blocks : (IndexedSet BasicBlock BlockNumber)]) : (IndexedSet BasicBlock BlockNumber)
  (indexed-set-value-map blocks
    (lambda ([b : BasicBlock])
      (optimize-constants/block abstract-values b))))

(define (optimize-constants/block
          [abstract-values : (Dict Var AbstractValue)]
          [b : BasicBlock]) : BasicBlock
  (match-define (basic-block block-num args instructions terminal) b)
  (basic-block
    block-num
    args
    (map
      (lambda ([i : Instruction])
        (case i
          [(pointer-ref-inst v size pointer (scaled-pointer-offset amount scale fixed-offset))
           (case (abstract-value-resolve abstract-values amount)
             [(av-int amount)
              (match-define scale-amount
                (case scale
                  [(one-byte-scale) 1]
                  [(eight-byte-scale) 8]))
              (match-define offset (+ (* amount scale-amount) fixed-offset))
              (pointer-ref-inst v size pointer (fixed-pointer-offset offset))]
             [_ i])]
          [(pointer-set!-inst size pointer (scaled-pointer-offset amount scale fixed-offset) val)
           (case (abstract-value-resolve abstract-values amount)
             [(av-int amount)
              (match-define scale-amount
                (case scale
                  [(one-byte-scale) 1]
                  [(eight-byte-scale) 8]))
              (match-define offset (+ (* amount scale-amount) fixed-offset))
              (pointer-set!-inst size pointer (fixed-pointer-offset offset) val)]
             [_ i])]
          [_
            (case (output-var i)
              [(nothing) i]
              [(just v)
               (case (abstract-value-resolve abstract-values v)
                 [(av-int val)
                  (int-literal v val)]
                 [_ i])])]))
      instructions)
    (case terminal
      [(cond-jump cond t f)
       (case cond
         [(comparison-condition op (compare-s64 l (var-or-s32-var r)))
          (case (abstract-value-resolve abstract-values r)
            [(av-int rv)
             (case (maybe-s32 rv)
               [(just (lifted-s32 rv))
                (cond-jump (comparison-condition op (compare-s64 l (var-or-s32-s32 rv))) t f)]
               [_ terminal])]
            [_ terminal])]
         [_ terminal])]
      [_ terminal])))

;; TODO Use better flow analysis across blocks
(define (compute-abstract-values
          [static-info : StaticInfo]
          [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (Dict Var AbstractValue)
  (indexed-set-fold
    blocks
    (lambda ([b : BasicBlock] [acc : (Dict Var AbstractValue)])
      (case b
        [(basic-block _ args instructions _terminal)
         (foldl
           (lambda ([arg : Var] [acc : (Dict Var AbstractValue)])
             (dict-set acc arg (av-unknown)))
           args
           (foldl
             (lambda ([i : Instruction] [acc : (Dict Var AbstractValue)])
               (case i
                 [(int-literal var v)
                  (dict-set acc var (av-int v))]
                 [(bin-op-inst var (comparison-bin-op c) left right)
                  (dict-set acc var (av-comparison c left right))]
                 [(bin-op-inst var (numeric-bin-op c) left right)
                  (dict-set acc var
                    (case (tuple2 (dict-ref acc left) (dict-ref acc right))
                      [(tuple2 (just (av-int lv)) (just (av-int rv)))
                       (case c
                         [(add-op)
                          (av-int (+ lv rv))]
                         [(sub-op)
                          (av-int (- lv rv))]
                         [(mult-op)
                          (av-int (* lv rv))]
                         [_
                          (av-unknown)])]
                      [_
                       (av-unknown)]))]
                 [(memory-compare-inst var size v1 v2)
                  (dict-set acc var (av-memory-comparison size v1 v2))]
                 [(symbol-address-inst var v)
                  (dict-set acc var (av-symbol v))]
                 [(unary-op-inst var (boolean-not) v)
                  (dict-set acc var (av-negated v))]
                 [(variant-allocate-inst var (variant-info tag _) _tag-var _fields)
                  (dict-set acc var (av-variant tag))]
                 [(pointer-ref-inst var (eight-byte-mem-op) pointer (fixed-pointer-offset 8))
                  (match-define av
                    (case (dict-ref acc pointer)
                      [(just (av-symbol sym))
                       (case (dict-ref (static-info-known-byte-constants static-info) sym)
                         [(just val)
                          (av-int (bytes-length val))]
                         [_ (av-unknown)])]
                      [_ (av-unknown)]))
                  (dict-set acc var av)]
                 [_
                  (case (output-var i)
                    [(nothing) acc]
                    [(just v) (dict-set acc v (av-unknown))])]))
             instructions
             acc))]))
    (ann (Dict Var AbstractValue) (make-dict var-cmp))))

(define (abstract-value-resolve [abstract-values : (Dict Var AbstractValue)] [v : Var])
  : AbstractValue
  (case (dict-ref/panic abstract-values v)
    [(av-negated var)
     (case (abstract-value-resolve abstract-values var)
       [(av-comparison op left right)
        (av-comparison (negate-comparison-bin-op op) left right)]
       ;; TODO support negated memory comparison
       [_ (av-unknown)])]
    [val val]))

(define (optimize-self-tail-calls
          [function-name : Bytes]
          [calling-convention : CallingConvention]
          [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (IndexedSet BasicBlock BlockNumber)
  (case calling-convention
    [(closure-convention _ block-number 0)
     (indexed-set-value-map blocks
       (lambda ([b : BasicBlock])
         (optimize-self-tail-calls/block function-name block-number b)))]
    [(plain-function-convention _ block-number)
     (indexed-set-value-map blocks
       (lambda ([b : BasicBlock])
         (optimize-self-tail-calls/block function-name block-number b)))]
    [(closure-convention _ _ _)
     blocks]))


(define (optimize-self-tail-calls/block
          [function-name : Bytes]
          [entry-block : BlockNumber]
          [block : BasicBlock]) : BasicBlock
  (match-define (basic-block block-num args instructions term) block)
  (case term
    [(tail-call (direct-call called-function) called-args)
     (if (bytes=? called-function function-name)
         (basic-block block-num args instructions (jump (jump-target entry-block called-args)))
         block)]
    [_ block]))

(define (collapse-trivial-blocks [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (IndexedSet BasicBlock BlockNumber)
  (match-define trivial-blocks (find-trivial-blocks blocks))
  (indexed-set-value-map blocks
    (lambda ([b : BasicBlock])
      (collapse-trivial-blocks/block b trivial-blocks))))

(define (find-trivial-blocks [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (Dict BlockNumber (Tuple2 (List Var) JumpTarget))
  (indexed-set-fold
    blocks
    (lambda ([b : BasicBlock] [acc : (Dict BlockNumber (Tuple2 (List Var) JumpTarget))])
      : (Dict BlockNumber (Tuple2 (List Var) JumpTarget))
      (case (find-trivial-blocks/block b)
        [(nothing) acc]
        [(just mapping) (dict-add acc (basic-block-number b) mapping)]))
    (ann
      (Dict BlockNumber (Tuple2 (List Var) JumpTarget))
      (make-dict block-number-cmp))))

(define (find-trivial-blocks/block [b : BasicBlock])
  : (Maybe (Tuple2 (List Var) JumpTarget))
  (match-define (basic-block _block-num args instructions terminal) b)
  (case instructions
    [(cons _ _) (nothing)]
    [(empty)
     (case terminal
       [(jump jt)
        (just (tuple2 args jt))]
       [_ (nothing)])]))

(define (collapse-trivial-blocks/block
          [b : BasicBlock]
          [trivial-blocks : (Dict BlockNumber (Tuple2 (List Var) JumpTarget))])
  : BasicBlock
  (match-define (basic-block block-num args instructions terminal) b)
  (case terminal
    [(jump jt)
     (basic-block block-num args instructions
                  (jump (collapse-trivial-blocks/jump-target jt trivial-blocks)))]
    [(cond-jump c t f)
     (basic-block block-num args instructions
                  (cond-jump
                    c
                    (collapse-trivial-blocks/jump-target t trivial-blocks)
                    (collapse-trivial-blocks/jump-target f trivial-blocks)))]
    [_ b]))


(define (collapse-trivial-blocks/jump-target
          [jt : JumpTarget]
          [trivial-blocks : (Dict BlockNumber (Tuple2 (List Var) JumpTarget))])
  : JumpTarget
  (match-define (jump-target block-num args) jt)
  (case (dict-ref trivial-blocks block-num)
    [(nothing) jt]
    [(just (tuple2 block-vars new-jt))
     (case (zip block-vars args)
       [(nothing) (panic #"Block vars don't line up.")]
       [(just var-args)
        (match-define subst
          (ann
            (Dict Var Var)
            (dict-add-all (make-dict var-cmp) var-args)))
        (collapse-trivial-blocks/jump-target
          (case new-jt
            [(jump-target block-num args)
             (jump-target block-num
               (map (lambda ([v : Var])
                      (case (dict-ref subst v)
                        [(nothing) v]
                        [(just new) new])) args))])
          trivial-blocks)])]))

(define (remove-dead-blocks
          [calling-convention : CallingConvention]
          [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (IndexedSet BasicBlock BlockNumber)
  (match-define reachable-block-numbers
    (find-reachable-blocks (calling-convention-entry-block calling-convention) blocks))
  (indexed-set-filter
    blocks
    (lambda ([b : BasicBlock])
      (set-member? reachable-block-numbers (basic-block-number b)))))

(define (find-reachable-blocks
          [entry : BlockNumber]
          [blocks : (IndexedSet BasicBlock BlockNumber)])
  : (Set BlockNumber)
  (find-reachable-blocks* (varargs list entry) blocks (make-set block-number-cmp)))

(define (find-reachable-blocks*
          [to-visit : (List BlockNumber)]
          [blocks : (IndexedSet BasicBlock BlockNumber)]
          [visited : (Set BlockNumber)])
  : (Set BlockNumber)
  (case to-visit
    [(empty) visited]
    [(cons num to-visit)
     (if (set-member? visited num)
         (find-reachable-blocks* to-visit blocks visited)
         (case (indexed-set-ref blocks num)
           [(nothing) (panic #"Bad block num")]
           [(just (basic-block _ _ _ term))
            (find-reachable-blocks* (append (terminal-next-blocks term) to-visit)
                                    blocks
                                    (set-add visited num))]))]))
