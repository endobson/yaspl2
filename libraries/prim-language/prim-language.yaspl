(module prim-language
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (list
      #:types (List)
      #:values ()
      #:patterns ()))
  (export
    #:types (Module FunctionDefinition Statement Expr BinOp)
    #:values (module function-definition return var-expr)
    #:patterns (module))
  (types
    (define-type Module
      (module [name : Bytes] [definitions : (List FunctionDefinition)]))
    (define-type FunctionDefinition
      (function-definition [name : Bytes] [args : (List Bytes)] [body : (List Statement)]))

    (define-type Statement
      (return [e : Expr])
      (declaration [var : Bytes] [value : Expr])
      (assignment [var : Bytes] [value : Expr])
      (while [cond : Expr] [body : (List Statement)])
      (if [cond : Expr] [then : (List Statement)] [else : (List Statement)]))

    (define-type BinOp
      (plus)
      (mul)
      (sub)
      (and)
      (or)
      (xor)
      (less-than)
      (less-than-or-equal)
      (greater-than)
      (greater-than-or-equal)
      (equal)
      (not))

    (define-type Expr
      (var-expr [var : Bytes])
      (bin-op-expr [op : BinOp] [left : Expr] [right : Expr]))))
