#:module prim-language
#:import {
  list {
    #:types
      List
  }
  prim {
    #:types
      Bytes
      Int
  }
}
(export
  #:types (Module FunctionDefinition Statement Expr BinOp)
  #:values (module function-definition return var-expr bin-op-expr declaration if-statement
                   int-literal function-definition-body plus mul sub and or assignment while
                   less-than less-than-or-equal greater-than greater-than-or-equal equal)
  #:patterns (module))
(types
  (define-type Module
    (module [name : Bytes] [definitions : (List FunctionDefinition)]))
  (define-type FunctionDefinition
    (function-definition [name : Bytes] [args : (List Bytes)] [body : (List Statement)]))

  (define-type Statement
    (return [e : Expr])
    (declaration [var : Bytes] [value : Expr])
    (assignment [var : Bytes] [value : Expr])
    (while [cond : Expr] [body : (List Statement)])
    (if-statement [cond : Expr] [then : (List Statement)] [else : (List Statement)]))

  (define-type BinOp
    (plus)
    (mul)
    (sub)
    (and)
    (or)
    (less-than)
    (less-than-or-equal)
    (greater-than)
    (greater-than-or-equal)
    (equal))

  (define-type Expr
    (var-expr [var : Bytes])
    (int-literal [var : Int])
    (bin-op-expr [op : BinOp] [left : Expr] [right : Expr])))
