#:module prim-language
#:import {
  list {
    #:types
      List
  }
  prim {
    #:types
      Bytes
      Int
  }
  syscalls {
    #:types
      Syscall
  }
}
(export
  #:types (Module FunctionDefinition Statement Expr BinOp ComparisonOp Type)
  #:values (module function-definition return var-expr bin-op-expr declaration if-statement
            int-literal function-definition-body plus mul sub and or assignment while
            less-than less-than-or-equal greater-than greater-than-or-equal equal not-equal
            comparison-bin-op logical-bin-op numeric-bin-op syscall-expr allocate-array-expr
            pointer-assignment pointer-ref-expr array-ref-expr pointer-type int64-type boolean-type
            array-type int8-type)
  #:patterns (module))
(types
  (define-type Module
    (module [name : Bytes] [definitions : (List FunctionDefinition)]))
  (define-type FunctionDefinition
    (function-definition [name : Bytes] [args : (List Bytes)] [body : (List Statement)]))

  (define-type Statement
    (return [e : Expr])
    (declaration [var : Bytes] [value : Expr])
    (pointer-assignment [pointer : Expr] [value : Expr])
    (assignment [var : Bytes] [value : Expr])
    (while [cond : Expr] [body : (List Statement)])
    (if-statement [cond : Expr] [then : (List Statement)] [else : (List Statement)]))

  (define-type ComparisonOp
    (less-than)
    (less-than-or-equal)
    (greater-than)
    (greater-than-or-equal)
    (equal)
    (not-equal))
  (define-type LogicalOp
    (and)
    (or))
  (define-type NumericOp
    (plus)
    (mul)
    (sub))

  (define-type BinOp
    (comparison-bin-op [op : ComparisonOp])
    (logical-bin-op [op : LogicalOp])
    (numeric-bin-op [op : NumericOp]))

  (define-type Expr
    (var-expr [var : Bytes])
    (pointer-ref-expr [pointer : Expr])
    (array-ref-expr [type : Type] [pointer : Expr] [offset : Expr])
    (allocate-array-expr [type : Type] [count : Expr])
    (syscall-expr [syscall : Syscall] [args : (List Expr)])
    (int-literal [val : Int])
    (cast-expr [conversion : Conversion] [expr : Expr])
    (bin-op-expr [op : BinOp] [left : Expr] [right : Expr]))

  (define-type Type
    (pointer-type [t : Type])
    (array-type [t : Type])
    (int64-type)
    (int8-type)
    (boolean-type))

  (define-type Conversion
    (truncate-unsigned-int64->unsigned-int8)
    (unsigned-int8->unsigned-int64)))
