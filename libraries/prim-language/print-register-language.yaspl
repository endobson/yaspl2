#:module (print-register-language)
#:import {
  (bytes)
  (dict)
  (either)
  (join-list)
  (list)
  (numbers)
  (prim)
  (prim-language) {
    #:types
      BinOp
    #:patterns
      comparison-bin-op
      logical-bin-op
      numeric-bin-op
  }
  (register-language)
  (syscalls)
  (yaspl math-operations)
  (yaspl var)
}
(export
  #:types ()
  #:values (print-function)
  #:patterns ())
(types)

(define (print-function [f : FunctionDefinition]) : Bytes
  (case f
    [(function-definition name _ blocks _ _)
     (bytes-append
       (jl->list
         (append-jl
           (varargs join-list
              name
              #"\n")
           (concat-jl
             (dict-map blocks print-basic-block)))))]))

(define (print-basic-block [index : Int] [b : BasicBlock]) : (JoinList Bytes)
  (case b
    [(basic-block args instructions terminal)
     (varargs append-jl*
       (varargs join-list
         #"block: "
         (integer->decimal-bytes index)
         #"(")
       (concat-jl (interleave (map print-var args) (single-jl #", ")))
       (single-jl #")\n")
       (concat-jl (map print-instruction instructions))
       (print-terminal terminal))]))

(define (print-instruction [i : Instruction]) : (JoinList Bytes)
  (case i
    [(bin-op-inst var op left right)
     (varargs append-jl*
       (print-var var)
       (varargs join-list #" = (" (print-bin-op op) #" ")
       (print-var left)
       (single-jl #" ")
       (print-var right)
       (single-jl #")\n"))]
    [(unary-op-inst var op val)
     (varargs append-jl*
       (print-var var)
       (varargs join-list #" = (" (print-unary-op op) #" ")
       (print-var val)
       (single-jl #")\n"))]
    [(numeric-op-immediate-inst var op left v)
     (varargs append-jl*
       (print-var var)
       (varargs join-list #" = (" (numeric-bin-op->bytes op) #" ")
       (print-var left)
       (single-jl #" ")
       (single-jl (integer->decimal-bytes (s32->s64 v)))
       (single-jl #")\n"))]
    [(comparison-op-immediate-inst var op left right)
     (varargs append-jl*
       (print-var var)
       (varargs join-list #" = (" (comparison-bin-op->bytes op) #" ")
       (print-var left)
       (single-jl #" ")
       (single-jl (integer->decimal-bytes (s32->s64 right)))
       (single-jl #")\n"))]
    [(int-literal var v)
     (append-jl
       (print-var var)
       (varargs join-list #" = " (integer->decimal-bytes v) #"\n"))]
    [(function-allocate-inst var v)
     (varargs append-jl*
       (print-var var)
       (single-jl #" = function-allocate(")
       (print-var v)
       (single-jl #")\n"))]
    [(heap-allocate-inst var v)
     (varargs append-jl*
       (print-var var)
       (single-jl #" = heap-allocate(")
       (print-var v)
       (single-jl #")\n"))]
    [(memory-compare-inst var size v1 v2)
     (varargs append-jl*
       (print-var var)
       (single-jl #" = compare-memory(")
       (print-var size)
       (single-jl #", ")
       (print-var v1)
       (single-jl #", ")
       (print-var v2)
       (single-jl #")\n"))]
    [(symbol-address-inst var sym)
     (varargs append-jl*
       (print-var var)
       (single-jl #" = symbol(")
       (single-jl sym)
       (single-jl #")\n"))]
    [(function-call-inst var f args)
     (varargs append-jl*
       (case f
         [(direct-call f)
          (varargs append-jl*
            (print-var var)
            (single-jl #" = call[")
            (single-jl f)
            (single-jl #"]"))]
         [(indirect-function-call f)
          (varargs append-jl*
            (print-var var)
            (single-jl #" = call[")
            (print-var f)
            (single-jl #"]"))]
         [(closure-call c)
          (varargs append-jl*
            (print-var var)
            (single-jl #" = closure-call[")
            (print-var c)
            (single-jl #"]"))]
         [(syscall s)
          (varargs join-list #" = syscall[" (syscall-name s) #"]")])
       (single-jl #"(")
       (concat-jl (interleave (map print-var args) (single-jl #", ")))
       (single-jl #")\n"))]
    [(fill-memory-inst _ ptr offset val amount)
     (varargs append-jl*
       (single-jl #"*(")
       (print-var ptr)
       (single-jl #" + ")
       (single-jl (integer->decimal-bytes offset))
       (single-jl #") [x ")
       (print-var ptr)
       (single-jl #"] := ")
       (print-var val)
       (single-jl #"\n"))]
    [(pointer-set!-inst _ ptr offset val)
     (varargs append-jl*
       (single-jl #"*(")
       (print-var ptr)
       (single-jl #" + ")
       (single-jl (integer->decimal-bytes offset))
       (single-jl #") := ")
       (print-var val)
       (single-jl #"\n"))]
    [(pointer-ref-inst var _ ptr (fixed-pointer-offset offset))
     (varargs append-jl*
       (print-var var)
       (single-jl #" = *(")
       (print-var ptr)
       (single-jl #" + ")
       (single-jl (integer->decimal-bytes offset))
       (single-jl #")\n"))]
    [(pointer-ref-inst var _ ptr (scaled-pointer-offset index scale offset))
     (varargs append-jl*
       (print-var var)
       (single-jl #" = *(")
       (print-var ptr)
       (single-jl #" + (")
       (print-var index)
       (single-jl #" * ")
       (single-jl (case scale
                    [(one-byte-scale) #"1"]
                    [(eight-byte-scale) #"8"]))
       (single-jl #") + ")
       (single-jl (integer->decimal-bytes offset))
       (single-jl #")\n"))]))


(define (print-unary-op [op : UnaryOp]) : Bytes
  (case op
    [(truncate-unsigned-int64->unsigned-int8) #"truncate"]
    [(boolean-not) #"not"]))

(define (print-bin-op [op : BinOp]) : Bytes
  (case op
    [(logical-bin-op op)
     (logical-bin-op->bytes op)]
    [(numeric-bin-op op)
     (numeric-bin-op->bytes op)]
    [(comparison-bin-op op)
     (comparison-bin-op->bytes op)]))

(define (print-var [v : Var]) : (JoinList Bytes)
  (single-jl (var->bytes v)))

(define (print-terminal [t : Terminal]) : (JoinList Bytes)
  (case t
    [(return var)
     (snoc-jl (cons-jl #"return " (print-var var)) #"\n")]
    [(halt)
     (single-jl #"halt\n")]
    [(jump block-num args)
     (varargs append-jl*
       (single-jl #"jump ")
       (single-jl (integer->decimal-bytes block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var args) (single-jl #", ")))
       (single-jl #")\n"))]
    [(tail-call f args)
     (varargs append-jl*
       (case f
         [(direct-call f)
          (varargs append-jl*
            (single-jl #"call[")
            (single-jl f)
            (single-jl #"]"))]
         [(indirect-function-call f)
          (varargs append-jl*
            (single-jl #"call[")
            (print-var f)
            (single-jl #"]"))]
         [(closure-call c)
          (varargs append-jl*
            (single-jl #"closure-call[")
            (print-var c)
            (single-jl #"]"))]
         [(syscall s)
          (varargs join-list #"syscall[" (syscall-name s) #"]")])
       (single-jl #"(")
       (concat-jl (interleave (map print-var args) (single-jl #", ")))
       (single-jl #")\n"))]
    [(cond-jump (var-condition var) t-block-num t-args f-block-num f-args)
     (varargs append-jl*
       (single-jl #"cond-jump ")
       (print-var var)
       (single-jl #" ")
       (single-jl (integer->decimal-bytes t-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #") ")
       (single-jl (integer->decimal-bytes f-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #")\n"))]
    [(cond-jump (negated-var-condition var) t-block-num t-args f-block-num f-args)
     (varargs append-jl*
       (single-jl #"cond-jump (not ")
       (print-var var)
       (single-jl #") ")
       (single-jl (integer->decimal-bytes t-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #") ")
       (single-jl (integer->decimal-bytes f-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #")\n"))]
    [(cond-jump (comparison-condition op left right-imm) t-block-num t-args f-block-num f-args)
     (varargs append-jl*
       (single-jl #"cond-jump (")
       (single-jl (comparison-bin-op->bytes op))
       (single-jl #" ")
       (case left
         [(compare-mem-arg-val v) (print-var v)]
         [(compare-mem-arg-ptr v) (cons-jl #"*" (print-var v))])
       (single-jl #" ")
       (case right-imm
         [(left v) (print-var v)]
         [(right imm) (single-jl (integer->decimal-bytes (s32->s64 imm)))])
       (single-jl #") ")
       (single-jl (integer->decimal-bytes t-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #") ")
       (single-jl (integer->decimal-bytes f-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #")\n"))]
    [(cond-jump (memory-compare-condition negated size v1 v2) t-block-num t-args f-block-num f-args)
     (varargs append-jl*
       (single-jl #"cond-jump (compare-memory-")
       (single-jl (if negated #"!= " #"= "))
       (print-var size)
       (single-jl #" ")
       (print-var v1)
       (single-jl #" ")
       (print-var v2)
       (single-jl #") ")
       (single-jl (integer->decimal-bytes t-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #") ")
       (single-jl (integer->decimal-bytes f-block-num))
       (single-jl #"(")
       (concat-jl (interleave (map print-var t-args) (single-jl #", ")))
       (single-jl #")\n"))]

))
