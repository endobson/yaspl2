(module print-register-language
  (import
    (bytes bytes-append)
    (dict
      #:types ()
      #:values (dict-map)
      #:patterns ())
    (join-list
      #:types (JoinList)
      #:values (append-jl append-jl* concat-jl jl->list join-list single-jl)
      #:patterns ())
    (list
      #:types ()
      #:values (interleave map)
      #:patterns ())
    (numbers integer->decimal-bytes)
    (prim
      #:types (Bytes Int)
      #:values ()
      #:patterns ())
    (prim-language
      #:types (BinOp)
      #:values ()
      #:patterns (and equal greater-than greater-than-or-equal less-than less-than-or-equal mul not or
                  plus sub xor))
    (register-language
      #:types (BasicBlock FunctionDefinition Instruction Terminal Var)
      #:values ()
      #:patterns (basic-block bin-op-inst function-definition return var)))
  (export
    #:types ()
    #:values (print-function)
    #:patterns ())
  (types)

  (define (print-function [f : FunctionDefinition]) : Bytes
    (case f
      [(function-definition name blocks)
       (bytes-append
         (jl->list
           (append-jl
             (varargs join-list
                name
                #"\n")
             (concat-jl
               (dict-map blocks print-basic-block)))))]))

  (define (print-basic-block [index : Int] [b : BasicBlock]) : (JoinList Bytes)
    (case b
      [(basic-block args instructions terminal)
       (varargs append-jl*
         (varargs join-list
           #"block: "
           (integer->decimal-bytes index)
           #"(")
         (concat-jl (interleave (map print-var args) (single-jl #", ")))
         (single-jl #")\n")
         (concat-jl (map print-instruction instructions))
         (print-terminal terminal))]))

  (define (print-instruction [i : Instruction]) : (JoinList Bytes)
    (case i
      [(bin-op-inst var op left right)
       (varargs append-jl*
         (print-var var)
         (varargs join-list #" = (" (print-bin-op op) #" ")
         (print-var left)
         (single-jl #" ")
         (print-var right)
         (single-jl #")\n"))]))

  (define (print-bin-op [op : BinOp]) : Bytes
    (case op
      [(plus) #"+"]
      [(mul) #"*"]
      [(sub) #"-"]
      [(and) #"and"]
      [(or) #"or"]
      [(xor) #"xor"]
      [(not) #"not"]
      [(less-than) #"<"]
      [(less-than-or-equal) #"<="]
      [(greater-than) #">"]
      [(greater-than-or-equal) #">="]
      [(equal) #"="]))

  (define (print-var [v : Var]) : (JoinList Bytes)
    (case v
      [(var name counter)
       (varargs join-list name #"_" (integer->decimal-bytes counter))]))

  (define (print-terminal [t : Terminal]) : (JoinList Bytes)
    (case t
      [(return (var name counter))
       (varargs join-list #"return " name #"_" (integer->decimal-bytes counter) #"\n")])))
