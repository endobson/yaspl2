(module print-register-language
  (import
    (prim
      #:types (Bytes Int)
      #:values (panic)
      #:patterns ())
    (bytes bytes-append)
    (join-list
      #:types (JoinList)
      #:values (join-list append-jl jl->list concat-jl list->jl single-jl append-jl*)
      #:patterns ())
    (numbers integer->decimal-bytes)
    (list
      #:types ()
      #:values (length build-list list-ref interleave map)
      #:patterns ())
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (prim-language
      #:types (BinOp)
      #:values ()
      #:patterns (plus mul sub and or xor less-than less-than-or-equal
                greater-than greater-than-or-equal equal not))
    (register-language
      #:types (FunctionDefinition Terminal BasicBlock Instruction)
      #:values ()
      #:patterns (function-definition return basic-block bin-op-inst)))
  (export
    #:types ()
    #:values (print-function)
    #:patterns ())
  (types)

  (define (print-function [f : FunctionDefinition]) : Bytes
    (case f
      [(function-definition name blocks)
       (bytes-append
         (jl->list
           (append-jl
             (varargs join-list
                name
                #"\n")
             (concat-jl
               (build-list (length blocks)
                           (lambda ([i : Int])
                             (case (list-ref blocks i)
                               [(nothing) (panic #"bad index")]
                               [(just b) (print-basic-block i b)])))))))]))

  (define (print-basic-block [index : Int] [b : BasicBlock]) : (JoinList Bytes)
    (case b
      [(basic-block args instructions terminal)
       (varargs append-jl*
         (varargs join-list
           #"block: "
           (integer->decimal-bytes index)
           #"(")
         (list->jl (interleave args #", "))
         (single-jl #")\n")
         (concat-jl (map print-instruction instructions))
         (print-terminal terminal))]))

  (define (print-instruction [i : Instruction]) : (JoinList Bytes)
    (case i
      [(bin-op-inst var op left right)
       (varargs join-list var #" = (" (print-bin-op op) #" " left #" " right #")\n")]))

  (define (print-bin-op [op : BinOp]) : Bytes
    (case op
      [(plus) #"+"]
      [(mul) #"*"]
      [(sub) #"-"]
      [(and) #"and"]
      [(or) #"or"]
      [(xor) #"xor"]
      [(not) #"not"]
      [(less-than) #"<"]
      [(less-than-or-equal) #"<="]
      [(greater-than) #">"]
      [(greater-than-or-equal) #">="]
      [(equal) #"="]))

  (define (print-terminal [t : Terminal]) : (JoinList Bytes)
    (case t
      [(return var)
       (varargs join-list #"return " var #"\n")])))
