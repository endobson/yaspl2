#:module simplify-lowered-register-language
#:import {
  boolean {
    #:values
      not
  }
  dict {
    #:types
      Dict
    #:values
      dict-filter-map
      dict-ref
      dict-values
  }
  either {
    #:patterns
      left
      right
  }
  list {
    #:values
      filter
      foldl
    #:patterns
      empty
  }
  lowered-register-language {
    #:types
      BasicBlock
      BlockMap
      FunctionDefinition
      Instruction
      Terminal
    #:values
      basic-block
      block-map->unvalidated-block-map
      block-map-blocks
      block-map-predecessors
      cond-jump
      fall-through
      function-definition
      jump
      return
      unvalidated-block-map-filter
      unvalidated-block-map-map
      validate-block-map
    #:patterns
      basic-block
      cond-jump
      fall-through
      function-definition
      jump
      move
      return
  }
  maybe {
    #:types
      Maybe
    #:values
      just
      nothing
    #:patterns
      just
      nothing
  }
  prim {
    #:types
      Boolean
      Int
    #:values
      =
      panic
  }
  set {
    #:types
      Set
    #:values
      make-set
      set-add
      set-count
      set-member?
  }
  set-multi-dict {
    #:values
      set-multi-dict-ref/empty
  }
}

(export
  #:types ()
  #:values (simplify-function-definition)
  #:patterns ())
(types)

(define (Reg) (simplify-function-definition
                [f : (FunctionDefinition Reg)]
                [reg=? : (Reg Reg -> Boolean)])
  : (FunctionDefinition Reg)
  (match-define (function-definition name extras entry blocks) f)
  (function-definition
    name
    extras
    entry
    (add-unambiguous-fall-through
      (remove-unused-blocks
        entry
        (collapse-trivial-blocks
          (remove-redundant-moves reg=? blocks))))))

;; TODO support collapsing trivial fall-through blocks
(define (Reg) (collapse-trivial-blocks [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (let ([replacements (find-trivial-blocks (block-map-blocks blocks))])
    (case (validate-block-map
            (unvalidated-block-map-map
              (block-map->unvalidated-block-map blocks)
              (lambda ([int : Int] [b : (BasicBlock Reg)])
                (case b
                  [(basic-block insts term)
                   (basic-block insts (collapse-trivial-blocks/terminal term replacements))]))))
      [(left msg) (panic msg)]
      [(right v) v])))


(define (Reg) (collapse-trivial-blocks/terminal
                [terminal : (Terminal Reg)]
                [replacements : (Dict Int Int)])
  : (Terminal Reg)
 (case terminal
   [(jump i)
    (jump (collapse-trivial-blocks/jump i replacements))]
   [(fall-through i)
    (collapse-trivial-blocks/fall-through i replacements)]
   [(return r)
    (return r)]
   [(cond-jump c t f)
    (cond-jump
      c
      (collapse-trivial-blocks/jump t replacements)
      (collapse-trivial-blocks/jump f replacements))]))

(define (Reg) (collapse-trivial-blocks/fall-through
                [block : Int]
                [replacements : (Dict Int Int)])
  : (Terminal Reg)
  (case (dict-ref replacements block)
    [(nothing) (fall-through block)]
    [(just new-block)
     (jump (collapse-trivial-blocks/jump new-block replacements))]))

(define (collapse-trivial-blocks/jump
          [block : Int]
          [replacements : (Dict Int Int)])
  : Int
  (case (dict-ref replacements block)
    [(nothing) block]
    [(just new-block)
     (collapse-trivial-blocks/jump new-block replacements)]))

(define (Reg) (find-trivial-blocks
                [blocks : (Dict Int (BasicBlock Reg))])
  : (Dict Int Int)
  (dict-filter-map
    blocks
    (lambda ([key : Int] [b : (BasicBlock Reg)]) : (Maybe Int)
      (case b
        [(basic-block (empty) (jump target))
         (just target)]
        [_ (nothing)]))))


(define (Reg) (remove-unused-blocks [entry-block : Int] [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (let ([live-blocks (set-add (find-live-blocks (block-map-blocks blocks)) entry-block)])
    (case (validate-block-map
            (unvalidated-block-map-filter
              (block-map->unvalidated-block-map blocks)
              (lambda ([key : Int] [b : (BasicBlock Reg)]) : Boolean
                (set-member? live-blocks key))))
      [(left msg) (panic msg)]
      [(right v) v])))

(define (Reg) (find-live-blocks
                [blocks : (Dict Int (BasicBlock Reg))])
  : (Set Int)
  (foldl
    (lambda ([b : (BasicBlock Reg)] [acc : (Set Int)])
      (case b
        [(basic-block _ (jump target))
         (set-add acc target)]
        [(basic-block _ (fall-through target))
         (set-add acc target)]
        [(basic-block _ (cond-jump _ t f))
         (set-add (set-add acc t) f)]
        [(basic-block _ (return _))
         acc]))
    (dict-values blocks)
    (make-set =)))

(define (Reg) (remove-redundant-moves
                [reg=? : (Reg Reg -> Boolean)]
                [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (case (validate-block-map
          (unvalidated-block-map-map
            (block-map->unvalidated-block-map blocks)
            (lambda ([index : Int] [b : (BasicBlock Reg)])
              (case b
                [(basic-block instructions terminal)
                 (basic-block
                   (filter
                     (lambda ([i : (Instruction Reg)])
                       (useful-move? i reg=?))
                     instructions)
                   terminal)]))))
    [(left msg) (panic msg)]
    [(right v) v]))

(define (Reg) (useful-move? [i : (Instruction Reg)] [reg=? : (Reg Reg -> Boolean)]) : Boolean
  (case i
    [(move r1 r2)
     (not (reg=? r1 r2))]
    [_ #t]))

(define (Reg) (add-unambiguous-fall-through [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (case (validate-block-map
          (unvalidated-block-map-map
            (block-map->unvalidated-block-map blocks)
            (lambda ([int : Int] [b : (BasicBlock Reg)]) : (BasicBlock Reg)
              (case b
                [(basic-block insts (jump target))
                 (if (= 1 (set-count (set-multi-dict-ref/empty
                                       (block-map-predecessors blocks) target)))
                     (basic-block insts (fall-through target))
                     b)]
                [_ b]))))
    [(left msg) (panic msg)]
    [(right v) v]))
