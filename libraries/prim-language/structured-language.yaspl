#:module (structured-language)
#:import {
  (block-number)
  (data indexed-set)
  (list)
  (join-list)
  (maybe)
  (prim)
  (prim-language variant-info)
  (yaspl math-operations)
  (top-level-name)
  (yaspl var)
}
(export
  (#:types FunctionDefinition Expression Condition UnaryOp 
           FunctionKind MemoryOperationSize CompareArgs CompareMemArg PointerOffset PointerOffsetScale
           VarOrS32 VarOrS8)
  (#:values function-definition
            break-expr
            block-expr
            begin-expr
            ; bin-op-inst
            int-literal 
            var-condition comparison-condition negated-var-condition
            negated-variant-tag-condition
            ;pointer-set!-inst pointer-ref-inst variant-ref-inst
            eight-byte-mem-op four-byte-mem-op two-byte-mem-op one-byte-mem-op
            ;unary-op-inst truncate-unsigned-int64->unsigned-int8 boolean-not
            closure-call ;variant-allocate-inst closure-allocate-inst memory-compare-condition
            direct-call
            compare-s64 compare-s8 compare-mem-arg-val compare-mem-arg-ptr fixed-pointer-offset
            scaled-pointer-offset one-byte-scale eight-byte-scale
            var-or-s32-s32 var-or-s32-var var-or-s8-var var-or-s8-s8
            )
  (#:patterns function-definition 
              break-expr
              block-expr
              begin-expr
              direct-call closure-call 
              eight-byte-mem-op four-byte-mem-op two-byte-mem-op one-byte-mem-op
              int-literal ;bin-op-inst unary-op-inst pointer-set!-inst
              ;pointer-ref-inst variant-ref-inst memory-compare-inst
              ;variant-allocate-inst closure-allocate-inst
              var-condition negated-var-condition comparison-condition memory-compare-condition
              negated-variant-tag-condition
              truncate-unsigned-int64->unsigned-int8 boolean-not
              compare-s64 compare-s8 compare-mem-arg-val compare-mem-arg-ptr
              fixed-pointer-offset scaled-pointer-offset one-byte-scale eight-byte-scale
              var-or-s32-s32 var-or-s32-var var-or-s8-var var-or-s8-s8))
(types
  (define-type FunctionDefinition
    (function-definition
      [args : (List Var)]
      [free-vars : (List Var)]
      [next-var : VarNumber]
      [body : Expression]))

  (define-type Expression
    (int-literal [v : Int])
    ;;; binop : (v2 :: v1 :: ...)
    ;(bin-op-inst [op : BinOp])
    ;(unary-op-inst [op : UnaryOp])
    ;(pointer-set!-inst [size : MemoryOperationSize] [offset : PointerOffset])
    ;(pointer-ref-inst [size : MemoryOperationSize] [offset : PointerOffset])
    ;(variant-ref-inst [field-index : Int])
    ;;; memcmp : (size :: v2 :: v1 :: ...)
    ;(memory-compare-inst)
    ;(read-global-inst [name : TopLevelName])
    ;;; alloc-closure : (fields :: ...)
    ;(closure-allocate-inst [num-fields : Int])
    ;;; alloc-var : (tag :: fields :: ...)
    ;(variant-allocate-inst [info : VariantInfo] [num-fields : Int])
    ;;; call : (closure? :: args :: ...)
    ;(call-inst [f : FunctionKind] [num-args : Int])
    ;(loop [insts : (JoinList Expression)])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression])
    (block-expr [name : Var] [body : Expression])
    (break-expr [name : Var] [v : Expression])
    ; (cond-break [c : Condition] [index : Int])

    )

  (define-type PointerOffset
    (fixed-pointer-offset [offset : Int])
    (scaled-pointer-offset [scale : PointerOffsetScale] [fixed-offset : Int]))

  (define-type PointerOffsetScale
    (one-byte-scale)
    (eight-byte-scale))

  (define-type FunctionKind
    (direct-call [f : TopLevelName])
    (closure-call))

  (define-type UnaryOp
    (truncate-unsigned-int64->unsigned-int8)
    (boolean-not))

  (define-type MemoryOperationSize
    (one-byte-mem-op)
    (two-byte-mem-op)
    (four-byte-mem-op)
    (eight-byte-mem-op))

  (define-type Condition
    (var-condition [name : Var])
    (negated-var-condition [name : Var])
    (negated-variant-tag-condition [name : Var] [tag : U8])
    (comparison-condition [op : ComparisonBinOp] [args : CompareArgs])
    (memory-compare-condition [negated? : Boolean] [size : Var] [v1 : Var] [v2 : Var]))
  (define-type CompareArgs
    (compare-s64 [left : CompareMemArg] [right : VarOrS32])
    (compare-s8 [left : CompareMemArg] [right : VarOrS8]))
  (define-type CompareMemArg
    (compare-mem-arg-val [v : Var])
    (compare-mem-arg-ptr [v : Var]))
  (define-type VarOrS32
    (var-or-s32-var [v : Var])
    (var-or-s32-s32 [v : S32]))
  (define-type VarOrS8
    (var-or-s8-var [v : Var])
    (var-or-s8-s8 [v : S8]))
  )
