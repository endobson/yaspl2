(module prim-to-register
  (import
    (bytes bytes=?)
    (dict
      #:types (Dict)
      #:values (dict-add dict-add-all dict-keys dict-ref make-dict)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty foldl map reverse)
      #:patterns (cons empty))
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (prim
      #:types (Bytes Int)
      #:values (+ = panic)
      #:patterns ())
    (prim-language
      #:types (Expr (FunctionDefinition p:FunctionDefinition) Statement)
      #:values ((function-definition-body p:function-definition-body))
      #:patterns ((assignment p:assignment)
                  bin-op-expr
                  (declaration p:declaration)
                  (function-definition p:function-definition)
                  (if-statement p:if-statement)
                  (return p:return)
                  var-expr
                  (while p:while)))
    (register-language
      #:types (BasicBlock (FunctionDefinition r:FunctionDefinition) Instruction Terminal Var)
      #:values (basic-block
                bin-op-inst
                (function-definition r:function-definition)
                (return r:return)
                var)
      #:patterns ())
    (set
      #:types (Set)
      #:values (make-set set->list set-add set-intersect)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2)))
  (export
    #:types ()
    #:values (convert-function)
    #:patterns ())
  (types
    (define-type Environment
      (environment [vars : (Dict Bytes Var)] [mutated-vars : (Set Bytes)]))
    (define-type State
      (state [var-counter : Int] [block-counter : Int]))
    (define-type Accumulator
      (accumulator
        [next-block : PendingBasicBlock]
        [blocks : (Dict Int BasicBlock)]))
    (define-type PendingBasicBlock
      (pending-basic-block
        [index : Int]
        [cur-args : (List Var)]
        [reversed-instructions : (List Instruction)])))

  (define (convert-function [f : p:FunctionDefinition]) : r:FunctionDefinition
    (match-define (p:function-definition name args body) f)
    (match-define (tuple2 freshened-args state)
      (map-state fresh-name args (initial-state)))
    (match-define env
      (add-all-args freshened-args (initial-environment (mutated-vars f))))
    (match-define (tuple2 block-number state) (fresh-block-number state))
    (match-define (tuple2 (accumulator (pending-basic-block _ _ instructions) blocks)
                          (tuple2 state environment))
      (convert-statements body
                          (start-block block-number (map new-arg freshened-args) (make-dict =))
                          env
                          state))
    (case instructions
      [(cons _ _) (panic #"Incorrectly terminated function")]
      [_ (r:function-definition name blocks)]))

  (define (mutated-vars [f : p:FunctionDefinition]) : (Set Bytes)
    (foldl mutated-vars* (p:function-definition-body f) (make-set bytes=?)))

  (define (mutated-vars* [s : Statement] [acc : (Set Bytes)]) : (Set Bytes)
    (case s
      [(p:return _) acc]
      [(p:declaration _ _)  acc]
      [(p:assignment v _) (set-add acc v)]
      [(p:while _ body) (foldl mutated-vars* body acc)]
      [(p:if-statement _ then else)
       (foldl mutated-vars* else (foldl mutated-vars* then acc))]))

  (define (initial-state) : State
    (state 0 0))
  (define (new-arg [fresh-arg : (Tuple2 Bytes Var)]) : Var
    (case fresh-arg
      [(tuple2 _ v) v]))

  (define (initial-environment [mutated-vars : (Set Bytes)]) : Environment
    (environment (make-dict bytes=?) mutated-vars))

  (define (env-ref [env : Environment] [name : Bytes]) : Var
    (case (dict-ref (environment-vars env) name)
      [(nothing) (panic #"unbound variable")]
      [(just v) v]))

  (define (env-ref* [env : Environment] [names : (List Bytes)]) : (List Var)
    (map (lambda ([name : Bytes]) (env-ref env name)) names))

  (define (env-add [env : Environment] [name : Bytes] [var : Var]) : Environment
    (case env
      [(environment vars mutated-vars)
       (environment (dict-add vars name var) mutated-vars)]))

  (define (fresh-name [v : Bytes] [s : State]) : (Tuple2 (Tuple2 Bytes Var) State)
    (case s
      [(state var-counter block-counter)
       (tuple2
         (tuple2 v (var v var-counter))
         (state (+ 1 var-counter) block-counter))]))

  (define (fresh-block-number [s : State]) : (Tuple2 Int State)
    (case s
      [(state var-counter block-counter)
       (tuple2
         block-counter
         (state var-counter (+ 1 block-counter)))]))

  (define (get-current-mutated-vars [env : Environment]) : (List Bytes)
    (case env
      [(environment vars mutated-vars)
       (set->list (set-intersect (dict-keys vars) mutated-vars))]))

  (define (start-block [block-num : Int] [args : (List Var)] [blocks : (Dict Int BasicBlock)]) : Accumulator
    (accumulator (pending-basic-block block-num args (empty)) blocks))


  (define (a b s) (map-state [f : (a s -> (Tuple2 b s))] [l : (List a)] [s : s]) : (Tuple2 (List b) s)
    (case l
      [(empty) (tuple2 (empty) s)]
      [(cons e l)
       (case (f e s)
         [(tuple2 v s)
          (case (map-state f l s)
            [(tuple2 vs s)
             (tuple2 (cons v vs) s)])])]))

  (define (add-all-args [args : (List (Tuple2 Bytes Var))] [env : Environment]) : Environment
    (case env
      [(environment vars mutated-vars)
       (environment (dict-add-all vars args) mutated-vars)]))


  (define (convert-statements
            [statements : (List Statement)]
            [acc : Accumulator]
            [env : Environment]
            [state : State])
    : (Tuple2 Accumulator (Tuple2 State Environment))
    (case statements
      [(empty) (tuple2 acc (tuple2 state env))]
      [(cons statement statements)
       (case (convert-statement statement acc env state)
         [(tuple2 acc (tuple2 state env))
          (convert-statements statements acc env state)])]))

  (define (add-terminal [a : Accumulator] [term : Terminal]) : (Dict Int BasicBlock)
    (case a
      [(accumulator (pending-basic-block n args rev-instructions) blocks)
       (dict-add blocks n (basic-block args (reverse rev-instructions) term))]))

  (define (convert-statement
            [statement : Statement]
            [acc : Accumulator]
            [env : Environment]
            [state : State])
    : (Tuple2 Accumulator (Tuple2 State Environment))
    (case statement
      [(p:return expr)
       (match-define (tuple2 (tuple2 temp acc) state)
         (convert-expr expr acc env state))
       (match-define (tuple2 block-num state) (fresh-block-number state))
       (tuple2
         (start-block block-num (empty) (add-terminal acc (r:return temp)))
         (tuple2 state env))]
      [(p:declaration name expr)
       (match-define (tuple2 (tuple2 temp acc) state)
         (convert-expr expr acc env state))
       (tuple2 acc (tuple2 state (env-add env name temp)))]
      [(p:if-statement cond then else)
       ;; TODO make if statements actually work
       (tuple2 acc (tuple2 state env))]
      [_ (panic #"Unhandled statement")]))

  (define (add-instruction [a : Accumulator] [inst : Instruction]) : Accumulator
    (case a
      [(accumulator (pending-basic-block n args rev-instructions) blocks)
       (accumulator (pending-basic-block n args (cons inst rev-instructions)) blocks)]))

  (define (convert-expr
            [expr : Expr]
            [acc : Accumulator]
            [env : Environment]
            [state : State])
    : (Tuple2 (Tuple2 Var Accumulator) State)
    (case expr
      [(var-expr name)
       (tuple2 (tuple2 (env-ref env name) acc) state)]
      [(bin-op-expr op left right)
       (case (convert-expr left acc env state)
         [(tuple2 (tuple2 left-res acc) state)
          (case (convert-expr right acc env state)
            [(tuple2 (tuple2 right-res acc) state)
             (case (fresh-name #"tmp" state)
               [(tuple2 (tuple2 _ name) state)
                (tuple2
                  (tuple2
                    name
                    (add-instruction acc (bin-op-inst name op left-res right-res)))
                  state)])])])])))
