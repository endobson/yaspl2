#:module (prim-to-register)
#:import {
  (block-number)
  (bytes)
  (data indexed-set)
  (dict)
  (list)
  (machine-code)
  (maybe)
  (panic)
  (prim)
  {(prim-language)
    {#:types
      Expr
      [FunctionDefinition p:FunctionDefinition]
      MemoryType
      Statement
      Type
    }
    {#:values
      numeric-bin-op
    }
    {#:patterns
      allocate-array-expr
      array-index-expr
      [assignment p:assignment]
      bin-op-expr
      call-expr
      cast-expr
      [declaration p:declaration]
      [function-definition p:function-definition]
      [if-statement p:if-statement]
      int-literal
      int64-type
      int8-type
      [pointer->unsigned-int64 p:pointer->unsigned-int64]
      [pointer-assignment p:pointer-assignment]
      pointer-ref-expr
      pointer-type
      [refine-pointer p:refine-pointer]
      [return p:return]
      syscall-expr
      [truncate-unsigned-int64->unsigned-int8 p:truncate-unsigned-int64->unsigned-int8]
      undetermined-pointer-type
      [unrefine-pointer p:unrefine-pointer]
      [unsigned-int64->pointer p:unsigned-int64->pointer]
      [unsigned-int8->unsigned-int64 p:unsigned-int8->unsigned-int64]
      value-type
      var-expr
      [while p:while]
    }
  }
  (prim-language register-language-builder)
  {(register-language)
    {#:types
      [FunctionDefinition r:FunctionDefinition]
    }
    {#:values
      basic-block-number
      bin-op-inst
      cond-jump
      direct-call
      eight-byte-mem-op
      fixed-pointer-offset
      function-allocate-inst
      function-call-inst
      [function-definition r:function-definition]
      halt
      [int-literal r:int-literal]
      jump
      jump-target
      negated-var-condition
      plain-function-convention
      [pointer-ref-inst r:pointer-ref-inst]
      pointer-set!-inst
      [return r:return]
      syscall
      [truncate-unsigned-int64->unsigned-int8 r:truncate-unsigned-int64->unsigned-int8]
      unary-op-inst
    }
  }
  {(set)
    {#:types
      Set
    }
    {#:values
      make-set
      set->list
      set-add
    }
  }
  (syscalls)
  (tuples)
  (yaspl math-operations)
  (yaspl var)
}
(export
  (#:values convert-function))
(types
  (define-type Environment
    (environment
      [vars : (Dict Bytes Var)]
      [abi : SystemAbi])))

(define (convert-function [f : p:FunctionDefinition] [abi : SystemAbi]) : r:FunctionDefinition
  (match-define (p:function-definition name args _return-type body) f)
  (match-define acc (block-accumulator (initial-var-number) (initial-block-number)
                                       (make-indexed-set basic-block-number block-number-cmp)))
  ;; TODO Make this less hacky
  (match-define (tuple2 freshened-args acc)
    (map-state fresh-name* (map extract-arg-name args) acc))
  (match-define env (add-all-args freshened-args (environment (make-dict bytes-cmp) abi)))
  (match-define (tuple2 start-block-num acc) (fresh-block-number* acc))
  (match-define acc (start-block start-block-num (map new-arg freshened-args) acc))
  (match-define (tuple2 acc _env)
    (convert-statements body acc env))
  (match-define (block-accumulator next-var next-block blocks) (add-terminal acc (halt)))

  (r:function-definition
    name
    (plain-function-convention (length args) start-block-num)
    blocks next-var next-block))

(define (extract-arg-name [v : (Tuple2 Bytes Type)]) : Bytes
  (case v [(tuple2 v _) v]))

(define (mutated-vars/statements [ss : (List Statement)]) : (Set Bytes)
  (foldl mutated-vars* ss (make-set bytes-cmp)))

(define (mutated-vars* [s : Statement] [acc : (Set Bytes)]) : (Set Bytes)
  (case s
    [(p:return _) acc]
    [(p:declaration _ _)  acc]
    [(p:pointer-assignment _ _) acc]
    [(p:assignment v _) (set-add acc v)]
    [(p:while _ body) (foldl mutated-vars* body acc)]
    [(p:if-statement _ then else)
     (foldl mutated-vars* else (foldl mutated-vars* then acc))]))

(define (env-ref [env : Environment] [name : Bytes]) : Var
  (case (dict-ref (environment-vars env) name)
    [(nothing) (panic #"unbound variable")]
    [(just v) v]))

(define (env-ref* [env : Environment] [names : (List Bytes)]) : (List Var)
  (map (lambda ([name : Bytes]) (env-ref env name)) names))

(define (env-add [env : Environment] [name : Bytes] [var : Var]) : Environment
  (case env
    [(environment vars abi)
     (environment (dict-add vars name var) abi)]))

(define (env-replace [env : Environment] [name : Bytes] [var : Var]) : Environment
  (case env
    [(environment vars abi)
     (environment (dict-replace vars name var) abi)]))


(define [a b s] (map-state [f : (a s -> (Tuple2 b s))] [l : (List a)] [s : s]) : (Tuple2 (List b) s)
  (case l
    [(empty) (tuple2 (empty) s)]
    [(cons e l)
     (case (f e s)
       [(tuple2 v s)
        (case (map-state f l s)
          [(tuple2 vs s)
           (tuple2 (cons v vs) s)])])]))

(define (add-all-args [args : (List (Tuple2 Bytes Var))] [env : Environment]) : Environment
  (case env
    [(environment vars abi)
     (environment (dict-add-all vars args) abi)]))

(define (replace-all-args [args : (List (Tuple2 Bytes Var))] [env : Environment]) : Environment
  (case env
    [(environment vars abi)
     (environment (dict-replace-all vars args) abi)]))

(define (get-differing-vars [base-env : Environment] [env1 : Environment] [env2 : Environment])
  : (List Bytes)
  (match-define vars (environment-vars base-env))
  (filter
    (lambda ([name : Bytes]) : Boolean
      (not (var=? (env-ref env1 name) (env-ref env2 name))))
    (set->list (dict-keys vars))))

(define (convert-statements
          [statements : (List Statement)]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 Accumulator Environment)
  (case statements
    [(empty) (tuple2 acc env)]
    [(cons statement statements)
     (case (convert-statement statement acc env)
       [(tuple2 acc env)
        (convert-statements statements acc env)])]))
(define (convert-statement
          [statement : Statement]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 Accumulator Environment)
  (case statement
    [(p:return expr)
     (match-define (tuple2 temp acc)
       (convert-expr #"ret" expr acc env))
     (match-define (tuple2 block-num acc) (fresh-block-number acc))
     (tuple2
       (start-block block-num (empty) (add-terminal acc (r:return temp)))
       env)]
    [(p:declaration name expr)
     (match-define (tuple2 temp acc)
       (convert-expr name expr acc env))
     (tuple2 acc (env-add env name temp))]
    [(p:if-statement cond then else)
     (match-define (tuple2 branch-var acc)
       (convert-expr #"cond" cond acc env))
     (match-define (tuple2 t-block-num acc) (fresh-block-number acc))
     (match-define (tuple2 f-block-num acc) (fresh-block-number acc))
     (match-define acc
       (add-terminal acc (cond-jump (negated-var-condition branch-var)
                                    (jump-target f-block-num (empty))
                                    (jump-target t-block-num (empty)))))

     (match-define (tuple2 acc t-env)
       (convert-statements then (start-block t-block-num (empty) acc) env))
     (match-define (tuple2 t-block acc) (split-accumulator acc))
     (match-define (tuple2 acc f-env)
       (convert-statements else (start-block f-block-num (empty) acc) env))
     (match-define (tuple2 f-block acc) (split-accumulator acc))

     (match-define mut-vars (get-differing-vars env t-env f-env))
     (match-define t-mut-vars (env-ref* t-env mut-vars))
     (match-define f-mut-vars (env-ref* f-env mut-vars))

     (match-define (tuple2 c-block-num acc) (fresh-block-number* acc))

     (match-define acc
       (add-terminal*
         (add-terminal* acc t-block (jump (jump-target c-block-num t-mut-vars)))
         f-block (jump (jump-target c-block-num f-mut-vars))))
     (match-define (tuple2 fresh-mut-args acc)
       (map-state fresh-name* mut-vars acc))

     (tuple2
       (start-block c-block-num (map new-arg fresh-mut-args) acc)
       (replace-all-args fresh-mut-args env))]
    [(p:assignment name expr)
     (match-define (tuple2 temp acc)
       (convert-expr name expr acc env))
     (tuple2 acc (env-replace env name temp))]
    [(p:pointer-assignment pointer expr)
     (match-define (tuple2 temp-pointer acc)
       (convert-expr #"ptr" pointer acc env))
     (match-define (tuple2 temp-expr acc)
       (convert-expr #"val" expr acc env))
     (tuple2
       (add-instruction acc (pointer-set!-inst (eight-byte-mem-op) temp-pointer
                                               (fixed-pointer-offset 0) temp-expr))
       env)]
    [(p:while cond body)
     (match-define (tuple2 header-block-num acc) (fresh-block-number acc))
     (match-define mut-vars (set->list (mutated-vars/statements body)))
     (match-define acc
       (add-terminal acc (jump (jump-target header-block-num (env-ref* env mut-vars)))))

     (match-define (tuple2 fresh-mut-args acc)
       (map-state fresh-name* mut-vars acc))

     (match-define acc (start-block header-block-num (map new-arg fresh-mut-args) acc))
     (match-define header-env (replace-all-args fresh-mut-args env))

     (match-define (tuple2 branch-var acc)
       (convert-expr #"cond" cond acc header-env))
     (match-define (tuple2 header-block acc) (split-accumulator acc))

     (match-define (tuple2 body-block-num acc) (fresh-block-number* acc))
     (match-define (tuple2 acc body-env)
       (convert-statements
         body
         (start-block body-block-num (empty) acc)
         header-env))
     (match-define (tuple2 body-block acc) (split-accumulator acc))

     (match-define (tuple2 after-block-num acc) (fresh-block-number* acc))

     (match-define acc
       (add-terminal*
         (add-terminal* acc header-block (cond-jump (negated-var-condition branch-var)
                                                    (jump-target after-block-num (empty))
                                                    (jump-target body-block-num (empty))))
         body-block (jump (jump-target header-block-num (env-ref* body-env mut-vars)))))

     (tuple2
       (start-block after-block-num (empty) acc)
       header-env)
     ]))

(define (convert-exprs
          [base-name : Bytes]
          [exprs : (List Expr)]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 (List Var) Accumulator)
  (case exprs
    [(empty) (tuple2 (empty) acc)]
    [(cons expr exprs)
     (case (convert-expr base-name expr acc env)
       [(tuple2 var acc)
        (case (convert-exprs base-name exprs acc env)
          [(tuple2 vars acc)
           (tuple2 (cons var vars) acc)])])]))

(define (convert-expr
          [base-name : Bytes]
          [expr : Expr]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 Var Accumulator)
  (case expr
    [(var-expr name)
     (tuple2 (env-ref env name) acc)]
    [(int-literal v)
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))
     (tuple2
       name
       (add-instruction acc (r:int-literal name v)))]
    [(bin-op-expr op left right)
     (case (convert-expr #"tmp" left acc env)
       [(tuple2 left-res acc)
        (case (convert-expr #"tmp" right acc env)
          [(tuple2 right-res acc)
           (case (fresh-name base-name acc)
             [(tuple2 (tuple2 _ name) acc)
              (tuple2
                name
                (add-instruction acc (bin-op-inst name op left-res right-res))) ])])])]
    [(allocate-array-expr type e)
     (case (convert-expr #"count" e acc env)
       [(tuple2 count-res acc)
        (case (fresh-name #"size" acc)
          [(tuple2 (tuple2 _ size-name) acc)
           (case (fresh-name #"count-mul" acc)
             [(tuple2 (tuple2 _ count-mul-name) acc)
              (case (fresh-name base-name acc)
                [(tuple2 (tuple2 _ name) acc)
                 (tuple2 name
                         (add-instruction
                           (add-instruction
                             (add-instruction
                               acc
                               (r:int-literal size-name (type->size type)))
                             (bin-op-inst count-mul-name (numeric-bin-op (mult-op)) count-res size-name))
                           (function-allocate-inst name count-mul-name)))])])])])]
    [(pointer-ref-expr pointer)
     (case (convert-expr #"ptr" pointer acc env)
       [(tuple2 p acc)
        (case (fresh-name base-name acc)
          [(tuple2 (tuple2 _ name) acc)
           (tuple2 name (add-instruction acc (r:pointer-ref-inst name (eight-byte-mem-op) p
                                                                 (fixed-pointer-offset 0))))])])]
    [(array-index-expr type ptr offset)
     (case (convert-expr #"ptr" ptr acc env)
       [(tuple2 ptr acc)
        (case (convert-expr #"off" offset acc env)
          [(tuple2 offset acc)
           (case (fresh-name #"size" acc)
             [(tuple2 (tuple2 _ size-name) acc)
              (case (fresh-name #"offset-mul" acc)
                [(tuple2 (tuple2 _ offset-mul-name) acc)
                 (case (fresh-name base-name acc)
                   [(tuple2 (tuple2 _ name) acc)
                    (tuple2 name
                            (add-instruction
                              (add-instruction
                                (add-instruction
                                  acc
                                  (r:int-literal size-name (memory-type->size type)))
                                (bin-op-inst offset-mul-name (numeric-bin-op (mult-op)) offset size-name))
                              (bin-op-inst name (numeric-bin-op (add-op)) ptr offset-mul-name)))])])])])])]

    [(syscall-expr s args)
     (case (convert-exprs #"arg" args acc env)
       [(tuple2 vars acc)
        (case (fresh-name base-name acc)
          [(tuple2 (tuple2 _ name) acc)
           (match-define syscall-num (syscall-number s (environment-abi env)))
           (tuple2 name (add-instruction acc (function-call-inst name (syscall syscall-num) vars)))])])]
    [(call-expr f args)
     (case (convert-exprs #"arg" args acc env)
       [(tuple2 vars acc)
        (case (fresh-name base-name acc)
          [(tuple2 (tuple2 _ name) acc)
           (tuple2 name (add-instruction acc (function-call-inst name (direct-call f) vars)))])])]
    [(cast-expr c expr)
     (case (convert-expr #"cast" expr acc env)
       [(tuple2 var acc)
        (case c
          [(p:unsigned-int8->unsigned-int64)
           (tuple2 var acc)]
          [(p:pointer->unsigned-int64)
           (tuple2 var acc)]
          [(p:unsigned-int64->pointer)
           (tuple2 var acc)]
          [(p:refine-pointer _)
           (tuple2 var acc)]
          [(p:unrefine-pointer _)
           (tuple2 var acc)]
          [(p:truncate-unsigned-int64->unsigned-int8)
           (case (fresh-name base-name acc)
             [(tuple2 (tuple2 _ name) acc)
              (tuple2 name
                      (add-instruction
                        acc
                        (unary-op-inst name (r:truncate-unsigned-int64->unsigned-int8) var)))])])])]))

;; TODO support types better
(define (type->size [t : Type]) : Int
  (case t
    [(int64-type) 8]
    [(int8-type) 1]
    [(pointer-type _) 8]
    [(undetermined-pointer-type) 8]
    [_ (panic/int #"Type doesn't have size")]))

(define (memory-type->size [t : MemoryType]) : Int
  (case t
    [(value-type t) (type->size t)]
    [_ (panic/int #"Memory Type doesn't have size")]))
