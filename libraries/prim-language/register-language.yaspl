(module register-language
  (import
    (bytes bytes=?)
    (dict
      #:types (Dict)
      #:values ()
      #:patterns ())
    (list
      #:types (List)
      #:values ()
      #:patterns ())
    (prim
      #:types (Boolean Bytes Int)
      #:values (= and)
      #:patterns ())
    (prim-language
      #:types (BinOp)
      #:values ()
      #:patterns ()))
  (export
    #:types (FunctionDefinition BasicBlock Instruction Terminal Var)
    #:values (function-definition return basic-block bin-op-inst var cond-jump jump
              var=? int-literal)
    #:patterns (function-definition var))
  (types
    (define-type FunctionDefinition
      (function-definition [name : Bytes] [blocks : (Dict Int BasicBlock)]))
    (define-type Var
      (var [name : Bytes] [counter : Int]))
    (define-type BasicBlock
      (basic-block [args : (List Var)] [instructions : (List Instruction)] [terminal : Terminal]))

    (define-type Instruction
      (int-literal [output : Var] [v : Int])
      (bin-op-inst [output : Var] [op : BinOp] [left : Var] [right : Var]))

    (define-type Terminal
      (return [name : Var])
      (cond-jump [name : Var] [true : Int] [true-args : (List Var)]
                 [false : Int] [false-args : (List Var)])
      (jump [index : Int] [args : (List Var)])))

  (define (var=? [v1 : Var] [v2 : Var]) : Boolean
    (match-define (var n1 c1) v1)
    (match-define (var n2 c2) v2)
    (and (bytes=? n1 n2) (= c1 c2))))
