#:module (register-language)
#:import {
  (block-number)
  (data indexed-set)
  (list)
  (maybe)
  (prim)
  {(prim-language)
    {#:types
      BinOp
    }
  }
  (syscalls)
  (yaspl math-operations)
  (yaspl var)
}
(export
  (#:types FunctionDefinition BasicBlock Instruction Terminal Condition UnaryOp CallingConvention
           FunctionKind MemoryOperationSize CompareArgs CompareMemArg PointerOffset PointerOffsetScale
           VarOrS32 VarOrU8 JumpTarget)
  (#:values function-definition return basic-block bin-op-inst cond-jump jump tail-call jump-target
            int-literal var-condition comparison-condition negated-var-condition
            function-call-inst indirect-function-call syscall
            function-allocate-inst pointer-set!-inst pointer-ref-inst variant-ref-inst
            eight-byte-mem-op one-byte-mem-op
            unary-op-inst truncate-unsigned-int64->unsigned-int8 boolean-not symbol-address-inst
            closure-call heap-allocate-inst/static memory-compare-condition halt
            plain-function-convention
            closure-convention direct-call output-var numeric-op-immediate-inst comparison-op-immediate-inst
            compare-s64 compare-u8 compare-mem-arg-val compare-mem-arg-ptr fixed-pointer-offset
            scaled-pointer-offset one-byte-scale eight-byte-scale
            basic-block-number basic-block-terminal var-or-s32-s32 var-or-s32-var var-or-u8-var var-or-u8-u8)
  (#:patterns function-definition basic-block
              direct-call indirect-function-call closure-call syscall
              closure-convention plain-function-convention
              eight-byte-mem-op one-byte-mem-op
              int-literal bin-op-inst function-call-inst unary-op-inst pointer-set!-inst
              pointer-ref-inst variant-ref-inst memory-compare-inst symbol-address-inst
              function-allocate-inst heap-allocate-inst/static
              return halt jump cond-jump tail-call jump-target
              var-condition negated-var-condition comparison-condition memory-compare-condition
              truncate-unsigned-int64->unsigned-int8 boolean-not numeric-op-immediate-inst
              comparison-op-immediate-inst compare-s64 compare-u8 compare-mem-arg-val compare-mem-arg-ptr
              fixed-pointer-offset scaled-pointer-offset one-byte-scale eight-byte-scale
              var-or-s32-s32 var-or-s32-var var-or-u8-var var-or-u8-u8))
(types
  (define-type FunctionDefinition
    (function-definition
      [name : Bytes]
      [calling-convention : CallingConvention]
      [blocks : (IndexedSet BasicBlock BlockNumber)]
      [next-var-number : VarNumber]
      [next-block-number : BlockNumber]))
  (define-type CallingConvention
    (plain-function-convention [num-args : Int] [block : BlockNumber])
    (closure-convention [num-args : Int] [block : BlockNumber] [num-free-args : Int]))
  (define-type BasicBlock
    (basic-block
      [number : BlockNumber]
      [args : (List Var)]
      [instructions : (List Instruction)]
      [terminal : Terminal]))

  (define-type Instruction
    (int-literal [output : Var] [v : Int])
    (bin-op-inst [output : Var] [op : BinOp] [left : Var] [right : Var])
    (function-call-inst [output : Var] [f : FunctionKind] [args : (List Var)])
    (unary-op-inst [output : Var] [op : UnaryOp] [input : Var])
    (pointer-set!-inst [size : MemoryOperationSize] [pointer : Var] [offset : PointerOffset]
                       [val : Var])
    (pointer-ref-inst [output : Var] [size : MemoryOperationSize] [pointer : Var]
                      [offset : PointerOffset])
    (variant-ref-inst [output : Var] [variant : Var] [field-index : Int])
    (memory-compare-inst [output : Var] [size : Var] [v1 : Var] [v2 : Var])
    (symbol-address-inst [output : Var] [name : Bytes])
    (function-allocate-inst [output : Var] [num-bytes : Var])
    (heap-allocate-inst/static [output : Var] [num-bytes : S32])
    (numeric-op-immediate-inst [output : Var] [op : NumericBinOp] [input : Var] [amount : S32])
    (comparison-op-immediate-inst [output : Var] [op : ComparisonBinOp] [input : Var] [amount : S32]))

  (define-type PointerOffset
    (fixed-pointer-offset [offset : Int])
    (scaled-pointer-offset [amount : Var] [scale : PointerOffsetScale] [fixed-offset : Int]))
  (define-type PointerOffsetScale
    (one-byte-scale)
    (eight-byte-scale))

  (define-type FunctionKind
    (direct-call [f : Bytes])
    (indirect-function-call [f : Var])
    (closure-call [c : Var])
    (syscall [s : Syscall]))

  (define-type UnaryOp
    (truncate-unsigned-int64->unsigned-int8)
    (boolean-not))

  (define-type MemoryOperationSize
    (one-byte-mem-op)
    (eight-byte-mem-op))

  (define-type Condition
    (var-condition [name : Var])
    (negated-var-condition [name : Var])
    (comparison-condition [op : ComparisonBinOp] [args : CompareArgs])
    (memory-compare-condition [negated? : Boolean] [size : Var] [v1 : Var] [v2 : Var]))
  (define-type CompareArgs
    (compare-s64 [left : CompareMemArg] [right : VarOrS32])
    (compare-u8 [left : CompareMemArg] [right : VarOrU8]))
  (define-type CompareMemArg
    (compare-mem-arg-val [v : Var])
    (compare-mem-arg-ptr [v : Var]))
  (define-type VarOrS32
    (var-or-s32-var [v : Var])
    (var-or-s32-s32 [v : S32]))
  (define-type VarOrU8
    (var-or-u8-var [v : Var])
    (var-or-u8-u8 [v : U8]))

  (define-type Terminal
    (return [name : Var])
    (halt)
    (cond-jump [cond : Condition] [true : JumpTarget] [false : JumpTarget])
    (tail-call [f : FunctionKind] [args : (List Var)])
    (jump [target : JumpTarget]))
  (define-type JumpTarget
    (jump-target [block-number : BlockNumber] [args : (List Var)])))

(define (output-var [i : Instruction]) : (Maybe Var)
  (case i
    [(int-literal output _)
     (just output)]
    [(bin-op-inst output _ _ _)
     (just output)]
    [(function-call-inst output _ _)
     (just output)]
    [(unary-op-inst output _ _)
     (just output)]
    [(pointer-set!-inst _ _ _ _)
     (nothing)]
    [(pointer-ref-inst output _ _ _)
     (just output)]
    [(variant-ref-inst output _ _)
     (just output)]
    [(memory-compare-inst output _ _ _)
     (just output)]
    [(symbol-address-inst output _)
     (just output)]
    [(function-allocate-inst output _)
     (just output)]
    [(heap-allocate-inst/static output _)
     (just output)]
    [(numeric-op-immediate-inst output _ _ _)
     (just output)]
    [(comparison-op-immediate-inst output _ _ _)
     (just output)]))
