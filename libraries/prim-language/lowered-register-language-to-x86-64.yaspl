#:module (lowered-register-language-to-x86-64)
#:import {
  (block-number)
  (bytes)
  (data ordering)
  (dict)
  (either)
  (join-list)
  (list)
  {(lower-x86-64)
    {#:types
      X8664Register
    }
    {#:values
      rbp
      rsp
    }
    {#:patterns
      r10
      r11
      r12
      r13
      r14
      r15
      r8
      r9
      rax
      rbp
      rbx
      rcx
      rdi
      rdx
      rsi
      rsp
    }
  }
  (lowered-register-language)
  (maybe)
  (prim)
  (yaspl math-operations)
  {(yaspl x86-64-assembly)
    {#:types
      [BasicBlock a:BasicBlock]
      [Instruction a:Instruction]
      [Register a:Register]
      [Register8 a:Register8]
      [Scale a:Scale]
      TextFragment
    }
    {#:values
      addq
      [al a:al]
      andq
      [basic-block a:basic-block]
      [bl a:bl]
      [bpl a:bpl]
      call
      call/indirect
      [cl a:cl]
      cmpb
      cmpq
      [dil a:dil]
      [dl a:dl]
      function-fragment
      idivq
      imm
      imm8
      imulq
      imulq/imm
      je
      jg
      jge
      jl
      jle
      jmp
      jmp/indirect
      jne
      leaq/rip-rel
      mem
      movb
      movq
      movq/imm
      movzbq
      orq
      popq
      pushq
      [r10 a:r10]
      [r10b a:r10b]
      [r11 a:r11]
      [r11b a:r11b]
      [r12 a:r12]
      [r12b a:r12b]
      [r13 a:r13]
      [r13b a:r13b]
      [r14 a:r14]
      [r14b a:r14b]
      [r15 a:r15]
      [r15b a:r15b]
      [r8 a:r8]
      [r8b a:r8b]
      r8m-mem
      r8m-reg
      r8mi-imm
      r8mi-reg
      [r9 a:r9]
      [r9b a:r9b]
      [rax a:rax]
      [rbp a:rbp]
      [rbx a:rbx]
      [rcx a:rcx]
      [rdi a:rdi]
      [rdx a:rdx]
      rep-stosb
      rep-stosq
      repe-cmpsb
      ret
      rm-mem
      rm-reg
      rmi-imm
      rmi-mem
      rmi-reg
      [rsi a:rsi]
      [rsp a:rsp]
      [scale-1 a:scale-1]
      [scale-8 a:scale-8]
      scaled
      [section a:section]
      sete
      setg
      setge
      setl
      setle
      setne
      shlq
      shlq/imm
      shrq
      shrq/imm
      [sil a:sil]
      subq
      [syscall a:syscall]
      test
      ud2
      xorq
    }
  }
}
(export
  (#:types)
  (#:values assign-registers function-definition->assembly-fragment)
  (#:patterns))
(types)

(define (Reg) (assign-registers [f : (FunctionDefinition Reg)] [assignment : (Reg -> X8664Register)])
  : (AssignedRegistersFunctionDefinition X8664Register)
  (match-define (function-definition name extra-temporaries blocks) f)

  (assigned-registers-function-definition
    name
    (add-entry-block
      (varargs list
        (push (rbp))
        (move (rbp) (rsp))
        (numeric-op-immediate (rsp) (sub-op) (s32 (* extra-temporaries 8))))
      (rename-registers/block-map blocks assignment))))

(define (Reg) (add-entry-block [insts : (List (Instruction Reg))] [blocks : (BlockMap Reg)]) :
  (BlockMap Reg)
  (case (add-entry-block* insts blocks)
    [(left v) (panic v)]
    [(right v) v]))

(define (Reg) (add-entry-block* [insts : (List (Instruction Reg))] [blocks : (BlockMap Reg)]) :
  (Either Bytes (BlockMap Reg))
  (let ([new-entry-block
          (next-block-number
            (dict-fold
              (block-map-blocks blocks)
              (lambda ([x : BlockNumber] [b : (BasicBlock Reg)] [acc : BlockNumber])
                (case (block-number-cmp x acc)
                  [(greater-than) x]
                  [_ acc]))
              (block-map-entry-block blocks)))])
    (validate-block-map
      (unvalidated-block-map-add-block
        (unvalidated-block-map-set-entry
          (block-map->unvalidated-block-map blocks)
          new-entry-block)
        new-entry-block
        (basic-block insts (jump (block-map-entry-block blocks)))))))

(define (function-definition->assembly-fragment
          [f : (AssignedRegistersFunctionDefinition X8664Register)]) : TextFragment
  (match-define (assigned-registers-function-definition name blocks) f)
  (match-define block-prefix (bytes-append (varargs list name #"_")))
  (match-define block-chains (block-map-block-chains blocks))
  ;; TODO Don't require a basic block with the name of the function
  (function-fragment name
    (cons
      (a:section (varargs list (a:basic-block name (empty-jl))))
      (map
        (lambda ([chain : (List BlockNumber)])
          (a:section
            (map
              (lambda ([block-num : BlockNumber]) : a:BasicBlock
                (case (dict-ref (block-map-blocks blocks) block-num)
                  [(nothing) (panic #"No such block")]
                  [(just b)
                   (convert-block block-prefix block-num b)]))
              chain)))
        block-chains))))

(define (convert-block [block-prefix : Bytes] [block-num : BlockNumber]
                       [b : (BasicBlock X8664Register)]) : a:BasicBlock
  (match-define (basic-block instructions terminal) b)
  (a:basic-block
    (make-block-label block-prefix block-num)
    (append-jl (concat-jl (map convert-instruction instructions))
               (convert-terminal block-prefix terminal))))

(define (make-block-label [block-prefix : Bytes] [block-num : BlockNumber]) : Bytes
  (bytes-append (varargs list block-prefix (block-number->bytes block-num))))

(define (convert-register [r : X8664Register]) : a:Register
  (case r
    [(rax) (a:rax)]
    [(rbx) (a:rbx)]
    [(rcx) (a:rcx)]
    [(rdx) (a:rdx)]
    [(rdi) (a:rdi)]
    [(rsi) (a:rsi)]
    [(rbp) (a:rbp)]
    [(rsp) (a:rsp)]
    [(r8) (a:r8)]
    [(r9) (a:r9)]
    [(r10) (a:r10)]
    [(r11) (a:r11)]
    [(r12) (a:r12)]
    [(r13) (a:r13)]
    [(r14) (a:r14)]
    [(r15) (a:r15)]))

(define (convert-register/8 [r : X8664Register]) : a:Register8
  (case r
    [(rax) (a:al)]
    [(rbx) (a:bl)]
    [(rcx) (a:cl)]
    [(rdx) (a:dl)]
    [(rdi) (a:dil)]
    [(rsi) (a:sil)]
    [(rbp) (a:bpl)]
    [(r8) (a:r8b)]
    [(r9) (a:r9b)]
    [(r10) (a:r10b)]
    [(r11) (a:r11b)]
    [(r12) (a:r12b)]
    [(r13) (a:r13b)]
    [(r14) (a:r14b)]
    [(r15) (a:r15b)]
    [(rsp) (panic #"No corresponding 8bit register for rsp")]))

(define (convert-scale [s : PointerOffsetScale]) : a:Scale
  (case s
    [(one-byte-scale) (a:scale-1)]
    [(eight-byte-scale) (a:scale-8)]))

(define (convert-instruction [i : (Instruction X8664Register)]) : (JoinList a:Instruction)
  (case i
    [(int-literal r v)
     (single-jl (movq/imm v (convert-register r)))]
    [(symbol-address r sym)
     (single-jl (leaq/rip-rel sym (convert-register r)))]
    ;; TODO check that the registers are sensible for function calls
    [(function-call-inst _ (syscall _) _ _)
     (single-jl (a:syscall))]
    [(function-call-inst _ (direct-call f) _ _)
     (single-jl (call f))]
    [(function-call-inst _ (indirect-function-call f) _ _)
     (single-jl (call/indirect (rm-reg (convert-register f))))]
    [(function-call-inst _ (closure-call c) _ _)
     (single-jl (call/indirect (rm-mem (mem (convert-register c) 0))))]
    [(move out in)
     (single-jl (movq (rmi-reg (convert-register in)) (rm-reg (convert-register out))))]
    [(push in)
     (single-jl (pushq (rmi-reg (convert-register in))))]
    [(pop out)
     (single-jl (popq (rm-reg (convert-register out))))]
    [(store-8byte loc offset val)
     (single-jl (movq (rmi-reg (convert-register val))
                      (rm-mem (mem (convert-register loc) offset))))]
    [(store-8byte/scaled loc index scale offset val)
     (single-jl (movq (rmi-reg (convert-register val))
                      (rm-mem (scaled (convert-register loc) (convert-scale scale)
                                      (convert-register index) offset))))]
    [(store-8byte-repeated (rdi) (rax) (rcx))
     (single-jl (rep-stosq))]
    [(store-8byte-repeated loc val amount)
     (panic #"store-8byte-repeated called with wrong registers")]
    [(store-least-significant-byte loc offset val)
     (single-jl (movb (r8mi-reg (convert-register/8 val))
                      (mem (convert-register loc) offset)))]
    [(store-least-significant-byte/scaled loc index scale offset val)
     (single-jl (movb (r8mi-reg (convert-register/8 val))
                      (scaled (convert-register loc) (convert-scale scale)
                              (convert-register index) offset)))]
    [(store-least-significant-byte-repeated (rdi) (rax) (rcx))
     (single-jl (rep-stosb))]
    [(store-least-significant-byte/immediate loc offset val)
     (single-jl (movb (imm8 (u8->s64 val))
                      (mem (convert-register loc) offset)))]
    [(store-least-significant-byte-repeated loc val amount)
     (panic #"store-least-significant-byte-repeated called with wrong registers")]
    [(store-temporary index val)
     (single-jl (movq (rmi-reg (convert-register val))
                      (rm-mem (mem (a:rbp) (* (+ index 1) (- 0 8))))))]
    [(load-8byte out loc offset)
     (single-jl (movq (rmi-mem (mem (convert-register loc) offset))
                      (rm-reg (convert-register out))))]
    [(load-8byte/scaled out loc index scale offset)
     (single-jl
       (movq (rmi-mem (scaled (convert-register loc) (convert-scale scale) (convert-register index) offset))
             (rm-reg (convert-register out))))]
    [(load-zero-extended-byte out loc offset)
     (single-jl (movzbq (r8m-mem (mem (convert-register loc) offset)) (convert-register out)))]
    [(load-zero-extended-byte/scaled out loc index scale offset)
     (single-jl
       (movzbq
         (r8m-mem (scaled (convert-register loc) (convert-scale scale) (convert-register index) offset))
         (convert-register out)))]
    [(load-temporary out index)
     (single-jl (movq (rmi-mem (mem (a:rbp) (* (+ index 1) (- 0 8))))
                      (rm-reg (convert-register out))))]
    [(free-unary-op-inst out (truncate-unsigned-int64->unsigned-int8) in)
     (single-jl (movzbq (r8m-reg (convert-register/8 in)) (convert-register out)))]
    [(fixed-unary-op-inst in-out (boolean-not))
     (single-jl (xorq (imm 1) (convert-register in-out)))]
    [(numeric-op-inst out (add-op) in)
     (single-jl (addq (rmi-reg (convert-register in)) (rm-reg (convert-register out))))]
    [(numeric-op-immediate out (add-op) v)
     (single-jl (addq (rmi-imm v) (rm-reg (convert-register out))))]
    [(numeric-op-inst out (sub-op) in)
     (single-jl (subq (rmi-reg (convert-register in)) (convert-register out)))]
    [(numeric-op-immediate out (sub-op) v)
     (single-jl (subq (rmi-imm v) (convert-register out)))]
    [(numeric-op-inst out (mult-op) in)
     (single-jl (imulq (convert-register in) (convert-register out)))]
    [(numeric-op-immediate out (mult-op) v)
     (single-jl (imulq/imm v (rmi-reg (convert-register out)) (convert-register out)))]
    [(mult-immediate out in v)
     (single-jl (imulq/imm v (rmi-reg (convert-register in)) (convert-register out)))]
    [(quotient-remainder-inst (rax) (rdx) (rdx) (rax) div)
     (single-jl (idivq (convert-register div)))]
    [(quotient-remainder-inst _ _ _ _ _)
     (panic #"Unsupported quotient-remainder registers")]
    [(numeric-op-inst out (quotient-op) in)
     (panic #"Quotient needs to be converted tq quotient-remainder-inst")]
    [(numeric-op-immediate out (quotient-op) v)
     (panic #"Quotient doesnt support immediate operations")]
    [(numeric-op-inst out (remainder-op) in)
     (panic #"Remainder needs to be converted tq quotient-remainder-inst")]
    [(numeric-op-immediate out (remainder-op) v)
     (panic #"Remainder doesnt support immediate operations")]
    [(numeric-op-inst out (bitwise-and-op) in)
     (single-jl (andq (rmi-reg (convert-register in)) (convert-register out)))]
    [(numeric-op-immediate out (bitwise-and-op) v)
     (panic #"And doesn't support immediate operations")]
    [(numeric-op-inst out (bitwise-ior-op) in)
     (single-jl (orq (convert-register in) (convert-register out)))]
    [(numeric-op-immediate out (bitwise-ior-op) v)
     (panic #"Or doesn't support immediate operations")]
    [(numeric-op-inst out (logical-shift-left-op) (rcx))
     (single-jl (shlq (convert-register out)))]
    [(numeric-op-inst out (logical-shift-left-op) _)
     (panic #"Cannot shift register other than rcx")]
    [(numeric-op-immediate out (logical-shift-left-op) v)
     ;; TODO check that 'v' is actually within u8 bounds
     (single-jl (shlq/imm (u8 (s32->s64 v)) (convert-register out)))]
    [(numeric-op-inst out (logical-shift-right-op) (rcx))
     (single-jl (shrq (convert-register out)))]
    [(numeric-op-inst out (logical-shift-right-op) _)
     (panic #"Cannot shift register other than rcx")]
    [(numeric-op-immediate out (logical-shift-right-op) v)
     ;; TODO check that 'v' is actually within u8 bounds
     (single-jl (shrq/imm (u8 (s32->s64 v)) (convert-register out)))]
    [(logical-op-inst out (and-op) in)
     (single-jl (andq (rmi-reg (convert-register in)) (convert-register out)))]
    [(logical-op-inst out (ior-op) in)
     (single-jl (orq (convert-register in) (convert-register out)))]
    [(comparison-op-inst out op left right)
     (varargs join-list
       (cmpq (rmi-reg (convert-register right)) (rm-reg (convert-register left)))
       (case op
         [(equal-op) (sete (convert-register/8 out))]
         [(not-equal-op) (setne (convert-register/8 out))]
         [(less-than-op) (setl (convert-register/8 out))]
         [(greater-than-op) (setg (convert-register/8 out))]
         [(less-than-or-equal-op) (setle (convert-register/8 out))]
         [(greater-than-or-equal-op) (setge (convert-register/8 out))])
       (movzbq (r8m-reg (convert-register/8 out)) (convert-register out)))]
    [(comparison-op-immediate out op left right)
     (varargs join-list
       (cmpq (rmi-imm right) (rm-reg (convert-register left)))
       (case op
         [(equal-op) (sete (convert-register/8 out))]
         [(not-equal-op) (setne (convert-register/8 out))]
         [(less-than-op) (setl (convert-register/8 out))]
         [(greater-than-op) (setg (convert-register/8 out))]
         [(less-than-or-equal-op) (setle (convert-register/8 out))]
         [(greater-than-or-equal-op) (setge (convert-register/8 out))])
       (movzbq (r8m-reg (convert-register/8 out)) (convert-register out)))]
    ;; TODO check that these are the right registers
    [(compare-memory out _ _ _)
     (varargs join-list
       (repe-cmpsb)
       (sete (convert-register/8 out))
       (movzbq (r8m-reg (convert-register/8 out)) (convert-register out)))]))

(define (convert-terminal [block-prefix : Bytes] [t : (Terminal X8664Register)]) : (JoinList a:Instruction)
  (case t
    ;; TODO investigating making this not have a register
    [(return _)
     (varargs join-list
       (movq (rmi-reg (a:rbp)) (rm-reg (a:rsp)))
       (popq (rm-reg (a:rbp)))
       (ret))]
    [(halt)
     (single-jl (ud2))]
    [(tail-call f _)
     (append-jl
       (varargs join-list
         (movq (rmi-reg (a:rbp)) (rm-reg (a:rsp)))
         (popq (rm-reg (a:rbp))))
       (case f
         [(syscall _)
          ;; This really isn't a tail call but since syscalls cannot call more it is ok.
          (varargs join-list
            (a:syscall)
            (ret))]
         [(direct-call f)
          (single-jl (jmp f))]
         [(indirect-function-call f)
          (single-jl (jmp/indirect (rm-reg (convert-register f))))]
         [(closure-call c)
          (single-jl (jmp/indirect (rm-mem (mem (convert-register c) 0))))]))]
    [(jump block-num)
     (single-jl (jmp (make-block-label block-prefix block-num)))]
    [(fall-through block-num)
     (empty-jl)]
    [(cond-jump/false-fall-through (reg-condition c) t-block-num f-block-num)
     (varargs join-list
       (test (convert-register c) (convert-register c))
       (jne (make-block-label block-prefix t-block-num)))]
    [(cond-jump/false-fall-through (negated-reg-condition c) t-block-num f-block-num)
     (varargs join-list
       (test (convert-register c) (convert-register c))
       (je (make-block-label block-prefix t-block-num)))]
    [(cond-jump/false-fall-through (comparison-condition c (compare-s64 reg-mem1 reg-imm2))
                                   t-block-num f-block-num)
     (varargs join-list
       (cmpq
         (case reg-imm2
           [(reg-or-s32-reg r) (rmi-reg (convert-register r))]
           [(reg-or-s32-s32 imm) (rmi-imm imm)])
         (case reg-mem1
           [(compare-mem-arg-val r) (rm-reg (convert-register r))]
           [(compare-mem-arg-ptr r) (rm-mem (mem (convert-register r) 0))]))
       ((case c
         [(equal-op) je]
         [(not-equal-op) jne]
         [(less-than-op) jl]
         [(greater-than-op) jg]
         [(less-than-or-equal-op) jle]
         [(greater-than-or-equal-op) jge])
        (make-block-label block-prefix t-block-num)))]
    [(cond-jump/false-fall-through (comparison-condition c (compare-u8 reg-mem1 reg-imm2))
                                   t-block-num f-block-num)
     (varargs join-list
       (cmpb
         (case reg-imm2
           [(reg-or-u8-reg r) (r8mi-reg (convert-register/8 r))]
           [(reg-or-u8-u8 imm) (r8mi-imm imm)])
         (case reg-mem1
           [(compare-mem-arg-val r) (r8m-reg (convert-register/8 r))]
           [(compare-mem-arg-ptr r) (r8m-mem (mem (convert-register r) 0))]))
       ((case c
         [(equal-op) je]
         [(not-equal-op) jne]
         [(less-than-op) jl]
         [(greater-than-op) jg]
         [(less-than-or-equal-op) jle]
         [(greater-than-or-equal-op) jge])
        (make-block-label block-prefix t-block-num)))]
    ;; TODO check that these are the right registers
    [(cond-jump/false-fall-through (memory-compare-condition negated? _ _ _) t-block-num f-block-num)
     (varargs join-list
       (repe-cmpsb)
       ((if negated? jne je) (make-block-label block-prefix t-block-num)))]))
