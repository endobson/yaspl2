#:module (lowered-register-language)
#:import {
  (block-number)
  (dict)
  (either)
  (list)
  (maybe)
  (prim)
  (set)
  (set-multi-dict)
  (tuples)
  (yaspl math-operations)
}
(export
  (#:types FunctionDefinition BasicBlock Instruction Terminal BlockMap UnvalidatedBlockMap Condition
           FunctionKind CompareArgs CompareMemArg FreeUnaryOp FixedUnaryOp
           PointerOffsetScale RegOrS32 RegOrS8)
  (#:values function-definition return jump cond-jump move basic-block
            numeric-op-inst comparison-op-inst logical-op-inst int-literal basic-block-terminal
            rename-registers/instruction
            rename-registers/condition
            rename-registers/function-kind
            function-definition-name terminal-next-blocks empty-unvalidated-block-map
            block-map-blocks unvalidated-block-map-blocks
            unvalidated-block-map-map/acc unvalidated-block-map-add-block
            block-map->unvalidated-block-map validate-block-map
            negated-reg-condition reg-condition comparison-condition negate-condition
            unvalidated-block-map-entry-block block-map-entry-block store-8byte store-8byte/scaled
            store-8byte-repeated store-8byte/immediate load-8byte load-8byte/scaled push pop
            load-zero-extended-byte load-zero-extended-byte/scaled
            store-least-significant-byte store-least-significant-byte/scaled
            store-least-significant-byte-repeated store-least-significant-byte/immediate
            free-unary-op-inst fixed-unary-op-inst load-temporary store-temporary
            function-call-inst syscall indirect-function-call closure-call symbol-address
            halt tail-call compare-memory memory-compare-condition numeric-op-immediate comparison-op-immediate
            mult-immediate quotient-remainder-inst direct-call
            compare-s64 compare-s8 compare-mem-arg-val compare-mem-arg-ptr
            truncate-unsigned-int64->unsigned-int8 boolean-not one-byte-scale eight-byte-scale
            reg-or-s32-s32 reg-or-s32-reg reg-or-s8-reg reg-or-s8-s8)
  (#:patterns int-literal symbol-address load-temporary store-temporary push pop
              load-zero-extended-byte load-zero-extended-byte/scaled store-least-significant-byte
              store-least-significant-byte/scaled store-least-significant-byte-repeated
              store-least-significant-byte/immediate
              load-8byte load-8byte/scaled
              store-8byte store-8byte/scaled store-8byte-repeated store-8byte/immediate
              compare-memory move function-call-inst free-unary-op-inst fixed-unary-op-inst
              numeric-op-inst comparison-op-inst logical-op-inst
              return halt tail-call jump cond-jump
              reg-condition negated-reg-condition comparison-condition memory-compare-condition
              syscall indirect-function-call closure-call direct-call
              function-definition
              basic-block numeric-op-immediate comparison-op-immediate mult-immediate
              quotient-remainder-inst
              compare-s64 compare-s8 compare-mem-arg-val compare-mem-arg-ptr
              truncate-unsigned-int64->unsigned-int8 boolean-not one-byte-scale eight-byte-scale
              reg-or-s32-s32 reg-or-s32-reg reg-or-s8-reg reg-or-s8-s8))
(types
  (define-type (FunctionDefinition Reg)
    (function-definition
      [name : Bytes]
      [num-extra-temporary : Int]
      [blocks : (BlockMap Reg)]))
  (define-type (BasicBlock Reg)
    (basic-block [instructions : (List (Instruction Reg))] [terminal : (Terminal Reg)]))

  (define-type (BlockMap Reg)
    (block-map
      [entry-block : BlockNumber]
      [blocks : (Dict BlockNumber (BasicBlock Reg))]))

  (define-type (UnvalidatedBlockMap Reg)
    (unvalidated-block-map
      [entry-block : BlockNumber]
      [blocks : (Dict BlockNumber (BasicBlock Reg))]
      ;; Tracks the set of incoming edges to a missing block number
      [missing-edges : (SetMultiDict BlockNumber BlockNumber)]))


  (define-type (Instruction Reg)
    (int-literal [output : Reg] [v : Int])
    (load-temporary [output : Reg] [index : Int])
    (store-temporary [index : Int] [reg : Reg])
    (symbol-address [output : Reg] [name : Bytes])
    (push [reg : Reg])
    (pop [reg : Reg])
    (load-zero-extended-byte [output : Reg] [location : Reg] [offset : Int])
    (load-zero-extended-byte/scaled [output : Reg] [location : Reg] [index : Reg]
                                    [scale : PointerOffsetScale] [offset : Int])
    (store-least-significant-byte [location : Reg] [offset : Int] [val : Reg])
    (store-least-significant-byte/scaled  [location : Reg] [index : Reg] [scale : PointerOffsetScale]
                                          [offset : Int] [val : Reg])
    (store-least-significant-byte-repeated [location : Reg] [val : Reg] [count : Reg])
    (store-least-significant-byte/immediate [location : Reg] [offset : Int] [val : U8])
    (load-8byte [output : Reg] [location : Reg] [offset : Int])
    (load-8byte/scaled [output : Reg] [location : Reg] [index : Reg]
                       [scale : PointerOffsetScale] [offset : Int])
    (store-8byte [location : Reg] [offset : Int] [val : Reg])
    (store-8byte/scaled [location : Reg] [index : Reg] [scale : PointerOffsetScale] [offset : Int] [val : Reg])
    (store-8byte-repeated [location : Reg] [val : Reg] [count : Reg])
    (store-8byte/immediate [location : Reg] [offset : Int] [val : S32])
    (compare-memory [output : Reg] [size : Reg] [v1 : Reg] [v2 : Reg])
    (move [output : Reg] [input : Reg])
    ;; TODO Make conflict a set when equality is easier to deal with
    (function-call-inst [output : Reg] [f : (FunctionKind Reg)] [args : (List Reg)] [conflicts : (List Reg)])
    (free-unary-op-inst [output : Reg] [op : FreeUnaryOp] [input : Reg])
    (fixed-unary-op-inst [input-output : Reg] [op : FixedUnaryOp])
    (numeric-op-inst [output : Reg] [op : NumericBinOp] [right : Reg])
    (comparison-op-inst [output : Reg] [op : ComparisonBinOp] [left : Reg] [right : Reg])
    (logical-op-inst [output : Reg] [op : LogicalBinOp] [right : Reg])
    (numeric-op-immediate [output : Reg] [op : NumericBinOp] [amount : S32])
    (mult-immediate [output : Reg] [input : Reg] [amount : S32])
    (quotient-remainder-inst [quotient : Reg] [remainder : Reg] [high-input : Reg] [low-input : Reg]
                             [divisor : Reg])
    (comparison-op-immediate [output : Reg] [op : ComparisonBinOp] [left : Reg] [right : S32]))

  (define-type PointerOffsetScale
    (one-byte-scale)
    (eight-byte-scale))

  (define-type (FunctionKind Reg)
    (direct-call [f : Bytes])
    (indirect-function-call [f : Reg])
    (closure-call [c : Reg])
    (syscall [num : Reg]))

  (define-type (Condition Reg)
    (reg-condition [reg : Reg])
    (negated-reg-condition [reg : Reg])
    (comparison-condition [op : ComparisonBinOp] [args : (CompareArgs Reg)])
    (memory-compare-condition [negated? : Boolean] [size : Reg] [reg1 : Reg] [reg2 : Reg]))

  (define-type (CompareArgs Reg)
    (compare-s64 [left : (CompareMemArg Reg)] [right : (RegOrS32 Reg)])
    (compare-s8 [left : (CompareMemArg Reg)] [right : (RegOrS8 Reg)]))
  (define-type (CompareMemArg Reg)
    (compare-mem-arg-val [v : Reg])
    (compare-mem-arg-ptr [v : Reg]))
  (define-type (RegOrS32 Reg)
    (reg-or-s32-reg [v : Reg])
    (reg-or-s32-s32 [v : S32]))
  (define-type (RegOrS8 Reg)
    (reg-or-s8-reg [v : Reg])
    (reg-or-s8-s8 [v : S8]))

  (define-type (Terminal Reg)
    (return [reg : Reg])
    (halt)
    (tail-call [f : (FunctionKind Reg)] [args : (List Reg)])
    (jump [block : BlockNumber])
    (cond-jump [cond : (Condition Reg)] [true : BlockNumber] [false : BlockNumber]))

  (define-type FreeUnaryOp
    (truncate-unsigned-int64->unsigned-int8))
  (define-type FixedUnaryOp
    (boolean-not)))

(define [RegA RegB] (rename-registers/instruction
                      [i : (Instruction RegA)]
                      [rename : (RegA -> RegB)]) : (Instruction RegB)
  (case i
    [(int-literal out v)
     (int-literal (rename out) v)]
    [(symbol-address out v)
     (symbol-address (rename out) v)]
    [(move out in)
     (move (rename out) (rename in))]
    [(push reg)
     (push (rename reg))]
    [(pop reg)
     (pop (rename reg))]
    [(load-zero-extended-byte out ptr offset)
     (load-zero-extended-byte (rename out) (rename ptr) offset)]
    [(load-zero-extended-byte/scaled out ptr index scale offset)
     (load-zero-extended-byte/scaled (rename out) (rename ptr) (rename index) scale offset)]
    [(store-least-significant-byte loc offset val)
     (store-least-significant-byte (rename loc) offset (rename val))]
    [(store-least-significant-byte/scaled loc index scale offset val)
     (store-least-significant-byte/scaled (rename loc) (rename index) scale offset (rename val))]
    [(store-least-significant-byte-repeated loc val amount)
     (store-least-significant-byte-repeated (rename loc) (rename val) (rename amount))]
    [(store-least-significant-byte/immediate loc offset val)
     (store-least-significant-byte/immediate (rename loc) offset val)]
    [(load-8byte out ptr offset)
     (load-8byte (rename out) (rename ptr) offset)]
    [(load-8byte/scaled out ptr index scale offset)
     (load-8byte/scaled (rename out) (rename ptr) (rename index) scale offset)]
    [(store-8byte loc offset val)
     (store-8byte (rename loc) offset (rename val))]
    [(store-8byte/scaled loc index scale offset val)
     (store-8byte/scaled (rename loc) (rename index) scale offset (rename val))]
    [(store-8byte-repeated loc val amount)
     (store-8byte-repeated (rename loc) (rename val) (rename amount))]
    [(store-8byte/immediate loc offset val)
     (store-8byte/immediate (rename loc) offset val)]
    [(compare-memory out size v1 v2)
     (compare-memory (rename out) (rename size) (rename v1) (rename v2))]
    [(load-temporary out index)
     (load-temporary (rename out) index)]
    [(store-temporary index reg)
     (store-temporary index (rename reg))]
    [(numeric-op-inst out op in)
     (numeric-op-inst (rename out) op (rename in))]
    [(comparison-op-inst out op left right)
     (comparison-op-inst (rename out) op (rename left) (rename right))]
    [(logical-op-inst out op in)
     (logical-op-inst (rename out) op (rename in))]
    [(free-unary-op-inst out op in)
     (free-unary-op-inst (rename out) op (rename in))]
    [(fixed-unary-op-inst in-out op)
     (fixed-unary-op-inst (rename in-out) op)]
    [(function-call-inst out f args conflicts)
     (function-call-inst (rename out) (rename-registers/function-kind f rename)
                         (map rename args) (map rename conflicts))]
    [(numeric-op-immediate out op amt)
     (numeric-op-immediate (rename out) op amt)]
    [(mult-immediate out in amt)
     (mult-immediate (rename out) (rename in) amt)]
    [(quotient-remainder-inst q-out r-out high-in low-in div)
     (quotient-remainder-inst (rename q-out) (rename r-out) (rename high-in) (rename low-in)
                              (rename div))]
    [(comparison-op-immediate out op left right)
     (comparison-op-immediate (rename out) op (rename left) right)]))


(define [RegA RegB] (rename-registers/function-kind
                      [f : (FunctionKind RegA)]
                      [rename : (RegA -> RegB)]) : (FunctionKind RegB)
  (case f
    [(direct-call f) (direct-call f)]
    [(indirect-function-call f) (indirect-function-call (rename f))]
    [(closure-call c) (closure-call (rename c))]
    [(syscall n) (syscall (rename n))]))

(define [RegA RegB] (rename-registers/condition
                      [condition : (Condition RegA)]
                      [rename : (RegA -> RegB)]) : (Condition RegB)
  (case condition
    [(reg-condition reg) (reg-condition (rename reg))]
    [(negated-reg-condition reg) (negated-reg-condition (rename reg))]
    [(comparison-condition op args)
     (comparison-condition op (rename-registers/compare-args args rename))]
    [(memory-compare-condition negated? size reg1 reg2)
     (memory-compare-condition negated? (rename size) (rename reg1) (rename reg2))]))

(define [RegA RegB] (rename-registers/compare-args
                      [args : (CompareArgs RegA)]
                      [rename : (RegA -> RegB)]) : (CompareArgs RegB)
  (case args
    [(compare-s64 reg-mem1 reg-imm2)
     (compare-s64
       (rename-registers/compare-mem-arg reg-mem1 rename)
       (case reg-imm2
         [(reg-or-s32-reg r) (reg-or-s32-reg (rename r))]
         [(reg-or-s32-s32 imm) (reg-or-s32-s32 imm)]))]
    [(compare-s8 reg-mem1 reg-imm2)
     (compare-s8
       (rename-registers/compare-mem-arg reg-mem1 rename)
       (case reg-imm2
         [(reg-or-s8-reg r) (reg-or-s8-reg (rename r))]
         [(reg-or-s8-s8 imm) (reg-or-s8-s8 imm)]))]))

(define [RegA RegB] (rename-registers/compare-mem-arg
                      [mem-arg : (CompareMemArg RegA)]
                      [rename : (RegA -> RegB)]) : (CompareMemArg RegB)
  (case mem-arg
    [(compare-mem-arg-val r) (compare-mem-arg-val (rename r))]
    [(compare-mem-arg-ptr r) (compare-mem-arg-ptr (rename r))]))


(define [Reg] (validate-block-map [uv : (UnvalidatedBlockMap Reg)]) : (Either Bytes (BlockMap Reg))
  (match-define (unvalidated-block-map entry-block blocks missing) uv)
  (if (set-multi-dict-empty? missing)
      (if (dict-has-key? blocks entry-block)
          (right (block-map entry-block blocks))
          (left #"No entry block"))
      (left #"Some blocks are missing")))


(define [Reg] (block-map->unvalidated-block-map [bm : (BlockMap Reg)]) : (UnvalidatedBlockMap Reg)
  (match-define (block-map entry-block blocks) bm)
  (unvalidated-block-map entry-block blocks
                         (make-set-multi-dict block-number-cmp block-number-cmp)))

(define [Reg] (empty-unvalidated-block-map [entry-block : BlockNumber]) : (UnvalidatedBlockMap Reg)
  (unvalidated-block-map entry-block (make-dict block-number-cmp)
                         (make-set-multi-dict block-number-cmp block-number-cmp)))

(define [Reg] (unvalidated-block-map-add-block
                [uv : (UnvalidatedBlockMap Reg)]
                [index : BlockNumber]
                [block : (BasicBlock Reg)]) : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map entry-block blocks missing) uv)
  (case (dict-ref blocks index)
    [(just _) (panic #"Existing block")]
    [(nothing)
     (match-define next-blocks (terminal-next-blocks (basic-block-terminal block)))
     (match-define new-blocks (dict-add blocks index block))
     (unvalidated-block-map
       entry-block
       new-blocks
       (set-fold
         next-blocks
         (lambda ([target : BlockNumber] [missing : (SetMultiDict BlockNumber BlockNumber)])
           (if (dict-has-key? new-blocks target)
               missing
               (set-multi-dict-add missing target index)))
         (set-multi-dict-remove-all missing index)))]))

(define [Reg Acc] (unvalidated-block-map-map/acc
                    [uv : (UnvalidatedBlockMap Reg)]
                    [f : (BlockNumber (BasicBlock Reg) Acc -> (Tuple2 (BasicBlock Reg) Acc))]
                    [acc : Acc]) : (Tuple2 (UnvalidatedBlockMap Reg) Acc)
  (match-define (unvalidated-block-map entry-block blocks _) uv)
  (dict-fold
    blocks
    (lambda ([index : BlockNumber] [block : (BasicBlock Reg)] [acc : (Tuple2 (UnvalidatedBlockMap Reg) Acc)])
      (case acc
        [(tuple2 block-map acc)
         (match-define (tuple2 block acc) (f index block acc))
         (tuple2
           (unvalidated-block-map-add-block block-map index block)
           acc)]))
    (tuple2
      (ann (UnvalidatedBlockMap Reg) (empty-unvalidated-block-map entry-block))
      acc)))

(define [Reg] (terminal-next-blocks [t : (Terminal Reg)]) : (Set BlockNumber)
  (set-add-all
    (make-set block-number-cmp)
    (case t
      [(return _) (empty)]
      [(halt) (empty)]
      [(tail-call _ _) (empty)]
      [(jump b) (varargs list b)]
      [(cond-jump _ t f) (varargs list t f)])))

(define [Reg] (negate-condition [c : (Condition Reg)]) : (Condition Reg)
  (case c
    [(reg-condition r) (negated-reg-condition r)]
    [(negated-reg-condition r) (reg-condition r)]
    [(comparison-condition op args)
     (comparison-condition (negate-comparison-bin-op op) args)]
    [(memory-compare-condition negated? size reg1 reg2)
     (memory-compare-condition (not negated?) size reg1 reg2)]))
