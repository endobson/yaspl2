#:module lowered-register-language
#:import {
  dict {
    #:types
      Dict
    #:values
      dict-add
      dict-has-key?
      dict-ref
      dict-value-map
      make-dict
  }
  either {
    #:types
      Either
    #:values
      left
      right
  }
  list {
    #:types
      List
    #:values
      empty
      foldl
      list
      map
  }
  maybe {
    #:patterns
      just
      nothing
  }
  prim {
    #:types
      Bytes
      Int
    #:values
      =
      panic
  }
  prim-language {
    #:types
      BinOp
  }
  set {
    #:types
      Set
    #:values
      make-set
      set->list
      set-add
      set-add-all
      set-count
      set-remove
  }
  set-multi-dict {
    #:types
      SetMultiDict
    #:values
      make-set-multi-dict
      set-multi-dict-add
  }
}
(export
  #:types (FunctionDefinition BasicBlock Instruction Terminal)
  #:values (function-definition return jump cond-jump move basic-block
            bin-op-inst int-literal basic-block-terminal
            rename-registers/function-definition function-definition-name
            terminal-next-blocks)
  #:patterns ())
(types
  (define-type (FunctionDefinition Reg)
    (function-definition
      [name : Bytes]
      [num-extra-temporary : Int]
      [entry-block : Int]
      [blocks : (Dict Int (BasicBlock Reg))]))
  (define-type (BasicBlock Reg)
    (basic-block [instructions : (List (Instruction Reg))] [terminal : (Terminal Reg)]))

  (define-type (BlockMap Reg)
    (block-map
      [blocks : (Dict Int (BasicBlock Reg))]
      [predecessors : (SetMultiDict Int Int)]))

  (define-type (UnvalidatedBlockMap Reg)
    (unvalidated-block-map
      [blocks : (Dict Int (BasicBlock Reg))]
      [predecessors : (SetMultiDict Int Int)]
      [missing-nodes : (Set Int)]))


  (define-type (Instruction Reg)
    (int-literal [output : Reg] [v : Int])
    ;(load-temporary [output : Reg] [offset : Int])
    ;(store-temporary [offset : Int] [reg : Reg])
    (move [output : Reg] [input : Reg])
    (bin-op-inst [output : Reg] [op : BinOp] [right : Reg]))

  (define-type (Terminal Reg)
    (return [reg : Reg])
    (jump [block : Int])
    (cond-jump [reg : Reg] [true : Int] [false : Int])))

(define (RegA RegB) (rename-registers/function-definition
                      [f : (FunctionDefinition RegA)]
                      [rename : (RegA -> RegB)]) : (FunctionDefinition RegB)
  (match-define (function-definition name extras entry blocks) f)
  (function-definition
    name
    extras
    entry
    (dict-value-map
      blocks
      (lambda ([b : (BasicBlock RegA)]) (rename-registers/block b rename)))))


(define (RegA RegB) (rename-registers/block
                      [b : (BasicBlock RegA)]
                      [rename : (RegA -> RegB)]) : (BasicBlock RegB)
  (match-define (basic-block instructions terminal) b)
  (basic-block
    (map
      (lambda ([i : (Instruction RegA)])
        (rename-registers/instruction i rename))
      instructions)
    (rename-registers/terminal terminal rename)))

(define (RegA RegB) (rename-registers/instruction
                      [i : (Instruction RegA)]
                      [rename : (RegA -> RegB)]) : (Instruction RegB)
  (case i
    [(int-literal out v)
     (int-literal (rename out) v)]
    [(move out in)
     (move (rename out) (rename in))]
    [(bin-op-inst out op in)
     (bin-op-inst (rename out) op (rename in))]))

(define (RegA RegB) (rename-registers/terminal
                      [t : (Terminal RegA)]
                      [rename : (RegA -> RegB)]) : (Terminal RegB)
  (case t
    [(return r)
     (return (rename r))]
    [(jump block)
     (jump block)]
    [(cond-jump reg true false)
     (cond-jump (rename reg) true false)]))

(define (Reg) (validate-block-map [uv : (UnvalidatedBlockMap Reg)]) : (Either Bytes (BlockMap Reg))
  (match-define (unvalidated-block-map blocks pred missing) uv)
  (if (= 0 (set-count missing))
      (right (block-map blocks pred))
      (left #"Some blocks are not missing")))

(define (Reg) (block-map->unvalidated-block-map [bm : (BlockMap Reg)]) : (UnvalidatedBlockMap Reg)
  (match-define (block-map blocks pred) bm)
  (unvalidated-block-map blocks pred (make-set =)))

(define (Reg) (empty-unvalidated-block-map) : (UnvalidatedBlockMap Reg)
  (unvalidated-block-map (make-dict =) (make-set-multi-dict = =) (make-set =)))


(define (Reg) (unvalidated-block-map-add-block
                [uv : (UnvalidatedBlockMap Reg)]
                [index : Int]
                [block : (BasicBlock Reg)]) : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map blocks pred missing) uv)
  (case (dict-ref blocks index)
    [(just block) (panic #"Existing block")]
    [(nothing)
     (let ([next-blocks (set->list (terminal-next-blocks (basic-block-terminal block)))])
       (unvalidated-block-map
         (dict-add blocks index block)
         (foldl
           (lambda ([target : Int] [pred : (SetMultiDict Int Int)])
             (set-multi-dict-add pred target index))
           next-blocks
           pred)
         (set-remove
           (foldl
             (lambda ([target : Int] [missing : (Set Int)])
               (if (dict-has-key? blocks target)
                   missing
                   (set-add missing target)))
             next-blocks
             missing)
           index)))]))

(define (Reg) (terminal-next-blocks [t : (Terminal Reg)]) : (Set Int)
  (set-add-all
    (make-set =)
    (case t
      [(return _) (empty)]
      [(jump b) (varargs list b)]
      [(cond-jump _ t f) (varargs list t f)])))
