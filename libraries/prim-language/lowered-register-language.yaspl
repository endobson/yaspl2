#:module lowered-register-language
#:import {
  dict {
    #:types
      Dict
  }
  list {
    #:types
      List
  }
  prim {
    #:types
      Bytes
      Int
  }
  prim-language {
    #:types
      BinOp
  }
}
(export
  #:types (FunctionDefinition BasicBlock Instruction Terminal )
  #:values (function-definition)
  #:patterns ())
(types
  (define-type (FunctionDefinition Reg)
    (function-definition
      [name : Bytes]
      [num-extra-temporary : Int]
      [blocks : (Dict Int (BasicBlock Reg))]))
  (define-type (BasicBlock Reg)
    (basic-block [instructions : (List (Instruction Reg))] [terminal : Terminal]))

  (define-type (Instruction Reg)
    (int-literal [output : Reg] [v : Int])
    (load-temporary [output : Reg] [offset : Int])
    (store-temporary [offset : Int] [reg : Reg])
    (move [output : Reg] [input : Reg])
    (bin-op-inst [output : Reg] [op : BinOp] [left : Reg] [right : Reg]))

  (define-type Terminal
    (return)
    (jump [block : Int])
    (cond-jump [true : Int] [false : Int])))
