#:module lowered-register-language
#:import {
  dict {
    #:types
      Dict
    #:values
      dict-value-map
  }
  list {
    #:types
      List
    #:values
      map
  }
  prim {
    #:types
      Bytes
      Int
  }
  prim-language {
    #:types
      BinOp
  }
}
(export
  #:types (FunctionDefinition BasicBlock Instruction Terminal)
  #:values (function-definition return jump cond-jump move basic-block
            bin-op-inst int-literal basic-block-terminal
            rename-registers/function-definition)
  #:patterns ())
(types
  (define-type (FunctionDefinition Reg)
    (function-definition
      [name : Bytes]
      [num-extra-temporary : Int]
      [entry-block : Int]
      [blocks : (Dict Int (BasicBlock Reg))]))
  (define-type (BasicBlock Reg)
    (basic-block [instructions : (List (Instruction Reg))] [terminal : (Terminal Reg)]))

  (define-type (Instruction Reg)
    (int-literal [output : Reg] [v : Int])
    ;(load-temporary [output : Reg] [offset : Int])
    ;(store-temporary [offset : Int] [reg : Reg])
    (move [output : Reg] [input : Reg])
    (bin-op-inst [output : Reg] [op : BinOp] [right : Reg]))

  (define-type (Terminal Reg)
    (return [reg : Reg])
    (jump [block : Int])
    (cond-jump [reg : Reg] [true : Int] [false : Int])))

(define (RegA RegB) (rename-registers/function-definition
                      [f : (FunctionDefinition RegA)]
                      [rename : (RegA -> RegB)]) : (FunctionDefinition RegB)
  (match-define (function-definition name extras entry blocks) f)
  (function-definition
    name
    extras
    entry
    (dict-value-map
      blocks
      (lambda ([b : (BasicBlock RegA)]) (rename-registers/block b rename)))))


(define (RegA RegB) (rename-registers/block
                      [b : (BasicBlock RegA)]
                      [rename : (RegA -> RegB)]) : (BasicBlock RegB)
  (match-define (basic-block instructions terminal) b)
  (basic-block
    (map
      (lambda ([i : (Instruction RegA)])
        (rename-registers/instruction i rename))
      instructions)
    (rename-registers/terminal terminal rename)))

(define (RegA RegB) (rename-registers/instruction
                      [i : (Instruction RegA)]
                      [rename : (RegA -> RegB)]) : (Instruction RegB)
  (case i
    [(int-literal out v)
     (int-literal (rename out) v)]
    [(move out in)
     (move (rename out) (rename in))]
    [(bin-op-inst out op in)
     (bin-op-inst (rename out) op (rename in))]))

(define (RegA RegB) (rename-registers/terminal
                      [t : (Terminal RegA)]
                      [rename : (RegA -> RegB)]) : (Terminal RegB)
  (case t
    [(return r)
     (return (rename r))]
    [(jump block)
     (jump block)]
    [(cond-jump reg true false)
     (cond-jump (rename reg) true false)]))
