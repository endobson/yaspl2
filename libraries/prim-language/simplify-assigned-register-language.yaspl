#:module (simplify-assigned-register-language)
#:import {
  (assigned-register-language)
  (block-number)
  (dict)
  (either)
  (list)
  (maybe)
  (multi-set)
  (prim)
  (set)
  (yaspl math-operations)
}

(export
  (#:values simplify-function-definition))
(types)


(define [Reg] (simplify-function-definition
                [f : (FunctionDefinition Reg)]
                [reg=? : (Reg Reg -> Boolean)])
  : (FunctionDefinition Reg)
  (match-define (function-definition blocks) f)
  (function-definition
    (remove-unused-blocks
      (collapse-jumps
        (remove-unused-blocks
          (collapse-trivial-blocks
            (remove-no-op-instructions reg=? blocks)))))))

(define [Reg] (collapse-trivial-blocks [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (let ([replacements (find-trivial-blocks (block-map-blocks blocks))])
    (case (validate-block-map
            (unvalidated-block-map-map
              (block-map->unvalidated-block-map blocks)
              (lambda ([_ : BlockNumber] [b : (BasicBlock Reg)])
                (case b
                  [(basic-block insts term)
                   (basic-block insts (collapse-trivial-blocks/terminal term replacements))]))))
      [(left msg) (panic msg)]
      [(right v) v])))


(define [Reg] (collapse-trivial-blocks/terminal
                [term : (Terminal Reg)]
                [replacements : (Dict BlockNumber BlockNumber)])
  : (Terminal Reg)
 (case term
   [(jump i)
    (jump (collapse-trivial-blocks/jump i replacements))]
   [(cond-jump c t f)
    (cond-jump
      c
      (collapse-trivial-blocks/jump t replacements)
      (collapse-trivial-blocks/jump f replacements))]
   [(return _) term]
   [(halt) term]
   [(tail-call _ _) term]))

(define (collapse-trivial-blocks/jump
          [block : BlockNumber]
          [replacements : (Dict BlockNumber BlockNumber)])
  : BlockNumber
  (collapse-trivial-blocks/jump* block (make-set block-number-cmp) replacements))

(define (collapse-trivial-blocks/jump*
          [block : BlockNumber]
          [seen-blocks : (Set BlockNumber)]
          [replacements : (Dict BlockNumber BlockNumber)])
  : BlockNumber
  (if (set-member? seen-blocks block)
      block
      (case (dict-ref replacements block)
        [(nothing) block]
        [(just new-block)
         (collapse-trivial-blocks/jump* new-block (set-add seen-blocks block) replacements)])))

(define [Reg] (find-trivial-blocks
                [blocks : (Dict BlockNumber (BasicBlock Reg))])
  : (Dict BlockNumber BlockNumber)
  (dict-filter-map
    blocks
    (lambda ([_ : BlockNumber] [b : (BasicBlock Reg)]) : (Maybe BlockNumber)
      (case b
        [(basic-block (empty) (jump target))
         (just target)]
        [_ (nothing)]))))


(define [Reg] (remove-unused-blocks [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (let ([live-blocks (find-reachable-blocks blocks)])
    (case (validate-block-map
            (unvalidated-block-map-filter
              (block-map->unvalidated-block-map blocks)
              (lambda ([key : BlockNumber] [_ : (BasicBlock Reg)]) : Boolean
                (set-member? live-blocks key))))
      [(left msg) (panic msg)]
      [(right v) v])))

(define [Reg] (find-reachable-blocks
                [blocks : (BlockMap Reg)])
  : (Set BlockNumber)
  (find-reachable-blocks* (block-map-blocks blocks)
                          (varargs list (block-map-entry-block blocks))
                          (make-set block-number-cmp)))

(define [Reg] (find-reachable-blocks*
                [blocks : (Dict BlockNumber (BasicBlock Reg))]
                [to-visit : (List BlockNumber)]
                [seen : (Set BlockNumber)])
  : (Set BlockNumber)
  (case to-visit
    [(empty) seen]
    [(cons n to-visit)
     (if (set-member? seen n)
         (find-reachable-blocks* blocks to-visit seen)
         (case (dict-ref/panic blocks n)
           [(basic-block _ term)
            (find-reachable-blocks*
              blocks (append (terminal-next-blocks term) to-visit) (set-add seen n))]))]))

(define [Reg] (remove-no-op-instructions
                [reg=? : (Reg Reg -> Boolean)]
                [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (case (validate-block-map
          (unvalidated-block-map-map
            (block-map->unvalidated-block-map blocks)
            (lambda ([_ : BlockNumber] [b : (BasicBlock Reg)])
              (case b
                [(basic-block instructions terminal)
                 (basic-block
                   (filter
                     (lambda ([i : (Instruction Reg)])
                       (not (no-op-instruction? i reg=?)))
                     instructions)
                   terminal)]))))
    [(left msg) (panic msg)]
    [(right v) v]))

(define [Reg] (no-op-instruction? [i : (Instruction Reg)] [reg=? : (Reg Reg -> Boolean)]) : Boolean
  (case i
    [(move r1 r2)
     (reg=? r1 r2)]
    [(numeric-op-immediate _ (sub-op) amount)
     (= 0 (s32->s64 amount))]
    [_ #f]))


(define [Reg] (construct-combined-block [index : BlockNumber]
                                        [blocks : (BlockMap Reg)]
                                        [pred-counts : (MultiSet BlockNumber)]) : (BasicBlock Reg)
  (construct-combined-block* (empty) index blocks pred-counts))

(define [Reg] (construct-combined-block*
                [prefix : (List (Instruction Reg))] [index : BlockNumber]
                [blocks : (BlockMap Reg)]
                [pred-counts : (MultiSet BlockNumber)]) : (BasicBlock Reg)
  (match-define (basic-block next-insts term)
    (dict-ref/panic (block-map-blocks blocks) index))
  (match-define insts (append prefix next-insts))
  (case term
    [(jump t)
     (if (= 1 (multi-set-count pred-counts t))
         (construct-combined-block* insts t blocks pred-counts)
         (basic-block insts term))]
    [_
     (basic-block insts term)]))


(define [Reg] (collapse-jumps [blocks : (BlockMap Reg)])
  : (BlockMap Reg)
  (match-define pred-counts (compute-block-map-predecessor-counts blocks))
  (case (validate-block-map
          (unvalidated-block-map-map
            (block-map->unvalidated-block-map blocks)
            (lambda ([index : BlockNumber] [_ : (BasicBlock Reg)])
              (construct-combined-block index blocks pred-counts))))
    [(left msg) (panic msg)]
    [(right v) v]))

(define [Reg] (compute-block-map-predecessor-counts [bm : (BlockMap Reg)])
  : (MultiSet BlockNumber)
  (dict-fold
    (block-map-blocks bm)
    (lambda ([_ : BlockNumber] [b : (BasicBlock Reg)] [acc : (MultiSet BlockNumber)])
      : (MultiSet BlockNumber)
      (multi-set-add-all acc (terminal-next-blocks (basic-block-terminal b))))
    (multi-set-add
      (make-multi-set block-number-cmp)
      (block-map-entry-block bm))))
