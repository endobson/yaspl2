#:module (color-graph)
#:import {
  (bytes)
  (data lifted-primitives)
  (dict)
  (either)
  (list)
  (lower-x86-64)
  (lowered-live-variables)
  (maybe)
  (panic)
  (prim)
  (set)
  (tuples)
  (undirected-graph)
  (yaspl var)
}
(export
  (#:types ColorTrace)
  (#:values color-graph initial-state
            determine-color-traces color-trace->bytes)
  (#:patterns))
(types
  (define-type RegisterAssignment
    (assign-free [v : Var] [conflicts : (Set Var)] [fixed-conflicts : (Set X8664Register)])
    (assign-same [v1 : Var] [v2 : Var])
    (assign-fixed [v1 : Var] [fixed : X8664Register])
    (assign-spill [v1 : Var] [conflicts : (Set Var)] [fixed-conflicts : (Set X8664Register)]))
  (define-type ColorTrace
    (trace-assignment [v : RegisterAssignment])
    (trace-freeze [v : Var]))
  (define-type EdgeData
    (move-edge)
    (interference-edge))
  (define-type VertexData
    (vertex-data
      [fixed-constraints : (Set X8664Register)]
      [fixed-move-neighbors : (Set X8664Register)]))
  (define-type State
    (state
      [graph : (Graph Var VertexData EdgeData)]
      [register-assignments : (List ColorTrace)]))
  (define-type CoalesceResult
    (coalesce-result [coalesced : Boolean] [state : State])))

(define (initial-state [live-outs : (List (LiveOutState Reg))]) : State
  (state
    (initial-graph live-outs)
    (empty)))


(define (empty-vertex-data) : VertexData
  (vertex-data (make-set x86-64-register-cmp) (make-set x86-64-register-cmp)))

(define (add-fixed-conflict [vd : VertexData] [reg : X8664Register]) : VertexData
  (case vd
    [(vertex-data conflicts move-neighbors)
     (vertex-data (set-add conflicts reg) (set-remove move-neighbors reg))]))

(define (add-fixed-move-neighbor [vd : VertexData] [reg : X8664Register]) : VertexData
  (case vd
    [(vertex-data conflicts move-neighbors)
     (if (set-member? conflicts reg)
         vd
         (vertex-data conflicts (set-add move-neighbors reg)))]))

(define (initial-graph [live-outs : (List (LiveOutState Reg))]) : (Graph Var VertexData EdgeData)
  (foldl
    (lambda ([l : (LiveOutState Reg)] [acc : (Graph Var VertexData EdgeData)])
      (case (case l
              [(def-live-out-state out def-regs)
               (tuple3 out (set->list def-regs) (ann (Maybe Reg) (nothing)))]
              [(move-live-out-state out def move-source)
               (tuple3 out (varargs list def) (just move-source))])
        [(tuple3 out-regs def-regs move-source)
         (foldl
           (lambda ([def-reg : Reg] [acc : (Graph Var VertexData EdgeData)])
             (case def-reg
               [(fixed-reg f-reg)
                (match-define acc
                  (set-fold
                    out-regs
                    (lambda ([r : Reg] [acc : (Graph Var VertexData EdgeData)])
                      : (Graph Var VertexData EdgeData)
                      (case r
                        [(fixed-reg _) acc]
                        [(temporary-reg reg)
                         (case (graph-update-vertex
                                 (graph-add-vertex-if-absent acc reg (empty-vertex-data))
                                 reg
                                 (lambda ([vd : VertexData])
                                   (add-fixed-conflict vd f-reg)))
                           [(nothing) (panic #"Bad graph: Register not defined")]
                           [(just acc) acc])]))
                    acc))
                (match-define acc
                  (case move-source
                    [(nothing) acc]
                    [(just (fixed-reg _)) acc]
                    [(just (temporary-reg reg))
                     (ann (Graph Var VertexData EdgeData)
                       (case (graph-update-vertex
                               (graph-add-vertex-if-absent acc reg (empty-vertex-data))
                               reg
                               (lambda ([vd : VertexData])
                                 (add-fixed-move-neighbor vd f-reg)))
                             [(nothing) (panic #"Bad graph")]
                             [(just acc) acc]))]))
                acc]
               [(temporary-reg reg)
                (match-define acc (graph-add-vertex-if-absent acc reg (empty-vertex-data)))
                (match-define acc
                  (set-fold
                    out-regs
                    (lambda ([r : Reg] [acc : (Graph Var VertexData EdgeData)])
                      : (Graph Var VertexData EdgeData)
                      (case r
                        [(fixed-reg f-reg)
                         (case (graph-update-vertex acc reg
                                 (lambda ([vd : VertexData])
                                   (add-fixed-conflict vd f-reg)))
                           [(nothing) (panic #"Bad graph")]
                           [(just acc) acc])]
                        [(temporary-reg v)
                         (if (var=? v reg)
                             acc
                             (case
                               (graph-update-edge
                                 (graph-add-vertex-if-absent acc v (empty-vertex-data))
                                 v reg
                                 (lambda ([e : EdgeData]) (interference-edge))
                                 (interference-edge))
                               [(nothing) (panic #"Bad graph")]
                               [(just g) g]))]))
                    acc))
                (match-define acc
                  (case move-source
                    [(nothing) acc]
                    [(just (fixed-reg f-reg))
                     (ann (Graph Var VertexData EdgeData)
                       (case (graph-update-vertex acc reg
                               (lambda ([vd : VertexData])
                                 (add-fixed-move-neighbor vd f-reg)))
                             [(nothing) (panic #"Bad graph")]
                             [(just acc) acc]))]
                    [(just (temporary-reg v))
                     (case
                       (graph-update-edge
                         (graph-add-vertex-if-absent acc v (empty-vertex-data))
                         v reg
                         (lambda ([e : EdgeData]) e)
                         (move-edge))
                       [(nothing) (ann (Graph Var VertexData EdgeData) (panic #"Bad graph"))]
                       [(just g) g])]))
                acc]))
           def-regs
           acc)]))
    live-outs
    (ann (Graph Var VertexData EdgeData) (empty-graph var-cmp))))

(define (color-graph [state : State]) : (Either (Set Var) (Dict Var X8664Register))
  (select-loop-start (determine-color-traces state)))


(define (determine-color-traces [state : State]) : (List ColorTrace)
  (let ([state (simplify-loop-start state)])
    (if (state-empty? state)
        (state-register-assignments state)
        (case (coalesce-loop-start state)
          [(coalesce-result coalesced state)
           (if coalesced
               (determine-color-traces state)
               (case (maybe-freeze state)
                 [(just state) (determine-color-traces state)]
                 [(nothing)
                  (determine-color-traces (spill-once state))]))]))))

(define (simplify-loop-start [state : State]) : State
  (simplify-loop (non-move-related-vertices state) state))

(define (simplify-loop
          [vertices : (Set Var)]
          [state : State]) : State
  (case (set-split vertices)
    [(nothing) state]
    [(just (tuple2 v vertices))
     (if (< (num-interfering-neighbors state v) (num-valid-temporary-x86-64-registers))
         (simplify-loop
           (set-union vertices (non-move-related-neighbors state v))
           (remove-unconstrained-vertex state v))
         (simplify-loop vertices state))]))

(define (coalesce-loop-start [state : State]) : CoalesceResult
  (coalesce-loop (move-related-vertices state) #f state))

(define (coalesce-loop
          [vertices : (Set Var)]
          [coalesced : Boolean]
          [state : State]) : CoalesceResult
  (case (set-split vertices)
    [(nothing) (coalesce-result coalesced state)]
    [(just (tuple2 v vertices))
     (case (find-fixed-coalescable-neighbor v state)
       [(just reg)
        (coalesce-loop vertices #t (coalesce-fixed state v reg))]
       [(nothing)
        (case (find-temporary-coalescable-neighbor v state)
          [(just v2)
           (coalesce-loop vertices #t (coalesce state v v2))]
          [(nothing)
           (coalesce-loop vertices coalesced state)])])]))

(define (maybe-freeze [state : State]) : (Maybe State)
  (case (arg-min (lambda ([v : Var]) (num-interfering-neighbors state v)) (move-related-vertices state))
    [(nothing) (nothing)]
    [(just v)
     (just (freeze state v))]))

(define (spill-once [state : State]) : State
  (case (arg-max (lambda ([v : Var]) (num-interfering-neighbors state v)) (non-move-related-vertices state))
    [(nothing) (panic #"Cannot spill on empty state")]
    [(just v)
     (spill-vertex state v)]))

(define (find-temporary-coalescable-neighbor [v : Var] [state : State]) : (Maybe Var)
  (set-find (move-neighbors state v)
            (lambda ([v2 : Var])
              (is-coalescable-edge state v v2))))

(define (find-fixed-coalescable-neighbor [v : Var] [state : State]) : (Maybe X8664Register)
  (set-find (fixed-move-neighbors v state)
            (lambda ([reg : X8664Register])
              (is-coalescable-fixed-edge state v reg))))


(define (A) (arg-max [f : (A -> Int)] [elems : (Set A)]) : (Maybe A)
  (case (set-split elems)
    [(nothing) (nothing)]
    [(just (tuple2 e elems)) (arg-max* f e (f e) elems)]))

(define (A) (arg-max* [f : (A -> Int)] [e : A] [v : Int] [elems : (Set A)]) : (Maybe A)
  (case (set-split elems)
    [(nothing) (just e)]
    [(just (tuple2 e2 elems))
     (let ([v2 (f e2)])
       (if (> v2 v)
           (arg-max* f e2 v2 elems)
           (arg-max* f e v elems)))]))

(define (A) (arg-min [f : (A -> Int)] [elems : (Set A)]) : (Maybe A)
  (arg-max (lambda ([x : A]) (- 0 (f x))) elems))

(define (num-interfering-neighbors [state : State] [v : Var]) : Int
  (match-define g (state-graph state))
  (+
    (case (graph-vertex-label g v)
      [(nothing)
       (panic/int
         (bytes-append
           (varargs list #"Bad context: " (var->bytes v))))]
      [(just (vertex-data fixed-constraints _))
       (set-count fixed-constraints)])
    (case (graph-vertex-edges g v)
      [(nothing) (panic/int #"Bad vertex")]
      [(just edges)
       (case
         (dict-fold
           edges
           (lambda ([_v : Var] [e : EdgeData] [acc : LiftedInt]) : LiftedInt
             (case e
               [(move-edge) acc]
               [(interference-edge)
                (case acc
                  [(lifted-int v) (lifted-int (+ 1 v))])]))
           (lifted-int 0))
         [(lifted-int v) v])])))

(define (state-empty? [state : State]) : Boolean
  (dict-empty? (graph-vertices (state-graph state))))

(define (non-move-related-vertices [state : State]) : (Set Var)
  (let ([g (state-graph state)])
    (dict-fold
      (graph-vertices g)
      (lambda ([v : Var] [_vd : VertexData] [acc : (Set Var)]) : (Set Var)
        (if (move-related-vertex? state v)
            acc
            (set-add acc v)))
      (make-set var-cmp))))

(define (move-related-vertices [state : State]) : (Set Var)
  (let ([g (state-graph state)])
    (dict-keys
      (dict-filter
        (graph-vertices g)
        (lambda ([v : Var] [_vd : VertexData]) : Boolean
          (move-related-vertex? state v))))))

(define (move-related-vertex? [state : State] [v : Var]) : Boolean
  (case (graph-vertex-edges (state-graph state) v)
    [(nothing) (panic/boolean #"Bad vertex")]
    [(just edges)
     (case
       (dict-find
         edges
         (lambda ([_v2 : Var] [e : EdgeData]) : (Maybe LiftedVoid)
           (case e
             [(move-edge) (just (lifted-void))]
             [_ (nothing)])))
       [(just _) #t]
       [(nothing)
        (not (set-empty? (fixed-move-neighbors v state)))])]))

(define (non-move-related-neighbors [state : State] [v : Var]) : (Set Var)
  (let ([g (state-graph state)])
    (case (graph-vertex-edges g v)
      [(nothing) (panic #"Bad vertex")]
      [(just edges)
       (dict-fold
         edges
         (lambda ([v : Var] [_ed : EdgeData] [acc : (Set Var)]) : (Set Var)
           (if (move-related-vertex? state v)
               acc
               (set-add acc v)))
         (make-set var-cmp))])))

(define (move-neighbors [state : State] [v : Var]) : (Set Var)
  (let ([g (state-graph state)])
    (case (graph-vertex-edges g v)
      [(nothing) (panic #"Bad vertex")]
      [(just edges)
       (dict-fold
         edges
         (lambda ([v : Var] [e : EdgeData] [acc : (Set Var)]) : (Set Var)
           (case e
             [(move-edge) (set-add acc v)]
             [(interference-edge) acc]))
         (make-set var-cmp))])))

(define (fixed-move-neighbors [v : Var] [state : State]) : (Set X8664Register)
  (case (graph-vertex-label (state-graph state) v)
    [(nothing) (panic #"Bad vertex: fixed-neighbors")]
    [(just (vertex-data _ move-neighbors)) move-neighbors]))


(define (interfering-neighbors [state : State] [v : Var]) : (Set Var)
  (let ([g (state-graph state)])
    (case (graph-vertex-edges g v)
      [(nothing) (panic #"Bad vertex")]
      [(just edges)
       (dict-fold
         edges
         (lambda ([v : Var] [e : EdgeData] [acc : (Set Var)]) : (Set Var)
           (case e
             [(move-edge) acc]
             [(interference-edge) (set-add acc v)]))
         (make-set var-cmp))])))


(define (fixed-interfering-neighbors [state : State] [v : Var]) : (Set X8664Register)
  (case (graph-vertex-label (state-graph state) v)
    [(nothing) (panic #"Bad vertex: fixed-neighbors")]
    [(just (vertex-data fixed-conflicts _)) fixed-conflicts]))

(define (neighbors [state : State] [v : Var]) : (Set Var)
  (let ([g (state-graph state)])
    (case (graph-vertex-edges g v)
      [(nothing) (panic #"Bad vertex")]
      [(just edges)
       (dict-keys edges)])))


(define (freeze [s : State] [v : Var]) : State
  (match-define (state g trace) s)
  (match-define g
    (set-fold
      (move-neighbors s v)
      (lambda ([v2 : Var] [g : (Graph Var VertexData EdgeData)])
        (graph-remove-edge g v v2))
      g))
  (state
    (case (graph-update-vertex g v
            (lambda ([vd : VertexData])
              (case vd
                [(vertex-data fixed-constraints _fixed-move-neighbors)
                 (vertex-data fixed-constraints (make-set x86-64-register-cmp))])))
      [(nothing) (panic #"Bad vertex")]
      [(just g) g])
    (cons (trace-freeze v) trace)))

;; TODO Should check that it actually is not move related.
(define (remove-unconstrained-vertex [s : State] [v : Var]) : State
  (match-define (state g trace) s)
  (if (move-related-vertex? s v)
      (panic #"Bad movable vertex")
      (case (graph-vertex-label g v)
        [(nothing) (panic #"Bad vertex")]
        [(just (vertex-data constraints _))
         (match-define vs (neighbors s v))
         (match-define g
           (set-fold
             vs
             (lambda ([v2 : Var] [g : (Graph Var VertexData EdgeData)])
               (graph-remove-edge g v v2))
             g))
         (case (graph-remove-unconnected-vertex g v)
           [(left _) (panic #"Bad graph")]
           [(right g)
            (state
              g
              (cons (trace-assignment (assign-free v vs constraints))
                    trace))])])))

;; This merges v1 into v2, keeping the v2 name
(define (coalesce [s : State] [v1 : Var] [v2 : Var]) : State
  (match-define (state g trace) s)
  (case (graph-vertex-edges g v1)
    [(nothing) (panic #"Bad vertex")]
    [(just edges)
     (match-define g
       (dict-fold
         edges
         (lambda ([v : Var] [e : EdgeData] [g : (Graph Var VertexData EdgeData)])
           : (Graph Var VertexData EdgeData)
           (let ([g (graph-remove-edge g v1 v)])
             (if (var=? v v2)
                 g
                 (case (graph-update-edge
                         g v2 v
                         (lambda ([old-e : EdgeData])
                           (case e
                             [(interference-edge) (interference-edge)]
                             [(move-edge) old-e]))
                         e)
                 [(nothing) (panic #"Bad edge")]
                 [(just g) g]))))
         g))


     (match-define g
       (ann (Graph Var VertexData EdgeData)
         (case (graph-vertex-label g v1)
           [(nothing) (panic #"Bad vertex")]
           [(just (vertex-data fixed-constraints fixed-move-neighbors))
            (case (graph-update-vertex g v2
                    (lambda ([vd : VertexData]) : VertexData
                      (case vd
                        [(vertex-data fixed-constraints2 fixed-move-neighbors2)
                         (match-define new-fixed-constraints
                           (set-union fixed-constraints fixed-constraints2))
                         (vertex-data
                           new-fixed-constraints
                           (set-difference
                             (set-union fixed-move-neighbors fixed-move-neighbors2)
                             new-fixed-constraints))])))
              [(nothing) (panic #"Bad vertex")]
              [(just g) g])])))

     (case (graph-remove-unconnected-vertex g v1)
       [(left (nothing))
        (panic
          (bytes-append
            (varargs list
              #"Couldn't remove unconnected vertex it is not in the graph:\n"
              (var->bytes v1))))]
       [(left (just edges))
        (panic
          (bytes-append
            (varargs list
              #"Couldn't remove unconnected vertex it still has edges in the graph:\n"
              (var->bytes v1)
              #"\nOther vertex:\n"
              (var->bytes v2)
              #"\nEdges remain to :\n"
              (bytes-append
                (interleave
                  (map var->bytes (set->list (dict-keys edges)))
                  #" ")))))]
       [(right g)
        (state g (cons (trace-assignment (assign-same v1 v2)) trace))])]))

;; This merges v1 into reg.
(define (coalesce-fixed [s : State] [v1 : Var] [reg : X8664Register]) : State
  (match-define (state g trace) s)
  (case (graph-vertex-edges g v1)
    [(nothing) (panic #"Bad vertex")]
    [(just edges)
     (match-define g
       (dict-fold
         edges
         (lambda ([v : Var] [e : EdgeData] [g : (Graph Var VertexData EdgeData)])
           : (Graph Var VertexData EdgeData)
           (graph-remove-edge g v1 v))
         g))

     (match-define g
       (dict-fold
         edges
         (lambda ([v : Var] [e : EdgeData] [g : (Graph Var VertexData EdgeData)])
             : (Graph Var VertexData EdgeData)
           (case (graph-update-vertex g v
                   (lambda ([vd : VertexData])
                     (case e
                       [(interference-edge)
                        (add-fixed-conflict vd reg)]
                       [(move-edge)
                        (add-fixed-move-neighbor vd reg)])))
             [(nothing) (panic #"Bad vertex")]
             [(just g) g]))
         g))

     (case (graph-remove-unconnected-vertex g v1)
       [(left (nothing))
        (panic
          (bytes-append
            (varargs list
              #"Couldn't remove unconnected vertex it is not in the graph:\n"
              (var->bytes v1))))]
       [(left (just edges))
        (panic
          (bytes-append
            (varargs list
              #"Couldn't remove unconnected vertex it still has edges in the graph:\n"
              (var->bytes v1)
              #"\nEdges remain to :\n"
              (bytes-append
                (interleave
                  (map var->bytes (set->list (dict-keys edges)))
                  #" ")))))]
       [(right g)
        (state g (cons (trace-assignment (assign-fixed v1 reg)) trace))])]))


;; TODO check that this is not move related
(define (spill-vertex [s : State] [v : Var]) : State
  (match-define (state g trace) s)
  (match-define vs (neighbors s v))
  (match-define g
    (set-fold
      vs
      (lambda ([v2 : Var] [g : (Graph Var VertexData EdgeData)])
        (graph-remove-edge g v v2))
      g))
  (case (graph-vertex-label g v)
    [(nothing) (panic #"Bad vertex")]
    [(just (vertex-data fixed-constraints _))
     (case (graph-remove-unconnected-vertex g v)
       [(left _) (panic #"Bad graph")]
       [(right g)
        (state
          g
          (cons (trace-assignment (assign-spill v vs fixed-constraints)) trace))])]))


(define (is-coalescable-fixed-edge [s : State] [v : Var] [reg : X8664Register]) : Boolean
  (match-define (state g _) s)

  (< (+ (case (graph-vertex-edges g v)
          [(nothing) (panic/int #"Bad vertex")]
          [(just edges)
           (case
             (dict-fold
               edges
               (lambda ([v : Var] [e : EdgeData] [acc : LiftedInt]) : LiftedInt
                 (case e
                   [(move-edge) acc]
                   [(interference-edge)
                    (case (graph-vertex-label g v)
                      [(nothing) (panic #"Bad vertex")]
                      [(just (vertex-data fixed-regs _))
                       (if (set-member? fixed-regs reg)
                           acc
                           (case acc
                             [(lifted-int v) (lifted-int (+ 1 v))]))])]))
               (lifted-int 0))
             [(lifted-int v) v])])
        (set-count (fixed-interfering-neighbors s v)))
     (num-valid-temporary-x86-64-registers)))



(define (is-coalescable-edge [s : State] [v1 : Var] [v2 : Var]) : Boolean
  (match-define (state g _) s)
  (match-define fixed-count
    (case (graph-vertex-label g v1)
      [(nothing) (panic/int #"Bad vertex")]
      [(just (vertex-data regs1 _))
       (case (graph-vertex-label g v2)
         [(nothing) (panic/int #"Bad vertex")]
         [(just (vertex-data regs2 _))
          (set-count (set-union regs1 regs2))])]))
  (< (+ fixed-count
        (set-filter-count
          (set-union
            (interfering-neighbors s v1)
            (interfering-neighbors s v2))
          (lambda ([v : Var])
            (>= (num-interfering-neighbors s v) (num-valid-temporary-x86-64-registers)))))
     (num-valid-temporary-x86-64-registers)))

(define (select-loop-start [trace : (List ColorTrace)])
  : (Either (Set Var) (Dict Var X8664Register))
  (let ([maybe-mapping (select-loop (reverse trace) (make-dict var-cmp))])
    (let ([uncolorable-nodes (dict-keys (dict-filter maybe-mapping
                                                     (lambda ([k : Var] [v : (Maybe X8664Register)])
                                                       (case v
                                                         [(nothing) #t]
                                                         [(just _) #f]))))])
      (if (set-empty? uncolorable-nodes)
          (right (dict-filter-map maybe-mapping (lambda ([_k : Var] [v : (Maybe X8664Register)]) v)))

          (left uncolorable-nodes)))))

(define (select-loop [trace : (List ColorTrace)] [acc : (Dict Var (Maybe X8664Register))])
  : (Dict Var (Maybe X8664Register))
  (case trace
    [(empty) acc]
    [(cons (trace-freeze _) trace)
     (select-loop trace acc)]
    [(cons (trace-assignment (assign-same v1 v2)) trace)
     (match-define acc (select-loop trace acc))
     (case (dict-ref acc v2)
       [(nothing) (panic #"Bad assign-same")]
       [(just reg) (dict-add acc v1 reg)])]
    [(cons (trace-assignment (assign-fixed v1 reg)) trace)
     (select-loop trace (dict-add acc v1 (just reg)))]
    [(cons (trace-assignment (assign-free v con fixed-con)) trace)
     (match-define acc (select-loop trace acc))
     (case (set-elem
             (set-difference
               (valid-temporary-x86-64-registers)
               (set-add-all
                 fixed-con
                 (filter-map
                   (lambda ([v : Var]) : (Maybe X8664Register)
                     (case (dict-ref acc v)
                       [(nothing) (panic #"Bad assign-free 1")]
                       [(just v) v]))
                   (set->list con)))))
       [(nothing) (panic #"Bad assign-free 2")]
       [reg
        (dict-add acc v reg)])]
    [(cons (trace-assignment (assign-spill v con fixed-con)) trace)
     (match-define acc (select-loop trace acc))
     (dict-add
       acc
       v
       (set-elem
         (set-difference
           (valid-temporary-x86-64-registers)
           (set-add-all
             fixed-con
             (filter-map
               (lambda ([v : Var]) : (Maybe X8664Register)
                 (case (dict-ref acc v)
                   [(nothing) (panic #"Bad assign-spill")]
                   [(just v) v]))
               (set->list con))))))]))

(define (color-trace->bytes [v : ColorTrace]) : Bytes
  (case v
    [(trace-freeze v)
     (bytes-append (varargs list #"freeze: " (var->bytes v)))]
    [(trace-assignment (assign-free v conflicts fixed-conflicts))
     (bytes-append
       (varargs list
         (var->bytes v)
         #" = free ("
         (bytes-append (interleave (map var->bytes (set->list conflicts)) #", "))
         #") ("
         (bytes-append (interleave (map x86-64-register->bytes (set->list fixed-conflicts)) #", "))
         #")"))]
    [(trace-assignment (assign-same v v2))
     (bytes-append (varargs list (var->bytes v) #" = " (var->bytes v2)))]
    [(trace-assignment (assign-fixed v reg))
     (bytes-append (varargs list (var->bytes v) #" = " (x86-64-register->bytes reg)))]
    [(trace-assignment (assign-spill v conflicts fixed-conflicts))
     (bytes-append
       (varargs list
         (var->bytes v)
         #" = spill ("
         (bytes-append (interleave (map var->bytes (set->list conflicts)) #", "))
         #") ("
         (bytes-append (interleave (map x86-64-register->bytes (set->list fixed-conflicts)) #", "))
         #")"))]))
