#:module (stack-language)
#:import {
  (block-number)
  (data indexed-set)
  (top-level-name)
  (join-list)
  (list)
  (dict)
  (maybe)
  (prim)
  (prim-language variant-info)
  (yaspl math-operations)
  (yaspl var)
  (types)
}
(export
  (#:types FunctionDefinition TopLevelObject Instruction Condition
           FunctionKind MemoryOperationSize CompareArgs CompareMemArg PointerOffset 
           PointerOffsetScale
           VarOrS32 VarOrS8 Module)
  (#:values int-literal drop-inst block-inst break-inst
            if-inst
            read-local-inst write-local-inst read-global-inst
            unary-op-inst bin-op-inst
            function-call-inst closure-call-inst halt-inst
            function-definition module
            function-definition-name module-objects module-functions
            trivial-closure-tlo bytes-tlo variant-descriptor-tlo trivial-variant-tlo)
  (#:patterns module function-definition int-literal drop-inst
              read-local-inst write-local-inst read-global-inst
              block-inst break-inst if-inst
              trivial-closure-tlo bytes-tlo variant-descriptor-tlo trivial-variant-tlo
              closure-call-inst function-call-inst halt-inst
              unary-op-inst bin-op-inst))
  ;;(#:values function-definition return basic-block bin-op-inst
  ;;          cond-jump jump block-call tail-call jump-target
  ;;          int-literal var-condition comparison-condition negated-var-condition
  ;;          negated-variant-tag-condition
  ;;          indirect-function-call syscall
  ;;          pointer-set!-inst pointer-ref-inst variant-ref-inst
  ;;          eight-byte-mem-op four-byte-mem-op two-byte-mem-op one-byte-mem-op
  ;;          unary-op-inst truncate-unsigned-int64->unsigned-int8 boolean-not symbol-address-inst
  ;;          closure-call variant-allocate-inst closure-allocate-inst memory-compare-condition halt
  ;;          plain-function-convention
  ;;          closure-convention direct-call output-var
  ;;          compare-s64 compare-s8 compare-mem-arg-val compare-mem-arg-ptr fixed-pointer-offset
  ;;          scaled-pointer-offset one-byte-scale eight-byte-scale
  ;;          basic-block-number basic-block-terminal var-or-s32-s32 var-or-s32-var var-or-s8-var var-or-s8-s8
  ;;          calling-convention-entry-block terminal-next-blocks)
  ;;(#:patterns function-definition basic-block
  ;;            direct-call indirect-function-call closure-call syscall
  ;;            closure-convention plain-function-convention
  ;;            eight-byte-mem-op four-byte-mem-op two-byte-mem-op one-byte-mem-op
  ;;            int-literal bin-op-inst unary-op-inst pointer-set!-inst
  ;;            pointer-ref-inst variant-ref-inst memory-compare-inst symbol-address-inst
  ;;            function-allocate-inst variant-allocate-inst closure-allocate-inst
  ;;            return halt jump cond-jump block-call tail-call jump-target
  ;;            var-condition negated-var-condition comparison-condition memory-compare-condition
  ;;            negated-variant-tag-condition
  ;;            truncate-unsigned-int64->unsigned-int8 boolean-not
  ;;            compare-s64 compare-s8 compare-mem-arg-val compare-mem-arg-ptr
  ;;            fixed-pointer-offset scaled-pointer-offset one-byte-scale eight-byte-scale
  ;;            var-or-s32-s32 var-or-s32-var var-or-s8-var var-or-s8-s8))
(types
  (define-type Module
    (module
      [objects : (Dict TopLevelName TopLevelObject)]
      [functions : (List FunctionDefinition)]))

  (define-type TopLevelObject
    (trivial-closure-tlo [fun-name : TopLevelName])
    (bytes-tlo  [value : Bytes])
    (variant-descriptor-tlo
      [variant-name-name : TopLevelName]
      [star-field-count : Int]
      [i64-field-count : Int])
    (trivial-variant-tlo [desc-name : TopLevelName] [tag : U8]))


  (define-type FunctionDefinition
    (function-definition
      [name : TopLevelName]
      ;; The first argument is the closure.
      [num-arguments : Int]
      ;[num-locals : Int]
      ;[next-var : VarNumber]
      [body : (JoinList Instruction)]))

  (define-type Instruction
    (int-literal [v : Int])
    (drop-inst)
    ;;   binop : (v2 :: v1 :: ...)
    (bin-op-inst [op : BinOp])
    (unary-op-inst [op : LogicalUnaryOp])
    ;;   (pointer-set!-inst [size : MemoryOperationSize] [offset : PointerOffset])
    ;;   (pointer-ref-inst [size : MemoryOperationSize] [offset : PointerOffset])
    ;;   (variant-ref-inst [field-index : Int])
    ;;   ;; memcmp : (size :: v2 :: v1 :: ...)
    ;;   (memory-compare-inst)
    (read-local-inst [v : Int])
    (write-local-inst [v : Int])
    (read-global-inst [name : TopLevelName])
    ;;   ;; alloc-closure : (fields :: ...)
    ;;   (closure-allocate-inst [num-fields : Int])
    ;;   ;; alloc-var : (tag :: fields :: ...)
    ;;   (variant-allocate-inst [info : VariantInfo] [num-fields : Int])

    ;; closure-call : (closure :: args :: ...)
    ;; The first arg is also usually the closure
    (closure-call-inst [num-args : Int])
    (function-call-inst [name : TopLevelName] [num-args : Int])

    (if-inst [t : (JoinList Instruction)] [f : (JoinList Instruction)])

    ;; Block that corresponds to either pushing on a single value or no value.
    (block-inst [ty : (Maybe Type)] [insts : (JoinList Instruction)])
    (break-inst [index : Int])
    ;;   (cond-break [c : Condition] [index : Int])
    (halt-inst)

    )

  (define-type PointerOffset
    (fixed-pointer-offset [offset : Int])
    (scaled-pointer-offset [scale : PointerOffsetScale] [fixed-offset : Int]))

  (define-type PointerOffsetScale
    (one-byte-scale)
    (eight-byte-scale))

  (define-type FunctionKind
    (direct-call [f : TopLevelName])
    (closure-call))

  (define-type MemoryOperationSize
    (one-byte-mem-op)
    (two-byte-mem-op)
    (four-byte-mem-op)
    (eight-byte-mem-op))

  (define-type Condition
    (var-condition [name : Var])
    (negated-var-condition [name : Var])
    (negated-variant-tag-condition [name : Var] [tag : U8])
    (comparison-condition [op : ComparisonBinOp] [args : CompareArgs])
    (memory-compare-condition [negated? : Boolean] [size : Var] [v1 : Var] [v2 : Var]))
  (define-type CompareArgs
    (compare-s64 [left : CompareMemArg] [right : VarOrS32])
    (compare-s8 [left : CompareMemArg] [right : VarOrS8]))
  (define-type CompareMemArg
    (compare-mem-arg-val [v : Var])
    (compare-mem-arg-ptr [v : Var]))
  (define-type VarOrS32
    (var-or-s32-var [v : Var])
    (var-or-s32-s32 [v : S32]))
  (define-type VarOrS8
    (var-or-s8-var [v : Var])
    (var-or-s8-s8 [v : S8]))
  )
