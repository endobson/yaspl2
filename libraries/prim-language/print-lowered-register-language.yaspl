#:module (print-lowered-register-language)
#:import {
  (block-number)
  (bytes)
  (dict)
  (join-list)
  (list)
  (lowered-register-language)
  (numbers)
  (prim)
  (yaspl math-operations)
}
(export
  (#:types)
  (#:values print-function print-assigned-registers-function)
  (#:patterns))
(types)


(define [Reg] (print-assigned-registers-function
                [f : (AssignedRegistersFunctionDefinition Reg)]
                [print-reg : (Reg -> Bytes)]) : Bytes
  (case f
    [(assigned-registers-function-definition name blocks)
     (print-function* name blocks print-reg)]))

(define [Reg] (print-function [f : (FunctionDefinition Reg)]
                              [print-reg : (Reg -> Bytes)]) : Bytes
  (case f
    [(function-definition name _ blocks)
     (print-function* name blocks print-reg)]))

(define [Reg] (print-function* [name : Bytes]
                               [blocks : (BlockMap Reg)]
                               [print-reg : (Reg -> Bytes)]) : Bytes
  (bytes-append
    (jl->list
      (append-jl
        (varargs join-list
           name
           #"\n")
        (concat-jl
          (dict-map (block-map-blocks blocks)
                    (lambda ([i : BlockNumber] [b : (BasicBlock Reg)])
                      (print-basic-block i b print-reg))))))))

(define [Reg] (print-basic-block [index : BlockNumber] [b : (BasicBlock Reg)]
                                 [print-reg : (Reg -> Bytes)]) : (JoinList Bytes)
  (case b
    [(basic-block instructions terminal)
     (varargs append-jl*
       (varargs join-list
         #"block: "
         (block-number->bytes index)
         #"\n")
       (concat-jl (map (lambda ([i : (Instruction Reg)])
                         (print-instruction i print-reg))
                       instructions))
       (print-terminal terminal print-reg))]))

(define [Reg] (print-instruction [i : (Instruction Reg)] [print-reg : (Reg -> Bytes)]) : (JoinList Bytes)
  (case i
    [(numeric-op-inst out op right)
     (varargs append-jl*
       (single-jl (print-reg out))
       (varargs join-list #" = (" (numeric-bin-op->bytes op) #" ")
       (single-jl (print-reg out))
       (single-jl #" ")
       (single-jl (print-reg right))
       (single-jl #")\n"))]
    [(comparison-op-inst out op left right)
     (varargs append-jl*
       (single-jl (print-reg out))
       (varargs join-list #" = (" (comparison-bin-op->bytes op) #" ")
       (single-jl (print-reg left))
       (single-jl #" ")
       (single-jl (print-reg right))
       (single-jl #")\n"))]
    [(logical-op-inst out op right)
     (varargs append-jl*
       (single-jl (print-reg out))
       (varargs join-list #" = (" (logical-bin-op->bytes op) #" ")
       (single-jl (print-reg out))
       (single-jl #" ")
       (single-jl (print-reg right))
       (single-jl #")\n"))]
    [(numeric-op-immediate out op v)
     (varargs append-jl*
       (single-jl (print-reg out))
       (varargs join-list #" = (" (numeric-bin-op->bytes op) #" ")
       (single-jl (print-reg out))
       (single-jl #" ")
       (single-jl (integer->decimal-bytes (s32->s64 v)))
       (single-jl #")\n"))]
    [(mult-immediate out in v)
     (varargs append-jl*
       (single-jl (print-reg out))
       (varargs join-list #" = (* ")
       (single-jl (print-reg in))
       (single-jl #" ")
       (single-jl (integer->decimal-bytes (s32->s64 v)))
       (single-jl #")\n"))]
    [(quotient-remainder-inst q-out r-out high-in low-in div)
     (varargs append-jl*
       (varargs join-list #"(")
       (single-jl (print-reg q-out))
       (varargs join-list #", ")
       (single-jl (print-reg r-out))
       (varargs join-list #") = (/ ")
       (single-jl (print-reg high-in))
       (single-jl #":")
       (single-jl (print-reg low-in))
       (single-jl #" ")
       (single-jl (print-reg div))
       (single-jl #")\n"))]
    [(comparison-op-immediate out op left right)
     (varargs append-jl*
       (single-jl (print-reg out))
       (varargs join-list #" = (" (comparison-bin-op->bytes op) #" ")
       (single-jl (print-reg left))
       (single-jl #" ")
       (single-jl (integer->decimal-bytes (s32->s64 right)))
       (single-jl #")\n"))]
    [(free-unary-op-inst var op val)
     (varargs append-jl*
       (single-jl (print-reg var))
       (varargs join-list #" = (" (print-free-unary-op op) #" ")
       (single-jl (print-reg val))
       (single-jl #")\n"))]
    [(fixed-unary-op-inst in-out op)
     (varargs append-jl*
       (single-jl (print-reg in-out))
       (varargs join-list #" = (" (print-fixed-unary-op op) #" ")
       (single-jl (print-reg in-out))
       (single-jl #")\n"))]
    [(function-call-inst out f args _)
     (varargs append-jl*
       (single-jl (print-reg out))
       (case f
         [(direct-call f)
          (varargs join-list #" = call[" f #"]")]
         [(indirect-function-call f)
          (varargs join-list #" = call[" (print-reg f) #"]")]
         [(closure-call c)
          (varargs join-list #" = closure-call[" (print-reg c) #"]")]
         [(syscall n)
          (varargs join-list #" = syscall[" (print-reg n) #"]")])
       (single-jl #"(")
       (list->jl (interleave (map print-reg args) #", "))
       (single-jl #")\n"))]
    [(push reg)
     (varargs join-list
       #"push " (print-reg reg) #"\n")]
    [(pop reg)
     (varargs join-list
       #"pop " (print-reg reg) #"\n")]
    ;; TODO come up with a better way of printing this
    [(store-least-significant-byte loc offset val)
     (varargs join-list
       #"*(" (print-reg loc) #" + " (integer->decimal-bytes offset) #") := " (print-reg val) #" (byte)\n")]
    [(store-least-significant-byte/scaled loc index scale offset val)
     (varargs join-list
       #"*(" (print-reg loc) #" + (" (print-reg index) #" * " (print-scale scale) #") + "
       (integer->decimal-bytes offset) #") := " (print-reg val) #" (byte)\n")]
    [(store-least-significant-byte-repeated loc val amount)
     (varargs join-list
       #"*(" (print-reg loc) #") [x " (print-reg amount) #"] := " (print-reg val) #" (byte)\n")]
    [(store-least-significant-byte/immediate loc offset val)
     (varargs join-list
       #"*(" (print-reg loc) #" + " (integer->decimal-bytes offset) #") := "
       (integer->decimal-bytes (u8->s64 val)) #" (byte)\n")]
    [(load-zero-extended-byte out loc offset)
     (varargs join-list
       (print-reg out) #" = *(" (print-reg loc) #" + " (integer->decimal-bytes offset) #") (byte)\n")]
    [(load-zero-extended-byte/scaled out loc index scale offset)
     (varargs join-list
       (print-reg out) #" = *(" (print-reg loc) #" + ("
       (print-reg index) #" * " (print-scale scale) #") + "
       (integer->decimal-bytes offset) #") (byte)\n")]
    [(store-8byte loc offset val)
     (varargs join-list
       #"*(" (print-reg loc) #" + " (integer->decimal-bytes offset) #") := " (print-reg val) #"\n")]
    [(store-8byte/scaled loc index scale offset val)
     (varargs join-list
       #"*(" (print-reg loc) #" + (" (print-reg index) #" * " (print-scale scale) #") + "
       (integer->decimal-bytes offset) #") := " (print-reg val) #"\n")]
    [(store-8byte-repeated loc val amount)
     (varargs join-list
       #"*(" (print-reg loc) #") [x " (print-reg amount) #"] := " (print-reg val) #"\n")]
    [(store-8byte/immediate loc offset val)
     (varargs join-list
       #"*(" (print-reg loc) #" + " (integer->decimal-bytes offset) #") := "
       (integer->decimal-bytes (s32->s64 val)) #"\n")]
    [(load-8byte out loc offset)
     (varargs join-list
       (print-reg out) #" = *(" (print-reg loc) #" + " (integer->decimal-bytes offset) #")\n")]
    [(load-8byte/scaled out loc index scale offset)
     (varargs join-list
       (print-reg out) #" = *(" (print-reg loc) #" + ("
       (print-reg index) #" * " (print-scale scale) #") + "
       (integer->decimal-bytes offset) #")\n")]
    [(store-temporary index val)
     (varargs join-list
       #"temp[" (integer->decimal-bytes index) #"] := " (print-reg val) #"\n")]
    [(load-temporary out index)
     (varargs join-list
       (print-reg out)  #" = temp[" (integer->decimal-bytes index) #"]\n")]
    [(int-literal out v)
     (append-jl
       (single-jl (print-reg out))
       (varargs join-list #" = " (integer->decimal-bytes v) #"\n"))]
    [(symbol-address out sym)
     (varargs join-list
       (print-reg out)
       #" = symbol("
       sym
       #")\n")]
    [(compare-memory out size v1 v2)
     (varargs join-list
       (print-reg out)
       #" = compare-memory("
       (print-reg size)
       #","
       (print-reg v1)
       #","
       (print-reg v2)
       #")\n")]
    [(move dest src)
     (varargs join-list
       (print-reg dest)
       #" = "
       (print-reg src)
       #"\n")]))

(define (print-free-unary-op [op : FreeUnaryOp]) : Bytes
  (case op
    [(truncate-unsigned-int64->unsigned-int8) #"truncate"]))

(define (print-fixed-unary-op [op : FixedUnaryOp]) : Bytes
  (case op
    [(boolean-not) #"not"]))

(define [Reg] (print-terminal [t : (Terminal Reg)] [print-reg : (Reg -> Bytes)]) : (JoinList Bytes)
  (case t
    [(return reg)
     (varargs join-list
       #"return "
       (print-reg reg)
       #"\n")]
    [(halt)
     (single-jl #"halt\n")]
    [(tail-call f args)
     (varargs append-jl*
       (case f
         [(direct-call f)
          (varargs join-list #"call[" f #"]")]
         [(indirect-function-call f)
          (varargs join-list #"call[" (print-reg f) #"]")]
         [(closure-call c)
          (varargs join-list #"closure-call[" (print-reg c) #"]")]
         [(syscall n)
          (varargs join-list #"syscall[" (print-reg n) #"]")])
       (single-jl #"(")
       (list->jl (interleave (map print-reg args) #", "))
       (single-jl #")\n"))]
    [(jump block-num)
     (varargs join-list
       #"jump "
       (block-number->bytes block-num)
       #"\n")]
    [(fall-through block-num)
     (varargs join-list
       #"fall-through "
       (block-number->bytes block-num)
       #"\n")]
    [(cond-jump/false-fall-through (reg-condition reg) t-block-num f-block-num)
     (varargs join-list
       #"cond-jump "
       (print-reg reg)
       #" "
       (block-number->bytes t-block-num)
       #" "
       (block-number->bytes f-block-num)
       #"\n")]
    [(cond-jump/false-fall-through (negated-reg-condition reg) t-block-num f-block-num)
     (varargs join-list
       #"cond-jump (not "
       (print-reg reg)
       #") "
       (block-number->bytes t-block-num)
       #" "
       (block-number->bytes f-block-num)
       #"\n")]
    [(cond-jump/false-fall-through (comparison-condition op (compare-s64 reg-mem1 reg-imm2))
                                   t-block-num f-block-num)
     (varargs join-list
       #"cond-jump ("
       (comparison-bin-op->bytes op)
       #" "
       (case reg-mem1
         [(compare-mem-arg-val r) (print-reg r)]
         [(compare-mem-arg-ptr r) (bytes-append (varargs list #"*" (print-reg r)))])
       #" "
       (case reg-imm2
         [(reg-or-s32-reg reg2) (print-reg reg2)]
         [(reg-or-s32-s32 imm) (integer->decimal-bytes (s32->s64 imm))])
       #") "
       (block-number->bytes t-block-num)
       #" "
       (block-number->bytes f-block-num)
       #"\n")]
    [(cond-jump/false-fall-through (comparison-condition op (compare-s8 reg-mem1 reg-imm2))
                                   t-block-num f-block-num)
     (varargs join-list
       #"cond-jump ("
       (comparison-bin-op->bytes op)
       #" "
       (case reg-mem1
         [(compare-mem-arg-val r) (print-reg r)]
         [(compare-mem-arg-ptr r) (bytes-append (varargs list #"*" (print-reg r)))])
       #" "
       (case reg-imm2
         [(reg-or-s8-reg reg2) (print-reg reg2)]
         [(reg-or-s8-s8 imm) (integer->decimal-bytes (s8->s64 imm))])
       #") "
       (block-number->bytes t-block-num)
       #" "
       (block-number->bytes f-block-num)
       #" (byte)\n")]
    [(cond-jump/false-fall-through (memory-compare-condition negated size reg1 reg2) t-block-num f-block-num)
     (varargs join-list
       #"cond-jump (compare-memory-"
       (if negated #"!= " #"= ")
       (print-reg size)
       #" "
       (print-reg reg1)
       #" "
       (print-reg reg2)
       #") "
       (block-number->bytes t-block-num)
       #" "
       (block-number->bytes f-block-num)
       #"\n")]))

(define (print-scale [scale : PointerOffsetScale]) : Bytes
  (case scale
    [(one-byte-scale) #"1"]
    [(eight-byte-scale) #"8"]))
