#:module (assigned-register-language)
#:import {
  (block-number)
  (dict)
  (either)
  (find-chains)
  (list)
  {(lowered-register-language)
    {#:types
      CompareArgs
      CompareMemArg
      Condition
      FixedUnaryOp
      FreeUnaryOp
      FunctionKind
      Instruction
      PointerOffsetScale
      RegOrS32
      RegOrS8
    }
    {#:values
      boolean-not
      closure-call
      compare-mem-arg-ptr
      compare-mem-arg-val
      compare-memory
      compare-s64
      compare-s8
      comparison-condition
      comparison-op-immediate
      comparison-op-inst
      direct-call
      eight-byte-scale
      fixed-unary-op-inst
      free-unary-op-inst
      function-call-inst
      indirect-function-call
      int-literal
      load-8byte
      load-8byte/scaled
      load-temporary
      load-zero-extended-byte
      load-zero-extended-byte/scaled
      logical-op-inst
      memory-compare-condition
      move
      mult-immediate
      negate-condition
      negated-reg-condition
      numeric-op-immediate
      numeric-op-inst
      one-byte-scale
      pop
      push
      quotient-remainder-inst
      reg-condition
      reg-or-s32-reg
      reg-or-s32-s32
      reg-or-s8-reg
      reg-or-s8-s8
      store-8byte
      store-8byte-repeated
      store-8byte/immediate
      store-8byte/scaled
      store-least-significant-byte
      store-least-significant-byte-repeated
      store-least-significant-byte/immediate
      store-least-significant-byte/scaled
      store-temporary
      symbol-address
      syscall
      truncate-unsigned-int64->unsigned-int8
    }
    {#:patterns
      boolean-not
      closure-call
      compare-mem-arg-ptr
      compare-mem-arg-val
      compare-memory
      compare-s64
      compare-s8
      comparison-condition
      comparison-op-immediate
      comparison-op-inst
      direct-call
      eight-byte-scale
      fixed-unary-op-inst
      free-unary-op-inst
      function-call-inst
      indirect-function-call
      int-literal
      load-8byte
      load-8byte/scaled
      load-temporary
      load-zero-extended-byte
      load-zero-extended-byte/scaled
      logical-op-inst
      memory-compare-condition
      move
      mult-immediate
      negated-reg-condition
      numeric-op-immediate
      numeric-op-inst
      one-byte-scale
      pop
      push
      quotient-remainder-inst
      reg-condition
      reg-or-s32-reg
      reg-or-s32-s32
      reg-or-s8-reg
      reg-or-s8-s8
      store-8byte
      store-8byte-repeated
      store-8byte/immediate
      store-8byte/scaled
      store-least-significant-byte
      store-least-significant-byte-repeated
      store-least-significant-byte/immediate
      store-least-significant-byte/scaled
      store-temporary
      symbol-address
      syscall
      truncate-unsigned-int64->unsigned-int8
    }
  }
  (maybe)
  (prim)
  (set)
  (set-multi-dict)
  (tuples)
  (unique-dict)
}
(export
  (#:types FunctionDefinition BasicBlock Instruction Terminal BlockMap UnvalidatedBlockMap Condition
           FunctionKind FreeUnaryOp FixedUnaryOp PointerOffsetScale
           CompareArgs CompareMemArg RegOrS32 RegOrS8)
  (#:values function-definition return jump cond-jump/false-fall-through move basic-block
            numeric-op-inst comparison-op-inst logical-op-inst int-literal basic-block-terminal
            function-definition-name terminal-next-blocks empty-unvalidated-block-map block-map-blocks
            unvalidated-block-map-blocks
            unvalidated-block-map-map unvalidated-block-map-map/acc
            unvalidated-block-map-filter-map
            unvalidated-block-map-set-entry unvalidated-block-map-add-block
            unvalidated-block-map-remove-block block-map->unvalidated-block-map
            unvalidated-block-map-filter validate-block-map
            fall-through block-map-block-chains block-map-predecessors block-map-fall-through
            negated-reg-condition reg-condition comparison-condition negate-condition
            unvalidated-block-map-entry-block block-map-entry-block store-8byte store-8byte/scaled
            store-8byte-repeated store-8byte/immediate load-8byte load-8byte/scaled push pop
            load-zero-extended-byte load-zero-extended-byte/scaled
            store-least-significant-byte store-least-significant-byte/scaled
            store-least-significant-byte-repeated store-least-significant-byte/immediate
            free-unary-op-inst fixed-unary-op-inst load-temporary store-temporary function-call-inst
            syscall indirect-function-call closure-call symbol-address halt tail-call compare-memory
            memory-compare-condition numeric-op-immediate comparison-op-immediate mult-immediate
            quotient-remainder-inst direct-call compare-s64 compare-s8 compare-mem-arg-val
            compare-mem-arg-ptr truncate-unsigned-int64->unsigned-int8 boolean-not one-byte-scale
            eight-byte-scale reg-or-s32-s32 reg-or-s32-reg reg-or-s8-reg reg-or-s8-s8)
  (#:patterns int-literal symbol-address load-temporary store-temporary push pop
              load-zero-extended-byte load-zero-extended-byte/scaled store-least-significant-byte
              store-least-significant-byte/scaled store-least-significant-byte-repeated
              store-least-significant-byte/immediate
              load-8byte load-8byte/scaled
              store-8byte store-8byte/scaled store-8byte-repeated store-8byte/immediate
              compare-memory move function-call-inst free-unary-op-inst fixed-unary-op-inst
              numeric-op-inst comparison-op-inst logical-op-inst
              return halt tail-call jump fall-through cond-jump/false-fall-through
              reg-condition negated-reg-condition comparison-condition memory-compare-condition
              syscall indirect-function-call closure-call direct-call
              function-definition
              basic-block numeric-op-immediate comparison-op-immediate mult-immediate
              quotient-remainder-inst
              compare-s64 compare-s8 compare-mem-arg-val compare-mem-arg-ptr
              truncate-unsigned-int64->unsigned-int8 boolean-not one-byte-scale eight-byte-scale
              reg-or-s32-s32 reg-or-s32-reg reg-or-s8-reg reg-or-s8-s8))
(types
  (define-type (FunctionDefinition Reg)
    (function-definition
      [name : Bytes]
      [blocks : (BlockMap Reg)]))
  (define-type (BasicBlock Reg)
    (basic-block [instructions : (List (Instruction Reg))] [terminal : (Terminal Reg)]))

  (define-type (BlockMap Reg)
    (block-map
      [entry-block : BlockNumber]
      [blocks : (Dict BlockNumber (BasicBlock Reg))]
      [predecessors : (SetMultiDict BlockNumber BlockNumber)]
      [fall-through : (UniqueDict BlockNumber BlockNumber)]))

  (define-type (UnvalidatedBlockMap Reg)
    (unvalidated-block-map
      [entry-block : BlockNumber]
      [blocks : (Dict BlockNumber (BasicBlock Reg))]
      [predecessors : (SetMultiDict BlockNumber BlockNumber)]
      [fall-through : (UniqueDict BlockNumber BlockNumber)]
      [missing-edges : (SetMultiDict BlockNumber BlockNumber)]))

  (define-type (Terminal Reg)
    (return [reg : Reg])
    (halt)
    (tail-call [f : (FunctionKind Reg)] [args : (List Reg)])
    (jump [block : BlockNumber])
    (fall-through [block : BlockNumber])
    (cond-jump/false-fall-through [cond : (Condition Reg)] [true : BlockNumber]
                                  [false : BlockNumber])))

(define [Reg] (validate-block-map [uv : (UnvalidatedBlockMap Reg)]) : (Either Bytes (BlockMap Reg))
  (match-define (unvalidated-block-map entry-block blocks pred fall-through missing) uv)
  (if (set-multi-dict-empty? missing)
      (if (dict-has-key? blocks entry-block)
          (right (block-map entry-block blocks pred fall-through))
          (left #"No entry block"))
      (left #"Some blocks are missing")))


(define [Reg] (block-map->unvalidated-block-map [bm : (BlockMap Reg)]) : (UnvalidatedBlockMap Reg)
  (match-define (block-map entry-block blocks pred fall-through) bm)
  (unvalidated-block-map entry-block blocks pred fall-through
                         (make-set-multi-dict block-number-cmp block-number-cmp)))

(define [Reg] (empty-unvalidated-block-map [entry-block : BlockNumber]) : (UnvalidatedBlockMap Reg)
  (unvalidated-block-map entry-block (make-dict block-number-cmp)
                         (make-set-multi-dict block-number-cmp block-number-cmp)
                         (make-unique-dict block-number-cmp block-number-cmp)
                         (make-set-multi-dict block-number-cmp block-number-cmp)))

(define [Reg] (unvalidated-block-map-set-entry [uv : (UnvalidatedBlockMap Reg)]
                                               [entry-block : BlockNumber])
  : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map _ blocks pred fall-through missing) uv)
  (unvalidated-block-map entry-block blocks pred fall-through missing))

(define [Reg] (unvalidated-block-map-add-block
                [uv : (UnvalidatedBlockMap Reg)]
                [index : BlockNumber]
                [block : (BasicBlock Reg)]) : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map entry-block blocks pred fall-through missing) uv)
  (case (dict-ref blocks index)
    [(just _) (panic #"Existing block")]
    [(nothing)
     (let ([fall-through-target (terminal-maybe-fall-through (basic-block-terminal block))])
       (if (case fall-through-target
             [(nothing) #f]
             [(just target) (block-number=? entry-block target)])
           (panic #"Cannot fall through to entry-block")
           (let ([next-blocks (terminal-next-blocks (basic-block-terminal block))])
             (let ([new-blocks (dict-add blocks index block)])
               (unvalidated-block-map
                 entry-block
                 new-blocks
                 (set-fold
                   next-blocks
                   (lambda ([target : BlockNumber] [pred : (SetMultiDict BlockNumber BlockNumber)])
                     (set-multi-dict-add pred target index))
                   pred)
                 (case fall-through-target
                   [(nothing) fall-through]
                   [(just next-block)
                    (unique-dict-add fall-through index next-block)])
                 (set-fold
                   next-blocks
                   (lambda ([target : BlockNumber] [missing : (SetMultiDict BlockNumber BlockNumber)])
                     (if (dict-has-key? new-blocks target)
                         missing
                         (set-multi-dict-add missing index target)))
                   (set-fold
                     (set-multi-dict-ref/empty pred index)
                     (lambda ([pred : BlockNumber] [missing : (SetMultiDict BlockNumber BlockNumber)])
                       (set-multi-dict-remove missing pred index))
                     missing)))))))]))

(define [Reg] (unvalidated-block-map-remove-block
                [uv : (UnvalidatedBlockMap Reg)]
                [index : BlockNumber]) : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map entry-block blocks pred fall-through missing) uv)
  (match-define block (dict-ref/panic blocks index))
  (let ([next-blocks (terminal-next-blocks (basic-block-terminal block))])
    (let ([new-blocks (dict-remove blocks index)])
      (let ([new-predecessors
             (set-fold
               next-blocks
               (lambda ([target : BlockNumber] [pred : (SetMultiDict BlockNumber BlockNumber)])
                 (set-multi-dict-remove pred target index))
               pred)])
      (unvalidated-block-map
        entry-block
        new-blocks
        new-predecessors
        (unique-dict-remove fall-through index)
        (set-fold
          (set-multi-dict-ref/empty new-predecessors index)
          (lambda ([pred : BlockNumber] [missing : (SetMultiDict BlockNumber BlockNumber)])
            (set-multi-dict-add missing pred index))
          (set-fold
            next-blocks
            (lambda ([target : BlockNumber] [missing : (SetMultiDict BlockNumber BlockNumber)])
              (set-multi-dict-remove missing index target))
            missing)))))))


(define [Reg] (unvalidated-block-map-map
                [uv : (UnvalidatedBlockMap Reg)]
                [f : (BlockNumber (BasicBlock Reg) -> (BasicBlock Reg))]) : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map entry-block blocks _ _ _) uv)
  (dict-fold
    blocks
    (lambda ([index : BlockNumber] [block : (BasicBlock Reg)] [acc : (UnvalidatedBlockMap Reg)])
      (unvalidated-block-map-add-block acc index (f index block)))
    (ann (UnvalidatedBlockMap Reg) (empty-unvalidated-block-map entry-block))))

(define [Reg Acc] (unvalidated-block-map-map/acc
                    [uv : (UnvalidatedBlockMap Reg)]
                    [f : (BlockNumber (BasicBlock Reg) Acc -> (Tuple2 (BasicBlock Reg) Acc))]
                    [acc : Acc]) : (Tuple2 (UnvalidatedBlockMap Reg) Acc)
  (match-define (unvalidated-block-map entry-block blocks _ _ _) uv)
  (dict-fold
    blocks
    (lambda ([index : BlockNumber] [block : (BasicBlock Reg)] [acc : (Tuple2 (UnvalidatedBlockMap Reg) Acc)])
      (case acc
        [(tuple2 block-map acc)
         (match-define (tuple2 block acc) (f index block acc))
         (tuple2
           (unvalidated-block-map-add-block block-map index block)
           acc)]))
    (tuple2
      (ann (UnvalidatedBlockMap Reg) (empty-unvalidated-block-map entry-block))
      acc)))

(define [Reg] (unvalidated-block-map-filter
                [uv : (UnvalidatedBlockMap Reg)]
                [f : (BlockNumber (BasicBlock Reg) -> Boolean)]) : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map _ blocks _ _ _) uv)
  (dict-fold
    blocks
    (lambda ([index : BlockNumber] [block : (BasicBlock Reg)] [acc : (UnvalidatedBlockMap Reg)])
      (if (f index block)
          acc
          (unvalidated-block-map-remove-block acc index)))
    uv))

(define [Reg] (unvalidated-block-map-filter-map
                [uv : (UnvalidatedBlockMap Reg)]
                [f : (BlockNumber (BasicBlock Reg) -> (Maybe (BasicBlock Reg)))])
  : (UnvalidatedBlockMap Reg)
  (match-define (unvalidated-block-map entry-block blocks _ _ _) uv)
  (dict-fold
    blocks
    (lambda ([index : BlockNumber] [block : (BasicBlock Reg)] [acc : (UnvalidatedBlockMap Reg)])
      (case (f index block)
        [(nothing) acc]
        [(just block)
         (unvalidated-block-map-add-block acc index block)]))
    (ann (UnvalidatedBlockMap Reg) (empty-unvalidated-block-map entry-block))))

(define [Reg] (block-map-block-chains [bm : (BlockMap Reg)]) : (List (List BlockNumber))
  (match-define (block-map entry-block blocks _ fall-through) bm)
  (sort
    (find-chains (dict-keys blocks) fall-through)
    (lambda ([chain-a : (List BlockNumber)] [_chain-b : (List BlockNumber)])
      (case (findf (lambda ([elem : BlockNumber]) (block-number=? elem entry-block)) chain-a)
        [(nothing) #f]
        [(just _) #t]))))

(define [Reg] (terminal-next-blocks [t : (Terminal Reg)]) : (Set BlockNumber)
  (set-add-all
    (make-set block-number-cmp)
    (case t
      [(return _) (empty)]
      [(halt) (empty)]
      [(tail-call _ _) (empty)]
      [(jump b) (varargs list b)]
      [(fall-through b) (varargs list b)]
      [(cond-jump/false-fall-through _ t f) (varargs list t f)])))

(define [Reg] (terminal-maybe-fall-through [t : (Terminal Reg)]) : (Maybe BlockNumber)
  (case t
    [(return _) (nothing)]
    [(halt) (nothing)]
    [(tail-call _ _) (nothing)]
    [(jump _) (nothing)]
    [(fall-through b) (just b)]
    [(cond-jump/false-fall-through _ _ f) (just f)]))
