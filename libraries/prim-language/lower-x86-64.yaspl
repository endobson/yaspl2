#:module (lower-x86-64)
#:import {
  (data ordering)
  (dict)
  (either)
  (list)
  (lowered-register-language) {
    #:types
      [BasicBlock l:BasicBlock]
      [FunctionDefinition l:FunctionDefinition]
      [Instruction l:Instruction]
      [Terminal l:Terminal]
      [UnvalidatedBlockMap l:UnvalidatedBlockMap]
    #:values
      [basic-block l:basic-block]
      [bin-op-inst l:bin-op-inst]
      [closure-call l:closure-call]
      [compare-memory l:compare-memory]
      [comparison-condition l:comparison-condition]
      [cond-jump/false-fall-through l:cond-jump/false-fall-through]
      [direct-call l:direct-call]
      [empty-unvalidated-block-map l:empty-unvalidated-block-map]
      [function-call-inst l:function-call-inst]
      [function-definition l:function-definition]
      [halt l:halt]
      [indirect-function-call l:indirect-function-call]
      [int-literal l:int-literal]
      [jump l:jump]
      [load-8byte l:load-8byte]
      [load-zero-extended-byte l:load-zero-extended-byte]
      [memory-compare-condition l:memory-compare-condition]
      [move l:move]
      [negated-reg-condition l:negated-reg-condition]
      [numeric-op-immediate l:numeric-op-immediate]
      [reg-condition l:reg-condition]
      [return l:return]
      [store-8byte l:store-8byte]
      [store-least-significant-byte l:store-least-significant-byte]
      [symbol-address l:symbol-address]
      [syscall l:syscall]
      [unary-op-inst l:unary-op-inst]
      [unvalidated-block-map-add-block l:unvalidated-block-map-add-block]
      [validate-block-map l:validate-block-map]
  }
  (maybe)
  (prim)
  (prim-language) {
    #:values
      numeric-bin-op
      plus
      sub
  }
  (register-language) {
    #:types
      [BasicBlock r:BasicBlock]
      [CallingConvention r:CallingConvention]
      [FunctionDefinition r:FunctionDefinition]
      [Instruction r:Instruction]
      [Terminal r:Terminal]
      [Var r:Var]
    #:values
      var
      var->bytes
      var-cmp
    #:patterns
      [basic-block r:basic-block]
      [bin-op-inst r:bin-op-inst]
      [closure-call r:closure-call]
      [closure-convention r:closure-convention]
      [comparison-condition r:comparison-condition]
      [cond-jump r:cond-jump]
      [direct-call r:direct-call]
      [eight-byte-mem-op r:eight-byte-mem-op]
      [function-allocate-inst r:function-allocate-inst]
      [function-call-inst r:function-call-inst]
      [function-definition r:function-definition]
      [halt r:halt]
      [heap-allocate-inst r:heap-allocate-inst]
      [indirect-function-call r:indirect-function-call]
      [int-literal r:int-literal]
      [jump r:jump]
      [memory-compare-condition r:memory-compare-condition]
      [memory-compare-inst r:memory-compare-inst]
      [negated-var-condition r:negated-var-condition]
      [numeric-op-immediate r:numeric-op-immediate]
      [one-byte-mem-op r:one-byte-mem-op]
      [plain-function-convention r:plain-function-convention]
      [pointer-ref-inst r:pointer-ref-inst]
      [pointer-set!-inst r:pointer-set!-inst]
      [return r:return]
      [symbol-address-inst r:symbol-address-inst]
      [syscall r:syscall]
      [unary-op-inst r:unary-op-inst]
      [var-condition r:var-condition]
  }
  (set)
  (syscalls)
  (tuples)
}
(export
  #:types (Reg X8664Register)
  #:values (lower-function reg->bytes x86-64-register=? x86-64-register-cmp
            x86-64-register->bytes reg=? reg-cmp
            valid-temporary-x86-64-registers all-fixed-registers
            rax rdi rsi rdx rcx r8 r9 r10 r11 r15 rbp rsp temporary-reg fixed-reg)
  #:patterns (rax rdi rsi rdx rcx r8 r9 r10 r11 r15 rbp rsp rbx r12 r13 r14
              fixed-reg temporary-reg))
(types
  (define-type X8664Register
    (rax)
    (rbx)
    (rcx)
    (rdx)
    (rdi)
    (rsi)
    (rbp)
    (rsp)
    (r8)
    (r9)
    (r10)
    (r11)
    (r12)
    (r13)
    (r14)
    (r15))
  (define-type Reg
    (fixed-reg [r : X8664Register])
    (temporary-reg [r : r:Var])))

(define (empty-blocks [entry-block-num : Int]) : (l:UnvalidatedBlockMap Reg)
  (l:empty-unvalidated-block-map entry-block-num))


(define (valid-temporary-x86-64-registers) : (Set X8664Register)
  (set-add-all
    (make-set x86-64-register-cmp)
    (varargs list
      (rax)
      (rbx)
      (rcx)
      (rdx)
      (rdi)
      (rsi)
      (r8)
      (r9)
      (r10)
      (r11)
      (r12)
      (r13)
      (r14))))

(define (callee-saved-temporary-x86-64-registers) : (Set X8664Register)
  (set-add-all
    (make-set x86-64-register-cmp)
    (varargs list
      (rbx)
      (r12)
      (r13)
      (r14))))


(define (all-fixed-registers) : (Set Reg)
  (set-add-all
    (make-set reg-cmp)
    (map
      fixed-reg
      (varargs list
        (rax)
        (rbx)
        (rcx)
        (rdx)
        (rdi)
        (rsi)
        (rbp)
        (rsp)
        (r8)
        (r9)
        (r10)
        (r11)
        (r12)
        (r13)
        (r14)
        (r15)))))

;; Conflicts for all kinds of calls.
(define (call-conflicts) : (List Reg)
  (map
    fixed-reg
    (varargs list
      (rax)
      (rcx)
      (rdx)
      (rdi)
      (rsi)
      (r8)
      (r9)
      (r10)
      (r11))))


(define (reg->bytes [reg : Reg]) : Bytes
  (case reg
    [(fixed-reg (rax)) #"_rax"]
    [(fixed-reg (rbx)) #"_rbx"]
    [(fixed-reg (rcx)) #"_rcx"]
    [(fixed-reg (rdx)) #"_rdx"]
    [(fixed-reg (rdi)) #"_rdi"]
    [(fixed-reg (rsi)) #"_rsi"]
    [(fixed-reg (rbp)) #"_rbp"]
    [(fixed-reg (rsp)) #"_rsp"]
    [(fixed-reg (r8)) #"_r8"]
    [(fixed-reg (r9)) #"_r9"]
    [(fixed-reg (r10)) #"_r10"]
    [(fixed-reg (r11)) #"_r11"]
    [(fixed-reg (r12)) #"_r12"]
    [(fixed-reg (r13)) #"_r13"]
    [(fixed-reg (r14)) #"_r14"]
    [(fixed-reg (r15)) #"_r15"]
    [(temporary-reg v) (var->bytes v)]))


(define (x86-64-register->bytes [reg : X8664Register]) : Bytes
  (case reg
    [(rax) #"rax"]
    [(rbx) #"rbx"]
    [(rcx) #"rcx"]
    [(rdx) #"rdx"]
    [(rdi) #"rdi"]
    [(rsi) #"rsi"]
    [(rbp) #"rbp"]
    [(rsp) #"rsp"]
    [(r8) #"r8"]
    [(r9) #"r9"]
    [(r10) #"r10"]
    [(r11) #"r11"]
    [(r12) #"r12"]
    [(r13) #"r13"]
    [(r14) #"r14"]
    [(r15) #"r15"]))


(define (x86-64-register=? [reg1 : X8664Register] [reg2 : X8664Register]) : Boolean
  (case (x86-64-register-cmp reg1 reg2)
    [(equal-to) #t]
    [_ #f]))

(define (x86-64-register-cmp [reg1 : X8664Register] [reg2 : X8664Register]) : Ordering
  (case (tuple2 reg1 reg2)
    [(tuple2 (rax) (rax)) (equal-to)]
    [(tuple2 (rax) _) (less-than)]
    [(tuple2 _ (rax)) (greater-than)]
    [(tuple2 (rbx) (rbx)) (equal-to)]
    [(tuple2 (rbx) _) (less-than)]
    [(tuple2 _ (rbx)) (greater-than)]
    [(tuple2 (rcx) (rcx)) (equal-to)]
    [(tuple2 (rcx) _) (less-than)]
    [(tuple2 _ (rcx)) (greater-than)]
    [(tuple2 (rdx) (rdx)) (equal-to)]
    [(tuple2 (rdx) _) (less-than)]
    [(tuple2 _ (rdx)) (greater-than)]
    [(tuple2 (rdi) (rdi)) (equal-to)]
    [(tuple2 (rdi) _) (less-than)]
    [(tuple2 _ (rdi)) (greater-than)]
    [(tuple2 (rsi) (rsi)) (equal-to)]
    [(tuple2 (rsi) _) (less-than)]
    [(tuple2 _ (rsi)) (greater-than)]
    [(tuple2 (rsp) (rsp)) (equal-to)]
    [(tuple2 (rsp) _) (less-than)]
    [(tuple2 _ (rsp)) (greater-than)]
    [(tuple2 (rbp) (rbp)) (equal-to)]
    [(tuple2 (rbp) _) (less-than)]
    [(tuple2 _ (rbp)) (greater-than)]
    [(tuple2 (r8) (r8)) (equal-to)]
    [(tuple2 (r8) _) (less-than)]
    [(tuple2 _ (r8)) (greater-than)]
    [(tuple2 (r9) (r9)) (equal-to)]
    [(tuple2 (r9) _) (less-than)]
    [(tuple2 _ (r9)) (greater-than)]
    [(tuple2 (r10) (r10)) (equal-to)]
    [(tuple2 (r10) _) (less-than)]
    [(tuple2 _ (r10)) (greater-than)]
    [(tuple2 (r11) (r11)) (equal-to)]
    [(tuple2 (r11) _) (less-than)]
    [(tuple2 _ (r11)) (greater-than)]
    [(tuple2 (r12) (r12)) (equal-to)]
    [(tuple2 (r12) _) (less-than)]
    [(tuple2 _ (r12)) (greater-than)]
    [(tuple2 (r13) (r13)) (equal-to)]
    [(tuple2 (r13) _) (less-than)]
    [(tuple2 _ (r13)) (greater-than)]
    [(tuple2 (r14) (r14)) (equal-to)]
    [(tuple2 (r14) _) (less-than)]
    [(tuple2 _ (r14)) (greater-than)]
    [(tuple2 (r15) (r15)) (equal-to)]
    ;[(tuple2 (r15) _) (less-than)]
    ;[(tuple2 _ (r15)) (greater-than)]
    ))


(define (reg=? [reg1 : Reg] [reg2 : Reg]) : Boolean
  (case (reg-cmp reg1 reg2)
    [(equal-to) #t]
    [_ #f]))

(define (reg-cmp [reg1 : Reg] [reg2 : Reg]) : Ordering
  (case (tuple2 reg1 reg2)
    [(tuple2 (fixed-reg r1) (fixed-reg r2))
     (x86-64-register-cmp r1 r2)]
    [(tuple2 (temporary-reg v1) (temporary-reg v2)) (var-cmp v1 v2)]
    [(tuple2 (fixed-reg _) (temporary-reg _)) (greater-than)]
    [(tuple2 (temporary-reg _) (fixed-reg _)) (less-than)]))


(define (lower-function [fun : r:FunctionDefinition]) : (l:FunctionDefinition Reg)
  (match-define (r:function-definition name convention blocks next-var next-block) fun)
  (match-define lowered-entry-block next-block)
  (match-define next-block (+ 1 next-block))

  (match-define (tuple2 saved-register-pairs next-var)
    (compute-saved-register-pairs next-var))

  (match-define (tuple2 next-block new-blocks)
    (dict-fold
      blocks
      (lambda ([index : Int]  [b : r:BasicBlock]
               [acc : (Tuple2 Int (l:UnvalidatedBlockMap Reg))])
        (lower-block index b blocks saved-register-pairs acc))
      (tuple2 next-block (empty-blocks lowered-entry-block))))
  (match-define entry-block (make-entry-block convention blocks saved-register-pairs))
  (match-define new-blocks
    (l:unvalidated-block-map-add-block
      new-blocks lowered-entry-block entry-block))

  (case (l:validate-block-map new-blocks)
    [(left msg) (panic msg)]
    [(right validated-new-blocks)
     (l:function-definition name 0 validated-new-blocks)]))

(define (args/registers [args : (List r:Var)] [registers : (List X8664Register)]
                        [overflow-register : X8664Register])
  : (List (l:Instruction Reg))
  (case registers
    [(empty)
     (args/extra-registers args 0 overflow-register)]
    [(cons reg registers)
     (case args
       [(empty) (empty)]
       [(cons arg args)
        (cons
          (l:move (temporary-reg arg) (fixed-reg reg))
          (args/registers args registers overflow-register))])]))

(define (args/extra-registers [args : (List r:Var)] [offset : Int] [overflow-register : X8664Register])
  : (List (l:Instruction Reg))
  (case args
    [(empty) (empty)]
    [(cons arg args)
     (cons
       (l:load-8byte (temporary-reg arg) (fixed-reg overflow-register) offset)
       (args/extra-registers args (+ offset 8) overflow-register))]))


(define (make-entry-block [convention : r:CallingConvention] [blocks : (Dict Int r:BasicBlock)]
                          [saved-register-pairs : (List (Tuple2 X8664Register r:Var))])
  : (l:BasicBlock Reg)
  (match-define arg-registers (varargs list (rdi) (rsi) (rdx) (rcx) (r8) (r9)))
  (match-define overflow-arg-register (r10))
  (match-define save-register-instructions
    (map
      (lambda ([p : (Tuple2 X8664Register r:Var)])
        (case p
          [(tuple2 reg var)
           (l:move (temporary-reg var) (fixed-reg reg))]))
      saved-register-pairs))
  (case convention
    [(r:plain-function-convention num-args entry-block-num)
     (case (dict-ref blocks entry-block-num)
       [(nothing) (panic #"No entry block")]
       [(just (r:basic-block args _ _))
        (l:basic-block
          (append
            save-register-instructions
            (args/registers args arg-registers overflow-arg-register))
          ((lambda () : (l:Terminal Reg) (l:jump entry-block-num))))])]
    [(r:closure-convention num-args entry-block-num num-free-vars)
     (case (dict-ref blocks entry-block-num)
       [(nothing) (panic #"No entry block")]
       [(just (r:basic-block args _ _))
        (l:basic-block
          (append
            save-register-instructions
            (append
              (args/registers (take num-args args) arg-registers overflow-arg-register)
              (case (zip (drop num-args args)
                         (build-list num-free-vars (lambda ([x : Int]) (* 8 (+ x 1)))))
                [(nothing) (panic #"Wrong number of free vars")]
                [(just free-vars+offsets)
                 (map
                   (lambda ([t : (Tuple2 r:Var Int)])
                     (case t
                       [(tuple2 v offset)
                        (l:load-8byte (temporary-reg v) (fixed-reg (r11)) offset)]))
                   free-vars+offsets)])))
          ((lambda () : (l:Terminal Reg) (l:jump entry-block-num))))])]))

(define (compute-saved-register-pairs [next-var : Int]) : (Tuple2 (List (Tuple2 X8664Register r:Var)) Int)
  (foldl
    (lambda ([reg : X8664Register] [acc : (Tuple2 (List (Tuple2 X8664Register r:Var)) Int)])
      (case acc
        [(tuple2 pairs next-var)
         (tuple2
           (cons
             (tuple2 reg (var #"saved" next-var))
             pairs)
           (+ 1 next-var))]))
    (set->list (callee-saved-temporary-x86-64-registers))
    (tuple2
      ((lambda () : (List (Tuple2 X8664Register r:Var)) (empty)))
      next-var)))


(define (lower-block [index : Int]  [b : r:BasicBlock]
                     [blocks : (Dict Int r:BasicBlock)]
                     [saved-register-pairs : (List (Tuple2 X8664Register r:Var))]
                     [acc : (Tuple2 Int (l:UnvalidatedBlockMap Reg))])
  : (Tuple2 Int (l:UnvalidatedBlockMap Reg))
  (match-define (r:basic-block _ instructions terminal) b)
  (match-define (tuple3 end-insts terminal (tuple2 next-block acc-blocks))
    (lower-terminal terminal blocks saved-register-pairs acc))
  (tuple2
    next-block
    (l:unvalidated-block-map-add-block
      acc-blocks
      index
      (l:basic-block
        (append
          (append* (map lower-instruction instructions))
          end-insts)
        terminal))))

(define (match-args [index : Int] [args : (List r:Var)] [blocks : (Dict Int r:BasicBlock)])
  : (List (Tuple2 r:Var r:Var))
  (case (dict-ref blocks index)
    [(nothing) (panic #"No block")]
    [(just (r:basic-block block-args _ _))
     (case (zip block-args args)
       [(nothing) (panic #"Args don't match")]
       [(just v) v])]))

(define (move-args [args : (List (Tuple2 r:Var r:Var))]) : (List (l:Instruction Reg))
  (match-define moves (dict-add-all ((lambda () : (Dict r:Var r:Var) (make-dict var-cmp))) args))
  (if (has-cycle? moves)
      (panic #"Cannot currently perform permutation of args when jumping to block")
      (move-args/dict moves (empty))))


;; TODO implement this to avoid the posibility of infinite loops
(define (has-cycle? [args : (Dict r:Var r:Var)]) : Boolean
  #f)

(define (move-args/dict [args : (Dict r:Var r:Var)] [list : (List (l:Instruction Reg))]) :
  (List (l:Instruction Reg))
  (case (dict-split args)
    [(nothing) list]
    [(just (tuple2 (tuple2 dest src) args))
     (match-define (tuple2 args list) (move-args/dict* args src list))
     (move-args/dict args (cons (l:move (temporary-reg dest) (temporary-reg src)) list))]))


(define (move-args/dict* [args : (Dict r:Var r:Var)] [src : r:Var] [list : (List (l:Instruction Reg))]) :
  (Tuple2 (Dict r:Var r:Var) (List (l:Instruction Reg)))
  (case (dict-ref args src)
    [(nothing) (tuple2 args list)]
    [(just src2)
     (match-define (tuple2 args list) (move-args/dict* (dict-remove args src) src2 list))
     (tuple2 args (cons (l:move (temporary-reg src) (temporary-reg src2)) list))]))


(define (ann-term [t : (l:Terminal Reg)]) : (l:Terminal Reg)
  t)

(define (lower-terminal [t : r:Terminal] [blocks : (Dict Int r:BasicBlock)]
                        [saved-register-pairs : (List (Tuple2 X8664Register r:Var))]
                        [acc : (Tuple2 Int (l:UnvalidatedBlockMap Reg))])
  : (Tuple3 (List (l:Instruction Reg)) (l:Terminal Reg) (Tuple2 Int (l:UnvalidatedBlockMap Reg)))
  (case t
    [(r:return name)
     (tuple3
       (append
         (map
           (lambda ([p : (Tuple2 X8664Register r:Var)])
             (case p
               [(tuple2 reg var)
                (l:move (fixed-reg reg) (temporary-reg var))]))
           saved-register-pairs)
         (varargs list
           (l:move (fixed-reg (rax)) (temporary-reg name))))
       (ann-term (l:return (fixed-reg (rax))))
       acc)]
    [(r:halt)
     (tuple3 (empty) (ann-term (l:halt)) acc)]
    [(r:jump index args)
     (tuple3
       (move-args (match-args index args blocks))
       (ann-term (l:jump index))
       acc)]
    [(r:cond-jump condition t-index t-args f-index f-args)
     (match-define (tuple2 next-block acc-blocks) acc)
     (match-define new-acc-blocks
       (l:unvalidated-block-map-add-block
         (l:unvalidated-block-map-add-block
            acc-blocks
            next-block
            (l:basic-block (move-args (match-args t-index t-args blocks))
                           (ann-term (l:jump t-index))))
         (+ 1 next-block)
         (l:basic-block (move-args (match-args f-index f-args blocks))
                        (ann-term (l:jump f-index)))))

     (tuple3
       (case condition
         [(r:memory-compare-condition negated? size v1 v2)
          (varargs list
            (l:move (fixed-reg (rcx)) (temporary-reg size))
            (l:move (fixed-reg (rdi)) (temporary-reg v1))
            (l:move (fixed-reg (rsi)) (temporary-reg v2)))]
         [_
          (empty)])
       (ann-term (l:cond-jump/false-fall-through
                   (case condition
                     [(r:var-condition v)
                      (l:reg-condition (temporary-reg v))]
                     [(r:negated-var-condition v)
                      (l:negated-reg-condition (temporary-reg v))]
                     [(r:comparison-condition op left right)
                      (l:comparison-condition op (temporary-reg left) (temporary-reg right))]
                     [(r:memory-compare-condition negated? size v1 v2)
                      (l:memory-compare-condition
                        negated? (fixed-reg (rcx)) (fixed-reg (rdi)) (fixed-reg (rsi)))])
                   next-block
                   (+ next-block 1)))
       (tuple2 (+ next-block 2) new-acc-blocks))]))


;; TODO make this not use the heap so that it can be used from the GC system
(define (put-arguments-in-registers
          [args : (List r:Var)]
          [regs : (List X8664Register)]
          [overflow-register : X8664Register]) :
  (Tuple2 (List (l:Instruction Reg)) (List Reg))
  (case regs
    [(empty)
     (case args
       [(empty) (tuple2 (empty) (empty))]
       [_
         (tuple2
           (cons
             (l:move (fixed-reg overflow-register) (fixed-reg (r15)))
             (cons
               (l:numeric-op-immediate (fixed-reg (r15)) (plus) (s32 (* 8 (length args))))
               (put-arguments-in-memory args 0 overflow-register)))
           (cons (fixed-reg overflow-register) (empty)))])]
    [(cons reg regs)
     (case args
       [(empty) (tuple2 (empty) (empty))]
       [(cons arg args)
        (case (put-arguments-in-registers args regs overflow-register)
          [(tuple2 arg-insts arg-regs)
           (tuple2
             (cons (l:move (fixed-reg reg) (temporary-reg arg)) arg-insts)
             (cons (fixed-reg reg) arg-regs))])])]))

(define (put-arguments-in-memory
          [args : (List r:Var)]
          [offset : Int]
          [overflow-register : X8664Register]) :
  (List (l:Instruction Reg))
  (case args
    [(empty) (empty)]
    [(cons arg args)
     (cons
       (l:store-8byte (fixed-reg overflow-register) offset (temporary-reg arg))
       (put-arguments-in-memory args (+ offset 8) overflow-register))]))



(define (lower-instruction [i : r:Instruction]) : (List (l:Instruction Reg))
  (case i
    [(r:int-literal output v)
     (varargs list (l:int-literal (temporary-reg output) v))]
    [(r:symbol-address-inst output v)
     (varargs list (l:symbol-address (temporary-reg output) v))]
    [(r:bin-op-inst output op l r)
     (varargs list
       (l:move (temporary-reg output) (temporary-reg l))
       (l:bin-op-inst (temporary-reg output) op (temporary-reg r)))]
    [(r:numeric-op-immediate output op l v)
     (varargs list
       (l:move (temporary-reg output) (temporary-reg l))
       (l:numeric-op-immediate (temporary-reg output) op v))]
    [(r:unary-op-inst output op input)
     (varargs list
       (l:unary-op-inst (temporary-reg output) op (temporary-reg input)))]
    [(r:function-allocate-inst output num-bytes)
     (varargs list
       (l:bin-op-inst (fixed-reg (rsp)) (numeric-bin-op (sub)) (temporary-reg num-bytes))
       (l:move (temporary-reg output) (fixed-reg (rsp))))]
    [(r:heap-allocate-inst output num-bytes)
     (varargs list
       (l:move (temporary-reg output) (fixed-reg (r15)))
       (l:bin-op-inst (fixed-reg (r15)) (numeric-bin-op (plus)) (temporary-reg num-bytes)))]
    [(r:pointer-set!-inst (r:eight-byte-mem-op) ptr offset val)
     (varargs list (l:store-8byte (temporary-reg ptr) offset (temporary-reg val)))]
    [(r:pointer-ref-inst output (r:eight-byte-mem-op) loc offset)
     (varargs list (l:load-8byte (temporary-reg output) (temporary-reg loc) offset))]
    [(r:pointer-set!-inst (r:one-byte-mem-op) ptr offset val)
     (varargs list (l:store-least-significant-byte (temporary-reg ptr) offset (temporary-reg val)))]
    [(r:pointer-ref-inst output (r:one-byte-mem-op) loc offset)
     (varargs list (l:load-zero-extended-byte (temporary-reg output) (temporary-reg loc) offset))]
    [(r:memory-compare-inst output size v1 v2)
     (varargs list
       (l:move (fixed-reg (rcx)) (temporary-reg size))
       (l:move (fixed-reg (rdi)) (temporary-reg v1))
       (l:move (fixed-reg (rsi)) (temporary-reg v2))
       (l:compare-memory (temporary-reg output) (fixed-reg (rcx)) (fixed-reg (rdi)) (fixed-reg (rsi))))]
    [(r:function-call-inst output f args)
     (match-define (tuple2 arg-insts arg-regs)
       (put-arguments-in-registers args (varargs list (rdi) (rsi) (rdx) (rcx) (r8) (r9)) (r10)))
     (append
       arg-insts
       (append
         (case f
           [(r:direct-call f) (empty)]
           [(r:indirect-function-call f) (empty)]
           [(r:closure-call c)
            (varargs list (l:move (fixed-reg (r11)) (temporary-reg c)))]
           [(r:syscall s) (varargs list (l:int-literal (fixed-reg (rax)) (syscall-number s)))])
         (varargs list
           (l:function-call-inst
             (fixed-reg (rax))
             (case f
               [(r:direct-call f) (l:direct-call f)]
               [(r:indirect-function-call f) (l:indirect-function-call (temporary-reg f))]
               [(r:closure-call _) (l:closure-call (fixed-reg (r11)))]
               [(r:syscall _) (l:syscall (fixed-reg (rax)))])
             arg-regs
             (call-conflicts))
           (l:move (temporary-reg output) (fixed-reg (rax))))))]))
