#:module lower-x86-64
#:import {
  dict {
    #:types
      Dict
    #:values
      dict-add
      dict-fold
      dict-ref
      make-dict
  }
  list {
    #:types
      List
    #:values
      append
      append*
      cons
      empty
      list
      map
      zip
      zip/left
  }
  lowered-register-language {
    #:types
      [BasicBlock l:BasicBlock]
      [FunctionDefinition l:FunctionDefinition]
      [Instruction l:Instruction]
      [Terminal l:Terminal]
    #:values
      [basic-block l:basic-block]
      [bin-op-inst l:bin-op-inst]
      [cond-jump l:cond-jump]
      [function-definition l:function-definition]
      [int-literal l:int-literal]
      [jump l:jump]
      [move l:move]
      [return l:return]
  }
  maybe {
    #:patterns
      just
      nothing
  }
  prim {
    #:types
      Boolean
      Bytes
      Int
    #:values
      +
      =
      panic
  }
  register-language {
    #:types
      [BasicBlock r:BasicBlock]
      [FunctionDefinition r:FunctionDefinition]
      [Instruction r:Instruction]
      [Terminal r:Terminal]
      [Var r:Var]
    #:values
      var->bytes
      var=?
    #:patterns
      [basic-block r:basic-block]
      [bin-op-inst r:bin-op-inst]
      [cond-jump r:cond-jump]
      [function-definition r:function-definition]
      [int-literal r:int-literal]
      [jump r:jump]
      [return r:return]
  }
  set {
    #:types
      Set
    #:values
      make-set
      set-add-all
  }
  tuples {
    #:types
      Tuple2
      Tuple3
    #:values
      tuple2
      tuple3
    #:patterns
      tuple2
      tuple3
  }
}
(export
  #:types (Reg X8664Register)
  #:values (lower-function reg->bytes x86-64-register=?  x86-64-register->bytes reg=?
            all-x86-64-registers all-fixed-registers)
  #:patterns ())
(types
  (define-type X8664Register
    (rax)
    (rdi)
    (rsi)
    (rdx)
    (rcx)
    (r8)
    (r9))
  (define-type Reg
    (fixed-reg [r : X8664Register])
    (temporary-reg [r : r:Var])))

(define (empty-blocks) : (Dict Int (l:BasicBlock Reg))
  (make-dict =))


(define (all-x86-64-registers) : (Set X8664Register)
  (set-add-all
    (make-set x86-64-register=?)
    (varargs list
      (rax)
      (rcx)
      (rdx)
      (rdi)
      (rsi)
      (r8)
      (r9))))

(define (all-fixed-registers) : (Set Reg)
  (set-add-all
    (make-set reg=?)
    (map
      fixed-reg
      (varargs list
        (rax)
        (rcx)
        (rdx)
        (rdi)
        (rsi)
        (r8)
        (r9)))))

(define (reg->bytes [reg : Reg]) : Bytes
  (case reg
    [(fixed-reg (rax)) #"_rax"]
    [(fixed-reg (rcx)) #"_rcx"]
    [(fixed-reg (rdx)) #"_rdx"]
    [(fixed-reg (rdi)) #"_rdi"]
    [(fixed-reg (rsi)) #"_rsi"]
    [(fixed-reg (r8)) #"_r8"]
    [(fixed-reg (r9)) #"_r9"]
    [(temporary-reg v) (var->bytes v)]))


(define (x86-64-register->bytes [reg : X8664Register]) : Bytes
  (case reg
    [(rax) #"rax"]
    [(rcx) #"rcx"]
    [(rdx) #"rdx"]
    [(rdi) #"rdi"]
    [(rsi) #"rsi"]
    [(r8) #"r8"]
    [(r9) #"r9"]))


(define (x86-64-register=? [reg1 : X8664Register] [reg2 : X8664Register]) : Boolean
  (case (tuple2 reg1 reg2)
    [(tuple2 (rax) (rax)) #t]
    [(tuple2 (rcx) (rcx)) #t]
    [(tuple2 (rdx) (rdx)) #t]
    [(tuple2 (rdi) (rdi)) #t]
    [(tuple2 (rsi) (rsi)) #t]
    [(tuple2 (r8) (r8)) #t]
    [(tuple2 (r9) (r9)) #t]
    [(tuple2 _ _) #f]))

(define (reg=? [reg1 : Reg] [reg2 : Reg]) : Boolean
  (case (tuple2 reg1 reg2)
    [(tuple2 (fixed-reg r1) (fixed-reg r2))
     (x86-64-register=? r1 r2)]
    [(tuple2 (temporary-reg v1) (temporary-reg v2)) (var=? v1 v2)]
    [(tuple2 (fixed-reg _) (temporary-reg _)) #f]
    [(tuple2 (temporary-reg _) (fixed-reg _)) #f]))

(define (lower-function [fun : r:FunctionDefinition]) : (l:FunctionDefinition Reg)
  (match-define (r:function-definition name entry-block-num blocks _ next-block) fun)
  (match-define (tuple2 next-block new-blocks)
    (dict-fold
      blocks
      (lambda ([index : Int]  [b : r:BasicBlock]
               [acc : (Tuple2 Int (Dict Int (l:BasicBlock Reg)))])
        (lower-block index b blocks acc))
      (tuple2 next-block (empty-blocks))))
  (match-define lowered-entry-block next-block)
  (match-define next-bock (+ 1 next-block))
  (match-define new-blocks
    (dict-add new-blocks lowered-entry-block (make-entry-block entry-block-num blocks)))

  (l:function-definition name 0 lowered-entry-block new-blocks))


(define (make-entry-block [entry-block-num : Int] [blocks : (Dict Int r:BasicBlock)])
  : (l:BasicBlock Reg)
  (case (dict-ref blocks entry-block-num)
    [(nothing) (panic #"No entry block")]
    [(just (r:basic-block args _ _))
     (l:basic-block
       (case (zip/left args (varargs list (rdi) (rsi) (rdx) (rcx) (r8) (r9)))
         [(nothing) (panic #"Too long initial args")]
         [(just linked-args)
          (map
            (lambda ([t : (Tuple2 r:Var X8664Register)])
              (case t
                [(tuple2 v reg)
                 (l:move (temporary-reg v) (fixed-reg reg))]))
            linked-args)])
       ((lambda () : (l:Terminal Reg) (l:jump entry-block-num))))]))

(define (lower-block [index : Int]  [b : r:BasicBlock]
                     [blocks : (Dict Int r:BasicBlock)]
                     [acc : (Tuple2 Int (Dict Int (l:BasicBlock Reg)))])
  : (Tuple2 Int (Dict Int (l:BasicBlock Reg)))
  (match-define (r:basic-block _ instructions terminal) b)
  (match-define (tuple3 end-insts terminal (tuple2 next-block acc-blocks))
    (lower-terminal terminal blocks acc))
  (tuple2
    next-block
    (dict-add
      acc-blocks
      index
      (l:basic-block
        (append
          (append* (map lower-instruction instructions))
          end-insts)
        terminal))))

(define (match-args [index : Int] [args : (List r:Var)] [blocks : (Dict Int r:BasicBlock)])
  : (List (Tuple2 r:Var r:Var))
  (case (dict-ref blocks index)
    [(nothing) (panic #"No block")]
    [(just (r:basic-block block-args _ _))
     (case (zip args block-args)
       [(nothing) (panic #"Args don't match")]
       [(just v) v])]))

(define (move-args [args : (List (Tuple2 r:Var r:Var))]) : (List (l:Instruction Reg))
  (map (lambda ([t : (Tuple2 r:Var r:Var)])
         (case t
           [(tuple2 src dest)
            (l:move (temporary-reg dest) (temporary-reg src))]))
       args))

(define (ann-term [t : (l:Terminal Reg)]) : (l:Terminal Reg)
  t)

(define (lower-terminal [t : r:Terminal] [blocks : (Dict Int r:BasicBlock)]
                        [acc : (Tuple2 Int (Dict Int (l:BasicBlock Reg)))])
  : (Tuple3 (List (l:Instruction Reg)) (l:Terminal Reg) (Tuple2 Int (Dict Int (l:BasicBlock Reg))))
  (case t
    [(r:return name)
     (tuple3
       (cons (l:move (fixed-reg (rax)) (temporary-reg name)) (empty))
       (ann-term (l:return (fixed-reg (rax))))
       acc)]
    [(r:jump index args)
     (tuple3
       (move-args (match-args index args blocks))
       (ann-term (l:jump index))
       acc)]
    [(r:cond-jump v t-index t-args f-index f-args)
     (match-define (tuple2 next-block acc-blocks) acc)
     (match-define new-acc-blocks
       (dict-add
         (dict-add acc-blocks next-block
            (l:basic-block (move-args (match-args t-index t-args blocks))
                           (ann-term (l:jump t-index))))
         (+ 1 next-block)
         (l:basic-block (move-args (match-args f-index f-args blocks))
                        (ann-term (l:jump f-index)))))
     (tuple3
       (cons (l:move (fixed-reg (rcx)) (temporary-reg v)) (empty))
       (ann-term (l:cond-jump (fixed-reg (rcx)) next-block (+ next-block 1)))
       (tuple2 (+ next-block 2) new-acc-blocks))]))

(define (lower-instruction [i : r:Instruction]) : (List (l:Instruction Reg))
  (case i
    [(r:int-literal output v)
     (varargs list (l:int-literal (temporary-reg output) v))]
    [(r:bin-op-inst output op l r)
     (varargs list
       (l:move (temporary-reg output) (temporary-reg l))
       (l:bin-op-inst (temporary-reg output) op (temporary-reg r)))]))
