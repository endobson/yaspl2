#:module lower-x86-64
#:import {
  dict {
    #:types
      Dict
    #:values
      dict-fold
      make-dict
  }
  lowered-register-language {
    #:types
      [BasicBlock l:BasicBlock]
      [FunctionDefinition l:FunctionDefinition]
    #:values
      [function-definition l:function-definition]
  }
  prim {
    #:types
      Int
      Void
    #:values
      =
  }
  register-language {
    #:types
      [BasicBlock r:BasicBlock]
      [FunctionDefinition r:FunctionDefinition]
    #:patterns
      [basic-block r:basic-block]
      [function-definition r:function-definition]
  }
  tuples {
    #:types
      Tuple2
    #:values
      tuple2
    #:patterns
      tuple2
  }
}
(export
  #:types ()
  #:values (lower-function)
  #:patterns ())
(types)

(define (empty-blocks) : (Dict Int (l:BasicBlock Void))
  (make-dict =))

(define (lower-function [fun : r:FunctionDefinition]) : (l:FunctionDefinition Void)
  (match-define (r:function-definition name blocks _ next-block) fun)
  (match-define (tuple2 next-block new-blocks)
    (dict-fold blocks lower-block (tuple2 next-block (empty-blocks))))

  (l:function-definition name 0 new-blocks))

(define (lower-block [index : Int]  [b : r:BasicBlock] [acc : (Tuple2 Int (Dict Int (l:BasicBlock Void)))])
  : (Tuple2 Int (Dict Int (l:BasicBlock Void)))
  (match-define (r:basic-block args instructions terminal) b)
  acc)
