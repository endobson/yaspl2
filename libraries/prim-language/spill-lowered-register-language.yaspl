#:module (spill-lowered-register-language)
#:import {
  (dict)
  (either)
  (list)
  (lower-x86-64)
  (lowered-live-variables)
  (lowered-register-language)
  (maybe)
  (prim)
  (register-language) {
    #:types
      Var
    #:values
      var-cmp
      var=?
  }
  (set)
  (tuples)
}
(export
  #:types ()
  #:values (spill-variables)
  #:patterns ())
(types)

(define (spill-variables [f : (FunctionDefinition Reg)] [vars : (Set Var)]) : (FunctionDefinition Reg)
  (match-define (function-definition name num-temporaries block-map) f)
  (match-define (tuple2 new-num-temporaries spilled)
    (foldl
      (lambda ([v : Var] [acc : (Tuple2 Int (Dict Var Int))])
        (case acc
          [(tuple2 num-temp dict)
           (tuple2 (+ 1 num-temp) (dict-add dict v num-temp))]))
      (set->list vars)
      (tuple2 num-temporaries ((lambda () : (Dict Var Int) (make-dict var-cmp))))))
  (case (validate-block-map
          (unvalidated-block-map-map
            (block-map->unvalidated-block-map block-map)
            (lambda ([index : Int] [b : (BasicBlock Reg)])
              (spill-variables/block b spilled))))
    [(left v) (panic v)]
    [(right block-map)
     (function-definition name new-num-temporaries block-map)]))


(define (spill-variables/block [b : (BasicBlock Reg)] [spilled : (Dict Var Int)]) : (BasicBlock Reg)
  (case b
    [(basic-block instructions terminal)
     (match-define term-instructions (spill-variables/terminal terminal spilled))
     (basic-block
       (spill-variables/reverse-instructions
         (reverse instructions)
         term-instructions
         spilled)
       terminal)]))

(define (spill-variables/terminal [t : (Terminal Reg)] [spilled : (Dict Var Int)])
  : (List (Instruction Reg))
  (add-load-spilled
    (case t
          [(return reg)
           (varargs list reg)]
          [(halt)
           (empty)]
          [(jump _)
           (empty)]
          [(fall-through _)
           (empty)]
          [(cond-jump/false-fall-through (reg-condition reg) _ _)
           (varargs list reg)]
          [(cond-jump/false-fall-through (negated-reg-condition reg) _ _)
           (varargs list reg)]
          [(cond-jump/false-fall-through (comparison-condition _ reg1 reg2) _ _)
           (varargs list reg1 reg2)]
          [(cond-jump/false-fall-through (memory-compare-condition _ size reg1 reg2) _ _)
           (varargs list size reg1 reg2)])
    (empty) spilled))

(define (spill-variables/reverse-instructions
          [instructions : (List (Instruction Reg))]
          [acc : (List (Instruction Reg))]
          [spilled : (Dict Var Int)])
  : (List (Instruction Reg))
  (case instructions
    [(empty) acc]
    [(cons inst instructions)
     (spill-variables/reverse-instructions
       instructions
       (spill-variables/instruction inst acc spilled)
       spilled)]))

(define (spill-variables/instruction
          [instruction : (Instruction Reg)]
          [acc : (List (Instruction Reg))]
          [spilled : (Dict Var Int)])
  : (List (Instruction Reg))
  (add-load-spilled
    (set->list (input-registers instruction reg=?))
    (cons
      instruction
      (add-store-spilled
        (set->list (output-registers instruction reg=?))
        acc
        spilled))
    spilled))

(define (add-load-spilled [regs : (List Reg)]
                          [instructions : (List (Instruction Reg))]
                          [spilled : (Dict Var Int)]) : (List (Instruction Reg))
  (case regs
    [(empty) instructions]
    [(cons reg regs)
     (case reg
       [(fixed-reg _)
        (add-load-spilled regs instructions spilled)]
       [(temporary-reg v)
        (case (dict-ref spilled v)
          [(nothing)
           (add-load-spilled regs instructions spilled)]
          [(just temp)
           (add-load-spilled regs (cons (load-temporary reg temp) instructions) spilled)])])]))

(define (add-store-spilled [regs : (List Reg)]
                           [instructions : (List (Instruction Reg))]
                           [spilled : (Dict Var Int)]) : (List (Instruction Reg))
  (case regs
    [(empty) instructions]
    [(cons reg regs)
     (case reg
       [(fixed-reg _)
        (add-store-spilled regs instructions spilled)]
       [(temporary-reg v)
        (case (dict-ref spilled v)
          [(nothing)
           (add-store-spilled regs instructions spilled)]
          [(just temp)
           (add-store-spilled regs (cons (store-temporary temp reg) instructions) spilled)])])]))
