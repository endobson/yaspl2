#:module (register-language-compiler)
#:import {
  (color-graph)
  (dict)
  (either)
  {(lower-x86-64)
    {#:types
      Reg
      X8664Register
    }
    {#:values
      lower-function
      reg-cmp
      x86-64-register=?
    }
    {#:patterns
      fixed-reg
      temporary-reg
    }
  }
  {(lowered-live-variables)
    {#:values
      blocks->live-out-states
      live-variables
    }
  }
  {(lowered-register-language)
    {#:types
      [FunctionDefinition l:FunctionDefinition]
    }
  }
  {(lowered-register-language-to-x86-64)
    {#:values
      assign-registers
      function-definition->assembly-fragment
    }
  }
  (maybe)
  (prim)
  {(register-language)
    {#:types
      [FunctionDefinition r:FunctionDefinition]
    }
  }
  {(simplify-lowered-register-language)
    {#:values
      [simplify-assigned-registers-function-definition l:simplify-assigned-registers-function-definition]
    }
  }
  {(simplify-lowered-register-language-x86-64)
    {#:values
      [simplify-assigned-registers-function-definition l86-64:simplify-assigned-registers-function-definition]
    }
  }
  {(spill-lowered-register-language)
    {#:values
      spill-variables
    }
  }
  (tuples)
  (yaspl var)
  (yaspl x86-64-assembly)
}
(export
  (#:types CompileFunctionIntermediates)
  (#:values compile-function compile-function/intermediates)
  (#:patterns compile-function-intermediates))
(types
  (define-type CompileFunctionIntermediates
    (compile-function-intermediates
      [register : r:FunctionDefinition]
      [original-lowered : (l:FunctionDefinition Reg)]
      [spilled-lowered : (l:FunctionDefinition Reg)]
      [assem : TextFragment])))


(define (compile-function [f : r:FunctionDefinition])
  : (Either Bytes TextFragment)
  (case (compile-function/intermediates f)
    [(left v) (left v)]
    [(right intermediates)
     (right (compile-function-intermediates-assem intermediates))]))

(define (compile-function/intermediates [f : r:FunctionDefinition])
  : (Either Bytes CompileFunctionIntermediates)
  (match-define original-lowered (lower-function f))
  (match-define (tuple2 spilled-lowered assignments) (color-function original-lowered))
  (let ([opt-assigned-reg
         (l86-64:simplify-assigned-registers-function-definition
           (l:simplify-assigned-registers-function-definition
             (assign-registers
               spilled-lowered
               (lambda ([r : Reg]) : X8664Register
                 (case r
                   [(fixed-reg r) r]
                   [(temporary-reg v)
                    (case (dict-ref assignments v)
                      [(nothing) (panic #"No assignment")]
                      [(just r) r])])))
             x86-64-register=?))])
    (right (compile-function-intermediates f original-lowered spilled-lowered
                                           (function-definition->assembly-fragment
                                             opt-assigned-reg)))))

(define (color-function [f : (l:FunctionDefinition Reg)])
  : (Tuple2 (l:FunctionDefinition Reg) (Dict Var X8664Register))
  (let ([live (live-variables f reg-cmp)])
    (let ([live-outs (blocks->live-out-states live)])
      (case (color-graph (initial-state live-outs))
        [(left vs)
         (color-function (spill-variables f vs))]
        [(right assignments)
         (tuple2 f assignments)]))))
