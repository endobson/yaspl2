#:module (chained-register-language-to-x86-64)
#:import {
  (assigned-register-language)
  (block-number)
  (bytes)
  {(chained-register-language)
    {#:types
      [BasicBlock c:BasicBlock]
      [BlockTerminal c:BlockTerminal]
      [Chain c:Chain]
      [ChainTerminal c:ChainTerminal]
      [FunctionDefinition c:FunctionDefinition]
    }
    {#:patterns
      [basic-block c:basic-block]
      [chain c:chain]
      [cond-jump c:cond-jump]
      [fall-through c:fall-through]
      [function-definition c:function-definition]
      [halt c:halt]
      [jump c:jump]
      [return c:return]
      [tail-call c:tail-call]
    }
  }
  (join-list)
  (list)
  {(lower-x86-64)
    {#:types
      X8664Register
    }
    {#:patterns
      r10
      r11
      r12
      r13
      r14
      r15
      r8
      r9
      rax
      rbp
      rbx
      rcx
      rdi
      rdx
      rsi
      rsp
    }
  }
  (prim)
  (yaspl math-operations)
  {(yaspl x86-64-assembly)
    {#:types
      [Instruction a:Instruction]
      [Register64 a:Register64]
      [Register8 a:Register8]
      [Scale a:Scale]
      TextFragment
      [TextFragmentPart a:TextFragmentPart]
    }
    {#:values
      addq
      [al a:al]
      andq
      [bl a:bl]
      [bpl a:bpl]
      call
      call/indirect
      [cl a:cl]
      cmpb
      cmpq
      [dil a:dil]
      [dl a:dl]
      function-fragment
      idivq
      imm64/s32
      imm8
      imulq
      imulq/imm*
      instruction-fragment
      je
      jg
      jge
      jl
      jle
      jmp
      jmp/indirect
      jne
      leaq/rip-rel
      mem
      movb
      movq
      movq/imm*
      movzbq
      [named-block a:named-block]
      orq
      popq
      pushq
      [r10 a:r10]
      [r10b a:r10b]
      [r11 a:r11]
      [r11b a:r11b]
      [r12 a:r12]
      [r12b a:r12b]
      [r13 a:r13]
      [r13b a:r13b]
      [r14 a:r14]
      [r14b a:r14b]
      [r15 a:r15]
      [r15b a:r15b]
      r64m-mem
      r64m-reg
      r64mi-imm-s32*
      r64mi-mem
      r64mi-reg
      [r8 a:r8]
      [r8b a:r8b]
      r8m-mem
      r8m-reg
      r8mi-imm-s8
      r8mi-reg
      [r9 a:r9]
      [r9b a:r9b]
      [rax a:rax]
      [rbp a:rbp]
      [rbx a:rbx]
      [rcx a:rcx]
      [rdi a:rdi]
      [rdx a:rdx]
      rep-stosb
      rep-stosq
      repe-cmpsb
      ret
      [rsi a:rsi]
      [rsp a:rsp]
      [scale-1 a:scale-1]
      [scale-8 a:scale-8]
      scaled
      sete
      setg
      setge
      setl
      setle
      setne
      shlq
      shlq/imm
      shrq
      shrq/imm
      [sil a:sil]
      subq
      [syscall a:syscall]
      test
      ud2
      xorq
    }
  }
}
(export
  (#:values chained-function-definition->assembly-fragment))
(types)

(define (chained-function-definition->assembly-fragment
          [name : Bytes]
          [f : (c:FunctionDefinition X8664Register)]) : TextFragment
  (match-define (c:function-definition chains) f)
  (match-define block-prefix (bytes-append (varargs list name #"_")))
  (function-fragment name
    ;(cons-jl
      ;; The first chain is always the entry point so add the label for the function
      ;; right before it.
      ;(label-fragment name)
      (concat-map-jl/list
        (lambda ([chain : (c:Chain X8664Register)])
          (match-define (c:chain blocks term) chain)
          (append-jl
            (concat-map-jl/list
              (lambda ([block : (c:BasicBlock X8664Register)])
                (match-define (c:basic-block block-num insts term) block)
                (a:named-block
                  (make-block-label block-prefix block-num)
                  (append-jl
                    (concat-map-jl/list convert-instruction insts)
                    (convert-block-terminal block-prefix term))))
              blocks)
            (convert-chain-terminal block-prefix term)))
        chains)))


(define (make-block-label [block-prefix : Bytes] [block-num : BlockNumber]) : Bytes
  (bytes-append (varargs list block-prefix (block-number->bytes block-num))))

(define (convert-register [r : X8664Register]) : a:Register64
  (case r
    [(rax) (a:rax)]
    [(rbx) (a:rbx)]
    [(rcx) (a:rcx)]
    [(rdx) (a:rdx)]
    [(rdi) (a:rdi)]
    [(rsi) (a:rsi)]
    [(rbp) (a:rbp)]
    [(rsp) (a:rsp)]
    [(r8) (a:r8)]
    [(r9) (a:r9)]
    [(r10) (a:r10)]
    [(r11) (a:r11)]
    [(r12) (a:r12)]
    [(r13) (a:r13)]
    [(r14) (a:r14)]
    [(r15) (a:r15)]))

(define (convert-register/8 [r : X8664Register]) : a:Register8
  (case r
    [(rax) (a:al)]
    [(rbx) (a:bl)]
    [(rcx) (a:cl)]
    [(rdx) (a:dl)]
    [(rdi) (a:dil)]
    [(rsi) (a:sil)]
    [(rbp) (a:bpl)]
    [(r8) (a:r8b)]
    [(r9) (a:r9b)]
    [(r10) (a:r10b)]
    [(r11) (a:r11b)]
    [(r12) (a:r12b)]
    [(r13) (a:r13b)]
    [(r14) (a:r14b)]
    [(r15) (a:r15b)]
    [(rsp) (panic #"No corresponding 8bit register for rsp")]))

(define (convert-scale [s : PointerOffsetScale]) : a:Scale
  (case s
    [(one-byte-scale) (a:scale-1)]
    [(eight-byte-scale) (a:scale-8)]))

(define (convert-instruction [i : (Instruction X8664Register)]) : (JoinList a:Instruction)
  (case i
    [(int-literal r v)
     (single-jl (movq/imm* v (convert-register r)))]
    [(symbol-address r sym)
     (single-jl (leaq/rip-rel sym (convert-register r)))]
    ;; TODO check that the registers are sensible for function calls
    [(function-call-inst _ (syscall _) _ _)
     (single-jl (a:syscall))]
    [(function-call-inst _ (direct-call f) _ _)
     (single-jl (call f))]
    [(function-call-inst _ (indirect-function-call f) _ _)
     (single-jl (call/indirect (r64m-reg (convert-register f))))]
    [(function-call-inst _ (closure-call c) _ _)
     (single-jl (call/indirect (r64m-mem (mem (convert-register c) 8))))]
    [(move out in)
     (single-jl (movq (r64mi-reg (convert-register in)) (r64m-reg (convert-register out))))]
    [(push in)
     (single-jl (pushq (r64mi-reg (convert-register in))))]
    [(pop out)
     (single-jl (popq (r64m-reg (convert-register out))))]
    [(store-8byte loc offset val)
     (single-jl (movq (r64mi-reg (convert-register val))
                      (r64m-mem (mem (convert-register loc) offset))))]
    [(store-8byte/scaled loc index scale offset val)
     (single-jl (movq (r64mi-reg (convert-register val))
                      (r64m-mem (scaled (convert-register loc) (convert-scale scale)
                                      (convert-register index) offset))))]
    [(store-8byte-repeated (rdi) (rax) (rcx))
     (single-jl (rep-stosq))]
    [(store-8byte-repeated _loc _val _amount)
     (panic #"store-8byte-repeated called with wrong registers")]
    [(store-8byte/immediate loc offset val)
     (single-jl (movq (r64mi-imm-s32* val)
                      (r64m-mem (mem (convert-register loc) offset))))]
    [(store-least-significant-byte loc offset val)
     (single-jl (movb (r8mi-reg (convert-register/8 val))
                      (mem (convert-register loc) offset)))]
    [(store-least-significant-byte/scaled loc index scale offset val)
     (single-jl (movb (r8mi-reg (convert-register/8 val))
                      (scaled (convert-register loc) (convert-scale scale)
                              (convert-register index) offset)))]
    [(store-least-significant-byte-repeated (rdi) (rax) (rcx))
     (single-jl (rep-stosb))]
    [(store-least-significant-byte/immediate loc offset val)
     (single-jl (movb (imm8 (u8->s64 val))
                      (mem (convert-register loc) offset)))]
    [(store-least-significant-byte-repeated _loc _val _amount)
     (panic #"store-least-significant-byte-repeated called with wrong registers")]
    [(store-temporary index val)
     (single-jl (movq (r64mi-reg (convert-register val))
                      (r64m-mem (mem (a:rbp) (* (+ index 1) (- 0 8))))))]
    [(load-8byte out loc offset)
     (single-jl (movq (r64mi-mem (mem (convert-register loc) offset))
                      (r64m-reg (convert-register out))))]
    [(load-8byte/scaled out loc index scale offset)
     (single-jl
       (movq (r64mi-mem (scaled (convert-register loc) (convert-scale scale) (convert-register index) offset))
             (r64m-reg (convert-register out))))]
    [(load-zero-extended-byte out loc offset)
     (single-jl (movzbq (r8m-mem (mem (convert-register loc) offset)) (convert-register out)))]
    [(load-zero-extended-byte/scaled out loc index scale offset)
     (single-jl
       (movzbq
         (r8m-mem (scaled (convert-register loc) (convert-scale scale) (convert-register index) offset))
         (convert-register out)))]
    [(load-temporary out index)
     (single-jl (movq (r64mi-mem (mem (a:rbp) (* (+ index 1) (- 0 8))))
                      (r64m-reg (convert-register out))))]
    [(free-unary-op-inst out (truncate-unsigned-int64->unsigned-int8) in)
     (single-jl (movzbq (r8m-reg (convert-register/8 in)) (convert-register out)))]
    [(fixed-unary-op-inst in-out (boolean-not))
     (single-jl (xorq (imm64/s32 1) (convert-register in-out)))]
    [(numeric-op-inst out (add-op) in)
     (single-jl (addq (r64mi-reg (convert-register in)) (r64m-reg (convert-register out))))]
    [(numeric-op-immediate out (add-op) v)
     (single-jl (addq (r64mi-imm-s32* v) (r64m-reg (convert-register out))))]
    [(numeric-op-inst out (sub-op) in)
     (single-jl (subq (r64mi-reg (convert-register in)) (convert-register out)))]
    [(numeric-op-immediate out (sub-op) v)
     (single-jl (subq (r64mi-imm-s32* v) (convert-register out)))]
    [(numeric-op-inst out (mult-op) in)
     (single-jl (imulq (convert-register in) (convert-register out)))]
    [(numeric-op-immediate out (mult-op) v)
     (single-jl (imulq/imm* v (r64m-reg (convert-register out)) (convert-register out)))]
    [(mult-immediate out in v)
     (single-jl (imulq/imm* v (r64m-reg (convert-register in)) (convert-register out)))]
    [(quotient-remainder-inst (rax) (rdx) (rdx) (rax) div)
     (single-jl (idivq (convert-register div)))]
    [(quotient-remainder-inst _ _ _ _ _)
     (panic #"Unsupported quotient-remainder registers")]
    [(numeric-op-inst _out (quotient-op) _in)
     (panic #"Quotient needs to be converted tq quotient-remainder-inst")]
    [(numeric-op-immediate _out (quotient-op) _v)
     (panic #"Quotient doesnt support immediate operations")]
    [(numeric-op-inst _out (remainder-op) _in)
     (panic #"Remainder needs to be converted tq quotient-remainder-inst")]
    [(numeric-op-immediate _out (remainder-op) _v)
     (panic #"Remainder doesnt support immediate operations")]
    [(numeric-op-inst out (bitwise-and-op) in)
     (single-jl (andq (r64mi-reg (convert-register in)) (r64m-reg (convert-register out))))]
    [(numeric-op-immediate _out (bitwise-and-op) _v)
     (panic #"And doesn't support immediate operations")]
    [(numeric-op-inst out (bitwise-ior-op) in)
     (single-jl (orq (convert-register in) (convert-register out)))]
    [(numeric-op-immediate _out (bitwise-ior-op) _v)
     (panic #"Or doesn't support immediate operations")]
    [(numeric-op-inst out (logical-shift-left-op) (rcx))
     (single-jl (shlq (convert-register out)))]
    [(numeric-op-inst _out (logical-shift-left-op) _reg)
     (panic #"Cannot shift register other than rcx")]
    [(numeric-op-immediate out (logical-shift-left-op) v)
     ;; TODO check that 'v' is actually within s8 bounds
     (single-jl (shlq/imm (s8 (s32->s64 v)) (convert-register out)))]
    [(numeric-op-inst out (logical-shift-right-op) (rcx))
     (single-jl (shrq (convert-register out)))]
    [(numeric-op-inst _out (logical-shift-right-op) _reg)
     (panic #"Cannot shift register other than rcx")]
    [(numeric-op-immediate out (logical-shift-right-op) v)
     ;; TODO check that 'v' is actually within s8 bounds
     (single-jl (shrq/imm (s8 (s32->s64 v)) (convert-register out)))]
    [(logical-op-inst out (and-op) in)
     (single-jl (andq (r64mi-reg (convert-register in)) (r64m-reg (convert-register out))))]
    [(logical-op-inst out (ior-op) in)
     (single-jl (orq (convert-register in) (convert-register out)))]
    [(comparison-op-inst out op left right)
     (varargs join-list
       (cmpq (r64mi-reg (convert-register right)) (r64m-reg (convert-register left)))
       (case op
         [(equal-op) (sete (convert-register/8 out))]
         [(not-equal-op) (setne (convert-register/8 out))]
         [(less-than-op) (setl (convert-register/8 out))]
         [(greater-than-op) (setg (convert-register/8 out))]
         [(less-than-or-equal-op) (setle (convert-register/8 out))]
         [(greater-than-or-equal-op) (setge (convert-register/8 out))])
       (movzbq (r8m-reg (convert-register/8 out)) (convert-register out)))]
    [(comparison-op-immediate out op left right)
     (varargs join-list
       (cmpq (r64mi-imm-s32* right) (r64m-reg (convert-register left)))
       (case op
         [(equal-op) (sete (convert-register/8 out))]
         [(not-equal-op) (setne (convert-register/8 out))]
         [(less-than-op) (setl (convert-register/8 out))]
         [(greater-than-op) (setg (convert-register/8 out))]
         [(less-than-or-equal-op) (setle (convert-register/8 out))]
         [(greater-than-or-equal-op) (setge (convert-register/8 out))])
       (movzbq (r8m-reg (convert-register/8 out)) (convert-register out)))]
    ;; TODO check that these are the right registers
    [(compare-memory out _ _ _)
     (varargs join-list
       (repe-cmpsb)
       (sete (convert-register/8 out))
       (movzbq (r8m-reg (convert-register/8 out)) (convert-register out)))]))

(define (convert-chain-terminal [block-prefix : Bytes] [t : (c:ChainTerminal X8664Register)])
  : (JoinList a:TextFragmentPart)
  (map-jl
    instruction-fragment
    (case t
      [(c:return _)
       (varargs join-list
         (popq (r64m-reg (a:rbp)))
         (ret))]
      [(c:halt)
       (single-jl (ud2))]
      [(c:tail-call f _)
       (append-jl
         (varargs join-list
           (popq (r64m-reg (a:rbp))))
         (case f
           [(syscall _)
            ;; This really isn't a tail call but since syscalls cannot call more it is ok.
            (varargs join-list
              (a:syscall)
              (ret))]
           [(direct-call f)
            (single-jl (jmp f))]
           [(indirect-function-call f)
            (single-jl (jmp/indirect (r64m-reg (convert-register f))))]
           [(closure-call c)
            (single-jl (jmp/indirect (r64m-mem (mem (convert-register c) 8))))]))]
      [(c:jump block-num)
       (single-jl (jmp (make-block-label block-prefix block-num)))])))


(define (convert-block-terminal [block-prefix : Bytes]
                                [t : (c:BlockTerminal X8664Register)])
  : (JoinList a:Instruction)
  (case t
    [(c:fall-through)
     (empty-jl)]
    [(c:cond-jump (reg-condition c) t-block-num)
     (varargs join-list
       (test (convert-register c) (convert-register c))
       (jne (make-block-label block-prefix t-block-num)))]
    [(c:cond-jump (negated-reg-condition c) t-block-num)
     (varargs join-list
       (test (convert-register c) (convert-register c))
       (je (make-block-label block-prefix t-block-num)))]
    [(c:cond-jump (comparison-condition c (compare-s64 reg-mem1 reg-imm2)) t-block-num)
     (varargs join-list
       (cmpq
         (case reg-imm2
           [(reg-or-s32-reg r) (r64mi-reg (convert-register r))]
           [(reg-or-s32-s32 imm) (r64mi-imm-s32* imm)])
         (case reg-mem1
           [(compare-mem-arg-val r) (r64m-reg (convert-register r))]
           [(compare-mem-arg-ptr r) (r64m-mem (mem (convert-register r) 0))]))
       ((case c
         [(equal-op) je]
         [(not-equal-op) jne]
         [(less-than-op) jl]
         [(greater-than-op) jg]
         [(less-than-or-equal-op) jle]
         [(greater-than-or-equal-op) jge])
        (make-block-label block-prefix t-block-num)))]
    [(c:cond-jump (comparison-condition c (compare-s8 reg-mem1 reg-imm2)) t-block-num)
     (varargs join-list
       (cmpb
         (case reg-imm2
           [(reg-or-s8-reg r) (r8mi-reg (convert-register/8 r))]
           [(reg-or-s8-s8 imm) (r8mi-imm-s8 imm)])
         (case reg-mem1
           [(compare-mem-arg-val r) (r8m-reg (convert-register/8 r))]
           [(compare-mem-arg-ptr r) (r8m-mem (mem (convert-register r) 0))]))
       ((case c
         [(equal-op) je]
         [(not-equal-op) jne]
         [(less-than-op) jl]
         [(greater-than-op) jg]
         [(less-than-or-equal-op) jle]
         [(greater-than-or-equal-op) jge])
        (make-block-label block-prefix t-block-num)))]
    ;; TODO check that these are the right registers
    [(c:cond-jump (memory-compare-condition negated? _ _ _) t-block-num)
     (varargs join-list
       (repe-cmpsb)
       ((if negated? jne je) (make-block-label block-prefix t-block-num)))]))
