#:module (color-graph-test)
#:import {
  (color-graph)
  (list)
  (lower-x86-64)
  (lowered-live-variables)
  (maybe)
  (prim)
  (prim-language)
  (prim-to-register)
  (system-abi)
  (tuples)
  (yaspl math-operations)
  (yunit)
}
(export
  (#:values main))
(types)

(define (function1) : FunctionDefinition
  (function-definition #"simple" (empty) (int64-type)
    (varargs list
      (return (int-literal 42)))))

(define (function2) : FunctionDefinition
  (function-definition #"simple" (empty) (int64-type)
    (varargs list
      (return (bin-op-expr (numeric-bin-op (add-op)) (int-literal 1) (int-literal 2))))))


(define (color-function [fun : FunctionDefinition]) : (Maybe FailedAssertion)
  (match-define (tuple2 _name reg-f) (convert-function fun (osx-abi)))
  (case (color-graph
          (initial-state
            (blocks->live-out-states
              (live-variables
                (lower-function reg-f)
                reg-cmp))))
    [_ (nothing)]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"color-graph: empty"
        (lambda ()
          (case (color-graph (initial-state (empty)))
            [_ (nothing)])))
      (test-case #"color-graph: fun1"
        (lambda () (color-function (function1))))
      (test-case #"color-graph: fun2"
        (lambda () (color-function (function2)))))))
