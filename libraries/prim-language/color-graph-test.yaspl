#:module color-graph-test
#:import {
  color-graph {
    #:values
      color-graph
      initial-state
  }
  list {
    #:values
      empty
      list
  }
  lower-x86-64 {
    #:values
      lower-function
      reg=?
  }
  lowered-live-variables {
    #:values
      blocks->live-out-states
      live-variables
  }
  maybe {
    #:types
      Maybe
    #:values
      nothing
  }
  prim {
    #:types
      Array
      Bytes
      InputPort
      Int
      OutputPort
  }
  prim-language {
    #:types
      FunctionDefinition
    #:values
      bin-op-expr
      function-definition
      int-literal
      plus
      return
  }
  prim-to-register {
    #:values
      convert-function
  }
  yunit {
    #:types
      FailedAssertion
    #:values
      new-test-case
      yunit/main
  }
}
(export)
(types)

(define (function1) : FunctionDefinition
  (function-definition #"simple" (empty)
    (varargs list
      (return (int-literal 42)))))

(define (function2) : FunctionDefinition
  (function-definition #"simple" (empty)
    (varargs list
      (return (bin-op-expr (plus) (int-literal 1) (int-literal 2))))))


(define (color-function [fun : FunctionDefinition]) : (Maybe FailedAssertion)
  (let ([unused (color-graph
                  (initial-state
                    (blocks->live-out-states
                      (live-variables
                        (lower-function (convert-function fun))
                        reg=?))))])
    (nothing)))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"color-graph: empty"
        (lambda ()
          (let ([unused (color-graph (initial-state (empty)))])
            (nothing))))
      (new-test-case #"color-graph: fun1"
        (lambda () (color-function (function1))))
      (new-test-case #"color-graph: fun2"
        (lambda () (color-function (function2)))))))
