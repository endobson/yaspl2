#:module (prim-language register-language-builder)
#:import {
  (block-number)
  (dict)
  (list)
  {(prim)
    {#:types
      Bytes
    }
  }
  (register-language)
  (tuples)
  (yaspl var)
}
(export
  (#:types Accumulator PendingBasicBlock BlockAccumulator)
  (#:values accumulator pending-basic-block block-accumulator
            start-block split-accumulator fresh-name fresh-name*
            fresh-name2 fresh-name2*
            fresh-block-number fresh-block-number* add-terminal
            add-terminal* new-arg new-arg2 add-instruction add-instructions)
  (#:patterns accumulator pending-basic-block block-accumulator))
(types
  (define-type BlockAccumulator
    (block-accumulator
      [var-counter : VarNumber]
      [next-block-num : BlockNumber]
      [blocks : (Dict BlockNumber BasicBlock)]))

  (define-type Accumulator
    (accumulator
      [var-counter : VarNumber]
      [next-block-num : BlockNumber]
      [next-block : PendingBasicBlock]
      [blocks : (Dict BlockNumber BasicBlock)]))
  (define-type PendingBasicBlock
    (pending-basic-block
      [index : BlockNumber]
      [cur-args : (List Var)]
      [reversed-instructions : (List Instruction)])))

(define (start-block [block-num : BlockNumber] [args : (List Var)] [acc : BlockAccumulator]) : Accumulator
  (match-define (block-accumulator var-counter next-block-number blocks) acc)
  (accumulator var-counter next-block-number (pending-basic-block block-num args (empty)) blocks))

(define (split-accumulator [acc : Accumulator]) : (Tuple2 PendingBasicBlock BlockAccumulator)
  (match-define (accumulator var-counter next-block-number pending blocks) acc)
  (tuple2 pending (block-accumulator var-counter next-block-number blocks)))

(define (fresh-name [v : Bytes] [acc : Accumulator]) : (Tuple2 (Tuple2 Bytes Var) Accumulator)
  (case acc
    [(accumulator var-num next-block-number next-block blocks)
     (tuple2
       (tuple2 v (var v var-num))
       (accumulator (next-var-number var-num) next-block-number next-block blocks))]))

(define (fresh-name* [v : Bytes] [acc : BlockAccumulator]) : (Tuple2 (Tuple2 Bytes Var) BlockAccumulator)
  (case acc
    [(block-accumulator var-counter next-block-number blocks)
     (tuple2
       (tuple2 v (var v var-counter))
       (block-accumulator (next-var-number var-counter) next-block-number blocks))]))

(define (fresh-name2 [v : Var] [acc : Accumulator]) : (Tuple2 (Tuple2 Var Var) Accumulator)
  (case acc
    [(accumulator var-counter next-block-number next-block blocks)
     (tuple2
       (tuple2 v (var (case v [(var n _) n]) var-counter))
       (accumulator (next-var-number var-counter) next-block-number next-block blocks))]))

(define (fresh-name2* [v : Var] [acc : BlockAccumulator]) : (Tuple2 (Tuple2 Var Var) BlockAccumulator)
  (case acc
    [(block-accumulator var-counter next-block-number blocks)
     (tuple2
       (tuple2 v (var (case v [(var n _) n]) var-counter))
       (block-accumulator (next-var-number var-counter) next-block-number blocks))]))


(define (new-arg [fresh-arg : (Tuple2 Bytes Var)]) : Var
  (case fresh-arg
    [(tuple2 _ v) v]))

(define (new-arg2 [fresh-arg : (Tuple2 Var Var)]) : Var
  (case fresh-arg
    [(tuple2 _ v) v]))


(define (fresh-block-number [acc : Accumulator]) : (Tuple2 BlockNumber Accumulator)
  (case acc
    [(accumulator var-counter block-num next-block blocks)
     (tuple2
       block-num
       (accumulator var-counter (next-block-number block-num) next-block blocks))]))

(define (fresh-block-number* [acc : BlockAccumulator]) : (Tuple2 BlockNumber BlockAccumulator)
  (case acc
    [(block-accumulator var-counter block-num blocks)
     (tuple2
       block-num
       (block-accumulator var-counter (next-block-number block-num) blocks))]))

(define (add-terminal [a : Accumulator] [term : Terminal]) : BlockAccumulator
  (case a
    [(accumulator next-var next-block (pending-basic-block n args rev-instructions) blocks)
     (block-accumulator next-var next-block
                        (dict-add blocks n (basic-block args (reverse rev-instructions) term)))]))

(define (add-terminal* [a : BlockAccumulator] [p : PendingBasicBlock] [term : Terminal]) : BlockAccumulator
  (case a
    [(block-accumulator next-var next-block blocks)
     (case p
       [(pending-basic-block n args rev-instructions)
        (block-accumulator next-var next-block
                           (dict-add blocks n (basic-block args (reverse rev-instructions)
                                                           term)))])]))

(define (add-instruction [a : Accumulator] [inst : Instruction]) : Accumulator
  (case a
    [(accumulator v b (pending-basic-block n args rev-instructions) blocks)
     (accumulator v b (pending-basic-block n args (cons inst rev-instructions)) blocks)]))

(define (add-instructions [a : Accumulator] [insts : (List Instruction)]) : Accumulator
  (case a
    [(accumulator v b (pending-basic-block n args rev-instructions) blocks)
     (accumulator v b (pending-basic-block n args (append (reverse insts) rev-instructions)) blocks)]))
