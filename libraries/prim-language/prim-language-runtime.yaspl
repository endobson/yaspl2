#:module (prim-language-runtime)
#:import {
  (join-list)
  (list)
  (prim)
  (yaspl x86-64-assembly)
}
(export
  (#:values linux-start-function-fragments osx-start-function-fragments))
(types)



(define (linux-start-function-fragments) : (List TextFragment)
  (varargs list
    (linux-start-function)
    (linux-start-break-function)
    (heap-allocate-function)))

(define (osx-start-function-fragments) : (List TextFragment)
  (varargs list
    (osx-start-function)
    (osx-start-break-function)
    (heap-allocate-function)))

(define (linux-start-function) : TextFragment
  (function-fragment
    #"_start"
    (named-block #"_start_0"
      (varargs join-list
        (jmp #"start_break")))))


(define (osx-start-function) : TextFragment
  (function-fragment
    #"start"
    (named-block #"start_0"
      (varargs join-list
        (jmp #"start_break")))))

(define (linux-start-break-function) : TextFragment
  (function-fragment
    #"start_break"
    (varargs append-jl*
      (named-block #"start_break_0"
        (varargs join-list

          ;; Allocate Heap (Call mmap)
          ;; No fixed address desired
          (movq (imm64/s32 0) (r64m-reg (rdi)))
          ;; We want a largish initial heap
          ;; Currently this is 512Mib
          (movq/imm* #x20000000 (rsi))
          ;; 0x1 = PROT_READ
          ;; 0x2 = PROT_WRITE
          ;; 0x4 = PROT_EXEC
          (movq (imm64/s32 #x7) (r64m-reg (rdx)))
          ;; 0x0002 = MAP_PRIVATE
          ;; 0x0020 = MAP_ANON
          (movq (imm64/s32 #x0022) (r64m-reg (r10)))
          ;; FD = -1 for no FD
          (movq (imm64/s32 (- 0 1)) (r64m-reg (r8)))
          ;; offset which is ignored because of MAP_ANON
          (movq (imm64/s32 0) (r64m-reg (r9)))
          ;; 0x09 is mmap
          (movq (imm64/s32 #x09) (r64m-reg (rax)))
          (syscall)
          (cmpq (imm64/s32 0) (r64m-reg (rax)))
          (jl #"prim_start_panic")
          ;; Save heap to %r15 which is our bump pointer
          (movq (r64mi-reg (rax)) (r64m-reg (r15)))

          (movq (r64mi-mem (mem (rsp) 0)) (r64m-reg (rdi)))
          (call #"main")
          (movq (r64mi-reg (rax)) (r64m-reg (rdi)))
          ;; 0x3C is mmap
          (movq (imm64/s32 #x3C) (r64m-reg (rax)))
          (syscall)))
      (named-block #"prim_start_panic"
        (varargs join-list
          (ud2))))))

(define (osx-start-break-function) : TextFragment
  (function-fragment
    #"start_break"
    (varargs append-jl*
      (named-block #"start_break_0"
        (varargs join-list
          ;; Allocate Heap (Call mmap)
          ;; No fixed address desired
          (movq (imm64/s32 0) (r64m-reg (rdi)))
          ;; We want a largish initial heap
          ;; Currently this is 512Mib
          (movq/imm* #x20000000 (rsi))
          ;; 0x1 = PROT_READ
          ;; 0x2 = PROT_WRITE
          ;; 0x4 = PROT_EXEC
          (movq (imm64/s32 #x7) (r64m-reg (rdx)))
          ;; 0x0002 = MAP_SHARED
          ;; 0x1000 = MAP_ANON
          (movq (imm64/s32 #x1002) (r64m-reg (r10)))
          ;; FD = -1 for no FD
          (movq (imm64/s32 (- 0 1)) (r64m-reg (r8)))
          ;; offset which is ignored because of MAP_ANON
          (movq (imm64/s32 0) (r64m-reg (r9)))
          ;; 0xC5 is mmap, plus 0x2000000 because xnu
          (movq (imm64/s32 #x20000C5) (r64m-reg (rax)))
          (syscall)
          (jb #"prim_start_panic")
          ;; Save heap to %r15 which is our bump pointer
          (movq (r64mi-reg (rax)) (r64m-reg (r15)))

          (movq (r64mi-mem (mem (rsp) 0)) (r64m-reg (rdi)))
          (call #"main")
          (movq (r64mi-reg (rax)) (r64m-reg (rdi)))
          (movq (imm64/s32 #x2000001) (r64m-reg (rax)))
          (syscall)))
      (named-block #"prim_start_panic"
        (varargs join-list
          (ud2))))))

(define (heap-allocate-function) : TextFragment
  (function-fragment
    #"yprim_heap_allocate"
    (named-block #"yprim_heap_allocate_0"
      (varargs join-list
        (xaddq (rax) (r15))
        (ret)))))
