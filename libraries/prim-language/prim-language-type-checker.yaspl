#:module (prim-language-type-checker)
#:import {
  (bytes)
  (dict)
  (either)
  (list)
  (maybe)
  (prim) {
    #:types
      Boolean
      Bytes
  }
  (prim-language)
  (syscalls) {
    #:types
      Syscall
    #:patterns
      exit-syscall
      write-syscall
  }
  (tuples)
}
(export
  #:types ()
  #:values (type-check)
  #:patterns ())
(types
  (define-type Environment
    (environment
      [variables : (Dict Bytes Type)]
      [functions : (Dict Bytes FunctionType)]
      [return-type : Type])))

(define (type-check [module : Module]) : (Maybe Bytes)
  (match-define (module _ functions) module)
  (case (compute-function-types functions (make-dict bytes-cmp))
    [(left v) (just v)]
    [(right function-types)
     (find/maybe
       (lambda ([f : FunctionDefinition])
         (type-check/function f function-types))
       functions)]))

(define (compute-function-types [fs : (List FunctionDefinition)] [acc : (Dict Bytes FunctionType)])
  : (Either Bytes (Dict Bytes FunctionType))
  (case fs
    [(empty) (right acc)]
    [(cons f fs)
     (case (dict-maybe-add acc (function-definition-name f) (function-definition->function-type f))
       [(nothing) (left #"Duplicate function name")]
       [(just acc) (compute-function-types fs acc)])]))


(define (type-check/function [f : FunctionDefinition] [fun-types : (Dict Bytes FunctionType)]) : (Maybe Bytes)
  (match-define (function-definition _ args return-type body) f)
  (type-check/statements
    body
    (initial-environment args fun-types return-type)))

(define (type-check/statements [statements : (List Statement)] [env : Environment]) : (Maybe Bytes)
  (case statements
    [(empty) (nothing)]
    [(cons statement statements)
     (case (type-check/statement statement env)
       [(left v) (just v)]
       [(right env)
        (type-check/statements statements env)])]))

(define (type-check/statement [statement : Statement] [env : Environment])
  : (Either Bytes Environment)
  (case statement
    [(return e)
     (case (type-check/expression e env (environment-return-type env))
       [(just v) (left v)]
       [(nothing) (right env)])]
    [(declaration var e)
     (case (type-infer/expression e env)
       [(left v) (left v)]
       [(right type) (right (environment-add-binding env var type))])]
    [(assignment var e)
     (case (environment-ref-binding env var)
       [(nothing) (left (bytes-append (varargs list #"Unbound variable: " var)))]
       [(just type)
        (case (type-check/expression e env type)
          [(just v) (left v)]
          [(nothing) (right env)])])]
    [(pointer-assignment p e)
     (case (type-infer/expression e env)
       [(left v) (left v)]
       [(right type)
        (case (type-check/expression p env (pointer-type type))
          [(just v) (left v)]
          [(nothing) (right env)])])]

    [(while e body)
     (case (type-check/expression e env (boolean-type))
       [(just v) (left v)]
       [(nothing)
        (case (type-check/statements body env)
          [(just v) (left v)]
          [(nothing) (right env)])])]
    [(if-statement cond then else)
     (case (type-check/expression cond env (boolean-type))
       [(just v) (left v)]
       [(nothing)
        (case (type-check/statements then env)
          [(just v) (left v)]
          [(nothing)
           (case (type-check/statements else env)
             [(just v) (left v)]
             [(nothing) (right env)])])])]))

(define (type-check/expression [expr : Expr] [env : Environment] [t : Type]) : (Maybe Bytes)
  (case (type-infer/expression expr env)
    [(left v) (just v)]
    [(right actual-type)
     (if (type=? actual-type t)
         (nothing)
         (just (bytes-append
                 (varargs list
                   #"Expected type and actual type don't match. Expected: "
                   (print-type t)
                   #" Got: "
                   (print-type actual-type)))))]))

(define (type-infer/expression [expr : Expr] [env : Environment]) : (Either Bytes Type)
  (case expr
    [(var-expr v)
     (case (environment-ref-binding env v)
       [(nothing) (left (bytes-append (varargs list #"Unbound variable: " v)))]
       [(just v) (right v)])]
    [(syscall-expr syscall args)
     (case (type-check/syscall-arguments syscall args env)
       [(just v) (left v)]
       [(nothing) (right (int64-type))])]
    [(call-expr f args)
     (case (environment-ref-function env f)
       [(nothing) (left #"Unknown function")]
       [(just (function-type arg-types result))
        (case (type-check/function-arguments arg-types args env)
          [(just v) (left v)]
          [(nothing) (right result)])])]
    [(int-literal _)
     (right (int64-type))]
    [(pointer-ref-expr p)
     (case (type-infer/expression p env)
       [(left v) (left v)]
       [(right (pointer-type t))
        (right t)]
       [(right t)
        (left #"Cannot dereference non pointer type")])]
    [(array-ref-expr t array offset)
     (case (type-check/expression array env (array-type t))
       [(just v) (left v)]
       [(nothing)
        (case (type-check/expression offset env (int64-type))
          [(just v) (left v)]
          [(nothing) (right (pointer-type t))])])]
    [(bin-op-expr (numeric-bin-op _) l r)
     (case (type-check/expression l env (int64-type))
       [(just v) (left v)]
       [(nothing)
        (case (type-check/expression r env (int64-type))
          [(just v) (left v)]
          [(nothing) (right (int64-type))])])]
    [(bin-op-expr (comparison-bin-op _) l r)
     (case (type-check/expression l env (int64-type))
       [(just v) (left v)]
       [(nothing)
        (case (type-check/expression r env (int64-type))
          [(just v) (left v)]
          [(nothing) (right (boolean-type))])])]
    [(bin-op-expr (logical-bin-op _) l r)
     (case (type-check/expression l env (boolean-type))
       [(just v) (left v)]
       [(nothing)
        (case (type-check/expression r env (boolean-type))
          [(just v) (left v)]
          [(nothing) (right (boolean-type))])])]
    [(allocate-array-expr t e)
     (case (type-check/expression e env (int64-type))
       [(just v) (left v)]
       [(nothing)
        (right (array-type t))])]
    [(cast-expr c e)
     (case
       (case c
         [(truncate-unsigned-int64->unsigned-int8) (tuple2 (int64-type) (int8-type))]
         [(unsigned-int8->unsigned-int64) (tuple2 (int8-type) (int64-type))]
         [(refine-pointer t) (tuple2 (undetermined-pointer-type) (pointer-type t))]
         [(unrefine-pointer t) (tuple2 (pointer-type t) (undetermined-pointer-type))])
       [(tuple2 source-type dest-type)
        (case (type-check/expression e env source-type)
          [(just v) (left v)]
          [(nothing)
           (right dest-type)])])]))

(define (type-check/syscall-arguments [syscall : Syscall] [exprs : (List Expr)] [env : Environment])
  : (Maybe Bytes)
  (case syscall
    [(exit-syscall)
     (case exprs
       [(cons expr (empty))
        (type-check/expression expr env (int64-type))]
       [_ (just #"Wrong number of arguments to exit")])]
    [(write-syscall)
     (case exprs
       [(cons fd (cons array (cons amount (empty))))
        (case (type-check/expression fd env (int64-type))
          [(just v) (just v)]
          [(nothing)
           (case (type-check/expression array env (array-type (int8-type)))
             [(just v) (just v)]
             [(nothing)
              (type-check/expression amount env (int64-type))])])]
       [_ (just #"Wrong number of arguments to write")])]))


(define (type-check/function-arguments [arg-types : (List Type)] [exprs : (List Expr)] [env : Environment])
  : (Maybe Bytes)
  (case (tuple2 arg-types exprs)
    [(tuple2 (empty) (empty)) (nothing)]
    [(tuple2 (cons _ _) (empty)) (just #"Not enough arguments to function call")]
    [(tuple2 (empty) (cons _ _)) (just #"Too many arguments to function call")]
    [(tuple2 (cons arg-type arg-types) (cons expr exprs))
     (case (type-check/expression expr env arg-type)
       [(just v) (just v)]
       [(nothing)
        (type-check/function-arguments arg-types exprs env)])]))

(define (initial-environment
          [args : (List (Tuple2 Bytes Type))]
          [fun-types : (Dict Bytes FunctionType)]
          [return-type : Type]) : Environment
  (foldl
    (lambda ([arg : (Tuple2 Bytes Type)] [env : Environment])
      (case arg
        [(tuple2 name type)
         (environment-add-binding env name type)]))
    args
    (environment (make-dict bytes-cmp) fun-types return-type)))


(define (environment-add-binding [env : Environment] [name : Bytes] [t : Type]) : Environment
  (match-define (environment variables functions return-type) env)
  (environment (dict-add variables name t) functions return-type))

(define (environment-ref-binding [env : Environment] [name : Bytes]) : (Maybe Type)
  (match-define (environment variables functions return-type) env)
  (dict-ref variables name))

(define (environment-ref-function [env : Environment] [name : Bytes]) : (Maybe FunctionType)
  (match-define (environment variables functions return-type) env)
  (dict-ref functions name))


(define (type=? [t1 : Type] [t2 : Type]) : Boolean
  (case (tuple2 t1 t2)
    [(tuple2 (pointer-type t1) (pointer-type t2)) (type=? t1 t2)]
    [(tuple2 (pointer-type _) _) #f]
    [(tuple2 (int64-type) (int64-type)) #t]
    [(tuple2 (int64-type) _) #f]
    [(tuple2 (int8-type) (int8-type)) #t]
    [(tuple2 (int8-type) _) #f]
    [(tuple2 (boolean-type) (boolean-type)) #t]
    [(tuple2 (boolean-type) _) #f]
    [(tuple2 (array-type t1) (array-type t2)) (type=? t1 t2)]
    [(tuple2 (array-type _) _) #f]
    [(tuple2 (undetermined-pointer-type) (undetermined-pointer-type)) #t]
    [(tuple2 (undetermined-pointer-type) _) #f]))

(define (print-type [t : Type]) : Bytes
  (case t
    [(pointer-type _)
     #"pointer"]
    [(int64-type) #"int64"]
    [(int8-type) #"int8"]
    [(boolean-type) #"boolean"]
    [(array-type _)
     #"array"]
    [(undetermined-pointer-type)
     #"undetermined-pointer"]))
