(module prim-language-demo
  (import
    (prim
      #:types (Bytes Array InputPort OutputPort Int)
      #:values ()
      #:patterns ())
    (either
      #:types ()
      #:values ()
      #:patterns (left right))
    (list
      #:types ()
      #:values (array->list map for-each)
      #:patterns (cons empty))
    (sexp-parser parse-sexp)
    (prim-language
      #:types ()
      #:values ()
      #:patterns (module))
    (register-language
      #:types ((FunctionDefinition r:FunctionDefinition))
      #:values ()
      #:patterns ())
    (prim-to-register convert-function)
    (prim-language-parser parse-module)
    (print-register-language print-function)
    (io write-line read-all-bytes call-with-input-file write-all-bytes))
  (export)
  (types)


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
    (case (array->list args)
      [(empty)
       (begin
         (write-line #"No executable???" stderr)
         1)]
      [(cons _ (empty))
       (begin
         (write-line #"No file name provided." stderr)
         1)]
      [(cons _ (cons _ (cons _ _)))
       (begin
         (write-line #"Too many arguments." stderr)
         1)]
      [(cons _ (cons file-name (empty)))
       (let ([file-bytes (call-with-input-file file-name read-all-bytes)])
         (case (parse-sexp file-bytes)
           [(left v)
            (begin
              (write-line v stderr)
              1)]
           [(right sexp)
            (case (parse-module sexp)
              [(left v)
               (begin
                 (write-line v stderr)
                 1)]
              [(right (module name functions))
               (begin
                 (write-all-bytes #"parsed module: " stdout)
                 (write-line name stdout)
                 (for-each
                   (lambda ([f : r:FunctionDefinition])
                     (write-all-bytes (print-function f) stdout))
                   (map convert-function functions))
                 0)])]))])))
