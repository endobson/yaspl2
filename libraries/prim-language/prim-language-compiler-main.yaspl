#:module (prim-language-compiler-main)
#:import {
  (assembler)
  (either)
  (formats elf)
  (io)
  (list)
  (mach-o-writer)
  (maybe)
  (prim)
  (prim-language-compiler)
  (prim-language-runtime)
  (yaspl x86-64-assembly)
  (yaspl x86-64-assembly-printer)
}
(export)
(types
  (define-type Args
    (args
      [input-file-name : Bytes]
      [output-file-name : Bytes]
      [output-format : OutputFormat]))
  (define-type OutputFormat
    (mach-osx)
    (elf-linux)
    (assembly-osx)
    (assembly-linux)))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable???")]
    [(cons _ (empty))
     (left #"No output format provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No file name provided.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No output file name provided.")]
    [(cons _ (cons _ (cons _ (cons _ (cons _ _)))))
     (left #"Too many arguments.")]
    [(cons _ (cons output-format-bytes (cons file-name (cons out-file-name (empty)))))
     (case
       (ann (Either Bytes OutputFormat)
         (case output-format-bytes
           [#"osx" (right (mach-osx))]
           [#"linux" (right (elf-linux))]
           [#"assembly-osx" (right (assembly-osx))]
           [#"assembly-linux" (right (assembly-linux))]
           [_ (left #"Unknown output format")]))
       [(left v) (left v)]
       [(right output-format)
        (right (args file-name out-file-name output-format))])]))

(define (run [args : (Array Bytes)]) : (Maybe Bytes)
  (case (parse-args (array->list args))
    [(left v) (just v)]
    [(right (args file-name out-file-name output-format))
     (case (compile-prim-program (sourced-bytes-from-file file-name))
       [(left v) (just v)]
       [(right text-fragments)
        (match-define text-fragments
          (append (start-function-fragments #"main") text-fragments))
        (case output-format
          [(mach-osx)
           (match-define text-section (assemble-text-section text-fragments))
           (match-define const-section (assemble-const-section (empty)))
           (begin
             (write-mach-o-library text-section const-section out-file-name)
             (nothing))]
          [(elf-linux)
           (match-define text-section (assemble-text-section text-fragments))
           (call-with-output-file out-file-name
              (lambda ([output-port : OutputPort])
                (begin
                  (write-all-bytes (serialize-elf-library text-section) output-port)
                  (nothing))))]
          [(assembly-osx)
           (call-with-output-file out-file-name
              (lambda ([output-port : OutputPort])
                (begin
                  (write-fragments
                    (osx-assembly-style)
                    (assembly-fragments text-fragments (empty))
                    output-port)
                  (nothing))))]
          [(assembly-linux)
           (call-with-output-file out-file-name
              (lambda ([output-port : OutputPort])
                (begin
                  (write-fragments
                    (linux-assembly-style)
                    (assembly-fragments text-fragments (empty))
                    output-port)
                  (nothing))))])])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (case (run args)
    [(just v)
     (begin
       (write-line v stderr)
       1)]
    [(nothing)
     0]))
