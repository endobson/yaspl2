#:module (prim-language-compiler-main)
#:import {
  (assembler)
  (either)
  (io)
  (join-list)
  (list)
  (mach-o-writer)
  (prim)
  (prim-language-compiler)
  (tuples)
  (yaspl x86-64-assembly)
}
(export)
(types)

(define (start-function-fragments [main-function-name : Bytes]) : (List TextFragment)
  (varargs list
    (function-fragment
      #"start"
      (varargs list
        (section
          (varargs list
            (basic-block #"start"
              (varargs join-list
                (jmp #"start_break")))))))
    (function-fragment
      #"start_break"
      (varargs list
        (section
          (varargs list
            (basic-block #"start_break"
              (varargs join-list

                ;; Allocate Heap (Call mmap)
                ;; No fixed address desired
                (movq (imm 0) (rm-reg (rdi)))
                ;; We want a large heap but cannot load more than an 32 bits
                ;; currently so do a multiplication
                ;; Currently this is 512 * 1Mib
                (movq (imm #x100000) (rm-reg (rsi)))
                (movq (imm #x200) (rm-reg (rax)))
                (imulq (rax) (rsi))
                ;; 0x1 = PROT_READ
                ;; 0x2 = PROT_WRITE
                ;; 0x4 = PROT_EXEC
                (movq (imm #x7) (rm-reg (rdx)))
                ;; 0x0002 = MAP_SHARED
                ;; 0x1000 = MAP_ANON
                (movq (imm #x1002) (rm-reg (r10)))
                ;; FD = -1 for no FD
                (movq (imm (- 0 1)) (rm-reg (r8)))
                ;; offset which is ignored because of MAP_ANON
                (movq (imm 0) (rm-reg (r9)))
                ;; 0xC5 is mmap, plus 0x2000000 because xnu
                (movq (imm #x20000C5) (rm-reg (rax)))
                (syscall)
                (jb #"prim_start_panic")
                ;; Save heap to %r15 which is our bump pointer
                (movq (rmi-reg (rax)) (rm-reg (r15)))


                (movq (rmi-mem (mem (rsp) 0)) (rm-reg (rdi)))
                (call main-function-name)
                (movq (rmi-reg (rax)) (rm-reg (rdi)))
                (movq (imm #x2000001) (rm-reg (rax)))
                (syscall)))
            (basic-block #"prim_start_panic"
              (varargs join-list
                (ud2)))))))

    (function-fragment
      #"yprim_heap_allocate"
      (varargs list
        (section
          (varargs list
            (basic-block #"yprim_heap_allocate"
              (varargs join-list
                (xaddq (rax) (r15))
                (ret)))))))))

(define (parse-args [args : (List Bytes)]) : (Either Bytes (Tuple2 Bytes Bytes))
  (case args
    [(empty)
     (left #"No executable???")]
    [(cons _ (empty))
     (left #"No file name provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No output file name provided.")]
    [(cons _ (cons _ (cons _ (cons _ _))))
     (left #"Too many arguments.")]
    [(cons _ (cons file-name (cons out-file-name (empty))))
     (right (tuple2 file-name out-file-name))]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (case (parse-args (array->list args))
    [(left msg)
     (begin
       (write-line msg stderr)
       1)]
    [(right (tuple2 file-name out-file-name))
     (case (compile-prim-program (call-with-input-file file-name read-all-bytes))
       [(left msg)
        (begin
          (write-line msg stderr)
          1)]
       [(right fragments)
        (match-define (tuple2 text-section const-section)
          (assemble-text-segment
            (assembly-fragments
              (append (start-function-fragments #"main") fragments) (empty))))
        (case (write-mach-o-library text-section const-section out-file-name)
          [(left msg)
           (begin
             (write-line msg stderr)
             1)]
          [(right _)
           0])])]))
