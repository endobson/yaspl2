#:module (prim-language-compiler-main)
#:import {
  (bytes)
  (either)
  (io)
  (list)
  (machine-code-writer)
  (maybe)
  (prim)
  (prim-language-compiler)
  (prim-language-runtime)
  (system-abi)
  (yaspl x86-64-assembly)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [input-file-name : Bytes]
      [output-file-name : Bytes]
      [abi : SystemAbi])))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable???")]
    [(cons _ (empty))
     (left #"No abi provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No file name provided.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No output file name provided.")]
    [(cons _ (cons _ (cons _ (cons _ (cons _ _)))))
     (left #"Too many arguments.")]
    [(cons _ (cons abi (cons file-name (cons out-file-name (empty)))))
     (case (parse-system-abi abi)
       [(nothing) (left #"Unknown abi")]
       [(just abi)
        (right (args file-name out-file-name abi))])]))

(define (run [args : Bytes]) : (Maybe Bytes)
  (case (parse-args (args->list args))
    [(left v) (just v)]
    [(right (args file-name out-file-name abi))
     (case (compile-prim-program (sourced-bytes-from-file file-name) abi)
       [(left v) (just v)]
       [(right text-fragments)
        (match-define text-fragments
          (append
            (case abi
              [(osx-abi) (osx-start-function-fragments)]
              [(linux-abi) (linux-start-function-fragments)])
            text-fragments))
        (begin
          (write-library-object-file
            (assembly-fragments text-fragments (empty))
            abi
            out-file-name)
          (nothing))])]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (case (run args)
    [(just v)
     (begin
       (write-all-bytes v stderr)
       1)]
    [(nothing)
     0]))
