#:module (prim-language-compiler-main)
#:import {
  (assembler)
  (either)
  (formats elf)
  (io)
  (join-list)
  (list)
  (mach-o-writer)
  (maybe)
  (prim)
  (prim-language-compiler)
  (yaspl x86-64-assembly)
  (yaspl x86-64-assembly-printer)
}
(export)
(types
  (define-type Args
    (args
      [input-file-name : Bytes]
      [output-file-name : Bytes]
      [output-format : OutputFormat]))
  (define-type OutputFormat
    (mach-osx)
    (elf-linux)
    (assembly-osx)
    (assembly-linux)))

(define (start-function-fragments [main-function-name : Bytes]) : (List TextFragment)
  (varargs list
    (function-fragment
      #"start"
      (varargs list
        (section
          (varargs list
            (basic-block #"start"
              (varargs join-list
                (jmp #"start_break")))))))
    (function-fragment
      #"start_break"
      (varargs list
        (section
          (varargs list
            (basic-block #"start_break"
              (varargs join-list

                ;; Allocate Heap (Call mmap)
                ;; No fixed address desired
                (movq (imm 0) (rm-reg (rdi)))
                ;; We want a large heap but cannot load more than an 32 bits
                ;; currently so do a multiplication
                ;; Currently this is 512 * 1Mib
                (movq (imm #x100000) (rm-reg (rsi)))
                (movq (imm #x200) (rm-reg (rax)))
                (imulq (rax) (rsi))
                ;; 0x1 = PROT_READ
                ;; 0x2 = PROT_WRITE
                ;; 0x4 = PROT_EXEC
                (movq (imm #x7) (rm-reg (rdx)))
                ;; 0x0002 = MAP_SHARED
                ;; 0x1000 = MAP_ANON
                (movq (imm #x1002) (rm-reg (r10)))
                ;; FD = -1 for no FD
                (movq (imm (- 0 1)) (rm-reg (r8)))
                ;; offset which is ignored because of MAP_ANON
                (movq (imm 0) (rm-reg (r9)))
                ;; 0xC5 is mmap, plus 0x2000000 because xnu
                (movq (imm #x20000C5) (rm-reg (rax)))
                (syscall)
                (jb #"prim_start_panic")
                ;; Save heap to %r15 which is our bump pointer
                (movq (rmi-reg (rax)) (rm-reg (r15)))


                (movq (rmi-mem (mem (rsp) 0)) (rm-reg (rdi)))
                (call main-function-name)
                (movq (rmi-reg (rax)) (rm-reg (rdi)))
                (movq (imm #x2000001) (rm-reg (rax)))
                (syscall)))
            (basic-block #"prim_start_panic"
              (varargs join-list
                (ud2)))))))

    (function-fragment
      #"yprim_heap_allocate"
      (varargs list
        (section
          (varargs list
            (basic-block #"yprim_heap_allocate"
              (varargs join-list
                (xaddq (rax) (r15))
                (ret)))))))))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable???")]
    [(cons _ (empty))
     (left #"No output format provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No file name provided.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No output file name provided.")]
    [(cons _ (cons _ (cons _ (cons _ (cons _ _)))))
     (left #"Too many arguments.")]
    [(cons _ (cons output-format-bytes (cons file-name (cons out-file-name (empty)))))
     (case
       (ann (Either Bytes OutputFormat)
         (case output-format-bytes
           [#"osx" (right (mach-osx))]
           [#"linux" (right (elf-linux))]
           [#"assembly-osx" (right (assembly-osx))]
           [#"assembly-linux" (right (assembly-linux))]
           [_ (left #"Unknown output format")]))
       [(left v) (left v)]
       [(right output-format)
        (right (args file-name out-file-name output-format))])]))

(define (run [args : (Array Bytes)]) : (Maybe Bytes)
  (case (parse-args (array->list args))
    [(left v) (just v)]
    [(right (args file-name out-file-name output-format))
     (case (compile-prim-program (sourced-bytes-from-file file-name))
       [(left v) (just v)]
       [(right text-fragments)
        (match-define text-fragments
          (append (start-function-fragments #"main") text-fragments))
        (case output-format
          [(mach-osx)
           (match-define text-section (assemble-text-section text-fragments))
           (match-define const-section (assemble-const-section (empty)))
           (begin
             (write-mach-o-library text-section const-section out-file-name)
             (nothing))]
          [(elf-linux)
           (match-define text-section (assemble-text-section text-fragments))
           (call-with-output-file out-file-name
              (lambda ([output-port : OutputPort])
                (begin
                  (write-all-bytes (serialize-elf-library text-section) output-port)
                  (nothing))))]
          [(assembly-osx)
           (call-with-output-file out-file-name
              (lambda ([output-port : OutputPort])
                (begin
                  (write-fragments
                    (osx-assembly-style)
                    (assembly-fragments text-fragments (empty))
                    output-port)
                  (nothing))))]
          [(assembly-linux)
           (call-with-output-file out-file-name
              (lambda ([output-port : OutputPort])
                (begin
                  (write-fragments
                    (linux-assembly-style)
                    (assembly-fragments text-fragments (empty))
                    output-port)
                  (nothing))))])])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (case (run args)
    [(just v)
     (begin
       (write-line v stderr)
       1)]
    [(nothing)
     0]))
