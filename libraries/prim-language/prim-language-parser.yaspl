(module prim-language-parser
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values ()
      #:patterns (node symbol-sexp))
    (list
      #:types ()
      #:values (extract-rights map)
      #:patterns (cons empty))
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (prim-language
      #:types (Module FunctionDefinition Statement Expr)
      #:values (module function-definition return var-expr)
      #:patterns ()))
  (export
    #:types ()
    #:values (parse-module)
    #:patterns ())
  (types)



  (define (parse-module [sexp : Sexp]) : (Either Bytes Module)
    (case sexp
      [(node (cons (symbol-sexp #"module") (cons (symbol-sexp name) definitions)))
       (case (extract-rights (map parse-function-definition definitions))
         [(left v) (left v)]
         [(right definitions)
          (right (module name definitions))])]
      [_
       (left #"Not a valid module form")]))

  (define (parse-function-definition [sexp : Sexp]) : (Either Bytes FunctionDefinition)
    (case sexp
      [(node (cons (symbol-sexp #"define") (cons (node (cons (symbol-sexp name) args)) statements)))
       (case (extract-rights (map parse-arg args))
         [(left v) (left v)]
         [(right args)
          (case (extract-rights (map parse-statement statements))
            [(left v) (left v)]
            [(right statements)
             (right (function-definition name args statements))])])]
      [_
       (left #"Not a valid function definition")]))

  (define (parse-arg [sexp : Sexp]) : (Either Bytes Bytes)
    (case sexp
      [(symbol-sexp v)
       (right v)]
      [_ (left #"Not a valid arg")]))

  (define (parse-statement [sexp : Sexp]) : (Either Bytes Statement)
    (case sexp
      [(node (cons (symbol-sexp #"return") (cons expr (empty))))
       (case (parse-expr expr)
         [(left v) (left v)]
         [(right v) (right (return v))])]
      [_
       (left #"Not a valid statement")]))

  (define (parse-expr [sexp : Sexp]) : (Either Bytes Expr)
    (case sexp
      [(symbol-sexp v) (right (var-expr v))]
      [_ (left #"Not a valid expression")])))
