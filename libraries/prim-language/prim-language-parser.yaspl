#:module prim-language-parser
#:import {
  either {
    #:types
      Either
    #:values
      left
      right
    #:patterns
      left
      right
  }
  list {
    #:values
      extract-rights
      list
      map
    #:patterns
      cons
      empty
  }
  prim {
    #:types
      Bytes
  }
  prim-language {
    #:types
      BinOp
      Expr
      FunctionDefinition
      Module
      Statement
      Type
    #:values
      allocate-array-expr
      and
      array-ref-expr
      array-type
      assignment
      bin-op-expr
      boolean-type
      comparison-bin-op
      declaration
      equal
      function-definition
      greater-than
      greater-than-or-equal
      if-statement
      int-literal
      int64-type
      less-than
      less-than-or-equal
      logical-bin-op
      module
      mul
      numeric-bin-op
      or
      plus
      pointer-assignment
      pointer-ref-expr
      pointer-type
      return
      sub
      syscall-expr
      var-expr
      while
  }
  sexp-parser {
    #:types
      Sexp
    #:patterns
      node
      number-sexp
      symbol-sexp
  }
  syscalls {
    #:values
      exit-syscall
  }
}
(export
  #:types ()
  #:values (parse-module)
  #:patterns ())
(types)



(define (parse-module [sexp : Sexp]) : (Either Bytes Module)
  (case sexp
    [(node (cons (symbol-sexp #"module") (cons (symbol-sexp name) definitions)))
     (case (extract-rights (map parse-function-definition definitions))
       [(left v) (left v)]
       [(right definitions)
        (right (module name definitions))])]
    [_
     (left #"Not a valid module form")]))

(define (parse-function-definition [sexp : Sexp]) : (Either Bytes FunctionDefinition)
  (case sexp
    [(node (cons (symbol-sexp #"define") (cons (node (cons (symbol-sexp name) args)) statements)))
     (case (extract-rights (map parse-arg args))
       [(left v) (left v)]
       [(right args)
        (case (extract-rights (map parse-statement statements))
          [(left v) (left v)]
          [(right statements)
           (right (function-definition name args statements))])])]
    [_
     (left #"Not a valid function definition")]))

(define (parse-arg [sexp : Sexp]) : (Either Bytes Bytes)
  (case sexp
    [(symbol-sexp v)
     (right v)]
    [_ (left #"Not a valid arg")]))

(define (parse-statement [sexp : Sexp]) : (Either Bytes Statement)
  (case sexp
    [(node (cons (symbol-sexp #"return") (cons expr (empty))))
     (case (parse-expr expr)
       [(left v) (left v)]
       [(right v) (right (return v))])]
    [(node (cons (symbol-sexp #"def") (cons (symbol-sexp name) (cons expr (empty)))))
     (case (parse-expr expr)
       [(left v) (left v)]
       [(right v) (right (declaration name v))])]
    [(node (cons (symbol-sexp #"if")
                 (cons cond
                       (cons (node (cons (symbol-sexp #"then") then-statements))
                             (cons (node (cons (symbol-sexp #"else") else-statements))
                                   (empty))))))
     (case (parse-expr cond)
       [(left v) (left v)]
       [(right cond)
        (case (extract-rights (map parse-statement then-statements))
          [(left v) (left v)]
          [(right then-statements)
           (case (extract-rights (map parse-statement else-statements))
             [(left v) (left v)]
             [(right else-statements)
              (right (if-statement cond then-statements else-statements))])])])]
    [(node (cons (symbol-sexp #"set!")
                 (cons (symbol-sexp var)
                       (cons expr (empty)))))
     (case (parse-expr expr)
       [(left v) (left v)]
       [(right expr)
        (right (assignment var expr))])]
    [(node (cons (symbol-sexp #"ptr-set!")
                 (cons pointer-expr (cons expr (empty)))))
     (case (parse-expr pointer-expr)
       [(left v) (left v)]
       [(right pointer-expr)
        (case (parse-expr expr)
          [(left v) (left v)]
          [(right expr)
           (right (pointer-assignment pointer-expr expr))])])]
    [(node (cons (symbol-sexp #"while")
                 (cons cond body)))
     (case (parse-expr cond)
       [(left v) (left v)]
       [(right cond)
        (case (extract-rights (map parse-statement body))
          [(left v) (left v)]
          [(right body)
           (right (while cond body))])])]
    [_
     (left #"Not a valid statement")]))

(define (parse-expr [sexp : Sexp]) : (Either Bytes Expr)
  (case sexp
    [(symbol-sexp v) (right (var-expr v))]
    [(number-sexp v) (right (int-literal v))]
    [(node (cons (symbol-sexp #"allocate-array") (cons type (cons expr (empty)))))
     (case (parse-type type)
       [(left v) (left v)]
       [(right type)
        (case (parse-expr expr)
          [(left v) (left v)]
          [(right count) (right (allocate-array-expr type count))])])]
    [(node (cons (symbol-sexp #"ptr-ref") (cons expr (empty))))
     (case (parse-expr expr)
       [(left v) (left v)]
       [(right pointer) (right (pointer-ref-expr pointer))])]
    [(node (cons (symbol-sexp #"array-ref") (cons type (cons array (cons offset (empty))))))
     (case (parse-type type)
       [(left v) (left v)]
       [(right type)
        (case (parse-expr array)
          [(left v) (left v)]
          [(right array)
           (case (parse-expr offset)
             [(left v) (left v)]
             [(right offset) (right (array-ref-expr type array offset))])])])]
    [(node (cons (symbol-sexp #"syscall") (cons (symbol-sexp syscall-name) args)))
     (case syscall-name
       [#"exit"
        (case args
          [(cons arg (empty))
           (case (parse-expr arg)
             [(left v) (left v)]
             [(right expr)
              (right (syscall-expr (exit-syscall) (varargs list expr)))])]
          [_
           (left #"Wrong number of arguments to exit")])]
       [_ (left #"Unknown syscall name")])]
    [(node (cons (symbol-sexp op) (cons left-expr (cons right-expr (empty)))))
     (case (parse-bin-op op)
       [(left v) (left v)]
       [(right op)
        (case (parse-expr left-expr)
          [(left v) (left v)]
          [(right left-expr)
           (case (parse-expr right-expr)
             [(left v) (left v)]
             [(right right-expr)
              (right (bin-op-expr op left-expr right-expr))])])])]
    [_ (left #"Not a valid expression")]))

(define (parse-bin-op [op : Bytes]) : (Either Bytes BinOp)
  (case op
    [#"+" (right (numeric-bin-op (plus)))]
    [#"*" (right (numeric-bin-op (mul)))]
    [#"-" (right (numeric-bin-op (sub)))]
    [#"and" (right (logical-bin-op (and)))]
    [#"or" (right (logical-bin-op (or)))]
    [#"<" (right (comparison-bin-op (less-than)))]
    [#"<=" (right (comparison-bin-op (less-than-or-equal)))]
    [#">" (right (comparison-bin-op (greater-than)))]
    [#">=" (right (comparison-bin-op (greater-than-or-equal)))]
    [#"=" (right (comparison-bin-op (equal)))]
    [_ (left #"Not a valid bin-op")]))

(define (parse-type [sexp : Sexp]) : (Either Bytes Type)
  (case sexp
    [(symbol-sexp #"int64") (right (int64-type))]
    [(symbol-sexp #"boolean") (right (boolean-type))]
    [(node (cons (symbol-sexp #"pointer") (cons sexp (empty))))
     (case (parse-type sexp)
       [(left v) (left v)]
       [(right t) (right (pointer-type t))])]
    [(node (cons (symbol-sexp #"array") (cons sexp (empty))))
     (case (parse-type sexp)
       [(left v) (left v)]
       [(right t) (right (array-type t))])]
    [_ (left #"Not a valid type")]))
