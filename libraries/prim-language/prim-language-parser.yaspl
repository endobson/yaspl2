#:module (prim-language-parser)
#:import {
  (bytes)
  (data source-location)
  (dict)
  (either)
  (formats sexp)
  (list)
  (maybe)
  (prim)
  (prim-language)
  (sexp-printer)
  (syscalls)
  (tuples)
  (yaspl math-operations)
}
(export
  (#:types ParseError)
  (#:values parse-module)
  (#:patterns parse-error))
(types
  (define-type ParseEnvironment
    (parse-environment
      [types : (Dict Bytes MemoryType)]))
  (define-type ParseError
    (parse-error
      [message : Bytes]
      [source : SourceSpan])))

(define (parse-module [sexp : Sexp]) : (Either ParseError Module)
  (case sexp
    [(node (cons (symbol-sexp #"module" _)
                 (cons (symbol-sexp name _)
                       (cons (node (cons (symbol-sexp #"types" _) (empty)) _)
                             definitions)))
           _)
     (match-define env (initial-parse-env))
     (case (map/failure/env parse-function-definition definitions env)
       [(left v) (left v)]
       [(right definitions)
        (right (module name (void) definitions))])]
    [_
     (left (parse-error #"Not a valid module form" (sexp-source-span sexp)))]))

(define (initial-parse-env) : ParseEnvironment
  (parse-environment
    (dict-add-all
      (make-dict bytes-cmp)
      (varargs list
        (tuple2 #"int64" (value-type (int64-type)))
        (tuple2 #"int8" (value-type (int8-type)))
        (tuple2 #"boolean" (value-type (boolean-type)))
        (tuple2 #"undetermined-pointer" (value-type (undetermined-pointer-type)))))))

(define (parse-function-definition [sexp : Sexp] [env : ParseEnvironment])
  : (Either ParseError FunctionDefinition)
  (case sexp
    [(node (cons (symbol-sexp #"define" _)
                 (cons (node (cons (symbol-sexp name _) args) _)
                       (cons (symbol-sexp #":" _)
                             (cons type statements))))
           _)
     (case (map/failure/env parse-arg args env)
       [(left v) (left v)]
       [(right args)
        (case (parse-type type env)
          [(left v) (left v)]
          [(right type)
           (case (map/failure/env parse-statement statements env)
             [(left v) (left v)]
             [(right statements)
              (right (function-definition name args type statements))])])])]
    [_
     (left (parse-error #"Not a valid function definition" (sexp-source-span sexp)))]))

(define (parse-arg [sexp : Sexp] [env : ParseEnvironment]) : (Either ParseError (Tuple2 Bytes Type))
  (case sexp
    [(bracket-node (cons (symbol-sexp v _) (cons (symbol-sexp #":" _) (cons type (empty)))) _)
     (case (parse-type type env)
       [(left v) (left v)]
       [(right ty)
        (right (tuple2 v ty))])]
    [_ (left (parse-error #"Not a valid arg" (sexp-source-span sexp)))]))

(define (parse-statement [sexp : Sexp] [env : ParseEnvironment]) : (Either ParseError Statement)
  (case sexp
    [(node (cons (symbol-sexp #"return" _) (cons expr (empty))) _)
     (case (parse-expr expr env)
       [(left v) (left v)]
       [(right v) (right (return v))])]
    [(node (cons (symbol-sexp #"def" _) (cons (symbol-sexp name _) (cons expr (empty)))) _)
     (case (parse-expr expr env)
       [(left v) (left v)]
       [(right v) (right (declaration name v))])]
    [(node (cons (symbol-sexp #"if" _)
                 (cons cond
                       (cons (node (cons (symbol-sexp #"then" _) then-statements) _)
                             (cons (node (cons (symbol-sexp #"else" _) else-statements) _)
                                   (empty)))))
             _)
     (case (parse-expr cond env)
       [(left v) (left v)]
       [(right cond)
        (case (map/failure/env parse-statement then-statements env)
          [(left v) (left v)]
          [(right then-statements)
           (case (map/failure/env parse-statement else-statements env)
             [(left v) (left v)]
             [(right else-statements)
              (right (if-statement cond then-statements else-statements))])])])]
    [(node (cons (symbol-sexp #"set!" _)
                 (cons (symbol-sexp var _)
                       (cons expr (empty))))
             _)
     (case (parse-expr expr env)
       [(left v) (left v)]
       [(right expr)
        (right (assignment var expr))])]
    [(node (cons (symbol-sexp #"ptr-set!" _)
                 (cons pointer-expr (cons expr (empty))))
             _)
     (case (parse-expr pointer-expr env)
       [(left v) (left v)]
       [(right pointer-expr)
        (case (parse-expr expr env)
          [(left v) (left v)]
          [(right expr)
           (right (pointer-assignment pointer-expr expr))])])]
    [(node (cons (symbol-sexp #"while" _)
                 (cons cond body))
             _)
     (case (parse-expr cond env)
       [(left v) (left v)]
       [(right cond)
        (case (map/failure/env parse-statement body env)
          [(left v) (left v)]
          [(right body)
           (right (while cond body))])])]
    [_
     (left (parse-error #"Not a valid statement" (sexp-source-span sexp)))]))

(define (parse-expr [sexp : Sexp] [env : ParseEnvironment]) : (Either ParseError Expr)
  (case sexp
    [(symbol-sexp v _) (right (var-expr v))]
    [(number-sexp v _) (right (int-literal v))]
    [(node (cons (symbol-sexp #"ptr-ref" _) (cons expr (empty))) _)
     (case (parse-expr expr env)
       [(left v) (left v)]
       [(right pointer) (right (pointer-ref-expr pointer))])]
    [(node (cons (symbol-sexp #"array-index" _) (cons type (cons pointer (cons offset (empty))))) _)
     (case (parse-memory-type type env)
       [(left v) (left v)]
       [(right type)
        (case (parse-expr pointer env)
          [(left v) (left v)]
          [(right pointer)
           (case (parse-expr offset env)
             [(left v) (left v)]
             [(right offset) (right (array-index-expr type pointer offset))])])])]
    [(node (cons (symbol-sexp #"syscall" _) (cons (symbol-sexp syscall-name name-src) args)) _)
     (case (parse-syscall-name syscall-name)
       [(left v) (left (parse-error v name-src))]
       [(right syscall)
        (case (map/failure/env parse-expr args env)
          [(left v) (left v)]
          [(right exprs)
           (right (syscall-expr syscall exprs))])])]
    [(node (cons (symbol-sexp #"call" _) (cons (symbol-sexp function-name _) args)) _)
     (case (map/failure/env parse-expr args env)
       [(left v) (left v)]
       [(right exprs)
        (right (call-expr function-name exprs))])]
    [(node (cons (symbol-sexp #"cast" _) (cons conversion (cons expr (empty)))) _)
     (case (parse-conversion conversion env)
       [(left v) (left v)]
       [(right conversion)
        (case (parse-expr expr env)
          [(left v) (left v)]
          [(right expr)
           (right (cast-expr conversion expr))])])]
    [(node (cons (symbol-sexp op op-src) (cons left-expr (cons right-expr (empty)))) _)
     (case (parse-bin-op op)
       [(left v) (left (parse-error v op-src))]
       [(right op)
        (case (parse-expr left-expr env)
          [(left v) (left v)]
          [(right left-expr)
           (case (parse-expr right-expr env)
             [(left v) (left v)]
             [(right right-expr)
              (right (bin-op-expr op left-expr right-expr))])])])]
    [_ (left (parse-error #"Not a valid expression" (sexp-source-span sexp)))]))

(define (parse-syscall-name [name : Bytes]) : (Either Bytes Syscall)
  (case name
    [#"exit" (right (exit-syscall))]
    [#"write" (right (write-syscall))]
    [_  (left #"Unknown syscall name")]))

(define (parse-bin-op [op : Bytes]) : (Either Bytes BinOp)
  (case op
    [#"+" (right (numeric-bin-op (add-op)))]
    [#"*" (right (numeric-bin-op (mult-op)))]
    [#"-" (right (numeric-bin-op (sub-op)))]
    [#"/" (right (numeric-bin-op (quotient-op)))]
    [#"&" (right (numeric-bin-op (bitwise-and-op)))]
    [#"and" (right (logical-bin-op (and-op)))]
    [#"or" (right (logical-bin-op (ior-op)))]
    [#"<" (right (comparison-bin-op (less-than-op)))]
    [#"<=" (right (comparison-bin-op (less-than-or-equal-op)))]
    [#">" (right (comparison-bin-op (greater-than-op)))]
    [#">=" (right (comparison-bin-op (greater-than-or-equal-op)))]
    [#"=" (right (comparison-bin-op (equal-op)))]
    [#"!=" (right (comparison-bin-op (not-equal-op)))]
    [_ (left (bytes-append (varargs list #"Not a valid bin-op: " op)))]))

(define (parse-conversion [sexp : Sexp] [env : ParseEnvironment]) : (Either ParseError Conversion)
  (case sexp
    [(symbol-sexp #"int64->int8" _)
     (right (truncate-unsigned-int64->unsigned-int8))]
    [(symbol-sexp #"int8->int64" _)
     (right (unsigned-int8->unsigned-int64))]
    [(symbol-sexp #"pointer->int64" _)
     (right (pointer->unsigned-int64))]
    [(symbol-sexp #"int64->pointer" _)
     (right (unsigned-int64->pointer))]
    [(node (cons (symbol-sexp #"refine-pointer" _) (cons sexp (empty))) _)
     (case (parse-memory-type sexp env)
       [(left v) (left v)]
       [(right type)
        (right (refine-pointer type))])]
    [(node (cons (symbol-sexp #"unrefine-pointer" _) (cons sexp (empty))) _)
     (case (parse-memory-type sexp env)
       [(left v) (left v)]
       [(right type)
        (right (unrefine-pointer type))])]
    [_ (left (parse-error (bytes-append (varargs list #"Not a valid conversion " (print-sexp* sexp)))
                          (sexp-source-span sexp)))]))

(define (parse-memory-type [sexp : Sexp] [env : ParseEnvironment]) : (Either ParseError MemoryType)
  (case sexp
    [(node (cons (symbol-sexp #"pointer" _) (cons sexp (empty))) _)
     (case (parse-memory-type sexp env)
       [(left v) (left v)]
       [(right t) (right (value-type (pointer-type t)))])]
    [(node (cons (symbol-sexp #"array" _) (cons sexp (empty))) _)
     (case (parse-memory-type sexp env)
       [(left v) (left v)]
       [(right t) (right (array-type t))])]
    [(symbol-sexp sym src)
     (case (dict-ref (parse-environment-types env) sym)
       [(just t) (right t)]
       [(nothing)
        (left (parse-error (bytes-append (varargs list #"Unknown type name: " sym))
                           src))])]
    [_ (left (parse-error (bytes-append (varargs list #"Not a valid type: " (print-sexp* sexp)))
                          (sexp-source-span sexp)))]))

(define (parse-type [sexp : Sexp] [env : ParseEnvironment]) : (Either ParseError Type)
  (case (parse-memory-type sexp env)
    [(left v) (left v)]
    [(right (value-type t)) (right t)]
    [(right _)
     (left (parse-error #"Type must be a value type" (sexp-source-span sexp)))]))
