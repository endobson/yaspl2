(module prim-language-parser
  (import
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (list
      #:types ()
      #:values (extract-rights map)
      #:patterns (cons empty))
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (prim-language
      #:types (Module FunctionDefinition Statement Expr BinOp)
      #:values (module function-definition return var-expr bin-op-expr
                declaration if-statement
                plus mul sub and or xor less-than less-than-or-equal
                greater-than greater-than-or-equal equal not)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values ()
      #:patterns (node symbol-sexp)))
  (export
    #:types ()
    #:values (parse-module)
    #:patterns ())
  (types)



  (define (parse-module [sexp : Sexp]) : (Either Bytes Module)
    (case sexp
      [(node (cons (symbol-sexp #"module") (cons (symbol-sexp name) definitions)))
       (case (extract-rights (map parse-function-definition definitions))
         [(left v) (left v)]
         [(right definitions)
          (right (module name definitions))])]
      [_
       (left #"Not a valid module form")]))

  (define (parse-function-definition [sexp : Sexp]) : (Either Bytes FunctionDefinition)
    (case sexp
      [(node (cons (symbol-sexp #"define") (cons (node (cons (symbol-sexp name) args)) statements)))
       (case (extract-rights (map parse-arg args))
         [(left v) (left v)]
         [(right args)
          (case (extract-rights (map parse-statement statements))
            [(left v) (left v)]
            [(right statements)
             (right (function-definition name args statements))])])]
      [_
       (left #"Not a valid function definition")]))

  (define (parse-arg [sexp : Sexp]) : (Either Bytes Bytes)
    (case sexp
      [(symbol-sexp v)
       (right v)]
      [_ (left #"Not a valid arg")]))

  (define (parse-statement [sexp : Sexp]) : (Either Bytes Statement)
    (case sexp
      [(node (cons (symbol-sexp #"return") (cons expr (empty))))
       (case (parse-expr expr)
         [(left v) (left v)]
         [(right v) (right (return v))])]
      [(node (cons (symbol-sexp #"def") (cons (symbol-sexp name) (cons expr (empty)))))
       (case (parse-expr expr)
         [(left v) (left v)]
         [(right v) (right (declaration name v))])]
      [(node (cons (symbol-sexp #"if")
                   (cons cond
                         (cons (node (cons (symbol-sexp #"then") then-statements))
                               (cons (node (cons (symbol-sexp #"else") else-statements))
                                     (empty))))))
       (case (parse-expr cond)
         [(left v) (left v)]
         [(right cond)
          (case (extract-rights (map parse-statement then-statements))
            [(left v) (left v)]
            [(right then-statements)
             (case (extract-rights (map parse-statement else-statements))
               [(left v) (left v)]
               [(right else-statements)
                (right (if-statement cond then-statements else-statements))])])])]
      [_
       (left #"Not a valid statement")]))

  (define (parse-expr [sexp : Sexp]) : (Either Bytes Expr)
    (case sexp
      [(symbol-sexp v) (right (var-expr v))]
      [(node (cons (symbol-sexp op) (cons left-expr (cons right-expr (empty)))))
       (case (parse-bin-op op)
         [(left v) (left v)]
         [(right op)
          (case (parse-expr left-expr)
            [(left v) (left v)]
            [(right left-expr)
             (case (parse-expr right-expr)
               [(left v) (left v)]
               [(right right-expr)
                (right (bin-op-expr op left-expr right-expr))])])])]
      [_ (left #"Not a valid expression")]))

  (define (parse-bin-op [op : Bytes]) : (Either Bytes BinOp)
    (case op
      [#"+" (right (plus))]
      [#"*" (right (mul))]
      [#"-" (right (sub))]
      [#"and" (right (and))]
      [#"or" (right (or))]
      [#"xor" (right (xor))]
      [#"not" (right (not))]
      [#"<" (right (less-than))]
      [#"<=" (right (less-than-or-equal))]
      [#">" (right (greater-than))]
      [#">=" (right (greater-than-or-equal))]
      [#"=" (right (equal))]
      [_ (left #"Not a valid bin-op")])))
