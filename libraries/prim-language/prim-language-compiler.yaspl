#:module (prim-language-compiler)
#:import {
  (bytes)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (prim)
  {(prim-language)
    {#:types
      [FunctionDefinition p:FunctionDefinition]
    }
    {#:patterns
      [module p:module]
    }
  }
  (prim-language-parser)
  (prim-language-type-checker)
  (prim-to-register)
  (register-language-compiler)
  (sexp-parser)
  (simplify-register-language)
  (system-abi)
  (tuples)
  (yaspl x86-64-assembly)
}
(export
  (#:values compile-prim-program))
(types)

(define (compile-functions [fs : (List p:FunctionDefinition)] [abi : SystemAbi] [acc : (List TextFragment)])
  : (Either Bytes (List TextFragment))
  (case fs
    [(empty) (right acc)]
    [(cons f fs)
     (match-define (tuple2 name reg-f) (convert-function f abi))
     (case (compile-function
             name
             (simplify-function-definition name reg-f (static-info (make-dict bytes-cmp))))
       [(left v) (left v)]
       [(right fragment) (compile-functions fs abi (cons fragment acc))])]))

(define (compile-prim-program [sbytes : SourcedBytes] [abi : SystemAbi]) : (Either Bytes (List TextFragment))
  (case (parse-single-sexp sbytes)
    [(left (sexp-error v _)) (left v)]
    [(right sexp)
     (case (parse-module sexp)
       [(left (parse-error v src))
        (left (bytes-append (varargs list (source-span->start-location-bytes src) #": " v)))]
       [(right module)
        (case (type-check module)
          [(just v) (left v)]
          [(nothing)
           (case module
             [(p:module _ _ functions)
              (compile-functions functions abi (empty))])])])]))
