#:module (prim-language-compiler)
#:import {
  (either)
  (list)
  (maybe)
  (prim)
  {(prim-language)
    {#:types
      [FunctionDefinition p:FunctionDefinition]
    }
    {#:patterns
      [module p:module]
    }
  }
  (prim-language-parser)
  (prim-language-type-checker)
  (prim-to-register)
  (register-language-compiler)
  (sexp-parser)
  (simplify-register-language)
  (tuples)
  (yaspl x86-64-assembly)
}
(export
  (#:types)
  (#:values compile-prim-program)
  (#:patterns))
(types)

(define (compile-functions [fs : (List p:FunctionDefinition)] [acc : (List TextFragment)])
  : (Either Bytes (List TextFragment))
  (case fs
    [(empty) (right acc)]
    [(cons f fs)
     (case (compile-function (simplify-function-definition (convert-function f)))
       [(left v) (left v)]
       [(right (tuple2 _ fragment)) (compile-functions fs (cons fragment acc))])]))

(define (compile-prim-program [file-bytes : Bytes]) : (Either Bytes (List TextFragment))
  (case (parse-single-sexp file-bytes)
    [(left v) (left v)]
    [(right sexp)
     (case (parse-module sexp)
       [(left v) (left v)]
       [(right module)
        (case (type-check module)
          [(just v) (left v)]
          [(nothing)
           (case module
             [(p:module name functions)
              (compile-functions functions (empty))])])])]))
