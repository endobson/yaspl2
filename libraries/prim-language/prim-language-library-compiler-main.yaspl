#:module (prim-language-library-compiler-main)
#:import {
  (assembler)
  (either)
  (io)
  (list)
  (mach-o-writer)
  (prim)
  (prim-language-compiler)
  (structured-mach-o)
  (structured-native-code)
  (tuples)
}
(export)
(types)

(define (parse-args [args : (List Bytes)]) : (Either Bytes (Tuple2 Bytes Bytes))
  (case args
    [(empty)
     (left #"No executable???")]
    [(cons _ (empty))
     (left #"No file name provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No output file name provided.")]
    [(cons _ (cons _ (cons _ (cons _ _))))
     (left #"Too many arguments.")]
    [(cons _ (cons file-name (cons out-file-name (empty))))
     (right (tuple2 file-name out-file-name))]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (case (parse-args (array->list args))
    [(left msg)
     (begin
       (write-line msg stderr)
       1)]
    [(right (tuple2 file-name out-file-name))
     (case (compile-prim-program (sourced-bytes-from-file file-name))
       [(left msg)
        (begin
          (write-line msg stderr)
          1)]
       [(right text-fragments)
        (match-define text-section
          (convert-relocations (assemble-text-section text-fragments)
                               abstract-relocation->mach-o-relocation))
        (match-define const-section
          (convert-relocations (assemble-const-section (empty))
                               abstract-relocation->mach-o-relocation))
        (begin
          (write-mach-o-library text-section const-section out-file-name)
          0)])]))
