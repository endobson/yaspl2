#:module (prim-language-library-compiler-main)
#:import {
  (either)
  (io)
  (list)
  (mach-o-writer2)
  (maybe)
  (prim)
  (prim-language) {
    #:types
      [FunctionDefinition p:FunctionDefinition]
    #:patterns
      [module p:module]
  }
  (prim-language-parser)
  (prim-language-type-checker)
  (prim-to-register)
  (register-language-compiler)
  (sexp-parser)
  (simplify-register-language)
  (tuples)
  (yaspl x86-64-assembly)
}
(export)
(types)

(define (parse-args [args : (List Bytes)]) : (Either Bytes (Tuple2 Bytes Bytes))
  (case args
    [(empty)
     (left #"No executable???")]
    [(cons _ (empty))
     (left #"No file name provided.")]
    [(cons _ (cons _ (empty)))
     (left #"No output file name provided.")]
    [(cons _ (cons _ (cons _ (cons _ _))))
     (left #"Too many arguments.")]
    [(cons _ (cons file-name (cons out-file-name (empty))))
     (right (tuple2 file-name out-file-name))]))

(define (compile-functions [fs : (List p:FunctionDefinition)] [acc : (List TextFragment)])
  : (Either Bytes (List TextFragment))
  (case fs
    [(empty) (right acc)]
    [(cons f fs)
     (case (compile-function (simplify-function-definition (convert-function f)))
       [(left v) (left v)]
       [(right (tuple2 _ fragment)) (compile-functions fs (cons fragment acc))])]))

(define (compile-prim-program [file-bytes : Bytes]) : (Either Bytes (List TextFragment))
  (case (parse-single-sexp file-bytes)
    [(left v) (left v)]
    [(right sexp)
     (case (parse-module sexp)
       [(left v) (left v)]
       [(right module)
        (case (type-check module)
          [(just v) (left v)]
          [(nothing)
           (case module
             [(p:module name functions)
              (compile-functions functions (empty))])])])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (case (parse-args (array->list args))
    [(left msg)
     (begin
       (write-line msg stderr)
       1)]
    [(right (tuple2 file-name out-file-name))
     (case (compile-prim-program (call-with-input-file file-name read-all-bytes))
       [(left msg)
        (begin
          (write-line msg stderr)
          1)]
       [(right fragments)
        (case (write-mach-o-library/fragments out-file-name
                                              (assembly-fragments fragments (empty)))
          [(left msg)
           (begin
             (write-line msg stderr)
             1)]
          [(right _)
           0])])]))
