#:module (type-checked-language)
#:import {
  (dict)
  (list)
  (module-name)
  (module-signature)
  (prim)
  (types)
  {(yaspl languages expanded-datatypes-language)
    {#:types
      Block
      BlockDefinition
      CaseClause
      CondClause
      DatatypeDefinition
      Export
      Expression
      FieldDescriptor
      FunctionArg
      FunctionDefinition
      Identifier
      Imports
      Pattern
      PatternExport
      StaticDefinition
      TypeExport
    }
    {#:values
      field-descriptor-runtime-index
      function-arg-pattern
      function-definition-name
    }
    {#:patterns
      abstraction-pattern
      annotated-expr
      app-expr
      begin-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      cond-clause
      cond-expr
      export
      function-arg
      function-definition
      identifier
      if-expr
      ignore-pattern
      imports
      int-literal
      int-pattern
      lambda-expr
      let-expr
      match-def
      pattern-export
      type-export
      var-expr
      varargs-app-expr
      varargs-definition
      variable-pattern
      variant-accessor
      variant-constructor
    }
  }
}
(export
  (#:types
    Block BlockDefinition CaseClause CondClause Export Exports Expression FunctionDefinition FunctionArg Imports
    Module Pattern StaticDefinition TypeExport PatternExport ValueExport DatatypeDefinition
    FieldDescriptor Identifier)
  (#:values
   module exports value-export module-definitions module-imports module-name
   function-definition-name function-arg-pattern
   module-static-definitions module-patterns field-descriptor-runtime-index)
  (#:patterns
    module annotated-expr app-expr type-export exports begin-expr block boolean-literal
    bytes-literal case-clause case-expr cond-clause cond-expr
    function-definition function-arg if-expr int-literal
    lambda-expr let-expr match-def var-expr varargs-app-expr
    varargs-definition imports abstraction-pattern bytes-pattern variant-constructor variant-accessor
    ignore-pattern int-pattern variable-pattern value-export pattern-export export
    identifier))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [definitions : (List FunctionDefinition)]
            [types : (List DatatypeDefinition)]
            [patterns : (Dict Bytes PatternSignature)]
            [static-definitions : (List StaticDefinition)]))
  (define-type Exports
    (exports [types : (List TypeExport)]
             [values : (List ValueExport)]
             [patterns : (List PatternExport)]
             [statics : (List Export)]))
  (define-type ValueExport
    (value-export [local-name : Bytes] [exported-name : Bytes] [type : Type])))
