(module multi-set
  (import
    (prim
      #:types (Int Boolean)
      #:values (+)
      #:patterns ())
    (list
      #:types (List)
      #:values ()
      #:patterns ())
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (dict
      #:types (Dict)
      #:values (make-dict dict-update dict-keys dict-ref)
      #:patterns ()))
  (export
    #:types (MultiSet)
    #:values (make-multi-set multi-set-add multi-set-keys multi-set-count)
    #:patterns ())
  (types
    (define-type (MultiSet a)
      (multi-set [counts (Dict a Int)])))

  (define (a) (make-multi-set [eq : (a a -> Boolean)]) : (MultiSet a)
    (multi-set (make-dict eq)))

  (define (a) (multi-set-add [ms : (MultiSet a)] [e : a]) : (MultiSet a)
    (case ms
      [(multi-set counts)
       (multi-set (dict-update counts e (lambda ([x : Int]) (+ x 1)) 0))]))

  (define (a) (multi-set-keys [ms : (MultiSet a)]) : (List a) 
    (dict-keys (multi-set-counts ms)))

  (define (a) (multi-set-count [ms : (MultiSet a)] [e : a]) : Int
    (case (dict-ref (multi-set-counts ms) e)
      [(nothing) 0]
      [(just v) v])))

