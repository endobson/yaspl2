(module numbers
  (import
    (prim
      #:types (Byte Bytes Boolean Void)
      #:values (and bytes-length bytes-ref bytes-set! + * - quotient remainder = <= < > panic
                make-bytes void)
      #:patterns ()))
  (export digit? decimal-bytes->integer integer->decimal-bytes integer->hex-bytes)
  (types)

  (define (digit? [v : Byte]) : Boolean
    (and (<= 48 v) (< v 58)))

  (define (decimal-bytes->integer [bytes : Bytes]) : Byte
    (decimal-bytes->integer/loop bytes 0 (bytes-length bytes) 0))

  (define (decimal-bytes->integer/loop [bytes : Bytes] [start : Byte] [end : Byte] [acc : Byte])
    : Byte
    (if (= start end)
        acc
        (let ([acc (+ (* 10 acc) (- (bytes-ref bytes start) 48))])
          (decimal-bytes->integer/loop bytes (+ 1 start) end acc))))

  (define (integer->decimal-bytes-length [v : Byte]) : Byte
    (if (< v 0)
        (+ 1 (integer->decimal-bytes-length (- 0 v)))
        (if (< v 10)
            1
            (+ 1 (integer->decimal-bytes-length (quotient v 10))))))

  (define (integer->hex-bytes-length [v : Byte]) : Byte
    (if (< v 0)
        (+ 1 (integer->hex-bytes-length (- 0 v)))
        (if (< v 16)
            1
            (+ 1 (integer->hex-bytes-length (quotient v 16))))))


  (define (write-decimal-bytes [v : Byte] [bytes : Bytes] [offset : Byte]) : Void
    (if (< v 0)
        (begin
          (bytes-set! bytes 0 45) ;; '-'
          (write-decimal-bytes (- 0 v) bytes offset))
        (let ([b (remainder v 10)])
          (begin
            (bytes-set! bytes offset (+ b 48))
            (let ([v (quotient v 10)])
              (if (> v 0)
                  (write-decimal-bytes v bytes (- offset 1))
                  (void)))))))


  (define (write-hex-bytes [v : Byte] [bytes : Bytes] [offset : Byte]) : Void
    (if (< v 0)
        (begin
          (bytes-set! bytes 0 45) ;; '-'
          (write-decimal-bytes (- 0 v) bytes offset))
        (let ([b (remainder v 16)])
          (begin
            (bytes-set! bytes offset (if (< b 10) (+ b 48) (+ b 55)))
            (let ([v (quotient v 16)])
              (if (> v 0)
                  (write-hex-bytes v bytes (- offset 1))
                  (void)))))))


  (define (integer->decimal-bytes [v : Byte]) : Bytes
    (let ([len (integer->decimal-bytes-length v)])
      (let ([bytes (make-bytes len)])
        (begin
          (write-decimal-bytes v bytes (- len 1))
          bytes))))


  (define (integer->hex-bytes [v : Byte]) : Bytes
    (let ([len (integer->hex-bytes-length v)])
      (let ([bytes (make-bytes len)])
        (begin
          (write-hex-bytes v bytes (- len 1))
          bytes)))))
