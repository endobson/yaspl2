(module numbers
  (import (prim and bytes-length bytes-ref bytes-set! + * - quotient remainder = <= < > panic
                make-bytes void))
  (export digit? decimal-bytes->integer integer->decimal-bytes)
  (types)

  (define (digit? v)
    (and (<= 48 v) (< v 58)))

  (define (decimal-bytes->integer bytes)
    (decimal-bytes->integer/loop bytes 0 (bytes-length bytes) 0))

  (define (decimal-bytes->integer/loop bytes start end acc)
    (if (= start end)
        acc
        (let ([acc (+ (* 10 acc) (- (bytes-ref bytes start) 48))])
          (decimal-bytes->integer/loop bytes (+ 1 start) end acc))))

  (define (integer->decimal-bytes-length v)
    (if (< v 0)
        (+ 1 (integer->decimal-bytes-length (- 0 v)))
        (if (< v 10)
            1
            (+ 1 (integer->decimal-bytes-length (quotient v 10))))))

  (define (write-decimal-bytes v bytes offset)
    (if (< v 0)
        (begin
          (bytes-set! bytes 0 45) ;; '-'
          (write-decimal-bytes (- 0 v) bytes offset))
        (let ([b (remainder v 10)])
          (begin
            (bytes-set! bytes offset (+ b 48))
            (let ([v (quotient v 10)])
              (if (> v 0)
                  (write-decimal-bytes v bytes (- offset 1))
                  (void)))))))

  (define (integer->decimal-bytes v)
    (let ([len (integer->decimal-bytes-length v)])
      (let ([bytes (make-bytes len)])
        (begin
          (write-decimal-bytes v bytes (- len 1))
          bytes)))))
