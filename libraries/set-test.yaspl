(module set-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Void)
      #:values (void =)
      #:patterns ())
    (boolean not)
    (set
      #:types (Set)
      #:values (make-set set-add set->list set-member? set-remove)
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (yunit
      #:types () 
      #:values (yunit/main test-case)
      #:patterns ())
    (list
      #:types (List)
      #:values (list length)
      #:patterns ()))
  (export)
  (types)

  (define (test-set-size-empty) : Boolean
    (= (length (set->list (make-set =))) 0))

  (define (test-set-size-a) : Boolean
    (= (length (set->list (set-add (make-set =) 1))) 1))

  (define (test-set-size-aa) : Boolean
    (= (length (set->list (set-add (set-add (make-set =) 1) 1))) 1))

  (define (test-set-size-ab) : Boolean
    (= (length (set->list (set-add (set-add (make-set =) 1) 2))) 2))

  (define (test-set-size-aba) : Boolean
    (= (length (set->list (set-add (set-add (set-add (make-set =) 1) 2) 1))) 2))

  (define (test-set-member-empty) : Boolean
    (not (set-member? (make-set =) 1)))

  (define (test-set-member-a) : Boolean
    (set-member? (set-add (make-set =) 1) 1))

  (define (test-set-member-b) : Boolean
    (not (set-member? (set-add (make-set =) 2) 1)))

  (define (test-set-member-ab) : Boolean
    (set-member? (set-add (set-add (make-set =) 1) 2) 1))

  (define (test-set-remove-empty) : Boolean
    (= (length (set->list (set-remove (make-set =) 1))) 0))

  (define (test-set-remove-a) : Boolean
    (= (length (set->list (set-remove (set-add (make-set =) 1) 1))) 0))

  (define (test-set-remove-b) : Boolean
    (= (length (set->list (set-remove (set-add (make-set =) 2) 1))) 1))

  (define (test-set-remove-ab) : Boolean
    (= (length (set->list (set-remove (set-add (set-add (make-set =) 1) 2) 1))) 1))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (yunit/main stderr
      (varargs list
        (test-case #"set size empty" test-set-size-empty)
        (test-case #"set size a" test-set-size-a)
        (test-case #"set size aa" test-set-size-aa)
        (test-case #"set size ab" test-set-size-ab)
        (test-case #"set size aba" test-set-size-aba)

        (test-case #"set member empty" test-set-member-empty)
        (test-case #"set member a" test-set-member-a)
        (test-case #"set member b" test-set-member-b)
        (test-case #"set member ab" test-set-member-ab)

        (test-case #"set remove empty" test-set-remove-empty)
        (test-case #"set remove a" test-set-remove-a)
        (test-case #"set remove b" test-set-remove-b)
        (test-case #"set remove ab" test-set-remove-ab)))))
