(module set-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort Void)
      #:values (void =)
      #:patterns ())
    (set
      #:types (Set)
      #:values (make-set set-add set->list set-member?)
      #:patterns ())
    (io write-all-bytes newline write-line)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (list empty cons length)
      #:patterns (cons empty)))
  (export)
  (types
    (define-type TestCase
      (test-case [name Bytes] [run (-> Boolean)])))

  (define (test-set-size-empty) : Boolean
    (= (length (set->list (make-set =))) 0))

  (define (test-set-size-a) : Boolean
    (= (length (set->list (set-add (make-set =) 1))) 1))

  (define (test-set-size-aa) : Boolean
    (= (length (set->list (set-add (set-add (make-set =) 1) 1))) 1))

  (define (test-set-size-ab) : Boolean
    (= (length (set->list (set-add (set-add (make-set =) 1) 2))) 2))

  (define (test-set-size-aba) : Boolean
    (= (length (set->list (set-add (set-add (set-add (make-set =) 1) 2) 1))) 2))

  (define (test-set-member-empty) : Boolean
    (if (set-member? (make-set =) 1) #f #t))

  (define (test-set-member-a) : Boolean
    (set-member? (set-add (make-set =) 1) 1))

  (define (test-set-member-b) : Boolean
    (if (set-member? (set-add (make-set =) 2) 1) #f #t))

  (define (test-set-member-ab) : Boolean
    (set-member? (set-add (set-add (make-set =) 1) 2) 1))


  (define (run-test-cases [tests : (List TestCase)]) : (List Bytes)
    (case tests
      [(empty) (empty)]
      [(cons (test-case name action) tests)
       (if (action)
           (run-test-cases tests)
           (cons name (run-test-cases tests)))]))

  (define (write-indented-lines [lines : (List Bytes)] [out : OutputPort]) : Void
    (case lines
      [(empty) (void)]
      [(cons line lines)
       (begin
         (write-all-bytes #"  " out)
         (write-all-bytes line out)
         (newline out)
         (write-indented-lines lines out))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (case (run-test-cases
            (varargs list
              (test-case #"set size empty" test-set-size-empty)
              (test-case #"set size a" test-set-size-a)
              (test-case #"set size aa" test-set-size-aa)
              (test-case #"set size ab" test-set-size-ab)
              (test-case #"set size aba" test-set-size-aba)

              (test-case #"set member empty" test-set-member-empty)
              (test-case #"set member a" test-set-member-a)
              (test-case #"set member b" test-set-member-b)
              (test-case #"set member ab" test-set-member-ab)))
      [(empty) 0]
      [failed-cases
       (begin
         (write-line #"Test cases failed: " stderr)
         (write-indented-lines failed-cases stderr)
         1)])))
