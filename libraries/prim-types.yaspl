#:module (prim-types)
#:import {
  (list)
  (maybe)
  (module-name)
  (prim)
  (prim-names)
  (types)
}
(export
  (#:values int-type boolean-type bytes-type void-type
            u8-type s8-type u16-type s16-type u32-type s32-type u64-type s64-type
            file-descriptor-type mach-port-type
            array-type pointer-type array-type->element-type pointer-type->element-type))
(types)

(define (prim-type/prim8 [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty) (prim-kind (type-size8))))
(define (prim-type/prim16 [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty) (prim-kind (type-size16))))
(define (prim-type/prim32 [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty) (prim-kind (type-size32))))
(define (prim-type/prim64 [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty) (prim-kind (type-size64))))

(define (prim-type/star [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty) (star-kind)))

(define (int-type) : Type
  (prim-type/prim64 #"Int"))
(define (bytes-type) : Type
  (prim-type/star #"Bytes"))
(define (boolean-type) : Type
  (prim-type/prim64 #"Boolean"))
(define (void-type) : Type
  (prim-type/prim64 #"Void"))

(define (array-type [t : Type]) : Type
  (abstract-type (prim-mod) #"Array" (cons t (empty)) (memory-kind)))
(define (pointer-type [t : Type]) : Type
  (abstract-type (prim-mod) #"Pointer" (cons t (empty)) (prim-kind (type-size64))))

(define (array-type->element-type [t : Type]) : (Maybe Type)
  (case t
    [(abstract-type (mod-name (cons #"prim" (empty))) #"Array" (cons t (empty)) _)
     (just t)]
    [_ (nothing)]))
(define (pointer-type->element-type [t : Type]) : (Maybe Type)
  (case t
    [(abstract-type (mod-name (cons #"prim" (empty))) #"Pointer" (cons t (empty)) _)
     (just t)]
    [_ (nothing)]))



(define (u8-type) : Type
  (prim-type/prim8 #"U8"))
(define (s8-type) : Type
  (prim-type/prim8 #"S8"))
(define (u16-type) : Type
  (prim-type/prim16 #"U16"))
(define (s16-type) : Type
  (prim-type/prim16 #"S16"))
(define (u32-type) : Type
  (prim-type/prim32 #"U32"))
(define (s32-type) : Type
  (prim-type/prim32 #"S32"))
(define (u64-type) : Type
  (prim-type/prim64 #"U64"))
(define (s64-type) : Type
  ;; TODO make this distinct from Int
  (prim-type/prim64 #"Int"))

(define (mach-port-type) : Type
  (prim-type/prim64 #"MachPort"))
(define (file-descriptor-type) : Type
  (prim-type/prim64 #"FileDescriptor"))
