#:module (prim-types)
#:import {
  (list)
  (module-name)
  (prim)
  (types)
}
(export
  (#:values prim-mod int-type boolean-type bytes-type void-type
            u8-type s8-type u16-type s16-type u32-type s32-type u64-type s64-type
            file-descriptor-type mach-port-type))
(types)

(define (prim-mod) : ModName
  (mod-name (varargs list #"prim")))

(define (prim-type/prim64 [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty) (prim64-kind)))

(define (prim-type/star [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty) (star-kind)))

(define (int-type) : Type
  (prim-type/prim64 #"Int"))
(define (bytes-type) : Type
  (prim-type/star #"Bytes"))
(define (boolean-type) : Type
  (prim-type/prim64 #"Boolean"))
(define (void-type) : Type
  (prim-type/prim64 #"Void"))

(define (u8-type) : Type
  (prim-type/prim64 #"U8"))
(define (s8-type) : Type
  (prim-type/prim64 #"S8"))
(define (u16-type) : Type
  (prim-type/prim64 #"U16"))
(define (s16-type) : Type
  (prim-type/prim64 #"S16"))
(define (u32-type) : Type
  (prim-type/prim64 #"U32"))
(define (s32-type) : Type
  (prim-type/prim64 #"S32"))
(define (u64-type) : Type
  (prim-type/prim64 #"U64"))
(define (s64-type) : Type
  ;; TODO make this distinct from Int
  (prim-type/prim64 #"Int"))

(define (mach-port-type) : Type
  (prim-type/prim64 #"MachPort"))
(define (file-descriptor-type) : Type
  (prim-type/prim64 #"FileDescriptor"))
