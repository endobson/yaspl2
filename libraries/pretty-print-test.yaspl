#:module (pretty-print-test)
#:import {
  (bytes)
  (join-list)
  (list)
  (maybe)
  (pretty-printer)
  (prim)
  (yunit)
}
(export)
(types)


(define (jl->bytes [jl : (JoinList Bytes)]) : Bytes
  (case (jl->list jl)
    [(empty) #""]
    [(cons entry (empty)) entry]
    [entries (bytes-append entries)]))

(define (passing-test [name : Bytes] [input : Doc] [expected : Bytes]) : TestCase
  (new-test-case name
    (lambda ()
      (case (pretty-print input)
        [(nothing) (just (failure #"Input couldn't render"))]
        [(just render)
         (match-define output (jl->bytes render))
         (if (bytes=? output expected)
             (nothing)
             (just (failure
                     (bytes-append
                       (varargs list #"Output didn't match:\n" output #"\nExpected:\n"
                                expected)))))]))))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (yunit/main stderr
    (varargs list
      (passing-test #"Text"
        (doc-text #"text")
        #"text")
      (passing-test #"Append"
        (doc-append (doc-text #"a") (doc-text #"b"))
        #"ab")
      (passing-test #"Flush"
        (doc-append (doc-flush (doc-text #"a")) (doc-text #"b"))
        #"a\nb")
      (passing-test #"Flush and Append"
        (doc-append (doc-text #"a") (doc-append (doc-flush (doc-text #"b"))
                                                (doc-text #"c")))
        #"ab\n c")
      (passing-test #"Choice and Append"
        (doc-choice
          (doc-append (doc-text #"a") (doc-append (doc-text #" ") (doc-text #"b")))
          (doc-append (doc-flush (doc-text #"a")) (doc-text #"b")))
        #"a b")
      (passing-test #"Choice and Append"
        (doc-choice
          (doc-append (doc-text #"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
                      (doc-append (doc-text #" ") (doc-text #"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")))
          (doc-append (doc-flush (doc-text #"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"))
                      (doc-text #"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")))
        #"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"))))
