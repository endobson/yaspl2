#:module (stack-trace)
#:import {
  (bytes)
  (data ordering)
  (data red-black-tree)
  (either)
  (in-memory-mach-o)
  (join-list)
  (list)
  (mach-o)
  (maybe)
  (numbers)
  (prim)
  (tuples)
}
(export
  (#:types StackSnapshot StackTrace)
  (#:values make-stack-snapshot stack-snapshot->stack-trace format-stack-trace))
(types
  (define-type Address
    (address [v : Int]))
  (define-type StackSnapshot
    (stack-snapshot
      [start-address : Int]
      [size : Int]
      [buffer : Bytes]))
  (define-type StackTrace
    (stack-trace
      [frames : (List StackFrame)]))
  (define-type StackFrame
    (stack-frame
      [return-address : Int]
      [function-info : (Maybe FrameFunctionInfo)]))
  (define-type FrameFunctionInfo
    (frame-function-info
      [function-name : Bytes]
      [function-start-address : Int])))

(define (make-stack-snapshot) : StackSnapshot
  (match-define buffer (make-bytes 800))
  (match-define metadata (make-bytes 8))
  (match-define stack-size (fill-stack buffer metadata))
  (stack-snapshot
    (u64->s64 (bytes-ref/u64-le metadata 0))
    stack-size
    buffer))

(define (read-stack-address [ss : StackSnapshot] [address : Int]) : Int
  (match-define (stack-snapshot start-address _size buffer) ss)
  (u64->s64 (bytes-ref/u64-le buffer (- address start-address))))

(define (read-return-addresses [ss : StackSnapshot]) : (List Address)
  (read-return-addresses* ss (stack-snapshot-start-address ss)))

(define (read-return-addresses* [ss : StackSnapshot] [base-pointer : Int]) : (List Address)
  (match-define next-base-pointer (read-stack-address ss base-pointer))
  (if (= 0 next-base-pointer)
      (empty)
      (cons
        (address (read-stack-address ss (+ 8 base-pointer)))
        (read-return-addresses* ss next-base-pointer))))

(define (make-symbol-map [symbols : (List SymbolTableEntry)])
  : (RedBlackTree Address Bytes)
  (foldl
    (lambda ([entry : SymbolTableEntry] [acc : (RedBlackTree Address Bytes)])
      (case entry
        [(symbol-table-entry name _type _section _description value)
         (rb-tree-set acc (address (u64->s64 value)) name)]))
    symbols
    (ann (RedBlackTree Address Bytes) (make-rb-tree address-cmp))))

(define (address-cmp [l : Address] [r : Address]) : Ordering
  (match-define (address lv) l)
  (match-define (address rv) r)
  (int-cmp lv rv))

(define (format-stack-trace [trace : StackTrace]) : Bytes
  (bytes-append
    (jl->list
      (concat-map-jl/list
        (lambda ([frame : StackFrame])
          (match-define (stack-frame addr func) frame)
          (varargs append-jl*
            (varargs join-list #"[" (integer->hex-bytes addr) #"] ")
            (case func
              [(nothing) (single-jl #"<no function>")]
              [(just (frame-function-info name function-start))
               (varargs join-list
                 name #"+" (integer->decimal-bytes (- addr function-start)))])
            (single-jl #"\n")))
        (stack-trace-frames trace)))))

(define (stack-snapshot->stack-trace [ss : StackSnapshot])
  : (Either Bytes StackTrace)
  (case (read-mach-o/mem)
    [(left v) (left v)]
    [(right mach-o)
     (match-define symbol-map (make-symbol-map (read-symbol-table mach-o)))
     (right
       (stack-trace
         (map
           (lambda ([addr : Address])
             (match-define (address addr-v) addr)
             (case (rb-tree-infimum symbol-map addr)
               [(nothing)
                (stack-frame addr-v (nothing))]
               [(just (tuple2 (address function-start) name))
                (stack-frame
                  addr-v
                  (just (frame-function-info name function-start)))]))
           (read-return-addresses ss))))]))
