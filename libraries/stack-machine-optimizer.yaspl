(module stack-machine-optimizer
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array Void Boolean)
      #:values (panic make-bytes read-bytes < + = <= array-length array-ref
                void)
      #:patterns ())
    (io read-all-bytes write-all-bytes write-line newline)
    (list
      #:types (List)
      #:values (empty cons append map list length reverse list-ref)
      #:patterns (empty cons))
    (numbers integer->decimal-bytes)
    (maybe
      #:types (Maybe)
      #:values ()
      #:patterns (just nothing))
    (dict
      #:types (Dict)
      #:values (make-dict dict-set dict-add dict-replace dict-ref)
      #:patterns ())
    (set
      #:types (Set)
      #:values (make-set set-add set-member?)
      #:patterns ())
    (tuples
      #:types ()
      #:values (tuple2)
      #:patterns (tuple2))
    (bytes bytes=? bytes-append make-null-terminated)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (intermediate-to-stack
      #:types ()
      #:values (compile-module)
      #:patterns (compiled-module))
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns ())
    (stack-machine
      #:types (StackFunction StackBasicBlock StackCmd StackTerminal VariantCases BinMathOp
               BinLogicMathOp TopLevelObject)
      #:values (stack-function stack-basic-block boolean-jmp uncond-jmp variant-switch
                catch-all-case variant-case pop-cmd dup-cmd known-fun-call-cmd function-tlo
                known-tail-call
                no-catch-all-case)
      #:patterns (
          stack-function stack-basic-block boolean-jmp uncond-jmp variant-switch return
          tail-call known-tail-call
          known-fun-call-cmd
          no-catch-all-case catch-all-case variant-case num-lit-cmd boolean-lit-cmd
          dup-cmd variant-ref-cmd pop-cmd function-tlo trivial-closure-tlo fun-call-cmd
          load-global-cmd))
    (prim-implementation prim-implementation)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export
    #:types ()
    #:values (optimize-tlos)
    #:patterns ())
  (types)


  (define (optimize-tlos [tlos : (List TopLevelObject)] [known-funcs : (Dict Bytes Bytes)]) : (List TopLevelObject)
      (map (lambda ([tlo : TopLevelObject]) (optimize-tlo known-funcs tlo)) tlos))


  (define (optimize-tlo [known-funcs : (Dict Bytes Bytes)] [tlo : TopLevelObject]) : TopLevelObject
    (case tlo
      [(function-tlo func)
       (function-tlo (optimize-stack-function known-funcs func))]
      [_
       tlo]))


  (define (optimize-stack-function [known-funcs : (Dict Bytes Bytes)] [fun : StackFunction]) : StackFunction
    (case fun
      [(stack-function name num-args blocks)
       (stack-function name num-args
         (remove-unreachable-blocks
           (optimize-dead-blocks
             (peephole-optimize-blocks known-funcs
               (inline-singlely-used-blocks
                 (optimize-trivial-blocks
                   (optimize-known-boolean-jumps
                     (optimize-trivial-blocks blocks))))))))]))

  (define (optimize-trivial-blocks [blocks : (List StackBasicBlock)]) : (List StackBasicBlock)
    (let ([trivial-block-dict (compute-trivial-blocks blocks 0 (make-dict =))])
      (replace-trivial-blocks blocks trivial-block-dict)))

  (define (compute-trivial-blocks
            [blocks : (List StackBasicBlock)]
            [index : Byte]
            [dict : (Dict Byte StackTerminal)]) : (Dict Byte StackTerminal)
    (case blocks
      [(empty) dict]
      [(cons (stack-basic-block (empty) term) blocks)
       (compute-trivial-blocks
         blocks
         (+ 1 index)
         (dict-add dict index term))]
      [(cons _ blocks)
       (compute-trivial-blocks blocks (+ 1 index) dict)]))

  (define (replace-trivial-blocks
            [blocks : (List StackBasicBlock)]
            [dict : (Dict Byte StackTerminal)]) : (List StackBasicBlock)
    (case blocks
      [(empty) (empty)]
      [(cons (stack-basic-block cmds (uncond-jmp target)) blocks)
       (case (dict-ref dict target)
         [(just term)
          (replace-trivial-blocks (cons (stack-basic-block cmds term) blocks) dict)]
         [(nothing)
          (cons (stack-basic-block cmds (uncond-jmp target)) (replace-trivial-blocks blocks dict))])]
      [(cons block blocks)
       (cons block (replace-trivial-blocks blocks dict))]))


  (define (optimize-dead-blocks [blocks : (List StackBasicBlock)]) : (List StackBasicBlock)
    (let ([dead-blocks (compute-dead-blocks blocks 0 (make-set =))])
      (replace-dead-blocks blocks dead-blocks)))

  (define (compute-dead-blocks
            [blocks : (List StackBasicBlock)]
            [index : Byte]
            [set : (Set Byte)]) : (Set Byte)
    (case blocks
      [(empty) set]
      [(cons (stack-basic-block cmds (variant-switch (no-catch-all-case))) blocks)
       (if (all-pop-cmds? cmds)
           (compute-dead-blocks
             blocks
             (+ 1 index)
             (set-add set index))
           (compute-dead-blocks blocks (+ 1 index) set))]
      [(cons _ blocks)
       (compute-dead-blocks blocks (+ 1 index) set)]))

  (define (all-pop-cmds? [cmds : (List StackCmd)]) : Boolean
    (case cmds
      [(empty) #t]
      [(cons (pop-cmd) cmds)
       (all-pop-cmds? cmds)]
      [(cons _ cmds) #f]))

  (define (replace-dead-blocks
            [blocks : (List StackBasicBlock)]
            [set : (Set Byte)]) : (List StackBasicBlock)
    (case blocks
      [(empty) (empty)]
      [(cons (stack-basic-block cmds (variant-switch cases)) blocks)
       (cons
         (stack-basic-block cmds (variant-switch (replace-dead-block/cases cases set)))
         (replace-dead-blocks blocks set))]
      [(cons block blocks)
       (cons block (replace-dead-blocks blocks set))]))

  (define (replace-dead-block/cases [cases : VariantCases] [set : (Set Byte)]) : VariantCases
    (case cases
      [(variant-case tag index cases)
       (variant-case tag index (replace-dead-block/cases cases set))]
      [(catch-all-case index)
       (if (set-member? set index)
           (no-catch-all-case)
           cases)]
      [(no-catch-all-case) cases]))


  (define (optimize-known-boolean-jumps [blocks : (List StackBasicBlock)]) : (List StackBasicBlock)
    (map optimize-known-boolean-jumps/block blocks))


  (define (optimize-known-boolean-jumps/block [block : StackBasicBlock]) : StackBasicBlock
    (case block
      [(stack-basic-block cmds (boolean-jmp t-index f-index))
       (let ([reversed-cmds (reverse cmds)])
         (case reversed-cmds
           [(cons (boolean-lit-cmd v) cmds)
            (stack-basic-block (reverse cmds) (uncond-jmp (if v t-index f-index)))]
           [_ block]))]
      [_ block]))


  (define (inline-singlely-used-blocks [blocks : (List StackBasicBlock)]) : (List StackBasicBlock)
    (let ([dict (compute-reachable-block-dict blocks 0 (make-dict =))])
      (let ([reachable-dict (follow-reachable-block-dict (cons 0 (empty)) (make-dict =) dict)])
        (inline-singlely-used-blocks/blocks blocks 0 reachable-dict blocks))))

  (define (inline-singlely-used-blocks/blocks
            [loop-blocks : (List StackBasicBlock)]
            [index : Byte]
            [dict : (Dict Byte Byte)]
            [blocks : (List StackBasicBlock)]) : (List StackBasicBlock)
    (case loop-blocks
      [(empty) (empty)]
      [(cons block loop-blocks)
       (cons
         (case (dict-ref dict index)
           [(just _) (inline-singlely-used-blocks/block block dict blocks)]
           [(nothing) block])
         (inline-singlely-used-blocks/blocks loop-blocks (+ 1 index) dict blocks))]))

  (define (inline-singlely-used-blocks/block
            [block : StackBasicBlock]
            [dict : (Dict Byte Byte)]
            [blocks : (List StackBasicBlock)]) : StackBasicBlock
    (case block
      [(stack-basic-block cmds (uncond-jmp index))
       (case (dict-ref dict index)
         [(just n)
          (if (= n 1)
              (case (list-ref blocks index)
                [(nothing) (panic #"Bad index")]
                [(just (stack-basic-block new-cmds new-term))
                 (inline-singlely-used-blocks/block
                   (stack-basic-block (append cmds new-cmds) new-term)
                   dict
                   blocks)])
              block)]
         [(nothing) (panic #"Bad index")])]
      [_ block]))

  (define (remove-unreachable-blocks [blocks : (List StackBasicBlock)]) : (List StackBasicBlock)
    (let ([dict (compute-reachable-block-dict blocks 0 (make-dict =))])
      (let ([reachable-dict (follow-reachable-block-dict (cons 0 (empty)) (make-dict =) dict)])
        (let ([new-number-dict (compute-new-number-dict 0 (length blocks) 0 reachable-dict (make-dict =))])
          (restructure-blocks blocks 0 new-number-dict)))))

  (define (follow-reachable-block-dict
            [to-visit : (List Byte)]
            [reachable : (Dict Byte Byte)]
            [dict : (Dict Byte (List Byte))]) : (Dict Byte Byte)
    (case to-visit
      [(empty) reachable]
      [(cons index to-visit)
       (case (dict-ref reachable index)
         [(just n)
          (follow-reachable-block-dict
            to-visit
            (dict-replace reachable index (+ 1 n))
            dict)]
         [(nothing)
          (case (dict-ref dict index)
            [(nothing) (panic #"Bad block index")]
            [(just nodes)
             (follow-reachable-block-dict
               (append nodes to-visit)
               (dict-add reachable index 1)
               dict)])])]))


  (define (compute-reachable-block-dict
            [blocks : (List StackBasicBlock)]
            [index : Byte]
            [dict : (Dict Byte (List Byte))]) : (Dict Byte (List Byte))
    (case blocks
      [(empty) dict]
      [(cons (stack-basic-block _ term) blocks)
       (compute-reachable-block-dict
         blocks
         (+ 1 index)
         (dict-add
           dict
           index
           (case term
             [(boolean-jmp true false) (cons true (cons false (empty)))]
             [(uncond-jmp index) (cons index (empty))]
             [(return _) (empty)]
             [(tail-call num-args num-cleanup)
              (empty)]
             [(known-tail-call name num-args num-cleanup)
              (empty)]
             [(variant-switch cases) (cases->indices cases)])))]))


  (define (compute-new-number-dict
            [old-index : Byte]
            [limit : Byte]
            [new-index : Byte]
            [reachable-dict : (Dict Byte Byte)]
            [dict : (Dict Byte Byte)]) : (Dict Byte Byte)
    (if (= old-index limit)
        dict
        (case (dict-ref reachable-dict old-index)
          [(nothing)
           (compute-new-number-dict
             (+ 1 old-index)
             limit
             new-index
             reachable-dict
             dict)]
          [(just _)
           (compute-new-number-dict
             (+ 1 old-index)
             limit
             (+ 1 new-index)
             reachable-dict
             (dict-add dict old-index new-index))])))


  (define (restructure-blocks
            [blocks : (List StackBasicBlock)] [index : Byte] [dict : (Dict Byte Byte)])
    : (List StackBasicBlock)
    (case blocks
      [(empty) (empty)]
      [(cons (stack-basic-block code term) blocks)
       (case (dict-ref dict index)
         [(nothing) (restructure-blocks blocks (+ 1 index) dict)]
         [(just _)
          (cons (stack-basic-block code (restructure-term term dict))
                (restructure-blocks blocks (+ 1 index) dict))])]))

  (define (restructure-term [term : StackTerminal] [dict : (Dict Byte Byte)]) : StackTerminal
    (case term
      [(boolean-jmp true false)
       (boolean-jmp (restructure-index true dict) (restructure-index false dict))]
      [(uncond-jmp index) (uncond-jmp (restructure-index index dict))]
      [(return _) term]
      [(tail-call _ _) term]
      [(known-tail-call _ _ _) term]
      [(variant-switch cases) (variant-switch (restructure-cases cases dict))]))

  (define (restructure-cases [cases : VariantCases] [dict : (Dict Byte Byte)]) : VariantCases
    (case cases
      [(no-catch-all-case) cases]
      [(catch-all-case index) (catch-all-case (restructure-index index dict))]
      [(variant-case tag index cases)
       (variant-case
         tag
         (restructure-index index dict)
         (restructure-cases cases dict))]))

  (define (restructure-index [index : Byte] [dict : (Dict Byte Byte)]) : Byte
    (case (dict-ref dict index)
      [(nothing) (panic #"bad index")]
      [(just new-index) new-index]))

  (define (cases->indices [cases : VariantCases]) : (List Byte)
    (case cases
      [(no-catch-all-case) (empty)]
      [(catch-all-case index) (cons index (empty))]
      [(variant-case _ index cases) (cons index (cases->indices cases))]))

  (define (peephole-optimize-blocks [known-funcs : (Dict Bytes Bytes)] [blocks : (List StackBasicBlock)]) : (List StackBasicBlock)
    (map (lambda ([block : StackBasicBlock])
           (peephole-optimize-block known-funcs block))
         blocks))

  (define (peephole-optimize-block
            [known-funcs : (Dict Bytes Bytes)]
            [block : StackBasicBlock]) : StackBasicBlock
    (case block
      [(stack-basic-block cmds term)
       (peephole-optimize-commands known-funcs (empty) cmds term)]))

  (define (peephole-optimize-commands
            [known-funcs : (Dict Bytes Bytes)]
            [rev-cmds : (List StackCmd)] [cmds : (List StackCmd)]
            [term : StackTerminal])
    : StackBasicBlock
    (case (tuple2 rev-cmds cmds)
      [(tuple2 (cons (pop-cmd) (cons (variant-ref-cmd _ _) rev-cmds)) cmds)
       (peephole-optimize-commands known-funcs rev-cmds (cons (pop-cmd) cmds) term)]
      [(tuple2 (cons (pop-cmd) (cons (dup-cmd 0) rev-cmds)) cmds)
       (peephole-optimize-commands known-funcs rev-cmds cmds term)]
      [(tuple2 (cons (fun-call-cmd n) (cons (load-global-cmd name) rev-cmds*)) cmds*)
       (case (dict-ref known-funcs name)
         [(just fun-name)
          (peephole-optimize-commands known-funcs rev-cmds*
                                      (cons (known-fun-call-cmd fun-name n) cmds*) term)]
         [(nothing)
          (peephole-optimize-commands/next known-funcs rev-cmds cmds term)])]
      [(tuple2 (cons (known-fun-call-cmd name n) rev-cmds*) (empty))
       (case term
         [(return cleanup)
          (if (<= n 6)
              (peephole-optimize-commands known-funcs rev-cmds* cmds (known-tail-call name n cleanup))
              (peephole-optimize-commands/next known-funcs rev-cmds cmds term))]
         [_
          (peephole-optimize-commands/next known-funcs rev-cmds cmds term)])]
      [_
       (peephole-optimize-commands/next known-funcs rev-cmds cmds term)]))

  (define (peephole-optimize-commands/next
            [known-funcs : (Dict Bytes Bytes)]
            [rev-cmds : (List StackCmd)]
            [cmds : (List StackCmd)]
            [term : StackTerminal])
    : StackBasicBlock
    (case cmds
      [(cons cmd cmds)
       (peephole-optimize-commands known-funcs (cons cmd rev-cmds) cmds term)]
      [(empty)
       (stack-basic-block (reverse rev-cmds) term)])))
