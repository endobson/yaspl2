(module prim-implementation
  (import
    (prim
      #:types (Bytes)
      #:values (panic)
      #:patterns ())
    (list
      #:types (List)
      #:values (empty cons)
      #:patterns ())
    (stack-machine
      #:types (StackFunction BinMathOp)
      #:values (stack-function stack-basic-block dup-cmd bin-math-cmd
                return bin-add-op bin-sub-op bin-mult-op bin-quotient-op bin-remainder-op)
      #:patterns ()))
  (export
    prim-implementation)
  (types)

  (define (prim-implementation) : (List StackFunction)
    (cons
     (bin-math-implementation #"prim_add" (bin-add-op))
     (cons
       (bin-math-implementation #"prim_sub" (bin-sub-op))
       (cons
         (bin-math-implementation #"prim_mult" (bin-mult-op))
         (cons
           (bin-math-implementation #"prim_quotient" (bin-quotient-op))
           (cons
             (bin-math-implementation #"prim_remainder" (bin-remainder-op))
             (empty)))))))

  (define (bin-math-implementation [name : Bytes] [op : BinMathOp]) : StackFunction
    (stack-function name
      (cons
        (stack-basic-block
          (cons
            (dup-cmd 2)
            (cons
              (dup-cmd 2)
              (cons
                (bin-math-cmd op)
                (empty))))
          (return 2))
        (empty)))))
