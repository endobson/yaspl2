(module prim-implementation
  (import
    (prim
      #:types (Bytes Byte)
      #:values (panic = - + >)
      #:patterns ())
    (bytes bytes-append bytes=?)
    (tuples tuple2)
    (types abstract-type type-constructor star-kind)
    (list
      #:types (List)
      #:values (empty cons list append*)
      #:patterns ())
    (stack-machine
      #:types (StackFunction BinMathOp BinLogicMathOp StackCmd TopLevelObject)
      #:values (stack-function stack-basic-block dup-cmd bin-math-cmd bin-logic-math-cmd return
                bin-add-op bin-sub-op bin-mult-op bin-quotient-op bin-remainder-op
                bin-bitwise-and-op bin-bitwise-ior-op
                less-than-op less-than-or-equal-op equal-op greater-than-or-equal-op greater-than-op
                make-array-cmd array-length-cmd array-ref-cmd array-set!-cmd
                function-tlo trivial-closure-tlo)
      #:patterns ())
    (dict make-dict dict-add-all)
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns ())
    (intermediate-to-static-module-signature
      #:types (StaticModuleSignature)
      #:values (static-module-signature)
      #:patterns ()))
  (export
    #:types ()
    #:values (prim-static-signature prim-signature prim-implementation)
    #:patterns ())
  (types)

  (define (prim-static-signature) : StaticModuleSignature
    (static-module-signature
      #"prim"
      (dict-add-all
        (make-dict bytes=?)
        (varargs list
          (tuple2 #"Bytes" (abstract-type #"prim" #"Bytes" (empty)))
          (tuple2 #"Byte" (abstract-type #"prim" #"Byte" (empty)))
          (tuple2 #"Void" (abstract-type #"prim" #"Void" (empty)))
          (tuple2 #"Boolean" (abstract-type #"prim" #"Boolean" (empty)))
          (tuple2 #"Array" (type-constructor #"prim" #"Array" (cons (star-kind) (empty))))
          (tuple2 #"InputPort" (abstract-type #"prim" #"FileDescriptor" (empty)))
          (tuple2 #"OutputPort" (abstract-type #"prim" #"FileDescriptor" (empty)))
          (tuple2 #"Socket" (abstract-type #"prim" #"FileDescriptor" (empty)))
          (tuple2 #"MachPort" (abstract-type #"prim" #"MachPort" (empty)))))
      (make-dict bytes=?)))


  (define (prim-signature) : ModuleSignature
    (module-signature #"prim"
      (dict-add-all
        (make-dict bytes=?)
        (varargs list
          (tuple2 #"+" #"prim_add_closure")
          (tuple2 #"-" #"prim_sub_closure")
          (tuple2 #"*" #"prim_mult_closure")
          (tuple2 #"=" #"prim_equal_closure")
          (tuple2 #"<" #"prim_less_than_closure")
          (tuple2 #"<=" #"prim_less_than_or_equal_closure")
          (tuple2 #">" #"prim_greater_than_closure")
          (tuple2 #">=" #"prim_greater_than_or_equal_closure")
          (tuple2 #"bitwise-and" #"prim_bitwise_and_closure")
          (tuple2 #"bitwise-ior" #"prim_bitwise_ior_closure")
          (tuple2 #"bytes-ref" #"prim_bytes_ref_closure")
          (tuple2 #"make-bytes" #"prim_make_bytes_closure")
          (tuple2 #"bytes-set!" #"prim_bytes_set_closure")
          (tuple2 #"bytes-length" #"prim_bytes_length_closure")
          (tuple2 #"write-bytes" #"prim_write_bytes_closure")
          (tuple2 #"read-bytes" #"prim_read_bytes_closure")
          (tuple2 #"open-input-file" #"prim_open_input_file_closure")
          (tuple2 #"open-output-file" #"prim_open_output_file_closure")
          (tuple2 #"close-input-port" #"prim_close_port_closure")
          (tuple2 #"close-output-port" #"prim_close_port_closure")
          (tuple2 #"socket" #"prim_socket_closure")
          (tuple2 #"bind" #"prim_bind_closure")
          (tuple2 #"sendto" #"prim_sendto_closure")
          (tuple2 #"recvfrom" #"prim_recvfrom_closure")
          (tuple2 #"connect" #"prim_connect_closure")
          (tuple2 #"shutdown" #"prim_shutdown_closure")
          (tuple2 #"listen" #"prim_listen_closure")
          (tuple2 #"accept" #"prim_accept_closure")
          (tuple2 #"setsockopt" #"prim_setsockopt_closure")
          (tuple2 #"mach-task-self" #"prim_mach_task_self_closure")
          (tuple2 #"mach-thread-self" #"prim_mach_thread_self_closure")
          (tuple2 #"mach-reply-port" #"prim_mach_reply_port_closure")
          (tuple2 #"mach-msg" #"prim_mach_msg_closure")
          (tuple2 #"mach-port-mod-refs" #"prim_mach_port_mod_refs_closure")
          (tuple2 #"thread-bootstrap-address" #"prim_thread_bootstrap")
          (tuple2 #"void" #"prim_void_closure")
          (tuple2 #"and" #"prim_and_closure")
          (tuple2 #"or" #"prim_or_closure")
          (tuple2 #"quotient" #"prim_quotient_closure")
          (tuple2 #"remainder" #"prim_remainder_closure")
          (tuple2 #"panic" #"prim_panic_closure")
          (tuple2 #"make-array" #"prim_make_array_closure")
          (tuple2 #"array-length" #"prim_array_length_closure")
          (tuple2 #"array-ref" #"prim_array_ref_closure")
          (tuple2 #"array-set!" #"prim_array_set_closure")))
      (make-dict bytes=?)))

  (define (prim-implementation) : (List TopLevelObject)
    (append*
      (varargs list
        (bin-math-implementation #"prim_add" (bin-add-op))
        (bin-math-implementation #"prim_sub" (bin-sub-op))
        (bin-math-implementation #"prim_mult" (bin-mult-op))
        (bin-math-implementation #"prim_quotient" (bin-quotient-op))
        (bin-math-implementation #"prim_remainder" (bin-remainder-op))
        (bin-math-implementation #"prim_bitwise_and" (bin-bitwise-and-op))
        (bin-math-implementation #"prim_bitwise_ior" (bin-bitwise-ior-op))
        (bin-logic-math-implementation #"prim_less_than" (less-than-op))
        (bin-logic-math-implementation #"prim_less_than_or_equal" (less-than-or-equal-op))
        (bin-logic-math-implementation #"prim_equal" (equal-op))
        (bin-logic-math-implementation #"prim_greater_than_or_equal" (greater-than-or-equal-op))
        (bin-logic-math-implementation #"prim_greater_than" (greater-than-op))
        (make-implementation #"prim_make_array" 2 (make-array-cmd))
        (make-implementation #"prim_array_length" 1 (array-length-cmd))
        (make-implementation #"prim_array_ref" 2 (array-ref-cmd))
        (make-implementation #"prim_array_set" 3 (array-set!-cmd)))))

  (define (duplicate-args [offset : Byte] [amount : Byte] [cmds : (List StackCmd)]) : (List StackCmd)
    (if (= 0 amount)
        cmds
        (duplicate-args offset (- amount 1) (cons (dup-cmd offset) cmds))))

  (define (make-implementation [name : Bytes] [num-args : Byte] [cmd : StackCmd])
    : (List TopLevelObject)
    (varargs list
      (function-tlo
        (stack-function
          name
          num-args
          (cons
            (stack-basic-block
              (duplicate-args (if (> num-args 6) (+ num-args 7) (- num-args 1)) num-args (cons cmd (empty)))
              (return num-args))
            (empty))))
      (trivial-closure-tlo
        (bytes-append (varargs list name #"_closure"))
        name)))

  (define (bin-math-implementation [name : Bytes] [op : BinMathOp]) : (List TopLevelObject)
    (make-implementation name 2 (bin-math-cmd op)))


  (define (bin-logic-math-implementation [name : Bytes] [op : BinLogicMathOp]) : (List TopLevelObject)
    (make-implementation name 2 (bin-logic-math-cmd op))))
