(module prim-implementation
  (import
    (prim
      #:types (Bytes Byte)
      #:values (panic = - +)
      #:patterns ())
    (bytes bytes-append)
    (list
      #:types (List)
      #:values (empty cons list append*)
      #:patterns ())
    (stack-machine
      #:types (StackFunction BinMathOp BinLogicMathOp StackCmd TopLevelObject)
      #:values (stack-function stack-basic-block dup-cmd bin-math-cmd bin-logic-math-cmd return
                bin-add-op bin-sub-op bin-mult-op bin-quotient-op bin-remainder-op
                less-than-op less-than-or-equal-op equal-op greater-than-or-equal-op greater-than-op
                make-array-cmd array-length-cmd array-ref-cmd array-set!-cmd
                function-tlo trivial-closure-tlo)
      #:patterns ()))
  (export
    prim-implementation)
  (types)

  (define (prim-implementation) : (List TopLevelObject)
    (append*
      (varargs list
        (bin-math-implementation #"prim_add" (bin-add-op))
        (bin-math-implementation #"prim_sub" (bin-sub-op))
        (bin-math-implementation #"prim_mult" (bin-mult-op))
        (bin-math-implementation #"prim_quotient" (bin-quotient-op))
        (bin-math-implementation #"prim_remainder" (bin-remainder-op))
        (bin-logic-math-implementation #"prim_less_than" (less-than-op))
        (bin-logic-math-implementation #"prim_less_than_or_equal" (less-than-or-equal-op))
        (bin-logic-math-implementation #"prim_equal" (equal-op))
        (bin-logic-math-implementation #"prim_greater_than_or_equal" (greater-than-or-equal-op))
        (bin-logic-math-implementation #"prim_greater_than" (greater-than-op))
        (make-implementation #"prim_make_array" 2 (make-array-cmd))
        (make-implementation #"prim_array_length" 1 (array-length-cmd))
        (make-implementation #"prim_array_ref" 2 (array-ref-cmd))
        (make-implementation #"prim_array_set" 3 (array-set!-cmd)))))

  (define (duplicate-args [offset : Byte] [amount : Byte] [cmds : (List StackCmd)]) : (List StackCmd)
    (if (= 0 amount)
        cmds
        (duplicate-args offset (- amount 1) (cons (dup-cmd offset) cmds))))

  (define (make-implementation [name : Bytes] [num-args : Byte] [cmd : StackCmd])
    : (List TopLevelObject)
    (varargs list
      (function-tlo
        (stack-function
          name
          (cons
            (stack-basic-block
              (duplicate-args (+ num-args 1) num-args (cons cmd (empty)))
              (return num-args))
            (empty))))
      (trivial-closure-tlo
        (bytes-append (varargs list name #"_closure"))
        name)))

  (define (bin-math-implementation [name : Bytes] [op : BinMathOp]) : (List TopLevelObject)
    (make-implementation name 2 (bin-math-cmd op)))


  (define (bin-logic-math-implementation [name : Bytes] [op : BinLogicMathOp]) : (List TopLevelObject)
    (make-implementation name 2 (bin-logic-math-cmd op))))
