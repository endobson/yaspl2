#:module (prim-implementation)
#:import {
  (bytes)
  (dict)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (set)
  (stack-machine)
  (tuples)
  (types)
  (yaspl math-operations)
  (yaspl top-level-objects)
}
(export
  #:types ()
  #:values (prim-signature prim-implementation prim-known-functions
            int-type boolean-type bytes-type void-type)
  #:patterns ())
(types)

(define (value-signature* [t : Type] [symbol : Bytes]) : ValueSignature
  (value-signature t symbol (nothing)))

(define (prim-values) : (Dict Bytes ValueSignature)
  (dict-add-all
    (make-dict bytes-cmp)
    (varargs list
      (tuple2 #"u8" (value-signature* (fun1-type (int-type) (u8-type)) #"prim_u8_closure"))
      (tuple2 #"s32" (value-signature* (fun1-type (int-type) (s32-type)) #"prim_s32_closure"))
      (tuple2 #"u32" (value-signature* (fun1-type (int-type) (u32-type)) #"prim_u32_closure"))
      (tuple2 #"u8->s64" (value-signature* (fun1-type (u8-type) (int-type)) #"prim_u8_s64_closure"))
      (tuple2 #"s32->s64" (value-signature* (fun1-type (s32-type) (int-type)) #"prim_s32_s64_closure"))
      (tuple2 #"u32->s64" (value-signature* (fun1-type (u32-type) (int-type)) #"prim_u32_s64_closure"))
      (tuple2 #"+" (value-signature* (math-2arg) #"prim_add_closure"))
      (tuple2 #"-" (value-signature* (math-2arg) #"prim_sub_closure"))
      (tuple2 #"*" (value-signature* (math-2arg) #"prim_mult_closure"))
      (tuple2 #"=" (value-signature* (logic-2arg) #"prim_equal_closure"))
      (tuple2 #"<" (value-signature* (logic-2arg) #"prim_less_than_closure"))
      (tuple2 #"<=" (value-signature* (logic-2arg) #"prim_less_than_or_equal_closure"))
      (tuple2 #">" (value-signature* (logic-2arg) #"prim_greater_than_closure"))
      (tuple2 #">=" (value-signature* (logic-2arg) #"prim_greater_than_or_equal_closure"))
      (tuple2 #"bitwise-and" (value-signature* (math-2arg) #"prim_bitwise_and_closure"))
      (tuple2 #"bitwise-ior" (value-signature* (math-2arg) #"prim_bitwise_ior_closure"))
      (tuple2 #"logical-shift-left" (value-signature* (math-2arg) #"prim_logical_shift_left_closure"))
      (tuple2 #"logical-shift-right" (value-signature* (math-2arg) #"prim_logical_shift_right_closure"))
      (tuple2 #"bytes-ref" (value-signature* (fun2-type (bytes-type) (int-type) (int-type))
                                             #"prim_bytes_ref_closure"))
      (tuple2 #"make-bytes" (value-signature* (fun1-type (int-type) (bytes-type))
                                              #"prim_make_bytes_closure"))
      (tuple2 #"bytes-set!" (value-signature* (fun3-type (bytes-type) (int-type) (u8-type) (void-type))
                                              #"prim_bytes_set_closure"))
      (tuple2 #"bytes-length" (value-signature* (fun1-type (bytes-type) (int-type)) #"prim_bytes_length_closure"))
      (tuple2 #"write-bytes" (value-signature* (fun4-type (bytes-type) (file-descriptor-type)
                                                          (int-type) (int-type) (int-type))
                                               #"prim_write_bytes_closure"))
      (tuple2 #"read-bytes" (value-signature* (fun4-type (bytes-type) (file-descriptor-type)
                                                         (int-type) (int-type) (int-type))
                                              #"prim_read_bytes_closure"))
      (tuple2 #"open-input-file" (value-signature* (fun1-type (bytes-type) (file-descriptor-type))
                                                   #"prim_open_input_file_closure"))
      (tuple2 #"open-output-file" (value-signature* (fun1-type (bytes-type) (file-descriptor-type))
                                                    #"prim_open_output_file_closure"))
      (tuple2 #"close-input-port" (value-signature* (fun1-type (file-descriptor-type) (void-type))
                                                    #"prim_close_port_closure"))
      (tuple2 #"close-output-port" (value-signature* (fun1-type (file-descriptor-type) (void-type))
                                                     #"prim_close_port_closure"))
      (tuple2 #"prim-delete-file" (value-signature* (fun1-type (bytes-type) (void-type))
                                                    #"prim_delete_file_closure"))
      (tuple2 #"prim-make-directory" (value-signature* (fun1-type (bytes-type) (void-type))
                                                       #"prim_make_directory_closure"))
      (tuple2 #"set-file-or-directory-permissions"
              (value-signature* (fun2-type (bytes-type) (int-type) (void-type))
                                #"prim_set_file_or_directory_permissions_closure"))
      (tuple2 #"socket" (value-signature* (fun3-type (int-type) (int-type) (int-type) (file-descriptor-type))
                                          #"prim_socket_closure"))
      (tuple2 #"bind" (value-signature* (fun3-type (file-descriptor-type) (bytes-type) (int-type)
                                                   (void-type))#"prim_bind_closure"))

      (tuple2 #"sendto"
              (value-signature* (fun6-type (file-descriptor-type) (bytes-type) (int-type) (int-type)
                                          (bytes-type) (int-type) (void-type))
                                #"prim_sendto_closure"))
      (tuple2 #"recvfrom"
              (value-signature* (fun6-type (file-descriptor-type) (bytes-type) (int-type) (int-type)
                                          (bytes-type) (bytes-type) (int-type))
                                #"prim_recvfrom_closure"))
      (tuple2 #"connect"
              (value-signature* (fun3-type (file-descriptor-type) (bytes-type) (int-type) (void-type))
                                #"prim_connect_closure"))
      (tuple2 #"shutdown"
              (value-signature* (fun2-type (file-descriptor-type) (int-type) (void-type))
                                #"prim_shutdown_closure"))
      (tuple2 #"listen"
              (value-signature* (fun2-type (file-descriptor-type) (int-type) (void-type))
                                #"prim_listen_closure"))
      (tuple2 #"accept"
              (value-signature* (fun3-type (file-descriptor-type) (bytes-type) (bytes-type)
                                          (file-descriptor-type))
                                #"prim_accept_closure"))
      (tuple2 #"setsockopt"
              (value-signature* (fun5-type (file-descriptor-type) (int-type) (int-type) (bytes-type) (int-type)
                                          (void-type))
                                #"prim_setsockopt_closure"))
      (tuple2 #"mach-port->u32" (value-signature* (fun1-type (mach-port-type) (u32-type))
                                                  #"prim_u32_closure"))
      (tuple2 #"u32->mach-port" (value-signature* (fun1-type (u32-type) (mach-port-type)) #"prim_u32_closure"))
      (tuple2 #"mach-task-self" (value-signature* (fun0-type (mach-port-type)) #"prim_mach_task_self_closure"))
      (tuple2 #"mach-thread-self" (value-signature* (fun0-type (mach-port-type)) #"prim_mach_thread_self_closure"))
      (tuple2 #"mach-reply-port" (value-signature* (fun0-type (mach-port-type)) #"prim_mach_reply_port_closure"))
      (tuple2 #"mach-msg"
              (value-signature* (fun7-type (bytes-type) (int-type) (int-type) (int-type)
                                          (mach-port-type) (int-type) (int-type) (void-type))
                                #"prim_mach_msg_closure"))
      (tuple2 #"mach-port-mod-refs"
              (value-signature* (fun4-type (mach-port-type) (mach-port-type) (int-type) (int-type) (void-type))
                                #"prim_mach_port_mod_refs_closure"))
      (tuple2 #"mach-start-thread"
              (value-signature*
                (fun3-type (bytes-type) (fun0-type (void-type)) (mach-port-type) (void-type))
                #"prim_mach_start_thread_closure"))
      (tuple2 #"void" (value-signature* (fun0-type (void-type)) #"prim_void_closure"))
      (tuple2 #"and" (value-signature* (fun2-type (boolean-type) (boolean-type) (boolean-type))
                                       #"prim_and_closure"))
      (tuple2 #"or" (value-signature* (fun2-type (boolean-type) (boolean-type) (boolean-type))
                                      #"prim_or_closure"))
      (tuple2 #"quotient" (value-signature* (math-2arg) #"prim_quotient_closure"))
      (tuple2 #"remainder" (value-signature* (math-2arg) #"prim_remainder_closure"))
      (tuple2 #"panic" (value-signature* (fun-type (varargs list #"a") (varargs list (bytes-type)) (var-type #"a"))
                                         #"prim_panic_closure"))
      (tuple2 #"make-array"
              (value-signature* (fun-type (varargs list #"a") (varargs list (int-type) (var-type #"a"))
                                         (array-type (var-type #"a")))
                                #"prim_make_array_closure"))
      (tuple2 #"array-length"
              (value-signature* (fun-type (varargs list #"a")
                                         (varargs list (array-type (var-type #"a")))
                                         (int-type))
                                #"prim_array_length_closure"))
      (tuple2 #"array-ref"
              (value-signature* (fun-type (varargs list #"a")
                                          (varargs list (array-type (var-type #"a")) (int-type))
                                          (var-type #"a"))
                                #"prim_array_ref_closure"))
      (tuple2 #"array-set!"
              (value-signature* (fun-type (varargs list #"a")
                                          (varargs list (array-type (var-type #"a")) (int-type)
                                                        (var-type #"a"))
                                          (void-type))
                                #"prim_array_set_closure"))
      (tuple2 #"u32/le-byte0" (value-signature* (fun1-type (u32-type) (u8-type))
                                                #"prim_quad_le_byte0_closure"))
      (tuple2 #"u32/le-byte1" (value-signature* (fun1-type (u32-type) (u8-type))
                                                #"prim_quad_le_byte1_closure"))
      (tuple2 #"u32/le-byte2" (value-signature* (fun1-type (u32-type) (u8-type))
                                                #"prim_quad_le_byte2_closure"))
      (tuple2 #"u32/le-byte3" (value-signature* (fun1-type (u32-type) (u8-type))
                                                #"prim_quad_le_byte3_closure"))
      (tuple2 #"s32/le-byte0" (value-signature* (fun1-type (s32-type) (u8-type))
                                                #"prim_quad_le_byte0_closure"))
      (tuple2 #"s32/le-byte1" (value-signature* (fun1-type (s32-type) (u8-type))
                                                #"prim_quad_le_byte1_closure"))
      (tuple2 #"s32/le-byte2" (value-signature* (fun1-type (s32-type) (u8-type))
                                                #"prim_quad_le_byte2_closure"))
      (tuple2 #"s32/le-byte3" (value-signature* (fun1-type (s32-type) (u8-type))
                                                #"prim_quad_le_byte3_closure"))
      ;; TODO make this actually safe
      (tuple2 #"ioctl"
              (value-signature* (fun3-type (file-descriptor-type) (int-type) (bytes-type) (void-type))
                                #"prim_ioctl_closure")))))


(define (prim-mod) : ModName
  (mod-name (varargs list #"prim")))

(define (prim-type [name : Bytes]) : Type
  (abstract-type (prim-mod) name (empty)))

(define (int-type) : Type
  (prim-type #"Int"))
(define (bytes-type) : Type
  (prim-type #"Bytes"))
(define (boolean-type) : Type
  (prim-type #"Boolean"))
(define (void-type) : Type
  (prim-type #"Void"))
(define (u8-type) : Type
  (prim-type #"U8"))
(define (u32-type) : Type
  (prim-type #"U32"))
(define (s32-type) : Type
  (prim-type #"S32"))
(define (file-descriptor-type) : Type
  (prim-type #"FileDescriptor"))
(define (mach-port-type) : Type
  (prim-type #"MachPort"))
(define (array-type [e : Type]) : Type
  (abstract-type (prim-mod) #"Array" (varargs list e)))

(define (fun0-type [result : Type]) : Type
  (fun-type (empty) (empty) result))
(define (fun1-type [arg : Type] [result : Type]) : Type
  (fun-type (empty) (varargs list arg) result))
(define (fun2-type [arg1 : Type] [arg2 : Type] [result : Type]) : Type
  (fun-type (empty) (varargs list arg1 arg2) result))
(define (fun3-type [arg1 : Type] [arg2 : Type] [arg3 : Type] [result : Type]) : Type
  (fun-type (empty) (varargs list arg1 arg2 arg3) result))
(define (fun4-type [arg1 : Type] [arg2 : Type] [arg3 : Type] [arg4 : Type] [result : Type]) : Type
  (fun-type (empty) (varargs list arg1 arg2 arg3 arg4) result))
(define (fun5-type [arg1 : Type] [arg2 : Type] [arg3 : Type]
                   [arg4 : Type] [arg5 : Type] [result : Type]) : Type
  (fun-type (empty) (varargs list arg1 arg2 arg3 arg4 arg5) result))
(define (fun6-type [arg1 : Type] [arg2 : Type] [arg3 : Type]
                   [arg4 : Type] [arg5 : Type] [arg6 : Type] [result : Type]) : Type
  (fun-type (empty) (varargs list arg1 arg2 arg3 arg4 arg5 arg6) result))
(define (fun7-type [arg1 : Type] [arg2 : Type] [arg3 : Type] [arg4 : Type]
                   [arg5 : Type] [arg6 : Type] [arg7 : Type] [result : Type]) : Type
  (fun-type (empty) (varargs list arg1 arg2 arg3 arg4 arg5 arg6 arg7) result))

(define (math-2arg) : Type
  (fun2-type (int-type) (int-type) (int-type)))
(define (logic-2arg) : Type
  (fun2-type (int-type) (int-type) (boolean-type)))

(define (prim-signature) : ModuleSignature
  (let ([prim-closures (prim-values)])
    (module-signature (prim-mod)
      prim-closures
      (make-dict bytes-cmp)
      (dict-add-all
        (make-dict bytes-cmp)
        (varargs list
          (tuple2 #"U8" (u8-type))
          (tuple2 #"S32" (s32-type))
          (tuple2 #"U32" (u32-type))
          (tuple2 #"Bytes" (bytes-type))
          (tuple2 #"Byte" (int-type))
          (tuple2 #"Int" (int-type))
          (tuple2 #"Void" (void-type))
          (tuple2 #"Boolean" (boolean-type))
          (tuple2 #"Array" (type-constructor (prim-mod) #"Array" (cons (star-kind) (empty))))
          (tuple2 #"InputPort" (file-descriptor-type))
          (tuple2 #"OutputPort" (file-descriptor-type))
          (tuple2 #"Socket" (file-descriptor-type))
          (tuple2 #"MachPort" (mach-port-type))))
      (prim-known-functions (map value-signature-symbol (dict-values prim-closures))))))

(define (prim-implementation) : (List TopLevelObject)
  (append*
    (varargs list
      (bin-math-implementation #"prim_add" (add-op))
      (bin-math-implementation #"prim_sub" (sub-op))
      (bin-math-implementation #"prim_mult" (mult-op))
      (bin-math-implementation #"prim_quotient" (quotient-op))
      (bin-math-implementation #"prim_remainder" (remainder-op))
      (bin-math-implementation #"prim_bitwise_and" (bitwise-and-op))
      (bin-math-implementation #"prim_bitwise_ior" (bitwise-ior-op))
      (bin-math-implementation #"prim_logical_shift_left" (logical-shift-left-op))
      (bin-math-implementation #"prim_logical_shift_right" (logical-shift-right-op))
      (bin-logic-math-implementation #"prim_less_than" (less-than-op))
      (bin-logic-math-implementation #"prim_less_than_or_equal" (less-than-or-equal-op))
      (bin-logic-math-implementation #"prim_equal" (equal-op))
      (bin-logic-math-implementation #"prim_greater_than_or_equal" (greater-than-or-equal-op))
      (bin-logic-math-implementation #"prim_greater_than" (greater-than-op))
      (make-implementation #"prim_make_array" 2 (make-array-cmd))
      (make-implementation #"prim_array_length" 1 (array-length-cmd))
      (make-implementation #"prim_array_ref" 2 (array-ref-cmd))
      (make-implementation #"prim_array_set" 3 (array-set!-cmd)))))

(define (prim-known-functions [closure-names : (List Bytes)]) : (Dict Bytes Bytes)
  (dict-add-all
    (make-dict bytes-cmp)
    (map (lambda ([closure-name : Bytes])
           (tuple2
             closure-name
             (subbytes closure-name 0 (- (bytes-length closure-name) 8))))
         (set->list
           (set-add-all
             (make-set bytes-cmp)
             closure-names)))))

(define (duplicate-args [offset : Int] [amount : Int] [cmds : (List StackCmd)]) : (List StackCmd)
  (if (= 0 amount)
      cmds
      (duplicate-args offset (- amount 1) (cons (dup-cmd offset) cmds))))

(define (make-implementation [name : Bytes] [num-args : Int] [cmd : StackCmd])
  : (List TopLevelObject)
  (varargs list
    (stack-function-tlo
      (stack-function
        name
        num-args
        (cons
          (stack-basic-block
            (duplicate-args (if (> num-args 6) (+ num-args 7) (- num-args 1)) num-args (cons cmd (empty)))
            (return num-args))
          (empty))))
    (trivial-closure-tlo
      (bytes-append (varargs list name #"_closure"))
      name)))

(define (bin-math-implementation [name : Bytes] [op : NumericBinOp]) : (List TopLevelObject)
  (make-implementation name 2 (bin-numeric-cmd op)))


(define (bin-logic-math-implementation [name : Bytes] [op : ComparisonBinOp]) : (List TopLevelObject)
  (make-implementation name 2 (bin-comparison-cmd op)))
