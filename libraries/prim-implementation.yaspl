(module prim-implementation
  (import
    (prim
      #:types (Bytes Byte)
      #:values (panic = -)
      #:patterns ())
    (list
      #:types (List)
      #:values (empty cons)
      #:patterns ())
    (stack-machine
      #:types (StackFunction BinMathOp BinLogicMathOp StackCmd)
      #:values (stack-function stack-basic-block dup-cmd bin-math-cmd bin-logic-math-cmd return
                bin-add-op bin-sub-op bin-mult-op bin-quotient-op bin-remainder-op
                less-than-op less-than-or-equal-op equal-op greater-than-or-equal-op greater-than-op)
      #:patterns ()))
  (export
    prim-implementation)
  (types)

  (define (prim-implementation) : (List StackFunction)
    (cons
     (bin-math-implementation #"prim_add" (bin-add-op))
     (cons
       (bin-math-implementation #"prim_sub" (bin-sub-op))
       (cons
         (bin-math-implementation #"prim_mult" (bin-mult-op))
         (cons
           (bin-math-implementation #"prim_quotient" (bin-quotient-op))
           (cons
             (bin-math-implementation #"prim_remainder" (bin-remainder-op))
             (cons
              (bin-logic-math-implementation #"prim_less_than" (less-than-op))
              (cons
                (bin-logic-math-implementation #"prim_less_than_or_equal" (less-than-or-equal-op))
                (cons
                  (bin-logic-math-implementation #"prim_equal" (equal-op))
                  (cons
                    (bin-logic-math-implementation #"prim_greater_than_or_equal" (greater-than-or-equal-op))
                    (cons
                      (bin-logic-math-implementation #"prim_greater_than" (greater-than-op))
                      (empty))))))))))))



  (define (duplicate-args [offset : Byte] [amount : Byte] [cmds : (List StackCmd)]) : (List StackCmd)
    (if (= 0 amount)
        cmds
        (duplicate-args offset (- amount 1) (cons (dup-cmd offset) cmds))))

  (define (make-implementation [name : Bytes] [num-args : Byte] [cmd : StackCmd]) : StackFunction
    (stack-function name
      (cons
        (stack-basic-block
          (duplicate-args num-args num-args (cons cmd (empty)))
          (return num-args))
        (empty))))


  (define (bin-math-implementation [name : Bytes] [op : BinMathOp]) : StackFunction
    (make-implementation name 2 (bin-math-cmd op)))


  (define (bin-logic-math-implementation [name : Bytes] [op : BinLogicMathOp]) : StackFunction
    (make-implementation name 2 (bin-logic-math-cmd op))))
