(module tcp-echo-server
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort Void)
      #:values (socket sendto bind shutdown listen accept make-bytes bytes-set! write-bytes quotient
                remainder = void connect bytes-length + * bytes-ref setsockopt array-length array-ref)
      #:patterns ())
    (io write-line read-all-bytes write-all-bytes)
    (numbers decimal-bytes->integer)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (ip
      #:types (Ipv4Address)
      #:values (ipv4-address ipv4-address-octet1 ipv4-address-octet2 ipv4-address-octet3 ipv4-address-octet4
                ipv4-address->bytes bytes->ipv4-address)
      #:patterns ()))
  (export)
  (types
    (define-type TcpAddress
      (tcp-address [ip Ipv4Address] [port Byte])))

  (define (make-sock-addr [address : TcpAddress]) : Bytes
    (let ([bytes (make-bytes 16)])
      (case address
        [(tcp-address ip-addr port)
         (begin
           (bytes-set! bytes 0 0)
           (bytes-set! bytes 1 2) ;; Family: AF_INET
           ;; Port 1026
           (bytes-set! bytes 2 (quotient port 256))
           (bytes-set! bytes 3 (remainder port 256))
           ;; IP addr = 0.0.0.0
           (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
           (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
           (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
           (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
           ;; ZERO
           (bytes-set! bytes  8 0)
           (bytes-set! bytes  9 0)
           (bytes-set! bytes 10 0)
           (bytes-set! bytes 11 0)
           (bytes-set! bytes 12 0)
           (bytes-set! bytes 13 0)
           (bytes-set! bytes 14 0)
           (bytes-set! bytes 15 0)
           bytes)])))

  (define (tcp-socket-bind [sock : Byte] [address : TcpAddress]) : Void
    (let ([sock-addr (make-sock-addr address)])
      (bind sock sock-addr (bytes-length sock-addr))))

  (define (tcp-socket-accept [sock : Byte]) : (Tuple2 Byte (TcpAddress))
    (let ([sock-addr (make-bytes 16)])
      (let ([len-buf (make-bytes 4)])
        (begin
          (bytes-set! len-buf 0 (bytes-length sock-addr))
          (let ([new-sock (accept sock sock-addr len-buf)])
            (let ([ip (ipv4-address
                        (bytes-ref sock-addr 4)
                        (bytes-ref sock-addr 5)
                        (bytes-ref sock-addr 6)
                        (bytes-ref sock-addr 7))])
              (let ([port (+ (* 256 (bytes-ref sock-addr 2)) (bytes-ref sock-addr 3))])
                (tuple2 new-sock (tcp-address ip port)))))))))



  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (= (array-length args) 3)
        (case (bytes->ipv4-address (array-ref args 1))
          [(just ip-addr)
           (let ([address (tcp-address ip-addr (decimal-bytes->integer (array-ref args 2)))])
             (let ([sock (socket 2 1 0)])
               (begin
                 (let ([buf (make-bytes 4)])
                   (begin
                     (bytes-set! buf 0 255)
                     (setsockopt sock 65535 512 buf 4)))
                 (tcp-socket-bind sock address)
                 (listen sock 5)
                 (case (tcp-socket-accept sock)
                   [(tuple2 new-sock new-sock-addr)
                    (begin
    ;                  (shutdown new-sock 1)
                      (write-all-bytes (read-all-bytes new-sock) stdout)
                      0)]))))]
          [(nothing)
           (begin
             (write-line #"Unparsable ip address" stderr)
             1)])
        (begin
          (write-line #"Wrong number of arguments" stderr)
          1))))
