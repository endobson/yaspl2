(module tcp-echo-server
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort Void)
      #:values (socket sendto shutdown make-bytes bytes-set! write-bytes quotient
                remainder = void connect bytes-length)
      #:patterns ())
    (io write-line read-all-bytes write-all-bytes)
    (ip
      #:types (Ipv4Address)
      #:values (ipv4-address ipv4-address-octet1 ipv4-address-octet2 ipv4-address-octet3 ipv4-address-octet4
                ipv4-address->bytes)
      #:patterns ()))
  (export)
  (types
    (define-type TcpAddress
      (tcp-address [ip Ipv4Address] [port Byte])))

  (define (make-sock-addr [address : TcpAddress]) : Bytes
    (let ([bytes (make-bytes 16)])
      (case address
        [(tcp-address ip-addr port)
         (begin
           (bytes-set! bytes 0 0)
           (bytes-set! bytes 1 2) ;; Family: AF_INET
           ;; Port 1026
           (bytes-set! bytes 2 (quotient port 256))
           (bytes-set! bytes 3 (remainder port 256))
           ;; IP addr = 0.0.0.0
           (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
           (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
           (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
           (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
           ;; ZERO
           (bytes-set! bytes  8 0)
           (bytes-set! bytes  9 0)
           (bytes-set! bytes 10 0)
           (bytes-set! bytes 11 0)
           (bytes-set! bytes 12 0)
           (bytes-set! bytes 13 0)
           (bytes-set! bytes 14 0)
           (bytes-set! bytes 15 0)
           bytes)])))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (let ([sock (socket 2 1 0)])
      (let ([sock-addr (make-sock-addr (tcp-address (ipv4-address 127 0 0 1) 1026))])
        (begin
          (write-line #"1" stdout)
          (connect sock sock-addr (bytes-length sock-addr))
          (write-line #"2" stdout)
          (write-line #"Hello world" sock)
          (write-line #"3" stdout)
          (shutdown sock 1)
          (write-line #"4" stdout)
          (write-all-bytes (read-all-bytes sock) stdout)
          (write-line #"5" stdout)
          0)))))
