(module source-to-intermediate-language
  (import
    (prim
      #:types ()
      #:values (panic)
      #:patterns ())
    (list
      #:types (List)
      #:values (empty cons)
      #:patterns (empty cons))
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (intermediate-language
      #:types
        ((Module i:Module)
         (FunctionDefinition i:FunctionDefinition)
         (Expression i:Expression))
      #:values
        ((module i:module)
         (function-definition i:function-definition)
         (byte-literal i:byte-literal))
      #:patterns ())
    (source-language
      #:types (Module FunctionDefinition Expression)
      #:values ()
      #:patterns (module function-definition)))
  (export source->intermediate)
  (types)

  (define (source->intermediate [mod : Module]) : i:Module
    (case mod
      [(module name imports _ types definitions)
       (i:module
         name
         imports
         types
         (convert-function-definitions definitions (empty)))]))

  (define (convert-function-definitions
            [funs : (List FunctionDefinition)]
            [acc : (List i:FunctionDefinition)]) : (List i:FunctionDefinition)
    (case funs
      [(empty) acc]
      [(cons fun funs)
       (convert-function-definitions funs (convert-function-definition fun acc))]))

  (define (convert-function-definition [fun : FunctionDefinition] [acc : (List i:FunctionDefinition)])
    : (List i:FunctionDefinition)
    (case fun
      [(function-definition name type args body)
       (case (convert-expression body acc)
         [(tuple2 i:body acc)
          (cons
            (i:function-definition name type args (empty) i:body)
            acc)])]))

  (define (convert-expression [expr : Expression] [acc : (List i:FunctionDefinition)])
    : (Tuple2 i:Expression (List i:FunctionDefinition))
    (case expr
      [_
       (tuple2 (i:byte-literal 0) acc)])))
