(module source-to-intermediate-language
  (import
    (prim
      #:types ()
      #:values (panic)
      #:patterns ())
    (list
      #:types ()
      #:values (empty)
      #:patterns ())
    (intermediate-language
      #:types ((Module i:Module))
      #:values ((module i:module))
      #:patterns ())

    (source-language
      #:types (Module FunctionDefinition Expression Imports Import TypeDefinition VariantDefinition
               VariantField CaseClause Pattern)
      #:values (module-name module-definitions module-types
                function-definition-name
                type-definition-variants)
      #:patterns (module imports import function-definition bytes-literal byte-literal boolean-literal
                  let-expr var-expr app-expr if-expr begin-expr varargs-app-expr
                  variant-definition type-definition
                  variant-field case-expr case-clause ignore-pattern variable-pattern
                  abstraction-pattern bytes-pattern byte-pattern)))
  (export source->intermediate)
  (types)

  (define (source->intermediate [mod : Module]) : i:Module
    (case mod
      [(module name imports _ types definitions)
       (i:module
         name
         imports
         types
         (empty))]))

