#:module (fill-stack-test)
#:import {
  (io)
  (list)
  (numbers)
  (prim)
}
(export)
(types)


(define (fill-stack-frame-a [arr : (Array Int)] [metadata : (Array Int)]) : Int
  (- (fill-stack-frame-b arr metadata) 1))

(define (fill-stack-frame-b [arr : (Array Int)] [metadata : (Array Int)]) : Int
  (+ (fill-stack-frame-c arr metadata) 1))

(define (fill-stack-frame-c [arr : (Array Int)] [metadata : (Array Int)]) : Int
  (match-define a 1)
  (match-define b 2)
  (match-define c 3)
  (match-define d 4)
  (match-define e 5)
  (match-define f 7)
  (match-define g 8)
  (match-define h 9)
  (match-define i 0)
  (+ (fill-stack arr metadata) (* a (* b (* c (* d (* e (* f (* g (* h i))))))))))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (match-define buffer (make-array 25 0))
  (match-define metadata (make-array 1 0))
  (match-define fill-count (fill-stack-frame-a buffer metadata))
  (begin
    (write-all-bytes #"depth: " stdout)
    (write-line (integer->decimal-bytes fill-count) stdout)
    (for-each
      (lambda ([x : Int])
        (write-line (integer->hex-bytes x) stdout))
      (array->list buffer))
    (write-line #"metadata " stdout)
    (for-each
      (lambda ([x : Int])
        (write-line (integer->hex-bytes x) stdout))
      (array->list metadata))
    0))
