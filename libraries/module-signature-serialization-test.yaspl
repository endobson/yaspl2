#:module (module-signature-serialization-test)
#:import {
  (bytes)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (module-signature-serialization)
  (panic)
  (prim)
  (top-level-name)
  (tuples)
  (types)
  (yunit)
}
(export)
(types)

(define (check-mod-name=? [expected : ModName] [actual : ModName]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (mod-name=? expected actual)
        (nothing)
        (just (failure (bytes-append (varargs list #"Expected: " (mod-name->bytes expected)
                                              #" Actual: " (mod-name->bytes actual))))))))

(define (pattern-signature=? [p1 : PatternSignature] [p2 : PatternSignature])
  : Boolean
  (case (tuple2 p1 p2)
    [(tuple2 (pattern-signature name1 tag1 mod-name1 type-name1
                                type-vars1 arg-types1 (type-signature variant-names1))
             (pattern-signature name2 tag2 mod-name2 type-name2
                                type-vars2 arg-types2 (type-signature variant-names2)))
     (and (bytes=? name1 name2)
          (and (= (u8->s64 tag1) (u8->s64 tag2))
               (and (mod-name=? mod-name1 mod-name2)
                    (and (bytes=? type-name1 type-name2)
                         (and ((list=? bytes=?) type-vars1 type-vars2)
                              (and ((list=? type=?) arg-types1 arg-types2)
                                   ((list=? bytes=?) variant-names1 variant-names2)))))))]))

(define (value-signature=? [v1 : ValueSignature] [v2 : ValueSignature])
  : Boolean
  (case (tuple2 v1 v2)
    [(tuple2 (value-signature type1 symbol1)
             (value-signature type2 symbol2))
     (and (type=? type1 type2)
          (top-level-name=? symbol1 symbol2))]))

(define (top-level-signature=? [t1 : TopLevelSignature] [t2 : TopLevelSignature])
  : Boolean
  (case (tuple2 t1 t2)
    [(tuple2 (top-level-signature trivial1 (nothing))
             (top-level-signature trivial2 (nothing)))
     ((maybe=? top-level-name=?) trivial1 trivial2)]
    [_
     (panic/boolean #"NYI: Cannot check equality of inlineable values")]))

(define (test-round-trip [sig : ModuleSignature]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (deserialize-module-signature
            (sourced-bytes (unnamed-source) (serialize-module-signature sig)))
      [(left v) (just (failure (bytes-append (varargs list #"Deserialize failed: " v))))]
      [(right (module-signature name value-exports pattern-exports type-bindings
                                top-level-sigs))
       (case sig
         [(module-signature orig-name orig-value-exports orig-pattern-exports orig-type-bindings
                            orig-top-level-sigs)
          ((and-check
             (varargs list
               (check-mod-name=? orig-name name)
               (check-dict=? value-signature=? orig-value-exports value-exports)
               (check-dict=? pattern-signature=? orig-pattern-exports pattern-exports)
               (check-dict=? type=? orig-type-bindings type-bindings)
               (check-dict=? top-level-signature=? orig-top-level-sigs top-level-sigs))))])])))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"empty round trip"
        (test-round-trip (module-signature
                           (mod-name (varargs list #"name"))
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp)
                           (make-dict top-level-name-cmp))))
      (new-test-case #"full round trip"
        (test-round-trip (module-signature
                           (mod-name (varargs list #"name"))
                           (dict-add (make-dict bytes-cmp) #"fun"
                                     (value-signature (var-type #"free-var")
                                                      (top-level-name
                                                        (mod-name (varargs list #"mod"))
                                                        #"fun_closure")))
                           (dict-add
                             (make-dict bytes-cmp)
                             #"pat"
                             (pattern-signature #"var-name" (u8 1)
                                                (mod-name (varargs list #"name")) #"Pat"
                                                (empty) (empty)
                                                (type-signature (varargs list #"var1" #"var2"))))
                           (dict-add (make-dict bytes-cmp) #"Foo" (var-type #"free-var"))
                           (dict-add (make-dict top-level-name-cmp)
                                     (top-level-name
                                       (mod-name (varargs list #"mod"))
                                       #"fun_closure")
                                     (top-level-signature
                                       (just (top-level-name
                                         (mod-name (varargs list #"mod"))
                                         #"fun"))
                                       (nothing)))))))))
