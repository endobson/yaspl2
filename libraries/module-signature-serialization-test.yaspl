(module module-signature-serialization-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Boolean Int)
      #:values ()
      #:patterns ())
    (list list)
    (bytes bytes=? bytes-append)
    (maybe
      #:types (Maybe) 
      #:values (just nothing)
      #:patterns ())
    (yunit
      #:types (FailedAssertion) 
      #:values (yunit/main test-case new-test-case failure)
      #:patterns ())
    (dict make-dict)
    (either
      #:types ()
      #:values ()
      #:patterns (left right))
    (module-signature
      #:types (ModuleSignature) 
      #:values (module-signature)
      #:patterns ())
    (module-signature-serialization
      #:types () 
      #:values (serialize-module-signature deserialize-module-signature)
      #:patterns ()))
  (export)
  (types)

  (define (test-round-trip [sig : ModuleSignature]) : (-> (Maybe FailedAssertion))
    (lambda ()
      (case (deserialize-module-signature (serialize-module-signature sig))
        [(left v) (just (failure (bytes-append (varargs list #"Deserialize failed: " v))))]
        ;; TODO make this actually check the result
        [(right v) (nothing)])))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (new-test-case #"empty round trip"
          (test-round-trip (module-signature
                             #"name"
                             (make-dict bytes=?)
                             (make-dict bytes=?))))
        ))))
