#:module (module-signature-serialization-test)
#:import {
  (bytes)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (module-signature-serialization)
  (prim)
  (tuples)
  (types)
  (yunit)
}
(export)
(types)

(define (check-mod-name=? [expected : ModName] [actual : ModName]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (mod-name=? expected actual)
        (nothing)
        (just (failure (bytes-append (varargs list #"Expected: " (mod-name->bytes expected)
                                              #" Actual: " (mod-name->bytes actual))))))))

(define (pattern-signature=? [p1 : PatternSignature] [p2 : PatternSignature])
  : Boolean
  (case (tuple2 p1 p2)
    [(tuple2 (pattern-signature name1 tag1 type-vars1 self-type1 arg-types1
                                (type-signature variant-names1))
             (pattern-signature name2 tag2 type-vars2 self-type2 arg-types2
                                (type-signature variant-names2)))
     (and (bytes=? name1 name2)
          (and (= tag1 tag2)
               (and ((list=? bytes=?) type-vars1 type-vars2)
                    (and (type=? self-type1 self-type2)
                         (and ((list=? type=?) arg-types1 arg-types2)
                              ((list=? bytes=?) variant-names1 variant-names2))))))]))

(define (value-signature=? [v1 : ValueSignature] [v2 : ValueSignature])
  : Boolean
  (case (tuple2 v1 v2)
    [(tuple2 (value-signature type1 symbol1 trivial1 (nothing))
             (value-signature type2 symbol2 trivial2 (nothing)))
     (and (type=? type1 type2)
          (and (bytes=? symbol1 symbol2)
               ((maybe=? bytes=?) trivial1 trivial2)))]
    [_
     (panic #"NYI: Cannot check equality of inlineable values")]))

(define (test-round-trip [sig : ModuleSignature]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (deserialize-module-signature (serialize-module-signature sig))
      [(left v) (just (failure (bytes-append (varargs list #"Deserialize failed: " v))))]
      [(right (module-signature name value-exports pattern-exports type-bindings known-functions))
       (case sig
         [(module-signature orig-name orig-value-exports orig-pattern-exports orig-type-bindings
                            orig-known-functions)
          ((and-check
             (varargs list
               (check-mod-name=? orig-name name)
               (check-dict=? value-signature=? orig-value-exports value-exports)
               (check-dict=? pattern-signature=? orig-pattern-exports pattern-exports)
               (check-dict=? type=? orig-type-bindings type-bindings)
               (check-dict=? bytes=? orig-known-functions known-functions))))])])))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"empty round trip"
        (test-round-trip (module-signature
                           (mod-name (varargs list #"name"))
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp))))
      (new-test-case #"full round trip"
        (test-round-trip (module-signature
                           (mod-name (varargs list #"name"))
                           (dict-add (make-dict bytes-cmp) #"fun"
                                     (value-signature (var-type #"free-var") #"ymod_fun_closure"
                                                      (just #"ymod_fun") (nothing)))
                           (dict-add
                             (make-dict bytes-cmp)
                             #"pat"
                             (pattern-signature #"var-name" 1 (empty) (var-type #"free-var") (empty)
                                                (type-signature (varargs list #"var1" #"var2"))))
                           (dict-add (make-dict bytes-cmp) #"Foo" (var-type #"free-var"))
                           (dict-add (make-dict bytes-cmp) #"ymod_fun_closure" #"ymod_fun")))))))
