#:module (module-signature-serialization-test)
#:import {
  (bytes)
  (core-language struct-info)
  (data lifted-primitives)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (module-signature-serialization)
  (panic)
  (prim)
  (top-level-name)
  (tuples)
  (types)
  (variant-info)
  (yunit)
}
(export
  (#:values main))
(types)

(define (check-mod-name=? [expected : ModName] [actual : ModName]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (mod-name=? expected actual)
        (nothing)
        (just (failure (bytes-append (varargs list #"Expected: " (mod-name->bytes expected)
                                              #" Actual: " (mod-name->bytes actual))))))))

(define (pattern-signature=? [p1 : PatternSignature] [p2 : PatternSignature])
  : Boolean
  (case (tuple2 p1 p2)
    [(tuple2 (pattern-signature (source-variant-info name1 mod-name1 type-name1 type-vars1 arg-types1
                                                     variant-names1)
                                (variant-destruction-info tag1 variant-tags1 indices1))
             (pattern-signature (source-variant-info name2 mod-name2 type-name2 type-vars2 arg-types2
                                                     variant-names2)
                                (variant-destruction-info tag2 variant-tags2 indices2)))
     (and (bytes=? name1 name2)
          (and (= (u8->s64 tag1) (u8->s64 tag2))
               (and ((list=? bytes=?) variant-names1 variant-names2)
                    (and ((list=? lifted-u8=?) variant-tags1 variant-tags2)
                         (and ((list=? lifted-int=?) indices1 indices2)
                              (and (mod-name=? mod-name1 mod-name2)
                                   (and (bytes=? type-name1 type-name2)
                                        (and ((list=? bytes=?) type-vars1 type-vars2)
                                             ((list=? type=?) arg-types1 arg-types2)))))))))]))

(define (value-signature=? [v1 : ValueSignature] [v2 : ValueSignature])
  : Boolean
  (case (tuple2 v1 v2)
    [(tuple2 (value-signature type1 symbol1)
             (value-signature type2 symbol2))
     (and (type=? type1 type2)
          (top-level-name=? symbol1 symbol2))]))

(define (type-signature=? [t1 : TypeSignature] [t2 : TypeSignature])
  : Boolean
  (case (tuple2 t1 t2)
    [(tuple2 (type-signature type1 struct-info1)
             (type-signature type2 struct-info2))
     (and (type=? type1 type2)
          ((maybe=? struct-info=?) struct-info1 struct-info2))]))

(define (struct-info=? [s1 : StructInfo] [s2 : StructInfo]) : Boolean
  (match-define (struct-info (struct-destruction-info fields1) size1) s1)
  (match-define (struct-info (struct-destruction-info fields2) size2) s2)
  (and (= size1 size2)
       ((ann ((Dict Bytes StructField) (Dict Bytes StructField) -> Boolean)
             (dict=? struct-field=?))
        fields1 fields2)))

(define (struct-field=? [f1 : StructField] [f2 : StructField]) : Boolean
  (match-define (struct-field offset1 type1) f1)
  (match-define (struct-field offset2 type2) f2)
  (and (= offset1 offset2) (type=? type1 type2)))

(define (static-signature=? [s1 : StaticSignature] [s2 : StaticSignature])
  : Boolean
  (case (tuple2 s1 s2)
    [(tuple2 (varargs-signature type-vars1 arg-type1 return-type1 cons-name1 empty-name1)
             (varargs-signature type-vars2 arg-type2 return-type2 cons-name2 empty-name2))
     (and ((list=? bytes=?) type-vars1 type-vars2)
          (and (type=? arg-type1 arg-type2)
               (and (type=? return-type1 return-type2)
                    (and (top-level-name=? cons-name1 cons-name2)
                         (top-level-name=? empty-name1 empty-name2)))))]))

(define (top-level-signature=? [t1 : TopLevelSignature] [t2 : TopLevelSignature])
  : Boolean
  (case (tuple2 t1 t2)
    [(tuple2 (top-level-signature trivial1 (nothing))
             (top-level-signature trivial2 (nothing)))
     ((maybe=? top-level-name=?) trivial1 trivial2)]
    [_
     (panic/boolean #"NYI: Cannot check equality of inlineable values")]))

(define (test-round-trip [sig : ModuleSignature]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (deserialize-module-signature
            (sourced-bytes (unnamed-source) (serialize-module-signature sig)))
      [(left v) (just (failure (bytes-append (varargs list #"Deserialize failed: " v))))]
      [(right (module-signature name value-exports pattern-exports type-bindings
                                static-bindings top-level-sigs))
       (case sig
         [(module-signature orig-name orig-value-exports orig-pattern-exports orig-type-bindings
                            orig-static-bindings orig-top-level-sigs)
          ((and-check
             (varargs list
               (check-mod-name=? orig-name name)
               (check-dict=? value-signature=? orig-value-exports value-exports)
               (check-dict=? pattern-signature=? orig-pattern-exports pattern-exports)
               (check-dict=? type-signature=? orig-type-bindings type-bindings)
               (check-dict=? static-signature=? orig-static-bindings static-bindings)
               (check-dict=? top-level-signature=? orig-top-level-sigs top-level-sigs))))])])))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"empty round trip"
        (test-round-trip (module-signature
                           (mod-name (varargs list #"name"))
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp)
                           (make-dict bytes-cmp)
                           (make-dict top-level-name-cmp))))
      (test-case #"full round trip"
        (test-round-trip (module-signature
                           (mod-name (varargs list #"name"))
                           (dict-add (make-dict bytes-cmp) #"fun"
                                     (value-signature (var-type #"free-var")
                                                      (top-level-name
                                                        (mod-name (varargs list #"mod"))
                                                        #"fun_closure")))
                           (dict-add
                             (make-dict bytes-cmp)
                             #"pat"
                             (pattern-signature
                               (source-variant-info
                                 #"var-name"
                                 (mod-name (varargs list #"name")) #"Pat" (empty) (empty)
                                                         (varargs list #"var1" #"var2"))
                               (variant-destruction-info (u8 1)
                                                         (varargs list (lifted-u8 (u8 0))
                                                                       (lifted-u8 (u8 1)))
                                                         (varargs list (lifted-int 0)))))
                           (dict-add-all
                             (make-dict bytes-cmp)
                             (varargs list
                               (tuple2
                                 #"Foo" (type-signature (var-type #"free-var") (nothing)))
                               (tuple2
                                 #"FooStruct"
                                 (type-signature
                                   (var-type #"free-var")
                                   (just (struct-info
                                           (struct-destruction-info
                                             (dict-add
                                               (make-dict bytes-cmp)
                                                 #"bar"
                                                 (struct-field 2 (var-type #"free-var2"))))
                                           10))))))

                           (dict-add (make-dict bytes-cmp)
                                     #"list"
                                     (varargs-signature
                                       (varargs list #"A" #"B")
                                       (var-type #"A")
                                       (var-type #"B")
                                       (top-level-name (mod-name (varargs list #"mod"))
                                                       #"cons-func")
                                       (top-level-name (mod-name (varargs list #"mod"))
                                                       #"empty-func")))
                           (dict-add (make-dict top-level-name-cmp)
                                     (top-level-name
                                       (mod-name (varargs list #"mod"))
                                       #"fun_closure")
                                     (top-level-signature
                                       (just (top-level-name
                                         (mod-name (varargs list #"mod"))
                                         #"fun"))
                                       (nothing)))))))))
