#:module module-signature-serialization-test
#:import {
  bytes {
    #:values
      bytes-append
      bytes=?
  }
  dict {
    #:values
      dict-add
      make-dict
  }
  either {
    #:patterns
      left
      right
  }
  list {
    #:values
      empty
      list
      list=?
  }
  maybe {
    #:types
      Maybe
    #:values
      just
      nothing
  }
  module-signature {
    #:types
      ModuleSignature
      PatternSignature
    #:values
      module-signature
      pattern-signature
      type-signature
    #:patterns
      module-signature
      pattern-signature
      type-signature
  }
  module-signature-serialization {
    #:values
      deserialize-module-signature
      serialize-module-signature
  }
  prim {
    #:types
      Array
      Boolean
      Bytes
      InputPort
      Int
      OutputPort
    #:values
      =
      and
  }
  tuples {
    #:values
      tuple2
    #:patterns
      tuple2
  }
  types {
    #:values
      type=?
      var-type
  }
  yunit {
    #:types
      FailedAssertion
    #:values
      and-check
      check-dict=?
      failure
      new-test-case
      yunit/main
  }
}
(export)
(types)

(define (check-bytes=? [expected : Bytes] [actual : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (if (bytes=? expected actual)
        (nothing)
        (just (failure (bytes-append (varargs list #"Expected: " expected #" Actual: " actual)))))))

(define (pattern-signature=? [p1 : PatternSignature] [p2 : PatternSignature])
  : Boolean
  (case (tuple2 p1 p2)
    [(tuple2 (pattern-signature name1 tag1 type-vars1 self-type1 arg-types1
                                (type-signature variant-names1))
             (pattern-signature name2 tag2 type-vars2 self-type2 arg-types2
                                (type-signature variant-names2)))
     (and (bytes=? name1 name2)
          (and (= tag1 tag2)
               (and ((list=? bytes=?) type-vars1 type-vars2)
                    (and (type=? self-type1 self-type2)
                         (and ((list=? type=?) arg-types1 arg-types2)
                              ((list=? bytes=?) variant-names1 variant-names2))))))]))

(define (test-round-trip [sig : ModuleSignature]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (deserialize-module-signature (serialize-module-signature sig))
      [(left v) (just (failure (bytes-append (varargs list #"Deserialize failed: " v))))]
      [(right (module-signature name value-exports pattern-exports type-bindings value-types
                                known-functions))
       (case sig
         [(module-signature orig-name orig-value-exports orig-pattern-exports orig-type-bindings
                            orig-value-types orig-known-functions)
          ((and-check
             (varargs list
               (check-bytes=? orig-name name)
               (check-dict=? bytes=? orig-value-exports value-exports)
               (check-dict=? pattern-signature=? orig-pattern-exports pattern-exports)
               (check-dict=? type=? orig-type-bindings type-bindings)
               (check-dict=? type=? orig-value-types value-types)
               (check-dict=? bytes=? orig-known-functions known-functions))))])])))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"empty round trip"
        (test-round-trip (module-signature
                           #"name"
                           (make-dict bytes=?)
                           (make-dict bytes=?)
                           (make-dict bytes=?)
                           (make-dict bytes=?)
                           (make-dict bytes=?))))
      (new-test-case #"full round trip"
        (test-round-trip (module-signature
                           #"name"
                           (dict-add (make-dict bytes=?) #"fun" #"ymod_fun_closure")
                           (dict-add
                             (make-dict bytes=?)
                             #"pat"
                             (pattern-signature #"var-name" 1 (empty) (var-type #"free-var") (empty)
                                                (type-signature (varargs list #"var1" #"var2"))))
                           (dict-add (make-dict bytes=?) #"Foo" (var-type #"free-var"))
                           (dict-add (make-dict bytes=?) #"fun" (var-type #"free-var"))
                           (dict-add (make-dict bytes=?) #"ymod_fun_closure" #"ymod_fun")))))))
