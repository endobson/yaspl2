(module module-signature-serialization-test
  (import
    (bytes bytes=? bytes-append)
    (dict
      #:types ()
      #:values (dict-add make-dict)
      #:patterns ())
    (either
      #:types ()
      #:values ()
      #:patterns (left right))
    (list list empty list=?)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns ())
    (module-signature
      #:types (ModuleSignature PatternSignature)
      #:values (module-signature pattern-signature)
      #:patterns (module-signature pattern-signature))
    (module-signature-serialization
      #:types ()
      #:values (deserialize-module-signature serialize-module-signature)
      #:patterns ())
    (prim
      #:types (Array Boolean Bytes InputPort Int OutputPort)
      #:values (= and)
      #:patterns ())
    (tuples
      #:types ()
      #:values (tuple2)
      #:patterns (tuple2))
    (types
      #:types ()
      #:values (type=? var-type)
      #:patterns ())
    (yunit
      #:types (FailedAssertion)
      #:values (and-check check-dict=? failure new-test-case yunit/main)
      #:patterns ()))
  (export)
  (types)

  (define (check-bytes=? [expected : Bytes] [actual : Bytes]) : (-> (Maybe FailedAssertion))
    (lambda ()
      (if (bytes=? expected actual)
          (nothing)
          (just (failure (bytes-append (varargs list #"Expected: " expected #" Actual: " actual)))))))

  (define (pattern-signature=? [p1 : PatternSignature] [p2 : PatternSignature])
    : Boolean
    (case (tuple2 p1 p2)
      [(tuple2 (pattern-signature tag1 type-vars1 self-type1 arg-types1)
               (pattern-signature tag2 type-vars2 self-type2 arg-types2))
       (and (= tag1 tag2)
            (and ((list=? bytes=?) type-vars1 type-vars2)
                 (and (type=? self-type1 self-type2)
                      ((list=? type=?) arg-types2 arg-types2))))]))

  (define (test-round-trip [sig : ModuleSignature]) : (-> (Maybe FailedAssertion))
    (lambda ()
      (case (deserialize-module-signature (serialize-module-signature sig))
        [(left v) (just (failure (bytes-append (varargs list #"Deserialize failed: " v))))]
        [(right (module-signature name value-exports pattern-exports type-bindings value-types
                                  known-functions))
         (case sig
           [(module-signature orig-name orig-value-exports orig-pattern-exports orig-type-bindings
                              orig-value-types orig-known-functions)
            ((and-check
               (varargs list
                 (check-bytes=? orig-name name)
                 (check-dict=? bytes=? orig-value-exports value-exports)
                 (check-dict=? pattern-signature=? orig-pattern-exports pattern-exports)
                 (check-dict=? type=? orig-type-bindings type-bindings)
                 (check-dict=? type=? orig-value-types value-types)
                 (check-dict=? bytes=? orig-known-functions known-functions))))])])))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (new-test-case #"empty round trip"
          (test-round-trip (module-signature
                             #"name"
                             (make-dict bytes=?)
                             (make-dict bytes=?)
                             (make-dict bytes=?)
                             (make-dict bytes=?)
                             (make-dict bytes=?))))
        (new-test-case #"full round trip"
          (test-round-trip (module-signature
                             #"name"
                             (dict-add (make-dict bytes=?) #"fun" #"ymod_fun_closure")
                             (dict-add
                               (make-dict bytes=?)
                               #"pat"
                               (pattern-signature 1 (empty) (var-type #"free-var") (empty)))
                             (dict-add (make-dict bytes=?) #"Foo" (var-type #"free-var"))
                             (dict-add (make-dict bytes=?) #"fun" (var-type #"free-var"))
                             (dict-add (make-dict bytes=?) #"ymod_fun_closure" #"ymod_fun"))))))))
