(module module-signature-serialization-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Boolean Int)
      #:values (=)
      #:patterns ())
    (list list append empty)
    (bytes bytes=? bytes-append)
    (types
      #:types (Type)
      #:values (var-type type=?)
      #:patterns ())
    (maybe
      #:types (Maybe) 
      #:values (just nothing)
      #:patterns (just nothing))
    (yunit
      #:types (FailedAssertion) 
      #:values (yunit/main test-case new-test-case failure and-check
                check-dict=?)
      #:patterns ())
    (dict 
      #:types (Dict)
      #:values (make-dict dict-add dict-ref dict-map)
      #:patterns ())
    (either
      #:types ()
      #:values ()
      #:patterns (left right))
    (module-signature
      #:types (ModuleSignature) 
      #:values (module-signature)
      #:patterns (module-signature))
    (module-signature-serialization
      #:types () 
      #:values (serialize-module-signature deserialize-module-signature)
      #:patterns ()))
  (export)
  (types)

  (define (check-bytes=? [expected : Bytes] [actual : Bytes]) : (-> (Maybe FailedAssertion))
    (lambda ()
      (if (bytes=? expected actual)
          (nothing)
          (just (failure (bytes-append (varargs list #"Expected: " expected #" Actual: " actual)))))))

  (define (test-round-trip [sig : ModuleSignature]) : (-> (Maybe FailedAssertion))
    (lambda ()
      (case (deserialize-module-signature (serialize-module-signature sig))
        [(left v) (just (failure (bytes-append (varargs list #"Deserialize failed: " v))))]
        [(right (module-signature name value-exports pattern-exports type-bindings value-types))
         (case sig
           [(module-signature orig-name orig-value-exports orig-pattern-exports orig-type-bindings
                              orig-value-types)
            ((and-check
               (varargs list
                 (check-bytes=? orig-name name)
                 (check-dict=? bytes=? orig-value-exports value-exports)
                 (check-dict=? = orig-pattern-exports pattern-exports)
                 (check-dict=? type=? orig-type-bindings type-bindings)
                 (check-dict=? type=? orig-value-types value-types))))])])))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (new-test-case #"empty round trip"
          (test-round-trip (module-signature
                             #"name"
                             (make-dict bytes=?)
                             (make-dict bytes=?)
                             (make-dict bytes=?)
                             (make-dict bytes=?)
                             (make-dict bytes=?))))
        (new-test-case #"full round trip"
          (test-round-trip (module-signature
                             #"name"
                             (dict-add (make-dict bytes=?) #"fun" #"ymod_fun_closure")
                             (dict-add (make-dict bytes=?) #"pat" 1)
                             (dict-add (make-dict bytes=?) #"Foo" (var-type #"free-var"))
                             (dict-add (make-dict bytes=?) #"fun" (var-type #"free-var"))
                             (dict-add (make-dict bytes=?) #"ymod_fun_closure" #"ymod_fun"))))))))
