(module x86-64-stack-machine
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Void)
      #:values (bytes-length make-bytes * + - = panic void)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons-head)
      #:patterns (empty cons))
    (numbers integer->decimal-bytes)
    (io read-all-bytes write-all-bytes write-newline)
    (arithmetic-expr
      #:types ()
      #:values (parse-module)
      #:patterns (plus-op minus-op times-op))
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexp)
      #:patterns ())
    (bytes bytes-copy! subbytes)
    (stack-machine
      #:types (StackFunction StackBasicBlock StackCmd StackTerminal)
      #:values (compile-module stack-function-blocks stack-basic-block-cmds)
      #:patterns (stack-function stack-basic-block return
                  num-lit-cmd fun-call-cmd eval-op-cmd))
    (either
      #:types (Either)
      #:values ()
      #:patterns (right)))
  (export main)
  (types)

  (define (compile-stack-machine [sfuns : (List StackFunction)] [output : OutputPort]) : Void
    (begin 
      (write-start output)
      (write-functions sfuns output)))

  (define (write-start [output : OutputPort]) : Void
    (begin
      (write-all-bytes #".section __TEXT,__text\n\n" output)
      (write-all-bytes #".global _start\n" output)
      (write-all-bytes #"_start:\n" output)
      (write-all-bytes #"call main\n" output)
      (write-all-bytes #"mov %rax, %rdi\n" output)
      (write-all-bytes #"movq $0x2000001, %rax\n" output)
      (write-all-bytes #"syscall\n" output)))


  (define (write-functions [funs : (List StackFunction)] [output : OutputPort]) : Void
    (case funs
      [(empty) (void)]
      [(cons fun funs)
       (begin
         (write-function fun output)
         (write-functions funs output))]))


  (define (write-function [fun : StackFunction] [output : OutputPort]) : Void
    (case fun
      [(stack-function name blocks)
       (begin
         (write-all-bytes name output)
         (write-all-bytes #":\n" output)
         (write-basic-blocks blocks output))]))

  (define (write-basic-blocks [blocks : (List StackBasicBlock)] [output : OutputPort]) : Void
    (case blocks
      [(empty) (void)]
      [(cons block blocks)
       (begin
         (write-basic-block block output)
         (write-basic-blocks blocks output))]))

  (define (write-basic-block [block : StackBasicBlock] [output : OutputPort]) : Void
    (case block
      [(stack-basic-block cmds terminal)
       (begin
         (write-commands cmds output)
         (write-terminal terminal output))]))


  (define (write-terminal [terminal : StackTerminal] [output : OutputPort]) : Void
    (case terminal
      [(return)
       (write-all-bytes #"pop %rax\nret\n" output)]))


  (define (write-commands [cmds : (List StackCmd)] [output : OutputPort]) : Void
    (case cmds
      [(empty) (void)]
      [(cons cmd cmds)
       (case cmd
         [(num-lit-cmd v)
          (begin
            (write-all-bytes #"push $" output)
            (write-all-bytes (integer->decimal-bytes v) output)
            (write-all-bytes #"\n" output)
            (write-commands cmds output))]
         [(fun-call-cmd name num-args)
          (if (= 0 num-args)
              (begin
                (write-all-bytes #"callq " output)
                (write-all-bytes name output)
                (write-all-bytes #"\npush %rax\n" output)
                (write-commands cmds output))
              (panic #"Cannot handle functions with arguments yet."))]
         [(eval-op-cmd op)
          (begin
            (write-all-bytes
              (case op
                [(plus-op) #"pop %rbx\npop %rax\naddq %rbx, %rax\npush %rax\n"]
                [(times-op) #"pop %rbx\npop %rax\nmulq %rbx\npush %rax\n"]
                [(minus-op) #"pop %rbx\npop %rax\nsubq %rbx, %rax\npush %rax\n"])
              output)
            (write-commands cmds output))])]))


  ;; TODO switch to a polymorphic one when it works
  (define (extract-sexp [either : (Either Bytes Sexp)]) : Sexp
    (case either
      [(right v) v]))

  (define (main [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (begin
      (compile-stack-machine
        (compile-module
          (parse-module
            (extract-sexp (parse-sexp (read-all-bytes stdin)))))
        stdout)
      0)))
