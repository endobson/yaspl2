#:module (types)
#:import {
  (bytes)
  (data ordering)
  (dict)
  (formats sexp)
  (list)
  (maybe)
  (module-name)
  (prim)
  (sexp-printer)
  (tuples)
}
(export
  (#:types Type Kind)
  (#:values star-kind prim64-kind fun-kind kind=? serialize-kind
            abstract-type var-type fun-type type-constructor type=? serialize-type
            kind->sexp sexp->kind type->sexp sexp->type type-cmp print-type type->kind
            substitute-types)
  (#:patterns type-constructor fun-type abstract-type var-type
              star-kind prim64-kind fun-kind))
(types
  (define-type Kind
    (star-kind)
    (prim64-kind)
    (fun-kind [args : (List Kind)] [result : Kind]))
  (define-type Type
    (fun-type [type-vars : (List Bytes)] [args : (List Type)] [result : Type])
    (var-type [v : Bytes])
    (abstract-type [module-name : ModName] [name : Bytes] [args : (List Type)] [kind : Kind])
    (type-constructor [module-name : ModName] [name : Bytes] [args : (List Kind)])))

(define (kind=? [k1 : Kind] [k2 : Kind]) : Boolean
  (case (tuple2 k1 k2)
    [(tuple2 (star-kind) (star-kind)) #t]
    [(tuple2 (prim64-kind) (prim64-kind)) #t]
    [(tuple2 (fun-kind args1 result1) (fun-kind args2 result2))
     (if (kind=? result1 result2)
         ((list=? kind=?) args1 args2)
         #f)]
    [_ #f]))

(define (kind-cmp [k1 : Kind] [k2 : Kind]) : Ordering
  (case (tuple2 k1 k2)
    [(tuple2 (star-kind) (star-kind)) (equal-to)]
    [(tuple2 (star-kind) _) (less-than)]
    [(tuple2 _ (star-kind)) (greater-than)]
    [(tuple2 (prim64-kind) (prim64-kind)) (equal-to)]
    [(tuple2 (prim64-kind) _) (less-than)]
    [(tuple2 _ (prim64-kind)) (greater-than)]
    [(tuple2 (fun-kind args1 result1) (fun-kind args2 result2))
     (case ((list-cmp kind-cmp) args1 args2)
       [(equal-to)
        (kind-cmp result1 result2)]
       [res res])]))


(define (type=? [t1 : Type] [t2 : Type]) : Boolean
  (case (tuple2 t1 t2)
    [(tuple2 (var-type v1) (var-type v2))
     (bytes=? v1 v2)]
    [(tuple2
       (abstract-type mod1 name1 args1 k1)
       (abstract-type mod2 name2 args2 k2))
     (if (mod-name=? mod1 mod2)
         (if (bytes=? name1 name2)
             (if ((list=? type=?) args1 args2)
                 (kind=? k1 k2)
                 #f)
             #f)
         #f)]
    [(tuple2
       (fun-type type-vars1 args1 result1)
       (fun-type type-vars2 args2 result2))
     (if (type=? result1 result2)
         (if ((list=? bytes=?) type-vars1 type-vars2)
             ((list=? type=?) args1 args2)
             #f)
         #f)]
    [(tuple2
       (type-constructor mod1 name1 args1)
       (type-constructor mod2 name2 args2))
     (if (mod-name=? mod1 mod2)
         (if (bytes=? name1 name2)
             ((list=? kind=?) args1 args2)
             #f)
         #f)]
    [_ #f]))


(define (type-cmp [t1 : Type] [t2 : Type]) : Ordering
  (case (tuple2 t1 t2)
    [(tuple2 (var-type v1) (var-type v2))
     (bytes-cmp v1 v2)]
    [(tuple2 (var-type _) _)
     (less-than)]
    [(tuple2 _ (var-type _))
     (greater-than)]
    [(tuple2
       (abstract-type mod1 name1 args1 k1)
       (abstract-type mod2 name2 args2 k2))
     (case (mod-name-cmp mod1 mod2)
       [(equal-to)
        (case (bytes-cmp name1 name2)
          [(equal-to)
           (case ((list-cmp type-cmp) args1 args2)
             [(equal-to)
              (kind-cmp k1 k2)]
             [res res])]
          [res res])]
       [res res])]
    [(tuple2 (abstract-type _ _ _ _) _)
     (less-than)]
    [(tuple2 _ (abstract-type _ _ _ _))
     (greater-than)]
    [(tuple2
       (fun-type type-vars1 args1 result1)
       (fun-type type-vars2 args2 result2))
     (case ((list-cmp bytes-cmp) type-vars1 type-vars2)
       [(equal-to)
        (case ((list-cmp type-cmp) args1 args2)
          [(equal-to)
           (type-cmp result1 result2)]
          [res res])]
       [res res])]
    [(tuple2 (fun-type _ _ _) _)
     (less-than)]
    [(tuple2 _ (fun-type _ _ _))
     (greater-than)]
    [(tuple2
       (type-constructor mod1 name1 args1)
       (type-constructor mod2 name2 args2))
     (case (mod-name-cmp mod1 mod2)
       [(equal-to)
        (case (bytes-cmp name1 name2)
          [(equal-to)
           ((list-cmp kind-cmp) args1 args2)]
          [res res])]
       [res res])]))


(define (serialize-type [type : Type]) : Bytes
  (print-sexp (type->sexp type)))

(define (type->sexp [type : Type]) : Sexp/P
  (case type
    [(var-type v) (node/p (varargs list (symbol-sexp/p #"var") (bytes-sexp/p v)))]
    [(abstract-type mod name args kind)
     (node/p (cons (symbol-sexp/p #"abstract")
                   (cons (mod-name->sexp mod)
                         (cons (bytes-sexp/p name)
                               (cons (kind->sexp kind)
                                     (map type->sexp args))))))]
    [(fun-type type-vars args result)
     (node/p (cons (symbol-sexp/p #"fun")
                   (cons (node/p (map bytes-sexp/p type-vars))
                         (append (map type->sexp args) (cons (type->sexp result) (empty))))))]
    [(type-constructor mod name args)
     (node/p (cons (symbol-sexp/p #"tcon")
                   (cons (mod-name->sexp mod)
                         (cons (bytes-sexp/p name)
                               (map kind->sexp args)))))]))

(define (extract-type-var [sexp : Sexp]) : (Maybe Bytes)
  (case sexp
    [(bytes-sexp tv _) (just tv)]
    [_ (nothing)]))

(define (sexp->type [sexp : Sexp]) : (Maybe Type)
  (case sexp
    [(node (cons (symbol-sexp #"var" _) (cons (bytes-sexp v _) (empty))) _)
     (just (var-type v))]
    [(node (cons (symbol-sexp #"fun" _) (cons (node type-vars _) types)) _)
     (case (extract-justs (reverse (map sexp->type types)))
       [(nothing) (nothing)]
       [(just (empty)) (nothing)]
       [(just (cons result rev-arg-types))
        (case (extract-justs (map extract-type-var type-vars))
          [(nothing) (nothing)]
          [(just type-vars)
           (just (fun-type type-vars (reverse rev-arg-types) result))])])]
    [(node (cons (symbol-sexp #"abstract" _)
                 (cons mod
                       (cons (bytes-sexp name _)
                             (cons kind types))))
           _)
     (case (extract-justs (map sexp->type types))
       [(nothing) (nothing)]
       [(just types)
        (case (sexp->mod-name mod)
          [(nothing) (nothing)]
          [(just mod)
           (case (sexp->kind kind)
             [(nothing) (nothing)]
             [(just kind)
              (just (abstract-type mod name types kind))])])])]
    [(node (cons (symbol-sexp #"tcon" _)
                 (cons mod
                       (cons (bytes-sexp name _)
                             kinds)))
           _)
     (case (extract-justs (map sexp->kind kinds))
       [(nothing) (nothing)]
       [(just kinds)
        (case (sexp->mod-name mod)
          [(nothing) (nothing)]
          [(just mod)
           (just (type-constructor mod name kinds))])])]
    [_ (nothing)]))

(define (serialize-kind [kind : Kind]) : Bytes
  (print-sexp (kind->sexp kind)))

(define (kind->sexp [kind : Kind]) : Sexp/P
  (case kind
    [(star-kind) (symbol-sexp/p #"*")]
    [(prim64-kind) (symbol-sexp/p #"^64")]
    [(fun-kind args result)
     (node/p (varargs list (node/p (map kind->sexp args))
                           (symbol-sexp/p #"->")
                           (kind->sexp result)))]))

(define (sexp->kind [sexp : Sexp]) : (Maybe Kind)
  (case sexp
    [(symbol-sexp #"*" _) (just (star-kind))]
    [(symbol-sexp #"^64" _) (just (prim64-kind))]
    [(node (cons (node args _) (cons (symbol-sexp #"->" _) (cons result (empty)))) _)
     (case (extract-justs (map sexp->kind args))
       [(nothing) (nothing)]
       [(just args)
        (case (sexp->kind result)
          [(nothing) (nothing)]
          [(just result)
           (just (fun-kind args result))])])]
    [_ (nothing)]))

(define (print-type [type : Type]) : Bytes
  (print-sexp (type->print-sexp type)))

(define (type->print-sexp [type : Type]) : Sexp/P
  (case type
    [(var-type v) (symbol-sexp/p v)]
    [(abstract-type _mod name (empty) _kind)
     (symbol-sexp/p name)]
    [(abstract-type _mod name args _kind)
     (node/p (cons (symbol-sexp/p name) (map type->print-sexp args)))]
    [(fun-type type-vars args result)
     (node/p (append
               (case type-vars
                 [(empty) (empty)]
                 [type-vars (varargs list (node/p (map symbol-sexp/p type-vars)))])
               (append (map type->print-sexp args)
                       (cons (symbol-sexp/p #"->")
                             (cons (type->print-sexp result) (empty))))))]
    [(type-constructor mod name args)
     (node/p (cons (symbol-sexp/p #"tcon")
                   (cons (mod-name->sexp mod)
                         (cons (symbol-sexp/p name)
                               (map kind->sexp args)))))]))

(define (type->kind [type : Type]) : Kind
  (case type
    [(var-type _) (star-kind)]
    [(abstract-type _ _ _ kind) kind]
    [(fun-type _ _ _) (star-kind)]
    [(type-constructor _ _ args)
     (fun-kind args (star-kind))]))

(define (substitute-types [t : Type] [subst : (Dict Bytes Type)]) : Type
  (case t
    [(var-type v)
     (case (dict-ref subst v)
       [(nothing) t]
       [(just t) t])]
    [(abstract-type mod-name name args kind)
     (abstract-type mod-name name
                    (map
                      (lambda ([arg : Type]) (substitute-types arg subst))
                      args) kind)]
    [(type-constructor mod-name name kinds)
     (type-constructor mod-name name kinds)]
    [(fun-type (empty) arg-types result-type)
     (fun-type
       (empty)
       (map
         (lambda ([arg : Type]) (substitute-types arg subst))
         arg-types)
       (substitute-types result-type subst))]
    [(fun-type _ _ _)
     (panic #"Substitute doesn't work on polymorphic functions.")]))
