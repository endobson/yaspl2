(module library-compiler
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array)
      #:values (panic make-bytes read-bytes < + = array-length array-ref open-input-file
                open-output-file close-output-port)
      #:patterns ())
    (io read-all-bytes write-all-bytes write-line)
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (empty cons append map list)
      #:patterns (empty cons))
    (dict make-dict dict-add-all)
    (tuples tuple2)
    (bytes bytes=? bytes-append make-null-terminated)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (intermediate-to-stack
      #:types (CompiledModule)
      #:values (compile-module)
      #:patterns (compiled-module))
    (stack-machine
      #:types (TopLevelObject)
      #:values (function-tlo)
      #:patterns (function-tlo trivial-closure-tlo))
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns ())
    (source-to-intermediate-language source->intermediate)
    (stack-machine-optimizer optimize-tlos)
    (x86-64-stack-machine compile-stack-machine)
    (prim-implementation prim-signature prim-implementation)
    (validator validate-module)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export
    #:types ()
    #:values (main)
    #:patterns ())
  (types)

  (define (compile-main-module
            [main-module : Module]
            [mods : (List Module)]
            [sigs : (List ModuleSignature)])
    : (Either Bytes (List TopLevelObject))
    (case mods
      [(empty)
       (case (validate-module main-module sigs)
         [(just v)
          (left v)]
         [(nothing)
          (case (compile-module (source->intermediate main-module) sigs)
            [(left v) (left v)]
            [(right (compiled-module funcs _))
             (right (optimize-tlos funcs))])])]
      [(cons mod mods)
       (case (validate-module mod sigs)
         [(just v)
          (left v)]
         [(nothing)
          (case (compile-module (source->intermediate mod) sigs)
            [(left v) (left v)]
            [(right (compiled-module _ sig))
             (compile-main-module main-module mods (cons sig sigs))])])]))

  (define (extract-modules [vals : (List (Either Bytes Module))]) : (Either Bytes (List Module))
    (case vals
      [(empty) (right (empty))]
      [(cons (right v) vals)
       (case (extract-modules vals)
         [(right vs) (right (cons v vs))]
         [(left v) (left v)])]
      [(cons (left v) _)
       (left v)]))

  (define (extract-sexps [either : (Either Bytes (List Sexp))] [stderr : OutputPort]) : (List Sexp)
    (case either
      [(left v)
       (begin
         (write-line v stderr)
         (panic v))]
      [(right (empty))
       (begin
         (write-line #"No provided modules" stderr)
         (panic #""))]
      [(right sexps) sexps]))

  (define (read-module-files [index : Byte] [modules : (Array Bytes)]) : (List Bytes)
    (if (= index (array-length modules))
        (empty)
        (cons (read-all-bytes (open-input-file (make-null-terminated (array-ref modules index))))
              (read-module-files (+ 1 index) modules))))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (if (< (array-length args) 3)
            (begin
              (write-line #"No module name supplied" stderr)
              1)
            (let ([output (open-output-file (make-null-terminated (array-ref args 1)))])
              (let ([exit-code
                     (case (extract-modules
                             (map parse-module
                               (extract-sexps
                                 (parse-sexps (bytes-append (read-module-files 3 args)))
                                 stderr)))
                       [(left v)
                        (begin
                          (write-line v stderr)
                          1)]
                       [(right modules)
                        (case (compile-main-module
                                modules
                                (cons (prim-signature) (empty))
                                (prim-implementation))
                          [(left v)
                           (begin
                             (write-line v stderr)
                             1)]
                          [(right code)
                           (begin
                             (compile-stack-machine
                               (bytes-append (varargs list (array-ref args 2) #"_main"))
                               code
                               output)
                             0)])])])
                  (begin
                    (close-output-port output)
                    exit-code)))))))

