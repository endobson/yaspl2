(module library-compiler
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array)
      #:values (panic make-bytes read-bytes < + = array-length array-ref)
      #:patterns ())
    (io read-all-bytes write-all-bytes write-line call-with-input-file
        call-with-output-file)
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (empty cons append map list reverse extract-rights)
      #:patterns (empty cons))
    (dict
      #:types (Dict)
      #:values (make-dict dict-add-all dict-add)
      #:patterns ())
    (tuples
      #:types (Tuple2 Tuple3)
      #:values (tuple2 tuple3)
      #:patterns (tuple2 tuple3))
    (bytes bytes=? bytes-append make-null-terminated)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (intermediate-to-stack
      #:types (CompiledModule)
      #:values (compile-module)
      #:patterns (compiled-module))
    (stack-machine
      #:types (TopLevelObject)
      #:values (function-tlo)
      #:patterns (function-tlo trivial-closure-tlo))
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values ()
      #:patterns ())
    (intermediate-to-static-module-signature
      #:types (StaticModuleSignature)
      #:values (module->static-module-signature)
      #:patterns ())
    (type-checker
      #:types ()
      #:values (type-check)
      #:patterns ())
    (source-to-intermediate-language source->intermediate)
    (stack-machine-optimizer optimize-tlos)
    (x86-64-stack-machine write-fragments convert-objects)
    (prim-implementation prim-static-signature prim-signature prim-implementation)
    (validator validate-module)
    (mach-o-writer2 write-mach-o-library/fragments)
    (library-compiler2 compile-main-module)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export
    #:types ()
    #:values (main read-module-files)
    #:patterns ())
  (types)

  (define (add-known-functions [tlos : (List TopLevelObject)]
                               [dict : (Dict Bytes Bytes)]) : (Dict Bytes Bytes)
    (case tlos
      [(empty) dict]
      [(cons (trivial-closure-tlo name fun-name) tlos)
       (add-known-functions tlos (dict-add dict name fun-name))]
      [(cons _ tlos)
       (add-known-functions tlos dict)]))

  (define (read-module-files [index : Byte] [modules : (Array Bytes)]) : (List Bytes)
    (if (= index (array-length modules))
        (empty)
        (cons (call-with-input-file (array-ref modules index) read-all-bytes)
              (read-module-files (+ 1 index) modules))))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (case (parse-sexps (bytes-append (read-module-files 2 args)))
          [(left v)
           (begin
             (write-line v stderr)
             1)]
          [(right sexps)
           (case (extract-rights (map parse-module sexps))
             [(left v)
              (begin
                (write-line v stderr)
                1)]
             [(right modules)
              (case (reverse modules)
                [(empty)
                 (begin
                   (write-line #"No provided modules" stderr)
                   1)]
                [(cons main-module other-modules)
                 (case (compile-main-module
                         main-module
                         (reverse other-modules)
                         (cons (prim-static-signature) (empty))
                         (cons (prim-signature) (empty))
                         (empty)
                         (add-known-functions (prim-implementation) (make-dict bytes=?)))
                   [(left v)
                    (begin
                      (write-line v stderr)
                      1)]
                   [(right objects)
                    (case (write-mach-o-library/fragments (array-ref args 1) (convert-objects objects))
                      [(left v)
                       (begin
                         (write-line v stderr)
                         1)]
                      [(right _)
                       0])])])])]))))
