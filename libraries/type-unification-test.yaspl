#:module (type-unification-test)
#:import {
  (bytes)
  (dict)
  (list)
  (maybe)
  (module-name)
  (prim)
  (tuples)
  (type-unification)
  (types)
  (types-test-utils)
  (yunit)
}
(export)
(types)

(define (check-unify
          [constraints : (List Constraint)]
          [expectations : (List (Tuple2 UnificationVar Type))])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (unify constraints)
      [(nothing) (just (failure #"Unification failed"))]
      [(just solution)
       (check-expectations expectations solution)])))


(define (check-not-unify [constraints : (List Constraint)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (unify constraints)
      [(nothing) (nothing)]
      [(just _solution)
       (just (failure #"Unification succeded"))])))

(define (check-expectations
          [expectations : (List (Tuple2 UnificationVar Type))]
          [solution : (Dict UnificationVar Type)])
  : (Maybe FailedAssertion)
  (case expectations
    [(empty) (nothing)]
    [(cons (tuple2 uvar expected-type) expectations)
     (case (dict-ref solution uvar)
       [(nothing) (just (failure
                          (bytes-append
                            (varargs list
                              #"Unification doesn't have result for: "
                              (uvar->bytes uvar)))))]
       [(just t)
        (if (type=? t expected-type)
            (check-expectations expectations solution)
            (just
              (failure
                (bytes-append
                  (varargs list
                    (uvar->bytes uvar)
                    #": Expected: " (serialize-type expected-type)
                    #" Actual: " (serialize-type t))))))])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"unify 1=Bytes 1,Bytes"
        (check-unify
          (varargs list
            (eq-constraint
              (constrain-uvar (uvar 1))
              (constrain-abstract-type (mod-name (varargs list #"prim")) #"Bytes" (empty) (star-kind))))
          (varargs list
            (tuple2 (uvar 1) (bytes-type)))))
      (new-test-case #"unify 1=(List 2),2=Bytes 1=(List Bytes)"
        (check-unify
          (varargs list
            (eq-constraint
              (constrain-uvar (uvar 1))
              (constrain-abstract-type (mod-name (varargs list #"list")) #"List"
                (varargs list (constrain-uvar (uvar 2))) (star-kind)))
            (eq-constraint
              (constrain-uvar (uvar 2))
              (constrain-abstract-type (mod-name (varargs list #"prim")) #"Bytes" (empty) (star-kind))))
          (varargs list
            (tuple2 (uvar 1) (list-type (bytes-type))))))
      (new-test-case #"unify (1 -> 2)=(Bytes -> Int) 1=Bytes,2=Int"
        (check-unify
          (varargs list
            (eq-constraint
              (constrain-fun-type (varargs list (constrain-uvar (uvar 1))) (constrain-uvar (uvar 2)))
              (constrain-fun-type (varargs list (constrain-abstract-type
                                                  (mod-name (varargs list #"prim")) #"Bytes" (empty)
                                                  (star-kind)))
                                  (constrain-abstract-type (mod-name (varargs list #"prim")) #"Int"
                                                           (empty) (star-kind)))))
          (varargs list
            (tuple2 (uvar 1) (bytes-type))
            (tuple2 (uvar 2) (int-type)))))
      (new-test-case #"unify (1=2)"
        (check-not-unify
          (varargs list
            (eq-constraint
              (constrain-uvar (uvar 1))
              (constrain-uvar (uvar 2))))))
      (new-test-case #"unify (1=2),(2=A) 1=A"
        (check-unify
          (varargs list
            (eq-constraint
              (constrain-uvar (uvar 1))
              (constrain-uvar (uvar 2)))
            (eq-constraint
              (constrain-uvar (uvar 2))
              (constrain-var-type #"A")))
          (varargs list
            (tuple2 (uvar 1)
                    (var-type #"A")))))

      (new-test-case #"unify 1=(List 1)"
        (check-not-unify
          (varargs list
            (eq-constraint
              (constrain-uvar (uvar 1))
              (constrain-abstract-type (mod-name (varargs list #"list")) #"List"
                (varargs list (constrain-uvar (uvar 1))) (star-kind)))))))))
