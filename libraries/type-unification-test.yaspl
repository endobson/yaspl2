(module type-unification-test
  (import
    (bytes bytes-append)
    (dict
      #:types (Dict)
      #:values (dict-ref)
      #:patterns ())
    (list
      #:types (List)
      #:values (empty list)
      #:patterns (cons empty))
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (prim
      #:types (Array Bytes InputPort Int OutputPort)
      #:values ()
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (type-unification
      #:types (Constraint UnificationVar)
      #:values (constrain-abstract-type constrain-fun-type constrain-uvar constrain-var-type
                eq-constraint unify uvar uvar->bytes)
      #:patterns ())
    (types
      #:types (Type)
      #:values (abstract-type serialize-type type=? var-type)
      #:patterns ())
    (yunit
      #:types (FailedAssertion)
      #:values (failure new-test-case yunit/main)
      #:patterns ()))
  (export)
  (types)

  (define (check-unify
            [constraints : (List Constraint)]
            [expectations : (List (Tuple2 UnificationVar Type))])
    : (-> (Maybe FailedAssertion))
    (lambda ()
      (case (unify constraints)
        [(nothing) (just (failure #"Unification failed"))]
        [(just solution)
         (check-expectations expectations solution)])))


  (define (check-not-unify [constraints : (List Constraint)])
    : (-> (Maybe FailedAssertion))
    (lambda ()
      (case (unify constraints)
        [(nothing) (nothing)]
        [(just solution)
         (just (failure #"Unification succeded"))])))

  (define (check-expectations
            [expectations : (List (Tuple2 UnificationVar Type))]
            [solution : (Dict UnificationVar Type)])
    : (Maybe FailedAssertion)
    (case expectations
      [(empty) (nothing)]
      [(cons (tuple2 uvar expected-type) expectations)
       (case (dict-ref solution uvar)
         [(nothing) (just (failure
                            (bytes-append
                              (varargs list
                                #"Unification doesn't have result for: "
                                (uvar->bytes uvar)))))]
         [(just t)
          (if (type=? t expected-type)
              (check-expectations expectations solution)
              (just
                (failure
                  (bytes-append
                    (varargs list
                      (uvar->bytes uvar)
                      #": Expected: " (serialize-type expected-type)
                      #" Actual: " (serialize-type t))))))])]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (yunit/main stderr
      (varargs list
        (new-test-case #"unify 1=Bytes 1,Bytes"
          (check-unify
            (varargs list
              (eq-constraint
                (constrain-uvar (uvar 1))
                (constrain-abstract-type #"prim" #"Bytes" (empty))))
            (varargs list
              (tuple2 (uvar 1) (abstract-type #"prim" #"Bytes" (empty))))))
        (new-test-case #"unify 1=(List 2),2=Bytes 1=(List Bytes)"
          (check-unify
            (varargs list
              (eq-constraint
                (constrain-uvar (uvar 1))
                (constrain-abstract-type #"list" #"List"
                  (varargs list (constrain-uvar (uvar 2)))))
              (eq-constraint
                (constrain-uvar (uvar 2))
                (constrain-abstract-type #"prim" #"Bytes" (empty))))
            (varargs list
              (tuple2 (uvar 1)
                      (abstract-type
                        #"list" #"List"
                        (varargs list (abstract-type #"prim" #"Bytes" (empty))))))))
        (new-test-case #"unify (1 -> 2)=(Bytes -> Int) 1=Bytes,2=Int"
          (check-unify
            (varargs list
              (eq-constraint
                (constrain-fun-type (varargs list (constrain-uvar (uvar 1))) (constrain-uvar (uvar 2)))
                (constrain-fun-type (varargs list (constrain-abstract-type #"prim" #"Bytes" (empty)))
                                    (constrain-abstract-type #"prim" #"Int" (empty)))))
            (varargs list
              (tuple2 (uvar 1)
                      (abstract-type #"prim" #"Bytes" (empty)))
              (tuple2 (uvar 2)
                      (abstract-type #"prim" #"Int" (empty))))))

        (new-test-case #"unify (1=2)"
          (check-not-unify
            (varargs list
              (eq-constraint
                (constrain-uvar (uvar 1))
                (constrain-uvar (uvar 2))))))
        (new-test-case #"unify (1=2),(2=A) 1=A"
          (check-unify
            (varargs list
              (eq-constraint
                (constrain-uvar (uvar 1))
                (constrain-uvar (uvar 2)))
              (eq-constraint
                (constrain-uvar (uvar 2))
                (constrain-var-type #"A")))
            (varargs list
              (tuple2 (uvar 1)
                      (var-type #"A")))))

        (new-test-case #"unify 1=(List 1)"
          (check-not-unify
            (varargs list
              (eq-constraint
                (constrain-uvar (uvar 1))
                (constrain-abstract-type #"list" #"List"
                  (varargs list (constrain-uvar (uvar 1))))))))))))
