#:module (intermediate-expression)
#:import {
  (list)
  (maybe)
  (prim)
  (top-level-name)
  (types)
  (variant-info)
  (yaspl math-operations)
  (yaspl var)
}
(export
  (#:types Expression IntCaseClause BytesCaseClause VariantCaseClause
           DefaultCaseClause)
  (#:values int-literal boolean-literal
            local-var-expr global-var-expr if-expr
            begin-expr create-closure-expr call-closure-expr call-function-expr
            let-expr prim-comparison-bin-op prim-numeric-bin-op prim-logical-bin-op
            prim-logical-unary-op
            bytes-set!-expr bytes-ref-expr bytes-length-expr
            no-op-cast-op make-variant-expr variant-field-ref-expr
            halt-expr join-point-expr join-expr
            int-case-expr bytes-case-expr variant-case-expr
            int-case-clause bytes-case-clause variant-case-clause default-case-clause)
  (#:patterns int-literal boolean-literal local-var-expr global-var-expr if-expr
              begin-expr create-closure-expr call-closure-expr call-function-expr
              bytes-length-expr bytes-ref-expr bytes-set!-expr
              let-expr prim-numeric-bin-op prim-comparison-bin-op prim-logical-bin-op
              prim-logical-unary-op no-op-cast-op make-variant-expr variant-field-ref-expr
              halt-expr join-point-expr join-expr
              int-case-expr bytes-case-expr variant-case-expr
              int-case-clause bytes-case-clause variant-case-clause default-case-clause))
(types
  (define-type Expression
    (int-literal [v : Int])
    (boolean-literal [v : Boolean])
    (local-var-expr [v : Var])
    (global-var-expr [v : TopLevelName])
    (if-expr [cond : Expression] [true : Expression] [false : Expression])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression])
    (create-closure-expr [fun-name : TopLevelName] [args : (List Expression)])
    (call-closure-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)])
    (call-function-expr [tail-position : Boolean] [fun-name : TopLevelName] [args : (List Expression)])
    (let-expr [name : Var] [expr : Expression] [body : Expression])
    (variant-case-expr
      [expr : Expression]
      [clause : (List VariantCaseClause)]
      [default : (Maybe DefaultCaseClause)])
    (int-case-expr
      [expr : Expression]
      [clause : IntCaseClause]
      [default : DefaultCaseClause])
    (bytes-case-expr
      [expr : Expression]
      [clause : BytesCaseClause]
      [default : DefaultCaseClause])
    (bytes-length-expr [bytes : Expression])
    (bytes-ref-expr [bytes : Expression] [offset : Expression])
    (bytes-set!-expr [bytes : Expression] [offset : Expression] [value : Expression])
    (prim-numeric-bin-op [op : NumericBinOp] [left : Expression] [right : Expression])
    (prim-comparison-bin-op [op : ComparisonBinOp] [left : Expression] [right : Expression])
    (prim-logical-bin-op [op : LogicalBinOp] [left : Expression] [right : Expression])
    (prim-logical-unary-op [op : LogicalUnaryOp] [expr : Expression])
    (make-variant-expr [info : VariantConstructionInfo] [fields : (List Expression)])
    (variant-field-ref-expr [expr : Expression] [index : Int] [info : VariantDestructionInfo])
    (no-op-cast-op [src-type : Type] [dest-type : Type] [v : Expression])
    (halt-expr)
    (join-point-expr
      [join-var : Var]
      [join-expr : Expression]
      [body : Expression])
    (join-expr [join-var : Var]))

  (define-type DefaultCaseClause
    (default-case-clause [expr : Expression]))
  (define-type VariantCaseClause
    (variant-case-clause
      [info : VariantDestructionInfo]
      [fields : (List Var)]
      [expr : Expression]))
  (define-type IntCaseClause
    (int-case-clause [val : Int] [expr : Expression]))
  (define-type BytesCaseClause
    (bytes-case-clause [name : TopLevelName] [expr : Expression])))
