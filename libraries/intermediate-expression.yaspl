#:module (intermediate-expression)
#:import {
  (list)
  (prim)
  (types)
  (yaspl math-operations)
  (yaspl var)
}
(export
  #:types (Expression CaseClause Pattern)
  #:values (int-literal boolean-literal
            local-var-expr global-var-expr if-expr
            begin-expr create-closure-expr call-closure-expr array-expr
            let-expr case-expr case-clause
            bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern
            prim-comparison-bin-op prim-numeric-bin-op prim-logical-bin-op
            array-set!-expr array-ref-expr array-length-expr make-array-expr
            no-op-cast-op)
  #:patterns (int-literal boolean-literal local-var-expr global-var-expr if-expr
              begin-expr create-closure-expr call-closure-expr array-expr
              make-array-expr array-length-expr array-ref-expr array-set!-expr
              let-expr case-expr case-clause
              bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern
              prim-numeric-bin-op prim-comparison-bin-op prim-logical-bin-op no-op-cast-op))
(types
  (define-type Expression
    (int-literal [v : Int])
    (boolean-literal [v : Boolean])
    (local-var-expr [v : Var])
    (global-var-expr [v : Bytes])
    (if-expr [cond : Expression] [true : Expression] [false : Expression])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression] )
    (create-closure-expr [fun-name : Bytes] [args : (List Expression)])
    (call-closure-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)])
    (let-expr [name : Var] [expr : Expression] [body : Expression])
    (case-expr [expr : Expression] [clauses : (List CaseClause)])
    (array-expr [args : (List Expression)])
    (make-array-expr [size : Expression] [value : Expression])
    (array-length-expr [array : Expression])
    (array-ref-expr [array : Expression] [offset : Expression])
    (array-set!-expr [array : Expression] [offset : Expression] [value : Expression])
    (prim-numeric-bin-op [op : NumericBinOp] [left : Expression] [right : Expression])
    (prim-comparison-bin-op [op : ComparisonBinOp] [left : Expression] [right : Expression])
    (prim-logical-bin-op [op : LogicalBinOp] [left : Expression] [right : Expression])
    (no-op-cast-op [src-type : Type] [dest-type : Type] [v : Expression]))

  (define-type CaseClause
    (case-clause [pattern : Pattern] [expr : Expression]))

  (define-type Pattern
    (bytes-pattern [name : Bytes])
    (int-pattern [v : Int])
    (variable-pattern [v : Var])
    (ignore-pattern)
    (abstraction-pattern [name : Bytes] [patterns : (List Pattern)])))
