#:module (module-signature-serialization)
#:import {
  (bytes) {
    #:values
      bytes=?
  }
  (dict) {
    #:types
      Dict
    #:values
      dict-add
      dict-map
      make-dict
  }
  (either) {
    #:types
      Either
    #:values
      left
      right
    #:patterns
      left
      right
  }
  (list) {
    #:types
      List
    #:values
      extract-justs
      list
      map
    #:patterns
      cons
      empty
  }
  (maybe) {
    #:patterns
      just
      nothing
  }
  (module-name) {
    #:values
      mod-name->sexp
      sexp->mod-name
  }
  (module-signature) {
    #:types
      ModuleSignature
      PatternSignature
    #:values
      module-signature
      pattern-signature
      type-signature
    #:patterns
      module-signature
      pattern-signature
      type-signature
  }
  (prim) {
    #:types
      Bytes
    #:values
      panic
  }
  (sexp-parser) {
    #:types
      Sexp
    #:values
      bytes-sexp
      node
      number-sexp
      parse-single-sexp
      symbol-sexp
    #:patterns
      bytes-sexp
      node
      number-sexp
      symbol-sexp
  }
  (sexp-printer) {
    #:values
      print-sexp
  }
  (types) {
    #:types
      Type
    #:values
      sexp->type
      type->sexp
  }
}
(export
  #:types ()
  #:values (serialize-module-signature deserialize-module-signature)
  #:patterns ())
(types)

(define (serialize-module-signature [sig : ModuleSignature]) : Bytes
  (case sig
    [(module-signature name values patterns type-bindings value-types known-functions)
     (print-sexp
       (node
         (varargs list
           (mod-name->sexp name)
           (node (dict-map values (lambda ([value : Bytes] [fun-name : Bytes])
                                    (node (varargs list
                                            (bytes-sexp value)
                                            (bytes-sexp fun-name))))))
           (node (dict-map patterns (lambda ([value : Bytes] [sig : PatternSignature])
                                      (case sig
                                        [(pattern-signature variant-name
                                                            tag type-vars self-type field-types
                                                            (type-signature variant-names))
                                         (node (varargs list
                                                 (bytes-sexp value)
                                                 (bytes-sexp variant-name)
                                                 (number-sexp tag)
                                                 (node (map symbol-sexp type-vars))
                                                 (type->sexp self-type)
                                                 (node (map type->sexp field-types))
                                                 (node (map bytes-sexp variant-names))))]))))
           (node (dict-map type-bindings
                           (lambda ([name : Bytes] [type : Type])
                             (node (varargs list (bytes-sexp name)
                                                 (type->sexp type))))))
           (node (dict-map value-types
                           (lambda ([value : Bytes] [type : Type])
                             (node (varargs list (bytes-sexp value)
                                                 (type->sexp type))))))
           (node (dict-map known-functions
                           (lambda ([value : Bytes] [fun-name : Bytes])
                             (node (varargs list
                                     (bytes-sexp value)
                                     (bytes-sexp fun-name)))))))))]))

;; TODO make a better name for this
(define (value-exports->dict [value-exports : (List Sexp)] [acc : (Dict Bytes Bytes)])
  : (Dict Bytes Bytes)
  (case value-exports
    [(empty) acc]
    [(cons (node (cons (bytes-sexp k) (cons (bytes-sexp v) (empty)))) value-exports)
     (value-exports->dict value-exports (dict-add acc k v))]
    [_
     (panic #"Bad value-exports")]))

(define (type-exports->dict [type-exports : (List Sexp)] [acc : (Dict Bytes Type)])
  : (Dict Bytes Type)
  (case type-exports
    [(empty) acc]
    [(cons (node (cons (bytes-sexp k) (cons type (empty)))) type-exports)
     (case (sexp->type type)
       [(just type)
        (type-exports->dict type-exports (dict-add acc k type))]
       [(nothing)
        (panic #"Bad type-exports")])]
    [_
     (panic #"Bad type-exports")]))

(define (parse-type-var-sexp [s : Sexp]) : Bytes
  (case s
    [(symbol-sexp v) v]
    [_ (panic #"Not a valid type-var")]))

(define (parse-variant-name [s : Sexp]) : Bytes
  (case s
    [(bytes-sexp v) v]
    [_ (panic #"Not a valid variant-name")]))

(define (pattern-exports->dict
          [pattern-exports : (List Sexp)]
          [acc : (Dict Bytes PatternSignature)])
  : (Dict Bytes PatternSignature)
  (case pattern-exports
    [(empty) acc]
    [(cons (node (cons (bytes-sexp export-name)
                       (cons (bytes-sexp variant-name)
                             (cons (number-sexp variant-tag)
                                   (cons (node type-var-sexps)
                                         (cons self-type-sexp
                                               (cons (node field-type-sexps)
                                                     (cons (node variant-names) (empty)))))))))
           pattern-exports)
     (case (sexp->type self-type-sexp)
       [(just self-type)
        (case (extract-justs (map sexp->type field-type-sexps))
          [(just field-types)
           (pattern-exports->dict
             pattern-exports
             (dict-add acc export-name
                       (pattern-signature
                         variant-name
                         variant-tag
                         (map parse-type-var-sexp type-var-sexps)
                         self-type
                         field-types
                         (type-signature (map parse-variant-name variant-names)))))]
          [(nothing) (panic #"Not a valid pattern-exports")])]
       [(nothing) (panic #"Not a valid pattern-exports")])]
    [_ (panic #"Not a valid pattern-exports")]))


(define (deserialize-module-signature [bytes : Bytes]) : (Either Bytes ModuleSignature)
  (case (parse-single-sexp bytes)
    [(left v) (left v)]
    [(right (node (cons name
                        (cons (node value-exports)
                              (cons (node pattern-exports)
                                    (cons (node type-bindings)
                                          (cons (node value-types)
                                                (cons (node known-functions) (empty)))))))))
     (case (sexp->mod-name name)
       [(nothing) (left #"Bad mod-name")]
       [(just name)
        (right
          (module-signature
            name
            (value-exports->dict value-exports (make-dict bytes=?))
            (pattern-exports->dict pattern-exports (make-dict bytes=?))
            (type-exports->dict type-bindings (make-dict bytes=?))
            (type-exports->dict value-types (make-dict bytes=?))
            (value-exports->dict known-functions (make-dict bytes=?))))])]
    [(right _)
     (left #"Unexpected sexp shape")]))
