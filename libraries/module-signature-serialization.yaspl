(module module-signature-serialization
  (import
    (module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns (module-signature))
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (dict make-dict)
    (bytes bytes=?)
    (list
      #:types ()
      #:values (list empty)
      #:patterns (cons empty))
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (sexp-printer print-sexp)
    (sexp-parser
      #:types ()
      #:values (parse-sexp node bytes-sexp)
      #:patterns (node bytes-sexp)))
  (export
    #:types ()
    #:values (serialize-module-signature deserialize-module-signature)
    #:patterns ())
  (types)

  (define (serialize-module-signature [sig : ModuleSignature]) : Bytes
    (case sig
      [(module-signature name values patterns)
       (print-sexp
         (node
           (varargs list
             (bytes-sexp name)
             (node (empty))
             (node (empty)))))]))

  
  (define (deserialize-module-signature [bytes : Bytes]) : (Either Bytes ModuleSignature)
    (case (parse-sexp bytes)
      [(left v) (left v)]
      [(right (node (cons (bytes-sexp name) (cons a (cons b (empty))))))
       (right
         (module-signature
           name
           (make-dict bytes=?)
           (make-dict bytes=?)))]
      [(right _)
       (left #"Unexpected sexp shape")])))
