#:module (module-signature-serialization)
#:import {
  (bytes)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (sexp-parser)
  (sexp-printer)
  (top-level-name)
  (types)
}
(export
  #:types ()
  #:values (serialize-module-signature deserialize-module-signature)
  #:patterns ())
(types)

(define (serialize-module-signature [sig : ModuleSignature]) : Bytes
  (case sig
    [(module-signature name values patterns type-bindings)
     (print-sexp
       (node
         (varargs list
           (mod-name->sexp name)
           (node (dict-map values (lambda ([value : Bytes] [sig : ValueSignature]) : Sexp
                                    (case sig
                                      [(value-signature type fun-name trivial-closure (just _))
                                       (panic #"NYI: Cannot serialize inlineable values")]
                                      [(value-signature type fun-name trivial-closure (nothing))
                                       (node (varargs list
                                               (bytes-sexp value)
                                               (type->sexp type)
                                               (top-level-name->sexp fun-name)
                                               (case trivial-closure
                                                 [(nothing) (boolean-sexp #f)]
                                                 [(just name) (top-level-name->sexp name)])))]))))
           (node (dict-map patterns (lambda ([value : Bytes] [sig : PatternSignature])
                                      (case sig
                                        [(pattern-signature variant-name
                                                            tag type-vars self-type field-types
                                                            (type-signature variant-names))
                                         (node (varargs list
                                                 (bytes-sexp value)
                                                 (bytes-sexp variant-name)
                                                 (number-sexp tag)
                                                 (node (map symbol-sexp type-vars))
                                                 (type->sexp self-type)
                                                 (node (map type->sexp field-types))
                                                 (node (map bytes-sexp variant-names))))]))))
           (node (dict-map type-bindings
                           (lambda ([name : Bytes] [type : Type])
                             (node (varargs list (bytes-sexp name)
                                                 (type->sexp type)))))))))]))

(define (sexp->trivial-closure [s : Sexp]) : (Maybe TopLevelName)
  (case s
    [(boolean-sexp _) (nothing)]
    [_
     (case (sexp->top-level-name s)
       [(just t) (just t)]
       [_ (panic #"Bad trivial closure")])]))

(define (value-exports->dict [value-exports : (List Sexp)] [acc : (Dict Bytes ValueSignature)])
  : (Dict Bytes ValueSignature)
  (case value-exports
    [(empty) acc]
    [(cons (node (cons (bytes-sexp k)
                       (cons type
                             (cons top-level-name
                                   (cons trivial-closure (empty)))))) value-exports)
     (case (sexp->type type)
       [(just type)
        (case (sexp->top-level-name top-level-name)
          [(just top-level-name)
           (value-exports->dict
             value-exports
             (dict-add acc k (value-signature type top-level-name (sexp->trivial-closure trivial-closure)
                                              (nothing))))]
          [(nothing)
           (panic #"Bad value-exports")])]
        [(nothing)
         (panic #"Bad value-exports")])]
    [_
     (panic #"Bad value-exports")]))

(define (type-exports->dict [type-exports : (List Sexp)] [acc : (Dict Bytes Type)])
  : (Dict Bytes Type)
  (case type-exports
    [(empty) acc]
    [(cons (node (cons (bytes-sexp k) (cons type (empty)))) type-exports)
     (case (sexp->type type)
       [(just type)
        (type-exports->dict type-exports (dict-add acc k type))]
       [(nothing)
        (panic #"Bad type-exports")])]
    [_
     (panic #"Bad type-exports")]))

(define (parse-type-var-sexp [s : Sexp]) : Bytes
  (case s
    [(symbol-sexp v) v]
    [_ (panic #"Not a valid type-var")]))

(define (parse-variant-name [s : Sexp]) : Bytes
  (case s
    [(bytes-sexp v) v]
    [_ (panic #"Not a valid variant-name")]))

(define (pattern-exports->dict
          [pattern-exports : (List Sexp)]
          [acc : (Dict Bytes PatternSignature)])
  : (Dict Bytes PatternSignature)
  (case pattern-exports
    [(empty) acc]
    [(cons (node (cons (bytes-sexp export-name)
                       (cons (bytes-sexp variant-name)
                             (cons (number-sexp variant-tag)
                                   (cons (node type-var-sexps)
                                         (cons self-type-sexp
                                               (cons (node field-type-sexps)
                                                     (cons (node variant-names) (empty)))))))))
           pattern-exports)
     (case (sexp->type self-type-sexp)
       [(just self-type)
        (case (extract-justs (map sexp->type field-type-sexps))
          [(just field-types)
           (pattern-exports->dict
             pattern-exports
             (dict-add acc export-name
                       (pattern-signature
                         variant-name
                         variant-tag
                         (map parse-type-var-sexp type-var-sexps)
                         self-type
                         field-types
                         (type-signature (map parse-variant-name variant-names)))))]
          [(nothing) (panic #"Not a valid pattern-exports")])]
       [(nothing) (panic #"Not a valid pattern-exports")])]
    [_ (panic #"Not a valid pattern-exports")]))


(define (deserialize-module-signature [bytes : Bytes]) : (Either Bytes ModuleSignature)
  (case (parse-single-sexp bytes)
    [(left v) (left v)]
    [(right (node (cons name
                        (cons (node value-exports)
                              (cons (node pattern-exports)
                                    (cons (node type-bindings)
                                          (empty)))))))
     (case (sexp->mod-name name)
       [(nothing) (left #"Bad mod-name")]
       [(just name)
        (right
          (module-signature
            name
            (value-exports->dict value-exports (make-dict bytes-cmp))
            (pattern-exports->dict pattern-exports (make-dict bytes-cmp))
            (type-exports->dict type-bindings (make-dict bytes-cmp))))])]
    [(right _)
     (left #"Unexpected sexp shape")]))
