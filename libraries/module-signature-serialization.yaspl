(module module-signature-serialization
  (import
    (module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns (module-signature))
    (prim
      #:types (Bytes Int)
      #:values ()
      #:patterns ())
    (dict
      #:types (Dict)
      #:values (make-dict dict-map dict-add)
      #:patterns ())
    (bytes bytes=?)
    (types
      #:types (Type)
      #:values (type->sexp sexp->type)
      #:patterns ())
    (list
      #:types (List)
      #:values (list empty)
      #:patterns (cons empty))
    (maybe
      #:types (Maybe)
      #:values ()
      #:patterns (just nothing))
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (sexp-printer print-sexp)
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexp node bytes-sexp number-sexp boolean-sexp)
      #:patterns (node bytes-sexp number-sexp boolean-sexp)))
  (export
    #:types ()
    #:values (serialize-module-signature deserialize-module-signature)
    #:patterns ())
  (types)

  (define (serialize-module-signature [sig : ModuleSignature]) : Bytes
    (case sig
      [(module-signature name values patterns type-bindings value-types known-functions)
       (print-sexp
         (node
           (varargs list
             (bytes-sexp name)
             (node (dict-map values (lambda ([value : Bytes] [fun-name : Bytes])
                                      (node (varargs list
                                              (bytes-sexp value)
                                              (bytes-sexp fun-name))))))
             (node (dict-map patterns (lambda ([value : Bytes] [num-spots : Int])
                                        (node (varargs list
                                                (bytes-sexp value)
                                                (number-sexp num-spots))))))
             (node (dict-map type-bindings
                             (lambda ([name : Bytes] [type : Type])
                               (node (varargs list (bytes-sexp name)
                                                   (type->sexp type))))))
             (node (dict-map value-types
                             (lambda ([value : Bytes] [type : Type])
                               (node (varargs list (bytes-sexp value)
                                                   (type->sexp type))))))
             (node (dict-map known-functions
                             (lambda ([value : Bytes] [fun-name : Type])
                               (node (varargs list
                                       (bytes-sexp value)
                                       (bytes-sexp fun-name)))))))))]))

  ;; TODO make a better name for this
  (define (value-exports->dict [value-exports : (List Sexp)] [acc : (Dict Bytes Bytes)])
    : (Dict Bytes Bytes)
    (case value-exports
      [(empty) acc]
      [(cons (node (cons (bytes-sexp k) (cons (bytes-sexp v) (empty)))) value-exports)
       (value-exports->dict value-exports (dict-add acc k v))]))

  (define (type-exports->dict [type-exports : (List Sexp)] [acc : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case type-exports
      [(empty) acc]
      [(cons (node (cons (bytes-sexp k) (cons type (empty)))) type-exports)
       (case (sexp->type type)
         [(just type)
          (type-exports->dict type-exports (dict-add acc k type))])]))

  (define (pattern-exports->dict [pattern-exports : (List Sexp)] [acc : (Dict Bytes Int)])
    : (Dict Bytes Int)
    (case pattern-exports
      [(empty) acc]
      [(cons (node (cons (bytes-sexp k) (cons (number-sexp v) (empty)))) pattern-exports)
       (pattern-exports->dict pattern-exports (dict-add acc k v))]))


  (define (deserialize-module-signature [bytes : Bytes]) : (Either Bytes ModuleSignature)
    (case (parse-sexp bytes)
      [(left v) (left v)]
      [(right (node (cons (bytes-sexp name)
                          (cons (node value-exports)
                                (cons (node pattern-exports)
                                      (cons (node type-bindings)
                                            (cons (node value-types)
                                                  (cons (node known-functions) (empty)))))))))
       (right
         (module-signature
           name
           (value-exports->dict value-exports (make-dict bytes=?))
           (pattern-exports->dict pattern-exports (make-dict bytes=?))
           (type-exports->dict type-bindings (make-dict bytes=?))
           (type-exports->dict value-types (make-dict bytes=?))
           (value-exports->dict known-functions (make-dict bytes=?))))]
      [(right _)
       (left #"Unexpected sexp shape")])))
