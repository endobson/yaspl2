#:module (module-signature-serialization)
#:import {
  (bytes)
  (data lifted-primitives)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (sexp-parser)
  (sexp-printer)
  (top-level-name)
  (types)
  (variant-info)
}
(export
  (#:values serialize-module-signature deserialize-module-signature))
(types)

(define (serialize-module-signature [sig : ModuleSignature]) : Bytes
  (case sig
    [(module-signature name values patterns type-bindings static-bindings top-level-sigs)
     (print-sexp
       (node/p
         (varargs list
           (mod-name->sexp name)
           (node/p (dict-map values (lambda ([value : Bytes] [sig : ValueSignature]) : Sexp/P
                                      (case sig
                                        [(value-signature type fun-name)
                                         (node/p (varargs list
                                                   (bytes-sexp/p value)
                                                   (type->sexp type)
                                                   (top-level-name->sexp fun-name)))]))))
           (node/p (dict-map patterns
                             (lambda ([value : Bytes] [sig : PatternSignature])
                               (case sig
                                 [(pattern-signature source info)
                                  (node/p (varargs list
                                            (bytes-sexp/p value)
                                            (source-variant-info->sexp source)
                                            (variant-destruction-info->sexp info)))]))))
           (node/p (dict-map type-bindings
                             (lambda ([name : Bytes] [type : Type])
                               (node/p (varargs list (bytes-sexp/p name)
                                                     (type->sexp type))))))
           (node/p (dict-map static-bindings
                             (lambda ([name : Bytes] [sig : StaticSignature])
                               (case sig
                                 [(varargs-signature type-vars arg-type return-type cons-name
                                                     empty-name)
                                  (node/p (varargs list
                                            (bytes-sexp/p name)
                                            (node/p (map symbol-sexp/p type-vars))
                                            (type->sexp arg-type)
                                            (type->sexp return-type)
                                            (top-level-name->sexp cons-name)
                                            (top-level-name->sexp empty-name)))]))))
           (node/p (dict-map top-level-sigs
                             (lambda ([name : TopLevelName] [sig : TopLevelSignature]) : Sexp/P
                               (case sig
                                 [(top-level-signature trivial-closure inlineable)
                                  ;; TODO correctly serialize inlineable values
                                  (node/p (varargs list
                                            (top-level-name->sexp name)
                                            (case trivial-closure
                                              [(nothing) (boolean-sexp/p #f)]
                                              [(just name) (top-level-name->sexp name)])
                                            (case inlineable
                                              [(nothing) (boolean-sexp/p #f)]
                                              [(just fun) (inlineable-function->sexp fun)])))])))))))]))

(define (inlineable-function->sexp [fun : InlineableFunction]) : Sexp/P
  (case fun
    [(hoas-linear-inlineable-function _)
     (panic #"Cannot inline hoas-linear inlineable functions")]
    [(variant-accessor-inlineable-function index info)
     (node/p (varargs list (symbol-sexp/p #"variant-accessor")
                      (number-sexp/p index)
                      (variant-destruction-info->sexp info)))]
    [(zero-arg-constant-inlineable-function name)
     (node/p (varargs list (symbol-sexp/p #"zero-arg-constant") (top-level-name->sexp name)))]
    [(variant-constructor-inlineable-function (variant-construction-info name tag descriptor-name))
     (node/p (varargs list
               (symbol-sexp/p #"variant-constructor")
               (bytes-sexp/p name)
               (number-sexp/p (u8->s64 tag))
               (top-level-name->sexp descriptor-name)))]))

(define (source-variant-info->sexp [info : SourceVariantInfo]) : Sexp/P
  (match-define
    (source-variant-info variant-name mod-name type-name type-vars field-types variant-names)
    info)
  (node/p (varargs list
            (bytes-sexp/p variant-name)
            (mod-name->sexp mod-name)
            (bytes-sexp/p type-name)
            (node/p (map symbol-sexp/p type-vars))
            (node/p (map type->sexp field-types))
            (node/p (map bytes-sexp/p variant-names)))))

(define (variant-destruction-info->sexp [info : VariantDestructionInfo]) : Sexp/P
  (match-define (variant-destruction-info tag num-fields variant-tags) info)
  (node/p (varargs list
            (number-sexp/p (u8->s64 tag))
            (number-sexp/p num-fields)
            (node/p (map tag->sexp variant-tags)))))


(define (tag->sexp [l : LiftedU8]) : Sexp/P
  (match-define (lifted-u8 v) l)
  (number-sexp/p (u8->s64 v)))

(define (sexp->trivial-closure [s : Sexp]) : (Either Bytes (Maybe TopLevelName))
  (case s
    [(boolean-sexp _ _) (right (nothing))]
    [_
     (case (sexp->top-level-name s)
       [(just t) (right (just t))]
       [_ (left #"Bad trivial closure")])]))

(define (value-exports->dict [value-exports : (List Sexp)] [acc : (Dict Bytes ValueSignature)])
  : (Either Bytes (Dict Bytes ValueSignature))
  (case value-exports
    [(empty) (right acc)]
    [(cons (node (cons (bytes-sexp k _)
                       (cons type
                             (cons top-level-name (empty)))) _) value-exports)
     (case (sexp->type type)
       [(just type)
        (case (sexp->top-level-name top-level-name)
          [(just top-level-name)
           (value-exports->dict
             value-exports
             (dict-add acc k (value-signature type top-level-name)))]
          [(nothing)
           (left #"Bad value-exports")])]
        [(nothing)
         (left #"Bad value-exports")])]
    [_
     (left #"Bad value-exports")]))

(define (type-exports->dict [type-exports : (List Sexp)] [acc : (Dict Bytes Type)])
  : (Either Bytes (Dict Bytes Type))
  (case type-exports
    [(empty) (right acc)]
    [(cons (node (cons (bytes-sexp k _) (cons type (empty))) _) type-exports)
     (case (sexp->type type)
       [(just type)
        (type-exports->dict type-exports (dict-add acc k type))]
       [(nothing)
        (left #"Bad type-exports")])]
    [_
     (left #"Bad type-exports")]))

(define (parse-type-var-sexp [s : Sexp]) : (Either Bytes Bytes)
  (case s
    [(symbol-sexp v _) (right v)]
    [_ (left #"Not a valid type-var")]))

(define (static-exports->dict [static-exports : (List Sexp)] [acc : (Dict Bytes StaticSignature)])
  : (Either Bytes (Dict Bytes StaticSignature))
  (case static-exports
    [(empty) (right acc)]
    [(cons (node (cons (bytes-sexp name _)
                       (cons (node type-vars _)
                             (cons arg-type
                                   (cons return-type
                                         (cons cons-name
                                               (cons empty-name (empty))))))) _)
           static-exports)
     (case (extract-rights (map parse-type-var-sexp type-vars))
       [(left v) (left v)]
       [(right type-vars)
        (case (sexp->type arg-type)
          [(nothing) (left #"Not a valid static-exports")]
          [(just arg-type)
           (case (sexp->type return-type)
             [(nothing) (left #"Not a valid static-exports")]
             [(just return-type)
              (case (sexp->top-level-name cons-name)
                [(nothing) (left #"Not a valid static-exports")]
                [(just cons-name)
                 (case (sexp->top-level-name empty-name)
                   [(nothing) (left #"Not a valid static-exports")]
                   [(just empty-name)
                    (match-define sig
                      (varargs-signature type-vars arg-type return-type cons-name empty-name))
                    (static-exports->dict static-exports (dict-add acc name sig))])])])])])]
    [_
     (left #"Bad static-exports")]))


(define (parse-variant-name [s : Sexp]) : (Either Bytes Bytes)
  (case s
    [(bytes-sexp v _) (right v)]
    [_ (left #"Not a valid variant-name")]))

(define (parse-variant-tag [s : Sexp]) : (Either Bytes LiftedU8)
  (case s
    [(number-sexp v _) (right (lifted-u8 (u8 v)))]
    [_ (left #"Not a valid variant-name")]))


(define (pattern-exports->dict
          [pattern-exports : (List Sexp)]
          [acc : (Dict Bytes PatternSignature)])
  : (Either Bytes (Dict Bytes PatternSignature))
  (case pattern-exports
    [(empty) (right acc)]
    [(cons (node (cons (bytes-sexp export-name _) (cons source (cons info (empty)))) _)
           pattern-exports)
     (case (sexp->source-variant-info source)
       [(left v) (left v)]
       [(right source)
        (case (sexp->variant-destruction-info info)
          [(left v) (left v)]
          [(right info)
           (pattern-exports->dict
             pattern-exports
             (dict-add acc export-name (pattern-signature source info)))])])]
    [_ (left #"Not a valid pattern-exports")]))


(define (top-level-sigs->dict
          [top-level-sigs : (List Sexp)]
          [acc : (Dict TopLevelName TopLevelSignature)])
  : (Either Bytes (Dict TopLevelName TopLevelSignature))
  (case top-level-sigs
    [(empty) (right acc)]
    [(cons (node (cons name (cons trivial-closure (cons inline (empty)))) _) top-level-sigs)
     (case (sexp->top-level-name name)
       [(just name)
        (case (sexp->trivial-closure trivial-closure)
          [(left v) (left v)]
          [(right trivial-closure)
           (case (sexp->inlineable-function inline)
             [(left v) (left v)]
             [(right inline)
              (top-level-sigs->dict
                top-level-sigs
                (dict-add acc name (top-level-signature trivial-closure inline)))])])]
       [(nothing) (left #"Not a valid top-level-sigs")])]
    [_ (left #"Not a valid top-level-sigs")]))

(define (sexp->inlineable-function [sexp : Sexp]) : (Either Bytes (Maybe InlineableFunction))
  (case sexp
    [(boolean-sexp _ _) (right (nothing))]
    [(node (cons (symbol-sexp #"variant-accessor" _) (cons (number-sexp index _) (cons info (empty)))) _)
     (case (sexp->variant-destruction-info info)
       [(left v) (left v)]
       [(right info)
        (right (just (variant-accessor-inlineable-function index info)))])]
    [(node (cons (symbol-sexp #"zero-arg-constant" _) (cons name (empty))) _)
     (case (sexp->top-level-name name)
       [(nothing) (left #"Bad zero-arg-constant")]
       [(just name)
        (right (just (zero-arg-constant-inlineable-function name)))])]
    [(node (cons (symbol-sexp #"variant-constructor" _)
                 (cons (bytes-sexp name _)
                       (cons (number-sexp tag _)
                             (cons descriptor-name (empty))))) _)
     (case (sexp->top-level-name descriptor-name)
       [(nothing) (left #"Bad variant-constructor")]
       [(just descriptor-name)
        (right (just (variant-constructor-inlineable-function
                       (variant-construction-info name (u8 tag) descriptor-name))))])]
    [_ (left #"Bad inlineable-function")]))


(define (sexp->source-variant-info [sexp : Sexp])
  : (Either Bytes SourceVariantInfo)
  (case sexp

   [(node (cons (bytes-sexp variant-name _)
                (cons mod-name-sexp
                      (cons (bytes-sexp type-name _)
                            (cons (node type-var-sexps _)
                                  (cons (node field-type-sexps _)
                                        (cons (node variant-names _)
                                              (empty)))))))
           _)
    (case (sexp->mod-name mod-name-sexp)
      [(nothing) (left #"Bad mod-name")]
      [(just mod-name)
       (case (extract-justs (map sexp->type field-type-sexps))
         [(nothing) (left #"Not a valid pattern-exports")]
         [(just field-types)
          (case (extract-rights (map parse-type-var-sexp type-var-sexps))
            [(left v) (left v)]
            [(right type-vars)
             (case (extract-rights (map parse-variant-name variant-names))
               [(left v) (left v)]
               [(right variant-names)
                (right (source-variant-info variant-name mod-name type-name type-vars
                                            field-types variant-names))])])])])]
    [_ (left #"Not a valid source variant info")]))

(define (sexp->variant-destruction-info [sexp : Sexp])
  : (Either Bytes VariantDestructionInfo)
  (case sexp
    [(node (cons (number-sexp variant-tag _)
                 (cons (number-sexp num-fields _)
                       (cons (node variant-tags _)
                             (empty))))
           _)
      (case (extract-rights (map parse-variant-tag variant-tags))
        [(left v) (left v)]
        [(right variant-tags)
         (right (variant-destruction-info (u8 variant-tag) num-fields variant-tags))])]
    [_ (left #"Not a valid variant destruction info")]))


(define (deserialize-module-signature [sbytes : SourcedBytes]) : (Either Bytes ModuleSignature)
  (case (parse-single-sexp sbytes)
    [(left (sexp-error v _)) (left v)]
    [(right (node (cons name
                        (cons (node value-exports _)
                              (cons (node pattern-exports _)
                                    (cons (node type-bindings _)
                                          (cons (node static-bindings _)
                                                (cons (node top-level-sigs _)
                                                      (empty)))))))
                  _))
     (case (sexp->mod-name name)
       [(nothing) (left #"Bad mod-name")]
       [(just name)
        (case (value-exports->dict value-exports (make-dict bytes-cmp))
          [(left v) (left v)]
          [(right value-exports)
           (case (pattern-exports->dict pattern-exports (make-dict bytes-cmp))
             [(left v) (left v)]
             [(right pattern-exports)
              (case (type-exports->dict type-bindings (make-dict bytes-cmp))
                [(left v) (left v)]
                [(right type-exports)
                 (case (static-exports->dict static-bindings (make-dict bytes-cmp))
                   [(left v) (left v)]
                   [(right static-exports)
                    (case (top-level-sigs->dict top-level-sigs (make-dict top-level-name-cmp))
                      [(left v) (left v)]
                      [(right top-level-sigs)
                       (right
                         (module-signature
                           name
                           value-exports
                           pattern-exports
                           type-exports
                           static-exports
                           top-level-sigs))])])])])])])]
    [(right _)
     (left #"Unexpected sexp shape")]))
