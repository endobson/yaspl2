#:module (grammar-parser)
#:import {
  (bytes)
  (data lifted-primitives)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (prim)
  (sexp-parser)
}
(export
  (#:types)
  (#:values parse-grammar run-grammar run-exprs run-expr run-non-terminal)
  (#:patterns))
(types
  (define-type ParsedGrammar
    (parsed-grammar
      [rules : (List RawGrammarRule)]))
  (define-type RawGrammarRule
    (raw-grammar-full-rule [name : Bytes] [contents : RawGrammarExpr])
    (raw-grammar-sub-rule [name : Bytes] [sub-name : Bytes] [default : Boolean] [contents : RawGrammarExpr]))
  (define-type RawGrammarExprs
    (cons-rgexpr [head : RawGrammarExpr] [tail : RawGrammarExprs])
    (repeating-end-rgexpr [non-terminal : Bytes])
    (repeating-all-but-end-rgexpr [non-terminal-rep : Bytes] [non-terminal-end : Bytes])
    (empty-end-rgexpr))
  (define-type RawGrammarExpr
    (specific-keyword-rgexpr [kw : Bytes])
    (specific-symbol-rgexpr [sym : Bytes])
    (symbol-rgexpr)
    (number-rgexpr)
    (bytes-rgexpr)
    (boolean-rgexpr)
    (non-terminal-rgexpr [name : Bytes])
    (node-rgexpr [body : RawGrammarExprs])
    (bracket-node-rgexpr [body : RawGrammarExprs])
    (brace-node-rgexpr [body : RawGrammarExprs]))



  (define-type JoinedGrammarRule
    (solo-rule [exprs : RawGrammarExpr])
    (multi-rule
      [parts : (List RawGrammarExpr)]
      [default : (Maybe RawGrammarExpr)]))


  (define-type ParsedTree
    (parsed-non-terminal [rule-name : Bytes] [sub-rule : Bytes] [parts : (List ParsedTree)])
    (parsed-symbol [val : Bytes])
    (parsed-bytes [val : Bytes])
    (parsed-number [val : Int])
    (parsed-boolean [val : Boolean])
    (parsed-repeated [val : (List ParsedTree)]))

  (define-type ChoiceParser
   (no-choice-parser [parser : Parser])
   (split-choice-parser
     [symbol-rule : Parser]
     [number-rule : Parser]
     [keyword-rule : Parser]
     [boolean-rule : Parser]
     [node-rule : NodeChoiceParser]
     [brace-node-rule : NodeChoiceParser]
     [bracket-node-rule : NodeChoiceParser]))
  (define-type NodeChoiceParser
    (node-choice-parser
      [specifics : (Dict Bytes Parser)]
      [default : Parser]))

  (define-type Parser
    (specific-keyword-parser [kw : Bytes])
    (specific-symbol-parser [sym : Bytes])
    (symbol-parser)
    (number-parser)
    (bytes-parser)
    (boolean-parser)
    (node-parser [body : MultiParser])
    (bracket-node-parser [body : MultiParser])
    (brace-node-parser [body : MultiParser]))

  (define-type MultiParser
    (cons-multi-parser [head : RawGrammarExpr] [tail : RawGrammarExprs])
    (repeating-end-multi-parser [non-terminal : Bytes])
    (repeating-all-but-end-multi-parser [non-terminal-rep : Bytes] [non-terminal-end : Bytes])
    (empty-end-multi-parser)))

(define (parse-grammar [input : Bytes]) : (Either Bytes ParsedGrammar)
  (match-define lines (bytes-split input #"\n"))
  (match-define rule-lines (filter (lambda ([line : Bytes]) (> (bytes-length line) 0)) lines))
  (case (extract-rights (map parse-raw-grammar-rule rule-lines))
    [(left v) (left v)]
    [(right rules)
     (right (parsed-grammar rules))]))


(define (parse-raw-grammar-rule [input : Bytes]) : (Either Bytes RawGrammarRule)
  (case (parse-sexps (sourced-bytes (unnamed-source) input))
    [(left (sexp-error v _)) (left v)]
    [(right
       (source-span-annotated
         (cons (symbol-sexp rule-name _) (cons (symbol-sexp #"=" _) (cons expr (empty))))
         _))
     (case (parse-raw-grammar-expr expr)
       [(left v) (left v)]
       [(right exprs)
        (right (raw-grammar-full-rule rule-name exprs))])]
    [(right
       (source-span-annotated
         (cons (symbol-sexp rule-name _)
               (cons (symbol-sexp sub-name _)
                     (cons (keyword-sexp #"default" _)
                           (cons (symbol-sexp #"=" _)
                                 (cons expr (empty))))))
         _))
     (case (parse-raw-grammar-expr expr)
       [(left v) (left v)]
       [(right exprs)
        (right (raw-grammar-sub-rule rule-name sub-name #t exprs))])]
    [(right
       (source-span-annotated
         (cons (symbol-sexp rule-name _)
               (cons (symbol-sexp sub-name _)
                     (cons (symbol-sexp #"=" _)
                           (cons expr (empty)))))
         _))
     (case (parse-raw-grammar-expr expr)
       [(left v) (left v)]
       [(right exprs)
        (right (raw-grammar-sub-rule rule-name sub-name #f exprs))])]
    [(right _)
     (left (bytes-append (varargs list #"Unparsable rule: " input)))]))

(define (parse-raw-grammar-exprs [input : (List Sexp)]) : (Either Bytes RawGrammarExprs)
  (case input
    [(empty)
     (right (empty-end-rgexpr))]
    [(cons (symbol-sexp sym _) (cons (symbol-sexp #"..." _) (empty)))
     (right (repeating-end-rgexpr sym))]
    [(cons (symbol-sexp sym-rep _) (cons (symbol-sexp #"..." _) (cons (symbol-sexp sym-end _) (empty))))
     (right (repeating-all-but-end-rgexpr sym-rep sym-end))]
    [(cons expr exprs)
     (case (parse-raw-grammar-expr expr)
       [(left v) (left v)]
       [(right expr)
        (case (parse-raw-grammar-exprs exprs)
          [(left v) (left v)]
          [(right exprs)
           (right (cons-rgexpr expr exprs))])])]))

(define (parse-raw-grammar-expr [input : Sexp]) : (Either Bytes RawGrammarExpr)
  (case input
    [(symbol-sexp #"..." _) (left #"Stray ...")]
    [(symbol-sexp #"SYMBOL" _) (right (symbol-rgexpr))]
    [(symbol-sexp #"BYTES" _) (right (bytes-rgexpr))]
    [(symbol-sexp #"NUMBER" _) (right (number-rgexpr))]
    [(symbol-sexp #"BOOLEAN" _) (right (boolean-rgexpr))]
    [(symbol-sexp sym _)
     (if (all-caps-and-underscores? sym)
         (right (non-terminal-rgexpr sym))
         (right (specific-symbol-rgexpr sym)))]
    [(keyword-sexp kw _) (right (specific-keyword-rgexpr kw))]
    [(node sexps _)
     (case (parse-raw-grammar-exprs sexps)
       [(left v) (left v)]
       [(right exprs) (right (node-rgexpr exprs))])]
    [(bracket-node sexps _)
     (case (parse-raw-grammar-exprs sexps)
       [(left v) (left v)]
       [(right exprs) (right (bracket-node-rgexpr exprs))])]
    [(brace-node sexps _)
     (case (parse-raw-grammar-exprs sexps)
       [(left v) (left v)]
       [(right exprs) (right (brace-node-rgexpr exprs))])]
    [_
     (left #"Unknown form")]))

(define (all-caps-and-underscores? [sym : Bytes]) : Boolean
  (andmap
    (lambda ([char : LiftedInt]) : Boolean
      (case char
        [(lifted-int char)
         (or (= 95 char)
             (and (<= 65 char) (< char 91)))]))
    (build-list (bytes-length sym)
                (lambda ([index : Int])
                  (lifted-int (u8->s64 (bytes-ref sym index)))))))

(define (join-rules [rules : (List RawGrammarRule)]) : (Either Bytes (Dict Bytes JoinedGrammarRule))
  (left #"Join-rules NYI"))

(define (run-non-terminal [n : Bytes] [rules : (Dict Bytes JoinedGrammarRule)] [input : Sexp])
  : (Either Bytes ParsedTree)
  (case (dict-ref rules n)
    [(nothing) (left #"Error unbound nonterminal")]
    [(just (solo-rule expr))
     (case (run-expr expr rules input)
       [(left v) (left v)]
       [(right vals)
        (right (parsed-non-terminal n #"" vals))])]
    [(just (multi-rule _sub-rules _default))
     (left #"Multi-rule NYI")]))


(define (run-exprs [es : RawGrammarExprs] [rules : (Dict Bytes JoinedGrammarRule)]
                   [input : (List Sexp)])
  : (Either Bytes (List ParsedTree))
  (case es
    [(empty-end-rgexpr) (right (empty))]
    [_ (left #"Run-exprs NYI")]))

(define (run-expr [e : RawGrammarExpr] [rules : (Dict Bytes JoinedGrammarRule)] [input : Sexp])
  : (Either Bytes (List ParsedTree))
  (case e
    [(specific-keyword-rgexpr kw-exp)
     (case input
       [(keyword-sexp kw-actual _)
        (if (bytes=? kw-exp kw-actual)
            (right (empty))
            (left (bytes-append (varargs list #"Expected: #:" kw-exp #"; Found #:" kw-actual))))]
       [_ (left (bytes-append (varargs list #"Expected: #:" kw-exp #"; Found non keyword")))])]
    [(specific-symbol-rgexpr sym-exp)
     (case input
       [(symbol-sexp sym-actual _)
        (if (bytes=? sym-exp sym-actual)
            (right (empty))
            (left (bytes-append (varargs list #"Expected: " sym-exp #"; Found " sym-actual))))]
       [_ (left (bytes-append (varargs list #"Expected: " sym-exp #"; Found non symbol")))])]
    [(symbol-rgexpr)
     (case input
       [(symbol-sexp sym _)
        (right (cons (parsed-symbol sym) (empty)))]
       [_ (left #"Expected a symbol; Found non symbol")])]
    [(number-rgexpr)
     (case input
       [(number-sexp num _)
        (right (cons (parsed-number num) (empty)))]
       [_ (left #"Expected a number; Found non number")])]
    [(bytes-rgexpr)
     (case input
       [(bytes-sexp bytes _)
        (right (cons (parsed-bytes bytes) (empty)))]
       [_ (left #"Expected a bytes literal; Found non bytes literal")])]
    [(boolean-rgexpr)
     (case input
       [(boolean-sexp bool _)
        (right (cons (parsed-boolean bool) (empty)))]
       [_ (left #"Expected a boolean literal; Found non boolean literal")])]
    [(non-terminal-rgexpr name)
     (case (run-non-terminal name rules input)
       [(left v) (left v)]
       [(right tree) (right (cons tree (empty)))])]
    [(node-rgexpr exprs)
     (case input
       [(node sub-input _)
        (run-exprs exprs rules sub-input)]
       [_ (left #"Expected a node; Found non node")])]
    [(bracket-node-rgexpr exprs)
     (case input
       [(bracket-node sub-input _)
        (run-exprs exprs rules sub-input)]
       [_ (left #"Expected a bracket-node; Found non bracket-node")])]
    [(brace-node-rgexpr exprs)
     (case input
       [(brace-node sub-input _)
        (run-exprs exprs rules sub-input)]
       [_ (left #"Expected a brace-node; Found non brace-node")])]))

(define [R] (run-grammar [grammar : ParsedGrammar]
                         [root-rule : Bytes]
                         [input : Sexp]) : (Either Bytes ParsedTree)
  (match-define (parsed-grammar rules) grammar)
  (case (join-rules rules)
    [(left v) (left v)]
    [(right _joined-rules)
     (left #"NYI")]))
