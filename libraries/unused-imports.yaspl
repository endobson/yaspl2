(module unused-imports
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (bytes bytes=?)
    (source-language
      #:types (Module)
      #:values ()
      #:patterns (module))
    (validator
      #:types ()
      #:values (free-variables/definitions free-patterns/definitions free-types/module
                module-imported-pattern-environment module-imported-environment
                module-imported-type-environment)
      #:patterns ())
    (multi-set multi-set-keys)
    (tuples
      #:types (Tuple3)
      #:values (tuple3)
      #:patterns ())
    (set make-set set-remove-all set->list)
    (list
      #:types (List)
      #:values ()
      #:patterns ()))
  (export
    #:types ()
    #:values (unused-imports)
    #:patterns ())
  (types)


  (define (unused-imports [mod : Module]) : (Tuple3 (List Bytes) (List Bytes) (List Bytes))
    (case mod
      [(module name imports exports types defs)
       (tuple3
         (let ([env (multi-set-keys (module-imported-type-environment mod))])
           (let ([used-types (free-types/module mod (make-set bytes=?) (make-set bytes=?))])
             (set->list (set-remove-all env used-types))))
         (let ([env (multi-set-keys (module-imported-environment mod))])
           (let ([used-vars (free-variables/definitions defs (make-set bytes=?) (make-set bytes=?)) ])
             (set->list (set-remove-all env used-vars))))
         (let ([env (multi-set-keys (module-imported-pattern-environment mod))])
           (let ([used-patterns (free-patterns/definitions defs (make-set bytes=?) (make-set bytes=?)) ])
             (set->list (set-remove-all env used-patterns)))))])))
