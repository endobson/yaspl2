(module type-checker
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (intermediate-language
      #:types (Module)
      #:values ()
      #:patterns ())
    (types
      #:types (Type)
      #:values ()
      #:patterns ())
    (dict
      #:types (Dict)
      #:values ()
      #:patterns ())
    (list
      #:types (List)
      #:values ()
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values (nothing)
      #:patterns ()))
  (export
    #:types ()
    #:values (type-check)
    #:patterns ())
  (types
    (define-type Context
      (context
        [types (Dict Bytes Type)]
        [patterns (Dict Bytes PatternDescriptor)]
        [values (Dict Bytes Type)]))
    (define-type PatternDescriptor
      (pattern-descriptor
        [type-vars (List Bytes)]
        [input-type Type]
        [field-types (List Type)])))

  (define (type-check [module : Module]) : (Maybe Bytes)

    (nothing)))
