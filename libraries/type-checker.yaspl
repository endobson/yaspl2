#:module (type-checker)
#:import {
  (bytes)
  (data source-location)
  (dict)
  (either)
  (join-list)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (numbers)
  (prim)
  (prim-types)
  (set)
  (sexp-printer)
  (totality-checker)
  (tuples)
  {(type-checked-language)
    {#:types
      [Module tc:Module]
      [ValueExport tc:ValueExport]
    }
    {#:values
      [exports tc:exports]
      [module tc:module]
      [value-export tc:value-export]
    }
  }
  (type-checker-context)
  (type-unification)
  (types)
  {(yaspl languages expanded-datatypes-language)
    {#:types
      Block
      BlockDefinition
      CaseClause
      CondClause
      DatatypeDefinition
      Export
      Expression
      FunctionArg
      FunctionDefinition
      Imports
      Module
      Pattern
      StaticDefinition
    }
    {#:values
      case-clause-pattern
      function-arg-type
      function-definition-name
      pattern-source-span
    }
    {#:patterns
      abstraction-pattern
      annotated-expr
      app-expr
      begin-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      cond-clause
      cond-expr
      export
      exports
      function-arg
      function-definition
      identifier
      if-expr
      ignore-pattern
      imports
      int-literal
      int-pattern
      lambda-expr
      let-expr
      match-def
      module
      var-expr
      varargs-app-expr
      varargs-definition
      variable-pattern
      variant-accessor
      variant-constructor
    }
  }
}
(export
  (#:types TypeCheckErrors)
  (#:values type-check
            type-check/expr
            attempt-result-based-unification
            type-check-errors->bytes)
  (#:patterns type-check-error local-type-check-error))
(types
  (define-type TypeCheckErrors
    (type-check-errors
      [module-name : ModName]
      [errors : (List TypeCheckError)]))
  (define-type TypeCheckError
    (type-check-error
      [function : Bytes]
      [message : Bytes]
      [source : SourceSpan]))
  (define-type LocalTypeCheckError
    (local-type-check-error
      [message : Bytes]
      [source : SourceSpan])))

(define (type-check-errors->bytes [err : TypeCheckErrors]) : Bytes
  (match-define (type-check-errors name errors) err)
  (bytes-append
    (append (varargs list #"Typechecking failed for module: " (mod-name->bytes name) #"\n\n")
            (interleave (map type-check-error->bytes errors) #"\n"))))

(define (type-check-error->bytes [err : TypeCheckError]) : Bytes
  (match-define (type-check-error function message source) err)
  (bytes-append
    (varargs list
      #"Location: " (source-span->start-location-bytes source) #"\n"
      #"Function: " function #"\n"
      message
      #"\n")))

(define (imports->context [imports : Imports]) : Context
  (case imports
    [(imports values statics _)
     (context (dict-value-map values value-signature-type)
              (make-dict bytes-cmp)
              (dict-value-map
                statics
                (lambda ([sig : StaticSignature])
                  (case sig
                    [(varargs-signature type-vars arg-type return-type _ _)
                     (varargs-info type-vars arg-type return-type)]))))]))

(define (datatype-definitions->context [defs : (List DatatypeDefinition)]) : Context
  (context
    (dict-add-all
      (make-dict bytes-cmp)
      (map
        (lambda ([def : DatatypeDefinition])
          (case def
            [(variant-constructor variant-name type _ _ _ _)
             (tuple2 variant-name type)]
            [(variant-accessor name type _ _)
             (tuple2 name type)]))
        defs))
    (make-dict bytes-cmp)
    (make-dict bytes-cmp)))

(define (patterns->context [patterns : (Dict Bytes PatternSignature)]) : Context
  (context
    (make-dict bytes-cmp)
    (dict-value-map
      patterns
      (lambda ([sig : PatternSignature])
        (case sig
          [(pattern-signature
             (source-variant-info variant-name pat-mod-name pat-type-name type-vars
                                  input-field-types all-variants)
             _)
           (pattern-info variant-name all-variants pat-mod-name pat-type-name type-vars
                         input-field-types)])))
    (make-dict bytes-cmp)))

(define (function-definition->type [def : FunctionDefinition]) : Type
  (case def
    [(function-definition _ type-vars constraints args result-type _)
     (match-define arg-types (map function-arg-type args))
     (fun-type type-vars constraints arg-types result-type)]))

(define (function-definitions->context [defs : (List FunctionDefinition)])
  : Context
  (context
    (dict-add-all
      (make-dict bytes-cmp)
      (map
        (lambda ([def : FunctionDefinition]) : (Tuple2 Bytes Type)
          (tuple2 (function-definition-name def)
                  (function-definition->type def)))
        defs))
    (make-dict bytes-cmp)
    (make-dict bytes-cmp)))

(define (static-definitions->context [defs : (List StaticDefinition)])
  : Context
  (context
    (make-dict bytes-cmp)
    (make-dict bytes-cmp)
    (dict-add-all
      (make-dict bytes-cmp)
      (map
        (lambda ([def : StaticDefinition]) : (Tuple2 Bytes StaticInfo)
          (case def
            [(varargs-definition name type-vars arg-type return-type _ _)
             (tuple2 name (varargs-info type-vars arg-type return-type))]))
        defs))))

(define (create-context [mod : Module]) : Context
  (case mod
    [(module _ imports _ fun-defs datatypes patterns static-defs)
     (merge-contexts*
       (varargs list
         (imports->context imports)
         (function-definitions->context fun-defs)
         (static-definitions->context static-defs)
         (datatype-definitions->context datatypes)
         (patterns->context patterns)))]))

(define (type-check/definition
          [def : FunctionDefinition]
          [context : Context]) : (JoinList TypeCheckError)
  ;; TODO add constraints into environment
  (match-define (function-definition name _ _constraints args result body) def)
  (match-define add-name
    (lambda ([local : LocalTypeCheckError])
      (match-define (local-type-check-error msg src) local)
      (type-check-error name msg src)))

  (case (type-check/function-args args context)
    [(left errors)
     (map-jl add-name errors)]
    [(right context)
     (case (type-check/block body context (just result))
       [(left errors)
        (map-jl add-name errors)]
       [(right _) (empty-jl)])]))

(define (check-expected [type : Type] [expected : (Maybe Type)] [source : SourceSpan])
  : (Either (JoinList LocalTypeCheckError) Type)
  (case expected
    [(nothing) (right type)]
    [(just ex-type)
     (if (type=? type ex-type)
         (right type)
         (local-type-check-error*
           (bytes-append
             (varargs list
               #"Types don't match:\nGot: "
               (print-sexp (type->sexp type))
               #"\nExpected: "
               (print-sexp (type->sexp ex-type))))
           source))]))

(define (type-check/begin-exprs
          [exprs : (List Expression)]
          [context : Context]) : (JoinList LocalTypeCheckError)
  (concat-map-jl/list
    (lambda ([expr : Expression]) : (JoinList LocalTypeCheckError)
      (case (type-check/expr expr context (just (void-type)))
       [(left v) v]
       [(right _) (empty-jl)]))
    exprs))

(define (attempt-result-based-unification
          [type-vars : (List Bytes)]
          [result-type : Type]
          [expected-type : (Maybe Type)]
          [argument-types : (List Type)])
  : (List (Maybe Type))
  (match-define subst : (Maybe (Dict Bytes Type))
    (case expected-type
      [(nothing)
       (just (make-dict bytes-cmp))]
      [(just t)
       (attempt-unification type-vars result-type t)]))
  (match-define remaining-type-vars
    (set-difference
      (set-add-all (make-set bytes-cmp) type-vars)
      (case subst
        [(nothing) (make-set bytes-cmp)]
        [(just subst) (dict-keys subst)])))
  (map
    (lambda ([arg : Type]) : (Maybe Type)
      (case subst
        [(nothing) (nothing)]
        [(just subst)
         (if (check-fresh arg remaining-type-vars)
             (just (substitute-types arg subst))
             (nothing))]))
    argument-types))

(define (attempt-unification [type-vars : (List Bytes)] [t : Type] [final-type : Type])
  : (Maybe (Dict Bytes Type))
  (match-define (tuple2 type-var-uvars _s)
    (type-vars->unification-vars type-vars))
  (match-define constraints
    (cons
      (eq-constraint
        (type->constrainable final-type (make-dict bytes-cmp))
        (type->constrainable
          t
          (dict-add-all (make-dict bytes-cmp) type-var-uvars)))
      (tvar-star-kind-constraints type-var-uvars)))
  (case (unify constraints)
    [(nothing) (nothing)]
    [(just uvar-dict)
     (case (extract-justs
             (map
               (lambda ([t : (Tuple2 Bytes UnificationVar)]) : (Maybe (Tuple2 Bytes Type))
                 (case t
                   [(tuple2 tvar uvar)
                    (case (dict-ref uvar-dict uvar)
                      [(nothing) (nothing)]
                      [(just type) (just (tuple2 tvar type))])]))
               type-var-uvars))
       [(nothing)
        (nothing)]
       [(just tvar-types)
        (just (dict-add-all (make-dict bytes-cmp) tvar-types))])]))

(define (instantiates-as? [s : Type] [t : Type]) : Boolean
  (case s
    [(fun-type type-vars constraints args result)
     (case (attempt-unification type-vars (fun-type (empty) constraints args result) t)
       [(nothing) #f]
       [(just _) #t])]
    [_ (type=? s t)]))

(define (type-check/expr
          [expr : Expression]
          [context : Context]
          [expected-type : (Maybe Type)])
  : (Either (JoinList LocalTypeCheckError) Type)
  (case expr
    [(var-expr (identifier v src))
     (case (context-ref-value context v)
       [(nothing)
        (local-type-check-error* (bytes-append (varargs list #"Untyped variable: " v)) src)]
       [(just t) (check-expected t expected-type src)])]
    [(int-literal _ src)
     (check-expected (int-type) expected-type src)]
    [(bytes-literal _ src)
     (check-expected (bytes-type) expected-type src)]
    [(boolean-literal _ src)
     (check-expected (boolean-type) expected-type src)]
    [(if-expr c t f src)
     (match-define c-v (type-check/expr c context (just (boolean-type))))
     (match-define t-v (type-check/expr t context expected-type))
     (match-define f-v (type-check/expr f context expected-type))

     (add-errors
       (extract-errors c-v)
       (case (tuple2 t-v f-v)
         [(tuple2 (right t-type) (right f-type))
          (if (type=? t-type f-type)
              (right t-type)
              (local-type-check-error* #"Branches of if don't match" src))]
         [_
           (left (append-jl (extract-errors t-v) (extract-errors f-v)))]))]
    [(cond-expr clauses final _)
     (match-define final-result (type-check/block final context expected-type))
     (match-define clauses-results
       (concat-map-jl/list
         (lambda ([clause : CondClause]) : (JoinList LocalTypeCheckError)
           (match-define (cond-clause test body clause-src) clause)
           (match-define clause-result
             (add-errors
               (extract-errors (type-check/expr test context (just (boolean-type))))
               (type-check/block body context expected-type)))
           (case (tuple2 clause-result final-result)
             [(tuple2 (right clause-type) (right final-type))
              (if (type=? clause-type final-type)
                  (empty-jl)
                  (single-jl (local-type-check-error
                               #"Branch of cond clause doesn't match final clause"
                               clause-src)))]
             [_
              (extract-errors clause-result)]))
         clauses))
     (add-errors clauses-results final-result)]
    [(begin-expr void-exprs last-expr _)
     (match-define errors (type-check/begin-exprs void-exprs context))
     (add-errors errors (type-check/expr last-expr context expected-type))]
    [(let-expr name expr body _)
     (case (type-check/expr expr context (nothing))
       [(left v) (left v)]
       [(right expr-type)
        (type-check/block
          body
          (context-set-value context name expr-type)
          expected-type)])]
    [(annotated-expr type expr src)
     (case (type-check/expr expr context (just type))
       [(left v) (left v)]
       [(right actual-type)
        (check-expected actual-type expected-type src)])]
    [(lambda-expr args maybe-return-type body src)
     (case
       (ann (Either (JoinList LocalTypeCheckError) (Maybe Type))
         (case maybe-return-type
           [(just return-type)
            (right (just return-type))]
           [(nothing)
            (case expected-type
              [(nothing) (right (nothing))]
              [(just expected-type)
               (case expected-type
                 [(fun-type (empty) (empty) _ expected-body-type)
                  (right (just expected-body-type))]
                 [_
                  (local-type-check-error*
                    #"Lambda can only match monomorphic function type." src)])])]))
       [(left v) (left v)]
       [(right inner-expected-type)
        (case (type-check/function-args args context)
          [(left v) (left v)]
          [(right context)
           (case (type-check/block body context inner-expected-type)
             [(left v) (left v)]
             [(right return-type)
              (check-expected
               (fun-type (empty) (empty) (map function-arg-type args) return-type)
               expected-type
               src)])])])]
    [(app-expr _ op args src)
     (case (type-check/expr op context (nothing))
       [(left v) (left v)]
       [(right (fun-type type-vars (empty) arg-types result-type))
        (match-define expected-args
          (attempt-result-based-unification type-vars result-type expected-type arg-types))

        (case (zip args expected-args)
          [(nothing)
           (local-type-check-error*
             (bytes-append
               (varargs list
                 #"Cannot apply function: wrong number of arguments."
                 #"\nGot: " (integer->decimal-bytes (length args))
                 #"\nExpected: " (integer->decimal-bytes (length arg-types))))
             src)]
          [(just merged-args)
           (case
             (map/join-failure
               (lambda ([v : (Tuple2 Expression (Maybe Type))])
                 (match-define (tuple2 arg expected-type) v)
                 (type-check/expr arg context expected-type))
               merged-args)
             [(left v) (left v)]
             [(right actual-arg-types)
              (match-define (tuple2 type-var-uvars s)
                (type-vars->unification-vars type-vars))
              (match-define (tuple2 u _s) (uvar-source-next s))
              (match-define constraints
                  (cons
                    (eq-constraint
                      (type->constrainable
                        (fun-type (empty) (empty) arg-types result-type)
                        (dict-add-all (make-dict bytes-cmp) type-var-uvars))
                      (constrain-fun-type
                        (map (lambda ([arg-type : Type])
                               (type->constrainable arg-type (make-dict bytes-cmp)))
                             actual-arg-types)
                        (constrain-uvar u)))
                    (tvar-star-kind-constraints type-var-uvars)))
              (match-define constraints
                (case expected-type
                  [(nothing) constraints]
                  [(just t)
                   (cons
                     (eq-constraint
                       (constrain-uvar u)
                       (type->constrainable t (make-dict bytes-cmp)))
                     constraints)]))
              (case (unify constraints)
                [(nothing)
                 (local-type-check-error*
                   (bytes-append
                     (interleave
                       (map constraint->bytes constraints)
                       #"\n"))
                   src)]
                [(just uvar-dict)
                 (case (dict-ref uvar-dict u)
                   [(nothing)
                    (local-type-check-error* #"No binding for uvar in output of unification" src)]
                   [(just type)
                    (check-expected type expected-type src)])])])])]
       [(right t)
        (local-type-check-error*
          (bytes-append
            (varargs list #"Cannot apply non function: " (print-sexp (type->sexp t))))
          src)])]
    [(varargs-app-expr _ (identifier op op-src) args src)
     (case (context-ref-static context op)
       [(nothing)
        (local-type-check-error* #"Unbound static" op-src)]
       [(just (varargs-info type-vars arg-type return-type))
        (match-define expected-arg-type : (Maybe Type)
          (case (attempt-result-based-unification
                  type-vars return-type expected-type (varargs list arg-type))
            [(cons t (empty)) t]
            [_ (panic #"Wrong amount of arg type")]))
        (case (map/join-failure
                (lambda ([arg : Expression])
                  (type-check/expr arg context expected-arg-type))
                args)
          [(left v) (left v)]
          [(right actual-types)
           (match-define (tuple2 type-var-uvars s)
             (type-vars->unification-vars type-vars))
           (match-define type-var-uvar-dict : (Dict Bytes UnificationVar)
             (dict-add-all (make-dict bytes-cmp) type-var-uvars))
           (match-define (tuple2 u _s) (uvar-source-next s))
           (match-define constraints
             (cons
               (eq-constraint
                 (type->constrainable return-type type-var-uvar-dict)
                 (constrain-uvar u))
               (append
                 (map
                   (lambda ([t : Type])
                     (eq-constraint
                       (type->constrainable t type-var-uvar-dict)
                       (type->constrainable arg-type type-var-uvar-dict)))
                   actual-types)
                 (tvar-star-kind-constraints type-var-uvars))))
           (case (unify constraints)
             [(nothing)
              (local-type-check-error*
                (bytes-append
                  (map
                    (lambda ([c : Constraint])
                      (bytes-append (varargs list (constraint->bytes c) #"\n")))
                    constraints))
                src)]
             [(just uvar-dict)
              (case (dict-ref uvar-dict u)
                [(nothing)
                 (local-type-check-error* #"No binding for uvar in output of unification" src)]
                [(just type)
                 (check-expected type expected-type src)])])])])]
    [(case-expr op clauses src)
     (case (type-check/expr op context (nothing))
       [(left v) (left v)]
       [(right type)
        (case (map/join-failure
                (lambda ([clause : CaseClause])
                  (case clause
                    [(case-clause p body)
                     (type-check/case-clause p body context type expected-type)]))
                clauses)
          [(left v) (left v)]
          [(right types)
           (case (set-split (set-add-all (make-set type-cmp) types))
             [(nothing)
              (local-type-check-error* #"Cannot have case expression with no clauses" src)]
             [(just (tuple2 type other-types))
              (if (set-empty? other-types)
                  (case (totality-check-patterns context (map case-clause-pattern clauses))
                    [(just v) (local-type-check-error* v src)]
                    [(nothing) (right type)])
                  (local-type-check-error*
                    (bytes-append
                      (cons
                        #"Conflicting types in case clauses:\n"
                        (interleave
                          (map
                            (lambda ([t : Type]) (print-sexp (type->sexp t)))
                            types)
                          #"\n")))
                    src))])])])]))

(define (type-check/block
          [body : Block]
          [context : Context]
          [expected-type : (Maybe Type)])
  : (Either (JoinList LocalTypeCheckError) Type)
  (match-define (block defs expr) body)
  (type-check/block* defs expr context expected-type))

(define (type-check/block*
          [defs : (List BlockDefinition)]
          [body : Expression]
          [context : Context]
          [expected-type : (Maybe Type)])
  : (Either (JoinList LocalTypeCheckError) Type)
  (case defs
    [(empty) (type-check/expr body context expected-type)]
    [(cons (match-def pattern def-expected-type expr) defs)
     (case (totality-check-patterns context (varargs list pattern))
       [(just v) (local-type-check-error* v (pattern-source-span pattern))]
       [(nothing)
        (case (type-check/expr expr context def-expected-type)
          [(left v) (left v)]
          [(right type)
           (case (type-check/pattern pattern context type)
             [(left v) (left v)]
             [(right context)
              (type-check/block* defs body context expected-type)])])])]))

(define (type-check/pattern [pattern : Pattern] [context : Context] [arg-type : Type])
  : (Either (JoinList LocalTypeCheckError) Context)
  (case (type-check/pattern* pattern context arg-type)
    [(left v) (left v)]
    [(right var-types)
     (right (context-set-values context (jl->list var-types)))]))

(define (type-check/pattern* [pattern : Pattern] [context : Context] [arg-type : Type])
  : (Either (JoinList LocalTypeCheckError) (JoinList (Tuple2 Bytes Type)))
  (case pattern
    [(bytes-pattern _ src)
     (if (type=? arg-type (bytes-type))
         (right (empty-jl))
         (local-type-check-error* #"Cannot match non-Bytes against bytes literal" src))]
    [(int-pattern _ src)
     (if (type=? arg-type (int-type))
         (right (empty-jl))
         (local-type-check-error* #"Cannot match non-Int against int literal" src))]
    [(variable-pattern (identifier v _))
     (right (single-jl (tuple2 v arg-type)))]
    [(ignore-pattern _)
     (right (empty-jl))]
    [(abstraction-pattern pattern-name sub-patterns src)
     (case (context-ref-pattern context pattern-name)
       [(nothing) (local-type-check-error* #"Unbound pattern" src)]
       [(just (pattern-info variant-name _ pat-mod-name pat-type-name type-vars input-field-types))
        (case arg-type
          [(abstract-type arg-mod-name arg-type-name arg-sub-types _)
           (if (and (mod-name=? arg-mod-name pat-mod-name)
                    (bytes=? arg-type-name pat-type-name))
               (let ([field-types
                      (map (lambda ([field-type : Type]) : Type
                             (case (zip type-vars arg-sub-types)
                                     [(nothing) (panic #"Bad number of types")]
                                     [(just var-types)
                                      (substitute-types
                                        field-type
                                        (dict-add-all (make-dict bytes-cmp) var-types))]))
                           input-field-types)])
                 (case (zip sub-patterns field-types)
                   [(nothing)
                    (local-type-check-error*
                      (bytes-append
                        (varargs list
                          #"Number of fields doesn't match number of subpatterns:"
                          #" Pattern: " variant-name
                          #" [" (mod-name->bytes pat-mod-name) #" " pat-type-name #"]"
                          #" Fields: " (integer->decimal-bytes (length field-types))
                          #" Subpatterns: " (integer->decimal-bytes (length sub-patterns))))
                      src)]
                   [(just sub-pattern-types)
                    (type-check/patterns* sub-pattern-types context)]))
               (local-type-check-error*
                 (bytes-append
                   (varargs list
                     #"Got pattern for different type:"
                     #" Pattern: " variant-name
                     #" Expected: " (mod-name->bytes arg-mod-name) #" " arg-type-name
                     #" Got: " (mod-name->bytes pat-mod-name) #" " pat-type-name))
                 src))]
          [_ (local-type-check-error* #"Abstraction pattern cannot match non abstract-type" src)])])]))

(define (type-check/patterns* [zipped : (List (Tuple2 Pattern Type))] [context : Context])
  : (Either (JoinList LocalTypeCheckError) (JoinList (Tuple2 Bytes Type)))
  (case (map/join-failure
          (lambda ([t : (Tuple2 Pattern Type)])
            (match-define (tuple2 pat type) t)
            (type-check/pattern* pat context type))
          zipped)
    [(left v) (left v)]
    [(right ts) (right (concat-jl ts))]))

(define (type-check/case-clause
          [pattern : Pattern]
          [body : Block]
          [context : Context]
          [argument-type : Type]
          [expected-type : (Maybe Type)])
  : (Either (JoinList LocalTypeCheckError) Type)
  (case (type-check/pattern pattern context argument-type)
    [(left v) (left v)]
    [(right context)
     (type-check/block body context expected-type)]))


(define (type-check/function-args [args : (List FunctionArg)] [context : Context])
  : (Either (JoinList LocalTypeCheckError) Context)
  (case (map/join-failure
          (lambda ([arg : FunctionArg])
            : (Either (JoinList LocalTypeCheckError) (JoinList (Tuple2 Bytes Type)))
            (match-define (function-arg pattern arg-type) arg)
            (case (totality-check-patterns context (varargs list pattern))
              [(just v) (local-type-check-error* v (pattern-source-span pattern))]
              [(nothing)
               (type-check/pattern* pattern context arg-type)]))
          args)
    [(left v) (left v)]
    [(right ts) (right (context-set-values context (jl->list (concat-jl ts))))]))

(define (type-check/static-definition
          [def : StaticDefinition]
          [context : Context])
  : (JoinList TypeCheckError)
  (case def
    [(varargs-definition name _ arg-type return-type
                         (identifier cons-func cons-span)
                         (identifier empty-func empty-span))
     (append-jl
       (case (context-ref-value context cons-func)
         [(nothing)
          (single-jl (type-check-error name #"Unbound varargs cons function" cons-span))]
         [(just cons-type)
          (if (instantiates-as?
                cons-type
                (fun-type (empty) (empty) (varargs list arg-type return-type) return-type))
              (empty-jl)
              (single-jl (type-check-error name #"Varargs cons function has bad type"
                                           cons-span)))])
       (case (context-ref-value context empty-func)
         [(nothing)
          (single-jl (type-check-error name #"Unbound varargs empty function" empty-span))]
         [(just empty-type)
          (if (instantiates-as?
                empty-type
                (fun-type (empty) (empty) (empty) return-type))
              (empty-jl)
              (single-jl (type-check-error name #"Varargs empty function has bad type"
                                           empty-span)))]))]))

(define (type-vars->unification-vars [type-vars : (List Bytes)])
  : (Tuple2 (List (Tuple2 Bytes UnificationVar)) UnificationVarSource)
  (map/state
    (lambda ([type-var : Bytes] [s : UnificationVarSource])
      (case (uvar-source-next s)
        [(tuple2 u s)
         (tuple2 (tuple2 type-var u) s)]))
    type-vars
    (new-uvar-source)))

(define (tvar-star-kind-constraints [type-var-uvars : (List (Tuple2 Bytes UnificationVar))])
  : (List Constraint)
  (map
    (lambda ([type-var-uvar : (Tuple2 Bytes UnificationVar)])
      (case type-var-uvar
        [(tuple2 _ uvar)
         (star-kind-constraint uvar)]))
    type-var-uvars))

(define (convert-exports [m : Module] [ctx : Context]) : tc:Module
  (match-define (module name imports exports definitions datatypes patterns statics) m)
  (match-define (exports exported-types exported-values exported-patterns exported-statics) exports)
  (tc:module
    name
    imports
    (tc:exports
      exported-types
      (map
        (lambda ([export : Export]) : tc:ValueExport
          (case export
            [(export local exported)
             (case (context-ref-value ctx local)
               [(nothing) (panic #"Unbound export")]
               [(just type)
                (tc:value-export local exported type)])]))
        exported-values)
      exported-patterns
      exported-statics)
    definitions
    datatypes
    patterns
    statics))

(define (type-check [mod : Module]) : (Either TypeCheckErrors tc:Module)
  (match-define (module name _ _ definitions _ _ statics) mod)
  (match-define context (create-context mod))
  (case
    (jl->list
      (append-jl
        (concat-map-jl/list
          (lambda ([def : FunctionDefinition]) (type-check/definition def context))
          definitions)
        (concat-map-jl/list
          (lambda ([def : StaticDefinition]) (type-check/static-definition def context))
          statics)))
    [(empty)
     (right (convert-exports mod context))]
    [vs
     (left (type-check-errors name vs))]))

(define [A] (local-type-check-error* [message : Bytes] [source : SourceSpan])
  : (Either (JoinList LocalTypeCheckError) A)
  (left (single-jl (local-type-check-error message source))))

(define [A B] (map/join-failure
                [f : (A -> (Either (JoinList LocalTypeCheckError) B))]
                [vs : (List A)])
  : (Either (JoinList LocalTypeCheckError) (List B))
  (case (partition-eithers (map f vs))
    [(tuple2 (empty) vs)
     (right vs)]
    [(tuple2 errors _)
     (left (concat-jl errors))]))


(define [A] (add-errors [errors : (JoinList LocalTypeCheckError)]
                        [v : (Either (JoinList LocalTypeCheckError) A)])
  : (Either (JoinList LocalTypeCheckError) A)
  (case v
    [(left errors2) (left (append-jl errors errors2))]
    [(right v)
     (if (empty-jl? errors)
         (right v)
         (left errors))]))

(define [A] (extract-errors [v : (Either (JoinList LocalTypeCheckError) A)])
  : (JoinList LocalTypeCheckError)
  (case v
    [(left errors) errors]
    [(right _) (empty-jl)]))
