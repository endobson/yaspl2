(module join-list
  (import
    (prim
      #:types (Array Int)
      #:values (array-ref array-length + =)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty)
      #:patterns (cons empty)))
  (export
    #:types (JoinList)
    #:values (empty-jl append-jl jl->list single-jl snoc-jl cons-jl join-list append-jl* map-jl
              list->jl concat-map-jl concat-jl)
    #:patterns ())
  (types
    (define-type (JoinList a)
      (empty-jl)
      (full-jl [v (JoinListInner a)]))
    (define-type (JoinListInner a)
      (single-jli [v a])
      (join-jli [left (JoinListInner a)] [right (JoinListInner a)])))


  (define (a) (join-list [args : (Array a)]) : (JoinList a)
    (join-list-helper 0 args (empty-jl)))

  (define (a) (join-list-helper [index : Int] [args : (Array a)] [acc : (JoinList a)]) : (JoinList a)
    (if (= index (array-length args))
        acc
        (join-list-helper (+ index 1) args (snoc-jl acc (array-ref args index)))))


  (define (a) (append-jl* [args : (Array (JoinList a))]) : (JoinList a)
    (append-jl*-helper 0 args (empty-jl)))

  (define (a) (append-jl*-helper [index : Int] [args : (Array (JoinList a))] [acc : (JoinList a)])
    : (JoinList a)
    (if (= index (array-length args))
        acc
        (append-jl*-helper (+ index 1) args (append-jl acc (array-ref args index)))))


  (define (a) (append-jl [left : (JoinList a)] [right : (JoinList a)]) : (JoinList a)
    (case left
      [(empty-jl) right]
      [(full-jl left-i)
       (case right
         [(empty-jl) left]
         [(full-jl right-i) (full-jl (join-jli left-i right-i))])]))

  (define (a) (jl->list [jl : (JoinList a)]) : (List a)
    (case jl
      [(empty-jl) (empty)]
      [(full-jl jl) (jl-inner->list jl (empty))]))

  (define (a) (jl-inner->list [jl : (JoinListInner a)] [acc : (List a)]) : (List a)
    (case jl
      [(single-jli v) (cons v acc)]
      [(join-jli l r) (jl-inner->list l (jl-inner->list r acc))]))

  (define (a) (list->jl [vs : (List a)]) : (JoinList a)
    (case vs
      [(empty) (empty-jl)]
      [(cons v vs) (full-jl (list->jl-inner vs (single-jli v)))]))

  (define (a) (list->jl-inner [vs : (List a)] [acc : (JoinListInner a)] ) : (JoinListInner a)
    (case vs
      [(empty) acc]
      [(cons v vs) (list->jl-inner vs (join-jli acc (single-jli v)))]))


  (define (a) (single-jl [v : a]) : (JoinList a)
    (full-jl (single-jli v)))

  (define (a) (cons-jl [v : a] [jl : (JoinList a)]) : (JoinList a)
    (append-jl (single-jl v) jl))

  (define (a) (snoc-jl [jl : (JoinList a)] [v : a]) : (JoinList a)
    (append-jl jl (single-jl v)))

  (define (a b) (map-jl [fun : (a -> b)] [jl : (JoinList a)]) : (JoinList b)
    (case jl
      [(empty-jl) (empty-jl)]
      [(full-jl jli) (full-jl (map-jli fun jli))]))

  (define (a b) (map-jli [fun : (a -> b)] [jl : (JoinListInner a)]) : (JoinListInner b)
    (case jl
      [(single-jli v) (single-jli (fun v))]
      [(join-jli l r)
       (join-jli (map-jli fun l) (map-jli fun r))]))

  (define (a b) (concat-map-jl [fun : (a -> (JoinList b))] [jl : (JoinList a)]) : (JoinList b)
    (case jl
      [(empty-jl) (empty-jl)]
      [(full-jl jli) (concat-map-jli fun jli)]))

  (define (a b) (concat-map-jli [fun : (a -> (JoinList b))] [jli : (JoinListInner a)]) : (JoinList b)
    (case jli
      [(single-jli v) (fun v)]
      [(join-jli l r)
       (append-jl (concat-map-jli fun l) (concat-map-jli fun r))]))

  (define (a) (concat-jl [l : (List (JoinList a))]) : (JoinList a)
    (case l
      [(empty) (empty-jl)]
      [(cons e l) (append-jl e (concat-jl l))])))
