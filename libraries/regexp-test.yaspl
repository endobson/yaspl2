(module regexp-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort Void)
      #:values (void)
      #:patterns ())
    (regexp
      #:types (Regexp)
      #:values (regexp-match? epsilon-regexp empty-regexp lit-regexp any-regexp group-regexp)
      #:patterns ())
    (io write-all-bytes newline write-line)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (list empty cons)
      #:patterns (cons empty)))
  (export)
  (types
    (define-type TestCase
      (test-case [name Bytes] [run (-> Boolean)])))

  (define (test-epsilon-empty) : Boolean
    (regexp-match? (epsilon-regexp) #""))

  (define (test-empty-empty) : Boolean
    (if (regexp-match? (empty-regexp) #"") #f #t))

  (define (test-epsilon-nonempty) : Boolean
    (if (regexp-match? (epsilon-regexp) #"a") #f #t))

  (define (test-empty-nonempty) : Boolean
    (if (regexp-match? (empty-regexp) #"a") #f #t))

  (define (test-lit-empty) : Boolean
    (if (regexp-match? (lit-regexp 45) #"") #f #t))

  (define (test-lit-nonmatching) : Boolean
    (if (regexp-match? (lit-regexp 45) #"a") #f #t))

  (define (test-lit-matching) : Boolean
    (regexp-match? (lit-regexp 45) #"-"))

  (define (test-any-empty) : Boolean
    (if (regexp-match? (any-regexp) #"") #f #t))

  (define (test-any-nonempty) : Boolean
    (regexp-match? (any-regexp) #"-"))

  (define (test-group-empty) : Boolean
    (if (regexp-match? (group-regexp (any-regexp)) #"") #f #t))

  (define (test-group-nonempty) : Boolean
    (regexp-match? (group-regexp (any-regexp)) #"-"))


  (define (run-test-cases [tests : (List TestCase)]) : (List Bytes)
    (case tests
      [(empty) (empty)]
      [(cons (test-case name action) tests)
       (if (action)
           (run-test-cases tests)
           (cons name (run-test-cases tests)))]))

  (define (write-indented-lines [lines : (List Bytes)] [out : OutputPort]) : Void
    (case lines
      [(empty) (void)]
      [(cons line lines)
       (begin
         (write-all-bytes #"  " out)
         (write-all-bytes line out)
         (newline out)
         (write-indented-lines lines out))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (case (run-test-cases
            (varargs list
              (test-case #"epsilon empty" test-epsilon-empty)
              (test-case #"empty empty" test-empty-empty)
              (test-case #"epsilon non-empty" test-epsilon-nonempty)
              (test-case #"empty non-empty" test-empty-nonempty)
              (test-case #"lit empty" test-lit-empty)
              (test-case #"lit nonmatching" test-lit-nonmatching)
              (test-case #"lit matching" test-lit-matching)
              (test-case #"any empty" test-any-empty)
              (test-case #"any non-empty" test-any-nonempty)
              (test-case #"group empty" test-group-empty)
              (test-case #"group non-empty" test-group-nonempty)))
      [(empty) 0]
      [failed-cases
       (begin
         (write-line #"Test cases failed: " stderr)
         (write-indented-lines failed-cases stderr)
         1)])))
