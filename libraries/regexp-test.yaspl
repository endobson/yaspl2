(module regexp-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort)
      #:values ()
      #:patterns ())
    (io write-all-bytes newline)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (list)
      #:patterns (cons empty)))
  (export)
  (types
    (define-type TestCase
      (test-case [name Bytes] [run (-> Boolean)])))

  (define (test-empty) : Boolean
    #t)

  (define (test-empty2) : Boolean
    #f)



  (define (run-test-cases [tests : (List TestCase)]) : (Maybe Bytes)
    (case tests
      [(empty) (nothing)]
      [(cons (test-case name action) tests)
       (if (action)
           (run-test-cases tests)
           (just name))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (case (run-test-cases
            (varargs list
              (test-case #"Test Empty" test-empty)
              (test-case #"Test Empty" test-empty)))
      [(nothing) 0]
      [(just name)
       (begin
         (write-all-bytes #"Test case failed: " stderr)
         (write-all-bytes name stderr)
         (newline stderr)
         1)])))
