(module regexp-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Void Byte Boolean)
      #:values ()
      #:patterns ())
    (boolean not)
    (regexp
      #:types (Regexp)
      #:values (regexp-match? epsilon-regexp empty-regexp lit-regexp any-regexp group-regexp
                alt-regexp rep-regexp)
      #:patterns ())
    (yunit
      #:types () 
      #:values (yunit/main test-case)
      #:patterns ())
    (list
      #:types ()
      #:values (list)
      #:patterns ()))
  (export)
  (types)

  (define (test-epsilon-empty) : Boolean
    (regexp-match? (epsilon-regexp) #""))


  (define (test-empty-empty) : Boolean
    (not (regexp-match? (empty-regexp) #"")))

  (define (test-epsilon-nonempty) : Boolean
    (not (regexp-match? (epsilon-regexp) #"a")))

  (define (test-empty-nonempty) : Boolean
    (not (regexp-match? (empty-regexp) #"a")))

  (define (test-lit-empty) : Boolean
    (not (regexp-match? (lit-regexp 45) #"")))

  (define (test-lit-nonmatching) : Boolean
    (not (regexp-match? (lit-regexp 45) #"a")))

  (define (test-lit-matching) : Boolean
    (regexp-match? (lit-regexp 45) #"-"))

  (define (test-any-empty) : Boolean
    (not (regexp-match? (any-regexp) #"")))

  (define (test-any-nonempty) : Boolean
    (regexp-match? (any-regexp) #"-"))

  (define (test-group-empty) : Boolean
    (not (regexp-match? (group-regexp (any-regexp)) #"")))

  (define (test-group-nonempty) : Boolean
    (regexp-match? (group-regexp (any-regexp)) #"-"))

  (define (test-alt-empty) : Boolean
    (not (regexp-match? (alt-regexp (lit-regexp 97) (lit-regexp 98)) #"")))

  (define (test-alt-nonmatching) : Boolean
    (not (regexp-match? (alt-regexp (lit-regexp 97) (lit-regexp 98)) #"c")))

  (define (test-alt-match-left) : Boolean
    (regexp-match? (alt-regexp (lit-regexp 97) (lit-regexp 98)) #"a"))

  (define (test-alt-match-right) : Boolean
    (regexp-match? (alt-regexp (lit-regexp 97) (lit-regexp 98)) #"b"))

  (define (test-rep-empty) : Boolean
    (regexp-match? (rep-regexp (lit-regexp 45)) #""))

  (define (test-rep-single) : Boolean
    (regexp-match? (rep-regexp (lit-regexp 45)) #"-"))

  (define (test-rep-double) : Boolean
    (regexp-match? (rep-regexp (lit-regexp 45)) #"--"))

  (define (test-rep-nonmatching) : Boolean
    (not (regexp-match? (rep-regexp (lit-regexp 45)) #"+")))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (yunit/main stderr
      (varargs list
        (test-case #"epsilon empty" test-epsilon-empty)
        (test-case #"empty empty" test-empty-empty)
        (test-case #"epsilon non-empty" test-epsilon-nonempty)
        (test-case #"empty non-empty" test-empty-nonempty)
        (test-case #"lit empty" test-lit-empty)
        (test-case #"lit nonmatching" test-lit-nonmatching)
        (test-case #"lit matching" test-lit-matching)
        (test-case #"any empty" test-any-empty)
        (test-case #"any non-empty" test-any-nonempty)
        (test-case #"group empty" test-group-empty)
        (test-case #"group non-empty" test-group-nonempty)
        (test-case #"alt empty" test-alt-empty)
        (test-case #"alt nonmatching" test-alt-nonmatching)
        (test-case #"alt match left" test-alt-match-left)
        (test-case #"alt match right" test-alt-match-right)
        (test-case #"rep empty" test-rep-empty)
        (test-case #"rep single" test-rep-single)
        (test-case #"rep double" test-rep-double)
        (test-case #"rep nonmatching" test-rep-nonmatching)))))
