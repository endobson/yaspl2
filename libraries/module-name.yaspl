#:module (module-name)
#:import {
  (bytes) {
    #:values
      bytes-append
      bytes<
      bytes=?
  }
  (list) {
    #:types
      List
    #:values
      append
      cons
      extract-justs
      interleave
      list
      list<
      list=?
      map
  }
  (maybe) {
    #:types
      Maybe
    #:values
      just
      nothing
    #:patterns
      just
      nothing
  }
  (prim) {
    #:types
      Boolean
      Bytes
  }
  (sexp-parser) {
    #:types
      Sexp
    #:values
      bytes-sexp
      node
    #:patterns
      bytes-sexp
      node
  }
}
(export
  #:types (ModName)
  #:values (mod-name mod-name-parts mod-name->bytes mod-name=? mod-name->sexp sexp->mod-name mod-name<)
  #:patterns (mod-name))
(types
  ;; TODO Come up with a better name to avoid the conflict of the accesor and constructor.
  (define-type ModName
    (mod-name [parts : (List Bytes)])))

(define (mod-name->bytes [m : ModName]) : Bytes
  (bytes-append (cons #"(" (append (interleave (mod-name-parts m) #" ") (varargs list #")")))))

(define (mod-name=? [m1 : ModName] [m2 : ModName]) : Boolean
  ((list=? bytes=?) (mod-name-parts m1) (mod-name-parts m2)))

(define (mod-name< [m1 : ModName] [m2 : ModName]) : Boolean
  ((list< bytes<) (mod-name-parts m1) (mod-name-parts m2)))

(define (mod-name->sexp [m : ModName]) : Sexp
  (node (map bytes-sexp (mod-name-parts m))))

(define (sexp->mod-name [m : Sexp]) : (Maybe ModName)
  (case m
    [(node parts)
     (case (extract-justs (map (lambda ([p : Sexp]) : (Maybe Bytes)
                                 (case p
                                   [(bytes-sexp part) (just part)]
                                   [_ (nothing)])) parts))
       [(nothing) (nothing)]
       [(just parts) (just (mod-name parts))])]
    [_ (nothing)]))
