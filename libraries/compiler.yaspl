#:module (compiler)
#:import {
  (bytes)
  (data indexed-set)
  (dict)
  (either)
  (intermediate-language) {
    #:types
      [Module i:Module]
  }
  (intermediate-to-module-signature) {
    #:values
      module->module-signature
  }
  (io)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (prim-implementation)
  (resolved-imports-language) {
    #:values
      import-resolution-errors->bytes
      resolve-imports
  }
  (sexp-parser)
  (source-language) {
    #:types
      Module
    #:values
      parse-module
  }
  (source-to-intermediate-language) {
    #:values
      source->intermediate
  }
  (top-level-name)
  (tuples)
  (validator)
  (yaspl intermediate-to-register) {
    #:values
      [module-to-top-level-objects r:module-to-top-level-objects]
  }
  (yaspl module-environment)
  (yaspl optimize-intermediate)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects)
}
(export
  #:types ()
  #:values (compile-main-module compile-modules parse-module-files parse-module-file)
  #:patterns ())
(types)

(define (compile-main-module
          [main-module : Module]
          [sigs : (List ModuleSignature)])
  : (Either Bytes (Tuple2 (List TopLevelObject) ModuleSignature))
  (let ([sigs
          (foldl
            (lambda ([sig : ModuleSignature] [acc : (IndexedSet ModuleSignature ModName)])
              (indexed-set-add acc sig))
            sigs
            (indexed-set-add
              (make-indexed-set module-signature-name mod-name-cmp)
              (prim-signature)))])
    (case (compile-module* main-module sigs)
      [(left v)
       (left v)]
      [(right (compiled-module tlos sig))
       (right (tuple2 (optimize-tlos tlos) sig))])))

(define (compile-modules [mods : (List Module)])
  : (Either Bytes (List TopLevelObject))
  (match-define sigs
    (indexed-set-add
      (make-indexed-set module-signature-name mod-name-cmp)
      (prim-signature)))
  (match-define prim-tlos (prim-implementation))

  (case (compile-module-list* mods sigs prim-tlos)
    [(left v)
     (left v)]
    [(right (tuple2 sigs tlos))
     (right (optimize-tlos tlos))]))

(define (compile-module-list*
          [mods : (List Module)]
          [sigs : (IndexedSet ModuleSignature ModName)]
          [tlos : (List TopLevelObject)])
  : (Either Bytes (Tuple2 (IndexedSet ModuleSignature ModName) (List TopLevelObject)))
  (case mods
    [(empty)
     (right (tuple2 sigs tlos))]
    [(cons mod mods)
     (case (compile-module* mod sigs)
       [(left v)
        (left v)]
       [(right (compiled-module new-tlos sig))
        (compile-module-list* mods
                              (indexed-set-add sigs sig)
                              (append new-tlos tlos))])]))

(define (compile-module*
          [mod : Module]
          [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either Bytes CompiledModule)
  (case (resolve-imports mod sigs)
    [(left v)
     (left (import-resolution-errors->bytes v))]
    [(right res-mod)
     (case (validate-module res-mod sigs)
       [(just v)
        (left (module-errors->bytes v))]
       [(nothing)
        (case (source->intermediate res-mod)
          [(left v) (left v)]
          [(right intermediate)
           (right (compile-module (optimize-intermediate-module intermediate)))])])]))

(define (compile-module [imod : i:Module]) : CompiledModule
  (match-define env (make-module-environment imod))
  (let ([tlos (r:module-to-top-level-objects imod env)])
    (compiled-module
      tlos
      (module->module-signature imod env
        (add-known-functions tlos (make-dict bytes-cmp))))))

(define (add-known-functions [tlos : (List TopLevelObject)]
                             [dict : (Dict Bytes TopLevelName)]) : (Dict Bytes TopLevelName)
  (case tlos
    [(empty) dict]
    [(cons (trivial-closure-tlo name _ top-fun-name) tlos)
     (add-known-functions tlos (dict-add dict name top-fun-name))]
    [(cons _ tlos)
     (add-known-functions tlos dict)]))

(define (parse-module-files [module-files : (List Bytes)])
  : (Either Bytes (List Module))
  (extract-rights (map parse-module-file module-files)))

(define (parse-module-file [module : Bytes])
  : (Either Bytes Module)
  (case (parse-sexps (call-with-input-file module read-all-bytes))
    [(left v)
     (left v)]
    [(right mod-sexps)
     (parse-module mod-sexps)]))
