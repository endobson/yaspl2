#:module (compiler)
#:import {
  (bytes)
  (data indexed-set)
  (either)
  {(intermediate-language)
    {#:types
      [Module i:Module]
    }
  }
  {(intermediate-to-module-signature)
    {#:values
      module->module-signature
    }
  }
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (prim-implementation)
  {(resolved-imports-language)
    {#:types
      ImportResolutionErrors
    }
    {#:values
      import-resolution-errors->bytes
      resolve-imports
    }
  }
  {(resolved-types-language)
    {#:types
      TypeResolutionError
    }
    {#:values
      resolve-types
      type-resolution-error->bytes
    }
  }
  {(source-to-intermediate-language)
    {#:types
      TypeCheckErrors
    }
    {#:values
      source->intermediate
      type-check-errors->bytes
    }
  }
  (tuples)
  (validator)
  {(yaspl intermediate-to-register)
    {#:values
      [module-to-top-level-objects r:module-to-top-level-objects]
    }
  }
  {(yaspl languages source-language)
    {#:types
      Module
    }
  }
  (yaspl optimize-intermediate)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects)
}
(export
  (#:values compile-main-module compile-modules module-compilation-error->bytes))
(types
  (define-type ModuleCompilationError
    (mce-import-resolution-errors [err : ImportResolutionErrors])
    (mce-module-errors [err : ModuleErrors])
    (mce-type-resolution-error [err : TypeResolutionError])
    (mce-type-check-errors [err : TypeCheckErrors])))

(define (compile-main-module
          [main-module : Module]
          [sigs : (List ModuleSignature)])
  : (Either ModuleCompilationError (Tuple2 (List TopLevelObject) ModuleSignature))
  (case (indexed-set-maybe-add-all
          (indexed-set-add
            (make-indexed-set module-signature-name mod-name-cmp)
            (prim-signature))
          sigs)
    [(left sig)
     (panic
       (bytes-append (varargs list #"Duplicate signature for module: "
                              (mod-name->bytes (module-signature-name sig)))))]
    [(right sigs)
     (case (compile-module* main-module sigs)
       [(left v)
        (left v)]
       [(right (compiled-module tlos sig))
        (right (tuple2 (optimize-tlos tlos) sig))])]))

(define (compile-modules [mods : (List Module)])
  : (Either ModuleCompilationError (List TopLevelObject))
  (match-define sigs
    (indexed-set-add
      (make-indexed-set module-signature-name mod-name-cmp)
      (prim-signature)))
  (match-define prim-tlos (prim-implementation))

  (case (compile-module-list* mods sigs prim-tlos)
    [(left v)
     (left v)]
    [(right (tuple2 _sigs tlos))
     (right (optimize-tlos tlos))]))

(define (compile-module-list*
          [mods : (List Module)]
          [sigs : (IndexedSet ModuleSignature ModName)]
          [tlos : (List TopLevelObject)])
  : (Either ModuleCompilationError (Tuple2 (IndexedSet ModuleSignature ModName) (List TopLevelObject)))
  (case mods
    [(empty)
     (right (tuple2 sigs tlos))]
    [(cons mod mods)
     (case (compile-module* mod sigs)
       [(left v)
        (left v)]
       [(right (compiled-module new-tlos sig))
        (compile-module-list* mods
                              (indexed-set-add sigs sig)
                              (append new-tlos tlos))])]))

(define (compile-module*
          [mod : Module]
          [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either ModuleCompilationError CompiledModule)
  (case (resolve-imports mod sigs)
    [(left v)
     (left (mce-import-resolution-errors v))]
    [(right res-mod)
     (case (validate-module res-mod sigs)
       [(just v)
        (left (mce-module-errors v))]
       [(nothing)
        (case (resolve-types res-mod)
          [(left v) (left (mce-type-resolution-error v))]
          [(right res-mod)
           (case (source->intermediate res-mod)
             [(left v) (left (mce-type-check-errors v))]
             [(right intermediate)
              (right (compile-module (optimize-intermediate-module intermediate)))])])])]))

(define (compile-module [imod : i:Module]) : CompiledModule
  (compiled-module
    (r:module-to-top-level-objects imod)
    (module->module-signature imod)))

(define (module-compilation-error->bytes [err : ModuleCompilationError]) : Bytes
  (case err
    [(mce-import-resolution-errors err) (import-resolution-errors->bytes err)]
    [(mce-module-errors err) (module-errors->bytes err)]
    [(mce-type-resolution-error err) (type-resolution-error->bytes err)]
    [(mce-type-check-errors err) (type-check-errors->bytes err)]))
