(module compiler
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array)
      #:values (panic make-bytes read-bytes < + = array-length array-ref open-input-file
                open-output-file close-output-port)
      #:patterns ())
    (io read-all-bytes write-all-bytes write-line)
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (empty cons append map list)
      #:patterns (empty cons))
    (dict make-dict dict-set dict-add-all)
    (tuples tuple2)
    (bytes bytes=? bytes-append make-null-terminated)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (source-to-stack
      #:types ()
      #:values (compile-module)
      #:patterns (compiled-module))
    (stack-machine
      #:types (TopLevelObject)
      #:values (function-tlo function-tlo-v)
      #:patterns (function-tlo))
    (source-to-module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns ())
    (stack-machine-optimizer optimize-stack-function)
    (x86-64-stack-machine compile-stack-machine)
    (prim-implementation prim-implementation)
    (validator validate-module)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export main compile-modules extract-modules extract-sexps read-module-files prim-signature)
  (types)

  (define (prim-signature) : ModuleSignature
    (module-signature #"prim"
      (dict-add-all
        (make-dict bytes=?)
        (varargs list
          (tuple2 #"+" #"prim_add")
          (tuple2 #"-" #"prim_sub")
          (tuple2 #"*" #"prim_mult")
          (tuple2 #"=" #"prim_equal")
          (tuple2 #"<" #"prim_less_than")
          (tuple2 #"<=" #"prim_less_than_or_equal")
          (tuple2 #">" #"prim_greater_than")
          (tuple2 #">=" #"prim_greater_than_or_equal")
          (tuple2 #"bytes-ref" #"prim_bytes_ref")
          (tuple2 #"make-bytes" #"prim_make_bytes")
          (tuple2 #"bytes-set!" #"prim_bytes_set")
          (tuple2 #"bytes-length" #"prim_bytes_length")
          (tuple2 #"write-bytes" #"prim_write_bytes")
          (tuple2 #"read-bytes" #"prim_read_bytes")
          (tuple2 #"open-input-file" #"prim_open_input_file")
          (tuple2 #"open-output-file" #"prim_open_output_file")
          (tuple2 #"close-input-port" #"prim_close_port")
          (tuple2 #"close-output-port" #"prim_close_port")
          (tuple2 #"void" #"prim_void")
          (tuple2 #"and" #"prim_and")
          (tuple2 #"or" #"prim_or")
          (tuple2 #"quotient" #"prim_quotient")
          (tuple2 #"remainder" #"prim_remainder")
          (tuple2 #"panic" #"prim_panic")
          (tuple2 #"make-array" #"prim_make_array")
          (tuple2 #"array-length" #"prim_array_length")
          (tuple2 #"array-ref" #"prim_array_ref")
          (tuple2 #"array-set!" #"prim_array_set")))
      (make-dict bytes=?)))


  (define (compile-modules
            [mods : (List Module)]
            [sigs : (List ModuleSignature)]
            [funcs : (List TopLevelObject)])
    : (Either Bytes (List TopLevelObject))
    (case mods
      [(empty)
       (right (map optimize-tlo funcs))]
      [(cons mod mods)
       (case (validate-module mod sigs)
         [(just v)
          (left v)]
         [(nothing)
          (case (compile-module mod sigs)
            [(left v) (left v)]
            [(right (compiled-module new-funcs sig))
             (compile-modules mods (cons sig sigs) (append new-funcs funcs))])])]))

  (define (optimize-tlo [tlo : TopLevelObject]) : TopLevelObject
    (case tlo
      [(function-tlo func)
       (function-tlo (optimize-stack-function func))]))

  (define (extract-modules [vals : (List (Either Bytes Module))] [stderr : OutputPort]) : (List Module)
    (case vals
      [(empty) (empty)]
      [(cons (right v) vals) (cons v (extract-modules vals stderr))]
      [(cons (left v) _)
       (begin
         (write-line v stderr)
         (panic #""))]))

  (define (extract-sexps [either : (Either Bytes (List Sexp))] [stderr : OutputPort]) : (List Sexp)
    (case either
      [(left v)
       (begin
         (write-line v stderr)
         (panic v))]
      [(right (empty))
       (begin
         (write-line #"No provided modules" stderr)
         (panic #""))]
      [(right sexps) sexps]))

  (define (read-module-files [index : Byte] [modules : (Array Bytes)]) : (List Bytes)
    (if (= index (array-length modules))
        (empty)
        (cons (read-all-bytes (open-input-file (make-null-terminated (array-ref modules index))))
              (read-module-files (+ 1 index) modules))))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (= (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (if (< (array-length args) 3)
            (begin
              (write-line #"No module name supplied" stderr)
              1)
            (begin
              (let ([output (open-output-file (make-null-terminated (array-ref args 1)))])
                (begin
                  (case (compile-modules
                          (extract-modules
                            (map parse-module
                              (extract-sexps
                                (parse-sexps (bytes-append (read-module-files 3 args)))
                                stderr))
                            stderr)
                          (cons (prim-signature) (empty))
                          (map function-tlo (prim-implementation)))
                    [(left v)
                     (begin
                       (write-line v stderr)
                       (panic #""))]
                    [(right code)
                     (compile-stack-machine
                       (bytes-append (varargs list (array-ref args 2) #"_main"))
                       (map function-tlo-v code)
                       output)])
                  (close-output-port output)))
              0)))))
