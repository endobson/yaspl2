(module compiler
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (bytes bytes-append bytes=?)
    (io call-with-input-file read-all-bytes)
    (list
      #:types (List)
      #:values (empty cons append map extract-rights)
      #:patterns (empty cons))
    (dict
      #:types ()
      #:values (merge-dicts* make-dict)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (sexp-parser
      #:types ()
      #:values (parse-sexps)
      #:patterns ())
    (intermediate-to-stack
      #:types (CompiledModule)
      #:values (compile-module)
      #:patterns (compiled-module))
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (stack-machine
      #:types (TopLevelObject)
      #:values ()
      #:patterns ())
    (module-signature
      #:types (ModuleSignature)
      #:values (module-signature-known-functions)
      #:patterns ())
    (source-to-intermediate-language source->intermediate)
    (stack-machine-optimizer optimize-tlos)
    (prim-implementation prim-signature prim-implementation)
    (validator validate-module)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export
    #:types ()
    #:values (compile-main-module compile-modules parse-module-files parse-module-file)
    #:patterns ())
  (types)

  (define (compile-main-module
            [main-module : Module]
            [sigs : (List ModuleSignature)])
    : (Either Bytes (Tuple2 (List TopLevelObject) ModuleSignature))
    (let ([sigs (cons (prim-signature) sigs)])
      (case (compile-module* main-module sigs)
        [(left v)
         (left v)]
        [(right (compiled-module tlos sig))
         (right
           (tuple2
             (optimize-tlos tlos
               (merge-dicts* (make-dict bytes=?) (map module-signature-known-functions
                                                      (cons sig sigs))))
             sig))])))

  (define (compile-modules [mods : (List Module)])
    : (Either Bytes (List TopLevelObject))
   (compile-modules*
     mods
     (cons (prim-signature) (empty))
     (empty)))

  (define (compile-modules*
            [mods : (List Module)]
            [sigs : (List ModuleSignature)]
            [tlos : (List TopLevelObject)])
    : (Either Bytes (List TopLevelObject))
    (case (compile-module-list* mods sigs tlos)
      [(left v)
       (left v)]
      [(right (tuple2 sigs tlos))
       (right (optimize-tlos
                (append (prim-implementation) tlos)
                (merge-dicts* (make-dict bytes=?) (map module-signature-known-functions sigs))))]))

  (define (compile-module-list*
            [mods : (List Module)]
            [sigs : (List ModuleSignature)]
            [tlos : (List TopLevelObject)])
    : (Either Bytes (Tuple2 (List ModuleSignature)
                            (List TopLevelObject)))
    (case mods
      [(empty)
       (right (tuple2 sigs tlos))]
      [(cons mod mods)
       (case (compile-module* mod sigs)
         [(left v)
          (left v)]
         [(right (compiled-module new-tlos sig))
          (compile-module-list* mods
                                (cons sig sigs)
                                (append new-tlos tlos))])]))

  (define (compile-module*
            [mod : Module]
            [sigs : (List ModuleSignature)])
    : (Either Bytes CompiledModule)
    (case (validate-module mod sigs)
      [(just v)
       (left v)]
      [(nothing)
       (case (source->intermediate mod sigs)
         [(left v) (left v)]
         [(right intermediate)
          (compile-module intermediate sigs)])]))

  (define (parse-module-files [modules : (List Bytes)])
    : (Either Bytes (List Module))
    (case (parse-sexps (bytes-append (read-module-files modules)))
      [(left v)
       (left v)]
      [(right (empty))
       (left #"No provided modules")]
      [(right module-sexps)
       (extract-rights (map parse-module module-sexps))]))

  (define (parse-module-file [module : Bytes])
    : (Either Bytes Module)
    (case (parse-sexps (call-with-input-file module read-all-bytes))
      [(left v)
       (left v)]
      [(right (cons mod-sexp (empty)))
       (parse-module mod-sexp)]
      [(right _)
       (left #"Bad module: not one sexp")]))

  (define (read-module-files [modules : (List Bytes)]) : (List Bytes)
    (map (lambda ([module-name : Bytes])
           (call-with-input-file module-name read-all-bytes))
         modules)))
