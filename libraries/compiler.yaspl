#:module (compiler)
#:import {
  (bytes) {
    #:values
      bytes=?
  }
  (data indexed-set) {
    #:types
      IndexedSet
    #:values
      indexed-set->list
      indexed-set-add
      make-indexed-set
  }
  (dict) {
    #:values
      make-dict
      merge-dicts*
  }
  (either) {
    #:types
      Either
    #:values
      left
      right
    #:patterns
      left
      right
  }
  (intermediate-to-stack) {
    #:types
      CompiledModule
    #:values
      compile-module
    #:patterns
      compiled-module
  }
  (io) {
    #:values
      call-with-input-file
      read-all-bytes
  }
  (list) {
    #:types
      List
    #:values
      append
      empty
      extract-rights
      foldl
      map
    #:patterns
      cons
      empty
  }
  (maybe) {
    #:patterns
      just
      nothing
  }
  (module-name) {
    #:types
      ModName
    #:values
      mod-name=?
  }
  (module-signature) {
    #:types
      ModuleSignature
    #:values
      module-signature-known-functions
      module-signature-name
  }
  (prim) {
    #:types
      Bytes
  }
  (prim-implementation) {
    #:values
      prim-implementation
      prim-signature
  }
  (resolved-imports-language) {
    #:values
      import-resolution-errors->bytes
      resolve-imports
  }
  (sexp-parser) {
    #:values
      parse-sexps
  }
  (source-language) {
    #:types
      Module
    #:values
      parse-module
  }
  (source-to-intermediate-language) {
    #:values
      source->intermediate
  }
  (tuples) {
    #:types
      Tuple2
    #:values
      tuple2
    #:patterns
      tuple2
  }
  (validator) {
    #:values
      module-errors->bytes
      validate-module
  }
  (yaspl intermediate-to-register) {
    #:values
      [compile-module r:compile-module]
  }
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects)
}
(export
  #:types ()
  #:values (compile-main-module compile-modules parse-module-files parse-module-file)
  #:patterns ())
(types)

(define (compile-main-module
          [main-module : Module]
          [sigs : (List ModuleSignature)])
  : (Either Bytes (Tuple2 (List TopLevelObject) ModuleSignature))
  (let ([sigs
          (foldl
            (lambda ([sig : ModuleSignature] [acc : (IndexedSet ModuleSignature ModName)])
              (indexed-set-add acc sig))
            sigs
            (indexed-set-add
              (make-indexed-set module-signature-name mod-name=?)
              (prim-signature)))])
    (case (compile-module* main-module sigs)
      [(left v)
       (left v)]
      [(right (compiled-module tlos sig))
       (right
         (tuple2
           (optimize-tlos tlos
             (merge-dicts* (make-dict bytes=?)
                           (map module-signature-known-functions
                                (indexed-set->list
                                  (indexed-set-add sigs sig)))))
           sig))])))

(define (compile-modules [mods : (List Module)])
  : (Either Bytes (List TopLevelObject))
 (compile-modules*
   mods
   (indexed-set-add
     (make-indexed-set module-signature-name mod-name=?)
     (prim-signature))
   (empty)))

(define (compile-modules*
          [mods : (List Module)]
          [sigs : (IndexedSet ModuleSignature ModName)]
          [tlos : (List TopLevelObject)])
  : (Either Bytes (List TopLevelObject))
  (case (compile-module-list* mods sigs tlos)
    [(left v)
     (left v)]
    [(right (tuple2 sigs tlos))
     (right (optimize-tlos
              (append (prim-implementation) tlos)
              (merge-dicts* (make-dict bytes=?) (map module-signature-known-functions
                                                     (indexed-set->list sigs)))))]))

(define (compile-module-list*
          [mods : (List Module)]
          [sigs : (IndexedSet ModuleSignature ModName)]
          [tlos : (List TopLevelObject)])
  : (Either Bytes (Tuple2 (IndexedSet ModuleSignature ModName) (List TopLevelObject)))
  (case mods
    [(empty)
     (right (tuple2 sigs tlos))]
    [(cons mod mods)
     (case (compile-module* mod sigs)
       [(left v)
        (left v)]
       [(right (compiled-module new-tlos sig))
        (compile-module-list* mods
                              (indexed-set-add sigs sig)
                              (append new-tlos tlos))])]))

(define (compile-module*
          [mod : Module]
          [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either Bytes CompiledModule)
  (case (resolve-imports mod sigs)
    [(left v)
     (left (import-resolution-errors->bytes v))]
    [(right res-mod)
     (case (validate-module res-mod sigs)
       [(just v)
        (left (module-errors->bytes v))]
       [(nothing)
        (case (source->intermediate res-mod)
          [(left v) (left v)]
          [(right intermediate)
           (let ([reg (r:compile-module intermediate)])
             (right (compile-module intermediate)))])])]))

(define (parse-module-files [module-files : (List Bytes)])
  : (Either Bytes (List Module))
  (extract-rights (map parse-module-file module-files)))

(define (parse-module-file [module : Bytes])
  : (Either Bytes Module)
  (case (parse-sexps (call-with-input-file module read-all-bytes))
    [(left v)
     (left v)]
    [(right mod-sexps)
     (parse-module mod-sexps)]))
