(module compiler
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort )
      #:values (panic)
      #:patterns ())
    (io read-all-bytes)
    (source-language parse-module)
    (sexp-parser parse-sexp)
    (source-to-stack compile-module)
    (x86-64-stack-machine compile-stack-machine)
    (either
      #:types (Either)
      #:values ()
      #:patterns (left right)))
  (export main)
  (types)


  (define (a) (extract-either [either : (Either Bytes a)]) : a
    (case either
      [(right v) v]
      [(left v) (panic v)]))

  (define (main [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (begin
      (compile-stack-machine
        (compile-module
          (extract-either
            (parse-module
              (extract-either (parse-sexp (read-all-bytes stdin))))))
        stdout)
      0)))

