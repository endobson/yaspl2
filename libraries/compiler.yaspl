(module compiler
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort )
      #:values (panic make-bytes read-bytes)
      #:patterns ())
    (io read-all-bytes write-all-bytes)
    (list
      #:types (List)
      #:values (empty cons append map)
      #:patterns (empty cons))
    (dict make-dict dict-set dict-add-all)
    (tuples tuple2)
    (bytes bytes=?)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (source-to-stack
      #:types (ModuleSignature)
      #:values (compile-module module-signature)
      #:patterns (compiled-module))
    (stack-machine
      #:types (StackFunction)
      #:values ()
      #:patterns ())
    (x86-64-stack-machine compile-stack-machine)
    (prim-implementation prim-implementation)
    (either
      #:types (Either)
      #:values ()
      #:patterns (left right)))
  (export main cmain)
  (types)

  (define (prim-signature) : ModuleSignature
    (module-signature #"prim"
      (dict-add-all
        (make-dict bytes=?)
        (cons (tuple2 #"+" #"prim_add")
          (cons (tuple2 #"-" #"prim_sub")
            (cons (tuple2 #"*" #"prim_mult")
              (cons (tuple2 #"=" #"prim_equal")
                (cons (tuple2 #"<" #"prim_less_than")
                  (cons (tuple2 #"<=" #"prim_less_than_or_equal")
                    (cons (tuple2 #">" #"prim_greater_than")
                      (cons (tuple2 #">=" #"prim_greater_than_or_equal")
                        (cons (tuple2 #"bytes-ref" #"prim_bytes_ref")
                          (cons (tuple2 #"make-bytes" #"prim_make_bytes")
                            (cons (tuple2 #"bytes-set!" #"prim_bytes_set")
                              (cons (tuple2 #"bytes-length" #"prim_bytes_length")
                                (cons (tuple2 #"write-bytes" #"prim_write_bytes")
                                  (cons (tuple2 #"read-bytes" #"prim_read_bytes")
                                    (cons (tuple2 #"void" #"prim_void")
                                      (cons (tuple2 #"and" #"prim_and")
                                        (cons (tuple2 #"or" #"prim_or")
                                          (cons (tuple2 #"quotient" #"prim_quotient")
                                            (cons (tuple2 #"remainder" #"prim_remainder")
                                              (cons (tuple2 #"panic" #"prim_panic")
                                                (empty))))))))))))))))))))))
      (make-dict bytes=?)))


  (define (compile-modules [mods : (List Module)] [sigs : (List ModuleSignature)])
    : (List StackFunction)
    (case mods
      [(empty) (prim-implementation)]
      [(cons mod mods)
       (case (compile-module mod sigs)
         [(compiled-module code sig)
          (append code (compile-modules mods (cons sig sigs)))])]))

  (define (extract-modules [vals : (List (Either Bytes Module))] [stderr : OutputPort]) : (List Module)
    (case vals
      [(empty) (empty)]
      [(cons (right v) vals) (cons v (extract-modules vals stderr))]
      [(cons (left v) _)
       (begin
         (write-all-bytes v stderr)
         (panic #""))]))

  (define (extract-sexps [either : (Either Bytes (List Sexp))] [stderr : OutputPort]) : (List Sexp)
    (case either
      [(left v) (panic v)]
      [(right (empty))
       (begin
         (write-all-bytes #"No provided modules" stderr)
         (panic #""))]
      [(right sexps) sexps]))

  (define (main [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (begin
      (compile-stack-machine
        (compile-modules
          (extract-modules
            (map parse-module
              (extract-sexps
                (parse-sexps (read-all-bytes stdin))
                stderr))
            stderr)
          (cons (prim-signature) (empty)))
        stdout)
      0)))
