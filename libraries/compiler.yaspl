(module compiler
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort )
      #:values (panic)
      #:patterns ())
    (io read-all-bytes)
    (list
      #:types (List)
      #:values (empty cons)
      #:patterns (empty cons))
    (dict make-dict dict-set dict-add-all)
    (tuples tuple2)
    (bytes bytes=?)
    (source-language parse-module)
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (source-to-stack
      #:types (ModuleSignature)
      #:values (compile-module module-signature)
      #:patterns ())
    (x86-64-stack-machine compile-stack-machine)
    (either
      #:types (Either)
      #:values ()
      #:patterns (left right)))
  (export main)
  (types)

  (define (prim-signature) : ModuleSignature
    (module-signature #"prim"
      (dict-add-all
        (make-dict bytes=?)
        (cons (tuple2 #"+" #"prim_add")
          (cons (tuple2 #"-" #"prim_sub")
            (cons (tuple2 #"*" #"prim_mult")
              (cons (tuple2 #"bytes-ref" #"prim_bytes_ref")
                (cons (tuple2 #"make-bytes" #"prim_make_bytes")
                  (cons (tuple2 #"bytes-set!" #"prim_bytes_set")
                    (cons (tuple2 #"bytes-length" #"prim_bytes_length")
                      (cons (tuple2 #"write-bytes" #"prim_write_bytes")
                        (empty))))))))))))
      

  (define (a) (extract-either [either : (Either Bytes a)]) : a
    (case either
      [(left v) (panic v)]
      [(right v) v]))

  (define (extract-sexp [either : (Either Bytes (List Sexp))]) : Sexp
    (case either
      [(left v) (panic v)]
      [(right (empty)) (panic #"No provided modules")]
      [(right (cons sexp (empty))) sexp]
      [(right _) (panic #"Too many provided modules")]))

  (define (main [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (begin
      (compile-stack-machine
        (compile-module
          (extract-either
            (parse-module
              (extract-sexp (parse-sexps (read-all-bytes stdin)))))
          (cons (prim-signature) (empty)))
        stdout)
      0)))

