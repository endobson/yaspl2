(module compiler
  (import
    (library-compiler2 compile-modules)
    (prim
      #:types (Bytes Byte InputPort OutputPort Array)
      #:values (panic make-bytes read-bytes < + = array-length array-ref)
      #:patterns ())
    (io read-all-bytes write-all-bytes write-line call-with-input-file
        call-with-output-file)
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (empty cons append map list extract-rights)
      #:patterns (empty cons))
    (dict
      #:types (Dict)
      #:values (make-dict dict-add-all dict-add)
      #:patterns ())
    (tuples tuple2)
    (bytes bytes=? bytes-append make-null-terminated)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (intermediate-to-stack
      #:types (CompiledModule)
      #:values (compile-module)
      #:patterns (compiled-module))
    (stack-machine
      #:types (TopLevelObject)
      #:values (function-tlo)
      #:patterns (function-tlo trivial-closure-tlo))
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns ())
    (intermediate-to-static-module-signature
      #:types (StaticModuleSignature)
      #:values (module->static-module-signature)
      #:patterns ())
    (type-checker
      #:types ()
      #:values (type-check)
      #:patterns ())
    (source-to-intermediate-language source->intermediate)
    (stack-machine-optimizer optimize-tlos)
    (x86-64-stack-machine compile-stack-machine write-fragments)
    (prim-implementation prim-static-signature prim-signature prim-implementation)
    (validator validate-module)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export
    #:types ()
    #:values (main compile-modules extract-sexps read-module-files prim-signature)
    #:patterns ())
  (types)


  (define (extract-sexps [either : (Either Bytes (List Sexp))] [stderr : OutputPort]) : (List Sexp)
    (case either
      [(left v)
       (begin
         (write-line v stderr)
         (panic v))]
      [(right (empty))
       (begin
         (write-line #"No provided modules" stderr)
         (panic #""))]
      [(right sexps) sexps]))

  (define (read-module-files [index : Byte] [modules : (Array Bytes)]) : (List Bytes)
    (if (= index (array-length modules))
        (empty)
        (cons (call-with-input-file (array-ref modules index) read-all-bytes)
              (read-module-files (+ 1 index) modules))))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (if (< (array-length args) 3)
            (begin
              (write-line #"No module name supplied" stderr)
              1)
            (call-with-output-file (array-ref args 1)
              (lambda ([output : OutputPort])
                (case (extract-rights
                        (map parse-module
                          (extract-sexps
                            (parse-sexps (bytes-append (read-module-files 3 args)))
                            stderr)))
                  [(left v)
                   (begin
                     (write-line v stderr)
                     1)]
                  [(right modules)
                   (case (compile-modules
                           modules
                           (cons (prim-static-signature) (empty))
                           (cons (prim-signature) (empty))
                           (prim-implementation))
                     [(left v)
                      (begin
                        (write-line v stderr)
                        1)]
                     [(right code)
                      (let ([assembly (compile-stack-machine
                                        (bytes-append (varargs list (array-ref args 2) #"_main"))
                                        code)])
                        (begin
                          (write-fragments assembly output)
                          0))])])))))))
