(module bytes
  (import
    (prim
      #:types (Byte Bytes Boolean Void Array)
      #:values (+ - = >= bytes-set! bytes-ref void make-bytes bytes-length remainder quotient *
                array-ref array-length bitwise-and)
      #:patterns ())
    (list
      #:types (List)
      #:values (map)
      #:patterns (cons empty)))
  (export
    #:types ()
    #:values (bytes-copy! bytes=? subbytes bytes-append bytes make-null-terminated starts-with?
              bytes-ref/quad-le bytes-set!/quad-le
              bytes-set!/octo-le)
    #:patterns ())
  (types)

  (define (bytes-copy! [src : Bytes] [s-start : Byte] [s-end : Byte] [dest : Bytes] [d-start : Byte])
    : Void
    (if (= s-start s-end)
        (void)
        (begin
          (bytes-set! dest d-start (bytes-ref src s-start))
          (bytes-copy! src (+ s-start 1) s-end dest (+ d-start 1)))))


  (define (starts-with? [bytes : Bytes] [prefix : Bytes]) : Boolean
    (if (>= (bytes-length bytes) (bytes-length prefix))
        (bytes=? (subbytes bytes 0 (bytes-length prefix)) prefix)
        #f))

  (define (subbytes [src : Bytes] [start : Byte] [end : Byte]) : Bytes
    (let ([new-bytes (make-bytes (- end start))])
      (begin
        (bytes-copy! src start end new-bytes 0)
        new-bytes)))

  (define (bytes=? [b1 : Bytes] [b2 : Bytes]) : Boolean
    (if (= (bytes-length b1) (bytes-length b2))
        (inner-bytes=? b1 b2 0)
        #f))
  (define (inner-bytes=? [b1 : Bytes] [b2 : Bytes] [offset : Byte]) : Boolean
    (if (= offset (bytes-length b1))
        #t
        (if (= (bytes-ref b1 offset) (bytes-ref b2 offset))
            (inner-bytes=? b1 b2 (+ 1 offset))
            #f)))

  (define (sum [nums : (List Byte)]) : Byte
    (sum-helper nums 0))
  (define (sum-helper [nums : (List Byte)] [acc : Byte]) : Byte
    (case nums
      [(empty) acc]
      [(cons num nums) (sum-helper nums (+ num acc))]))


  (define (bytes-append [bytess : (List Bytes)]) : Bytes
    (let ([acc (make-bytes (sum (map bytes-length bytess)))])
      (bytes-append-helper acc 0 bytess)))
  (define (bytes-append-helper [acc : Bytes] [offset : Byte] [bytess : (List Bytes)]) : Bytes
    (case bytess
      [(empty) acc]
      [(cons input bytess)
       (let ([len (bytes-length input)])
         (begin
           (bytes-copy! input 0 len acc offset)
           (bytes-append-helper acc (+ offset len) bytess)))]))

  (define (bytes [vs : (Array Byte)]) : Bytes
    (let ([acc (make-bytes (array-length vs))])
      (bytes-helper vs 0 acc)))
  (define (bytes-helper [vs : (Array Byte)] [offset : Byte] [acc : Bytes]) : Bytes
    (if (= offset (array-length vs))
        acc
        (begin
          (bytes-set! acc offset (array-ref vs offset))
          (bytes-helper vs (+ 1 offset) acc))))

  (define (make-null-terminated [bytes : Bytes]) : Bytes
    (let ([new-bytes (make-bytes (+ (bytes-length bytes) 1))])
      (begin
        (bytes-copy! bytes 0 (bytes-length bytes) new-bytes 0)
        new-bytes)))

  (define (bytes-ref/quad-le [bytes : Bytes] [offset : Byte]) : Byte
    (+ (bytes-ref bytes (+ offset 0))
       (* 256
          (+ (bytes-ref bytes (+ offset 1))
              (* 256
                 (+ (bytes-ref bytes (+ offset 2))
                    (* 256
                       (bytes-ref bytes (+ offset 3)))))))))

  (define (bytes-set!/quad-le [bytes : Bytes] [offset : Byte] [v : Byte]) : Void
    (begin
      (bytes-set! bytes offset       (bitwise-and v #xFF))
      (bytes-set! bytes (+ offset 1) (bitwise-and (arithmetic-shift-left (bitwise-and #xFF00 v) 8) #xFF))
      (bytes-set! bytes (+ offset 2) (bitwise-and (arithmetic-shift-left (bitwise-and #xFF0000 v) 16) #xFF))
      (bytes-set! bytes (+ offset 3) (bitwise-and (arithmetic-shift-left (bitwise-and #xFF000000 v) 24) #xFF))))

  (define (arithmetic-shift-left [v : Byte] [amount : Byte]) : Byte
    (if (= amount 0)
        v
        (arithmetic-shift-left (quotient v 2) (- amount 1))))

  ;; TODO(endobson): This is possibly buggy because of the shift
  (define (bytes-set!/octo-le [bytes : Bytes] [offset : Byte] [v : Byte]) : Void
    (begin
      (bytes-set! bytes offset       (bitwise-and v #xFF))
      (bytes-set! bytes (+ offset 1) (bitwise-and (arithmetic-shift-left v 8) #xFF))
      (bytes-set! bytes (+ offset 2) (bitwise-and (arithmetic-shift-left v 16) #xFF))
      (bytes-set! bytes (+ offset 3) (bitwise-and (arithmetic-shift-left v 24) #xFF))
      (bytes-set! bytes (+ offset 4) (bitwise-and (arithmetic-shift-left v 32) #xFF))
      (bytes-set! bytes (+ offset 5) (bitwise-and (arithmetic-shift-left v 40) #xFF))
      (bytes-set! bytes (+ offset 6) (bitwise-and (arithmetic-shift-left v 48) #xFF))
      (bytes-set! bytes (+ offset 7) (bitwise-and (arithmetic-shift-left v 56) #xFF)))))
