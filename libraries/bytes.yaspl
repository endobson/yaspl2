(module bytes
  (import (prim + - = bytes-set! bytes-ref void make-bytes bytes-length))
  (export bytes-copy! bytes=? subbytes)
  (types)

  (define (bytes-copy! [src : Bytes] [s-start : Byte] [s-end : Byte] [dest : Bytes] [d-start : Byte])
    : Void
    (if (= s-start s-end)
        (void)
        (begin
          (bytes-set! dest d-start (bytes-ref src s-start))
          (bytes-copy! src (+ s-start 1) s-end dest (+ d-start 1)))))

  (define (subbytes [src : Bytes] [start : Byte] [end : Byte]) : Bytes
    (let ([new-bytes (make-bytes (- end start))])
      (begin
        (bytes-copy! src start end new-bytes 0)
        new-bytes)))

 (define (bytes=? [b1 : Bytes] [b2 : Bytes]) : Boolean
   (if (= (bytes-length b1) (bytes-length b2))
       (inner-bytes=? b1 b2 0)
       #f))
 (define (inner-bytes=? [b1 : Bytes] [b2 : Bytes] [offset : Byte]) : Boolean
   (if (= offset (bytes-length b1))
       #t
       (if (= (bytes-ref b1 offset) (bytes-ref b2 offset))
           (inner-bytes=? b1 b2 (+ 1 offset))
           #f))))
