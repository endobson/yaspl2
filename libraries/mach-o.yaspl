#:module (mach-o)
#:import {
  (bytes)
  (either)
  (io)
  (list)
  (numbers)
  (prim)
  (tuples)
}
(export
  #:types (MachOFile MachOHeader MachOLoadCommand SymbolTableEntry RelocationEntry SymbolTable
           Section64 VersionMin LinkeditData LoadSegment64 UnixThread)
  #:values (read-mach-o mach-o-file mach-o-header read-symbol-table/strings read-symbol-table/symbols
            mach-o-header-commands-size symbol-table-entry-name symbol-table-entry
            read-relocation-entry symbol-table-entry-value version-min symbol-table linkedit-data
            section64 load-segment64-sections load-segment64 lc-unix-thread lc-symbol-table
            lc-source-version lc-load-segment64 lc-version-min-macosx lc-data-in-code unix-thread)
  #:patterns (mach-o-file mach-o-header lc-load-segment64 lc-symbol-table lc-version-min-macosx
              lc-data-in-code lc-source-version lc-unix-thread symbol-table-entry relocation-entry
              section64 load-segment64 symbol-table version-min linkedit-data unix-thread))
(types
  (define-type MachOFile
    (mach-o-file
      [header : MachOHeader]
      [commands : (List MachOLoadCommand)]
      [raw-content : Bytes]))
  (define-type MachOHeader
    (mach-o-header
      [magic : U32]
      [cpu-type : U32]
      [cpu-subtype : U32]
      [file-type : U32]
      [number-commands : U32]
      [commands-size : U32]
      [flags : U32]
      [reserved : U32]))
  (define-type MachOLoadCommand
    (lc-unix-thread [v : UnixThread])
    (lc-load-segment64 [v : LoadSegment64])
    (lc-symbol-table [v : SymbolTable])
    (lc-source-version)
    (lc-version-min-macosx [v : VersionMin])
    (lc-data-in-code [v : LinkeditData]))

  (define-type LoadSegment64
    (load-segment64
      [name : Bytes]
      [vm-addr : U64]
      [vm-size : U64]
      [file-offset : U64]
      [file-size : U64]
      [max-protection : U32]
      [init-protection : U32]
      [flags : U32]
      [sections : (List Section64)]))

  (define-type Section64
    (section64
      [name : Bytes]
      [segment-name : Bytes]
      [addr : U64]
      [size : U64]
      [offset : U32]
      [align : U32]
      [relocation-offset : U32]
      [num-relocations : U32]
      [flags : U32]
      ;[reserved1 : U32]
      ;[reserved2 : U32]
      ;[reserved3 : U32]
      ))

  (define-type VersionMin
    (version-min
      [version-major : U8] ;; TODO this should be a u16
      [version-minor : U8]
      [version-patch : U8]
      [sdk-major : U8] ;; TODO this should be a u16
      [sdk-minor : U8]
      [sdk-patch : U8]))

  (define-type UnixThread
    (unix-thread
      [start-address : U64]))

  (define-type SymbolTable
    (symbol-table
      [offset : U32]
      [number : U32]
      [string-offset : U32]
      [string-size : U32]))

  (define-type LinkeditData
    (linkedit-data
      [offset : U32]
      [size : U32]))

  (define-type RelocationEntry
    (relocation-entry
      [address : U32]
      [symbol-num : U32] ;; Actually a U24
      [type : U8]))

  (define-type SymbolTableEntry
    (symbol-table-entry
      [name : Bytes]
      [type : U8]
      [section : U8]
      [description : U8] ;; TODO make this U16
      [value : U64])))


(define (parse-load-command [bytes : Bytes] [offset : Int])
  : (Either Bytes (Tuple2 MachOLoadCommand Int))
  (if (< (bytes-length bytes) (+ offset 8))
      (left #"Not enough bytes")
      (let ([number (bytes-ref/quad-le bytes (+ offset 0))])
        (let ([command-size (bytes-ref/quad-le bytes (+ offset 4))])
          (if (< (bytes-length bytes) (+ offset command-size))
              (left #"Not enough bytes")
              (let ([command-buffer (subbytes bytes (+ offset 8) (+ offset command-size))])
                (case
                  (case number
                    [#x02 (parse-lc-symbol-table command-buffer)]
                    [#x19 (parse-lc-load-segment64 command-buffer)]
                    [#x24 (parse-lc-version-min-macosx command-buffer)]
                    [#x29 (parse-lc-data-in-code command-buffer)]
                    [x ((lambda () : (Either Bytes MachOLoadCommand)
                          (left (bytes-append
                                (varargs list #"Unknown load command: #x"
                                              (integer->hex-bytes x))))))])
                  [(left v) (left v)]
                  [(right command)
                   (right (tuple2 command (+ offset command-size)))])))))))



(define (parse-lc-load-segment64 [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
  (if (< (bytes-length bytes) #x40)
      (left #"Too short lc-load-segment64")
      (let ([num-sections (bytes-ref/quad-le bytes #x38)])
        (if (not (= (bytes-length bytes) (+ #x40 (* num-sections #x50))))
            (left #"Wrong length lc-load-segment64")
            (right
              (lc-load-segment64
                (load-segment64
                  (read-16-byte-name bytes #x00 0)
                  (bytes-ref/u64-le bytes #x10)
                  (bytes-ref/u64-le bytes #x18)
                  (bytes-ref/u64-le bytes #x20)
                  (bytes-ref/u64-le bytes #x28)
                  (u32 (bytes-ref/quad-le bytes #x30))
                  (u32 (bytes-ref/quad-le bytes #x34))
                  (u32 (bytes-ref/quad-le bytes #x3c))
                  (parse-section64s num-sections #x40 bytes))))))))

(define (parse-section64s [amount : Int] [offset : Int] [bytes : Bytes]) : (List Section64)
  (if (= amount 0)
      (empty)
      (cons
        (parse-section64 offset bytes)
        (parse-section64s (- amount 1) (+ offset #x50) bytes))))

(define (parse-section64 [offset : Int] [bytes : Bytes]) : Section64
  (section64
    (read-16-byte-name bytes (+ offset #x00) 0)
    (read-16-byte-name bytes (+ offset #x10) 0)
    (bytes-ref/u64-le bytes (+ offset #x20))
    (bytes-ref/u64-le bytes (+ offset #x28))
    (u32 (bytes-ref/quad-le bytes (+ offset #x30)))
    (u32 (bytes-ref/quad-le bytes (+ offset #x34)))
    (u32 (bytes-ref/quad-le bytes (+ offset #x38)))
    (u32 (bytes-ref/quad-le bytes (+ offset #x3c)))
    (u32 (bytes-ref/quad-le bytes (+ offset #x40)))
    ;; TODO Check that this is 0
    ;; TODO Check that this is 0
    ;; TODO Check that this is 0
    ))


(define (read-16-byte-name [bytes : Bytes] [init-offset : Int] [num-chars : Int]) : Bytes
  (if (= num-chars 16)
      (subbytes bytes init-offset (+ init-offset num-chars))
      (if (= (u8->s64 (bytes-ref bytes (+ init-offset num-chars))) 0)
          (subbytes bytes init-offset (+ init-offset num-chars))
          (read-16-byte-name bytes init-offset (+ 1 num-chars)))))

(define (parse-lc-symbol-table [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
  (if (not (= (bytes-length bytes) #x10))
      (left #"Wrong length lc-symbol-table")
      (right
        (lc-symbol-table
          (symbol-table
            (u32 (bytes-ref/quad-le bytes #x00))
            (u32 (bytes-ref/quad-le bytes #x04))
            (u32 (bytes-ref/quad-le bytes #x08))
            (u32 (bytes-ref/quad-le bytes #x0c)))))))

(define (parse-lc-data-in-code [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
  (if (not (= (bytes-length bytes) #x08))
      (left #"Wrong length lc-data-in-code")
      (right
        (lc-data-in-code
          (linkedit-data
            (u32 (bytes-ref/quad-le bytes #x00))
            (u32 (bytes-ref/quad-le bytes #x04)))))))

(define (parse-lc-version-min-macosx [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
  (if (not (= (bytes-length bytes) #x08))
      (left #"Wrong length lc-version-min-macosx")
      (if (or (not (= (u8->s64 (bytes-ref bytes 3)) 0))
              (not (= (u8->s64 (bytes-ref bytes 7)) 0)))
          (left #"Not yet supported version min")
          (right
            (lc-version-min-macosx
              (version-min
                (bytes-ref bytes #x02)
                (bytes-ref bytes #x01)
                (bytes-ref bytes #x00)
                (bytes-ref bytes #x06)
                (bytes-ref bytes #x05)
                (bytes-ref bytes #x04)))))))

(define (parse-load-commands [amount : Int] [bytes : Bytes] [offset : Int])
  : (Either Bytes (Tuple2 (List MachOLoadCommand) Int))
  (if (= amount 0)
      (right (tuple2 (empty) offset))
      (case (parse-load-command bytes offset)
        [(left v) (left v)]
        [(right (tuple2 cmd offset))
         (case (parse-load-commands (- amount 1) bytes offset)
           [(left v) (left v)]
           [(right (tuple2 cmds offset))
            (right (tuple2 (cons cmd cmds) offset))])])))

(define (read-symbol-table/symbols
          [offset : Int]
          [entries : Bytes]
          [strings : Bytes]) : (List SymbolTableEntry)
  (if (>= offset (bytes-length entries))
      (empty)
      (cons
        (read-symbol-table/symbol offset entries strings)
        (read-symbol-table/symbols (+ offset 16) entries strings))))

(define (read-symbol-table/symbol
          [offset : Int]
          [entries : Bytes]
          [strings : Bytes]) : SymbolTableEntry
  (let ([string-offset (bytes-ref/quad-le entries offset)])
    (let ([string (read-null-terminated-string strings string-offset string-offset)])
      (symbol-table-entry
        string
        (bytes-ref entries (+ offset 4))
        (bytes-ref entries (+ offset 5))
        (u8 0) ;;(bytes-ref/u16-le entries (+ offset 6))
        (bytes-ref/u64-le entries (+ offset 8))))))


(define (read-symbol-table/strings [bytes : Bytes] [offset : Int]) : (List Bytes)
  (if (>= offset (bytes-length bytes))
      (empty)
      (let ([symbol (read-null-terminated-string bytes offset offset)])
        (if (= (bytes-length symbol) 0)
            (empty)
            (cons
              symbol
              (read-symbol-table/strings bytes (+ offset (+ 1 (bytes-length symbol)))))))))

(define (read-null-terminated-string [bytes : Bytes] [init : Int] [end : Int]) : Bytes
  (if (>= end (bytes-length bytes))
      (panic #"Bad null terminated string")
      (case (u8->s64 (bytes-ref bytes end))
        [0 (subbytes bytes init end)]
        [_ (read-null-terminated-string bytes init (+ 1 end))])))

(define (read-relocation-entry [offset : Int] [bytes : Bytes]) : RelocationEntry
  (relocation-entry
    (u32 (bytes-ref/quad-le bytes offset))
    (u32 (bitwise-and #xFFFFFF (bytes-ref/quad-le bytes (+ offset 4))))
    (bytes-ref bytes (+ offset 7))))

(define (read-mach-o [input : InputPort]) : (Either Bytes MachOFile)
  (match-define raw-content (read-all-bytes input))
  (if (< (bytes-length raw-content) 32)
      (left #"Not enough bytes ")
      (let ([header
             (mach-o-header
               (u32 (bytes-ref/quad-le raw-content 0))
               (u32 (bytes-ref/quad-le raw-content 4))
               (u32 (bytes-ref/quad-le raw-content 8))
               (u32 (bytes-ref/quad-le raw-content 12))
               (u32 (bytes-ref/quad-le raw-content 16))
               (u32 (bytes-ref/quad-le raw-content 20))
               (u32 (bytes-ref/quad-le raw-content 24))
               (u32 (bytes-ref/quad-le raw-content 28)))])

          (case (parse-load-commands (u32->s64 (mach-o-header-number-commands header)) raw-content 32)
            [(left v) (left v)]
            [(right (tuple2 commands offset))
             (right (mach-o-file header commands
                                 (subbytes raw-content offset (bytes-length raw-content))))]))))
