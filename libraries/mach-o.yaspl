(module mach-o
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array Void U32 U8 S64)
      #:values (- * + < = array-length array-ref read-bytes make-bytes
                panic void bytes-ref bytes-length or)
      #:patterns ())
    (boolean not)
    (list
      #:types (List)
      #:values (cons empty)
      #:patterns ())
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (io write-line write-all-bytes call-with-input-file)
    (numbers integer->hex-bytes integer->decimal-bytes)
    (bytes subbytes bytes-ref/quad-le bytes-ref/octo-le make-null-terminated))
  (export
    #:types (MachOFile MachOLoadCommand)
    #:values (read-mach-o)
    #:patterns (mach-o-file mach-o-header lc-segment64 lc-symtab lc-version-min-macosx
                lc-data-in-code))
  (types
    (define-type MachOFile
      (mach-o-file
        [header MachOHeader]
        [commands (List MachOLoadCommand)]))
    (define-type MachOHeader
      (mach-o-header
        [magic Byte]
        [cpu-type Byte]
        [cpu-subtype Byte]
        [file-type Byte]
        [number-commands Byte]
        [commands-size Byte]
        [flags Byte]
        [reserved Byte]))
    (define-type MachOLoadCommand
      (lc-segment64 [v LoadSegment64])
      (lc-symtab [v SymbolTable])
      (lc-version-min-macosx [v VersionMin])
      (lc-data-in-code [v LinkeditData]))

    (define-type LoadSegment64
      (load-segment64
        [name Bytes]
        [vm-addr Byte]
        [vm-size Byte]
        [file-offset Byte]
        [file-size Byte]
        [max-protection Byte]
        [init-protection Byte]
        [flags Byte]
        [sections (List Section64)]))

    (define-type Section64
      (section64
        [segment-name Bytes]
        [name Bytes]
        [addr Byte]
        [size Byte]
        [offset Byte]
        [relocation-offset Byte]
        [num-relocations Byte]
        [flags Byte]))


    (define-type VersionMin
      (version-min
        [version-major U8] ;; TODO this should be a u16
        [version-minor U8]
        [version-patch U8]
        [sdk-major U8] ;; TODO this should be a u16
        [sdk-minor U8]
        [sdk-patch U8]))

    (define-type SymbolTable
      (symbol-table
        [offset Byte]
        [number Byte]
        [string-offset Byte]
        [string-size Byte]))

    (define-type LinkeditData
      (linkedit-data
        [offset U32]
        [size U32])))


  (define (read-load-command [input : InputPort]) : (Either Bytes MachOLoadCommand)
    (let ([standard-header (make-bytes 8)])
      (if (not (= 8 (read-bytes standard-header input 0 8)))
          (left #"Not enough bytes")
          (let ([number (bytes-ref/quad-le standard-header 0)])
            (let ([command-size (bytes-ref/quad-le standard-header 4)])
              (let ([command-buffer (make-bytes (- command-size 8))])
                (if (= (- command-size 8) (read-bytes command-buffer input 0 (- command-size 8)))
                    (case number
                      [#x02 (parse-lc-symtab command-buffer)]
                      [#x19 (parse-lc-segment64 command-buffer)]
                      [#x24 (parse-lc-version-min-macosx command-buffer)]
                      [#x29 (parse-lc-data-in-code command-buffer)]
                      [_ (left #"Unknown load command")])
                    (left #"Not enough bytes"))))))))

  (define (parse-lc-segment64 [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
    (if (< (bytes-length bytes) #x40)
        (left #"Too short lc-segment64")
        (let ([num-sections (bytes-ref/quad-le bytes #x38)])
          (if (not (= (bytes-length bytes) (+ #x40 (* num-sections #x50))))
              (left #"Wrong length lc-segment64")
              (right
                (lc-segment64
                  (load-segment64
                    (read-16-byte-name #"" #x00 0)
                    (bytes-ref/octo-le bytes #x10)
                    (bytes-ref/octo-le bytes #x18)
                    (bytes-ref/octo-le bytes #x20)
                    (bytes-ref/octo-le bytes #x28)
                    (bytes-ref/quad-le bytes #x30)
                    (bytes-ref/quad-le bytes #x34)
                    (parse-section64s num-sections #x40 bytes)
                    (bytes-ref/quad-le bytes #x3c))))))))

  (define (parse-section64s [amount : S64] [offset : S64] [bytes : Bytes]) : (List Section64)
    (if (= amount 0)
        (empty)
        (cons
          (parse-section64 offset bytes)
          (parse-section64s (- amount 1) (+ offset #x50) bytes))))

  (define (parse-section64 [offset : S64] [bytes : Bytes]) : Section64
    (section64
      (read-16-byte-name #"" #x00 0)
      (read-16-byte-name #"" #x10 0)
      (bytes-ref/octo-le bytes #x20)
      (bytes-ref/octo-le bytes #x28)
      (bytes-ref/quad-le bytes #x30)
      ;; TODO Check that this is 0
      (bytes-ref/quad-le bytes #x38)
      (bytes-ref/quad-le bytes #x40)
      (bytes-ref/quad-le bytes #x44)
      ;; TODO Check that this is 0
      ;; TODO Check that this is 0
      ;; TODO Check that this is 0
      ))


  (define (read-16-byte-name [bytes : Bytes] [init-offset : S64] [num-chars : S64]) : Bytes
    (if (or (= num-chars 16)
            (= (bytes-ref bytes (+ init-offset num-chars))))
        (subbytes bytes init-offset num-chars)
        (read-16-byte-name bytes init-offset (+ 1 num-chars))))

  (define (parse-lc-symtab [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
    (if (not (= (bytes-length bytes) #x10))
        (left #"Wrong length lc-symtab")
        (right
          (lc-symtab
            (symbol-table
              (bytes-ref/quad-le bytes #x00)
              (bytes-ref/quad-le bytes #x04)
              (bytes-ref/quad-le bytes #x08)
              (bytes-ref/quad-le bytes #x0c))))))

  (define (parse-lc-data-in-code [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
    (if (not (= (bytes-length bytes) #x08))
        (left #"Wrong length lc-data-in-code")
        (right
          (lc-data-in-code
            (linkedit-data
              (bytes-ref/quad-le bytes #x00)
              (bytes-ref/quad-le bytes #x04))))))

  (define (parse-lc-version-min-macosx [bytes : Bytes]) : (Either Bytes MachOLoadCommand)
    (if (not (= (bytes-length bytes) #x08))
        (left #"Wrong length lc-version-min-macosx")
        (if (or (not (= (bytes-ref bytes 3) 0))
                (not (= (bytes-ref bytes 7) 0)))
            (left #"Not yet supported version min")
            (right
            (lc-version-min-macosx
              (version-min
                (bytes-ref bytes #x02)
                (bytes-ref bytes #x01)
                (bytes-ref bytes #x00)
                (bytes-ref bytes #x06)
                (bytes-ref bytes #x05)
                (bytes-ref bytes #x04)))))))


  (define (read-load-commands [amount : S64] [input : InputPort])
    : (Either Bytes (List MachOLoadCommand))
    (if (= amount 0)
        (right (empty))
        (case (read-load-command input)
          [(left v) (left v)]
          [(right cmd)
           (case (read-load-commands (- amount 1) input)
             [(left v) (left v)]
             [(right cmds)
              (right (cons cmd cmds))])])))

  (define (read-mach-o [input : InputPort]) : (Either Bytes MachOFile)
    (let ([header-bytes (make-bytes 32)])
      (if (not (= 32 (read-bytes header-bytes input 0 32)))
          (left #"Not enough bytes")
          (let ([header
                 (mach-o-header
                   (bytes-ref/quad-le header-bytes 0)
                   (bytes-ref/quad-le header-bytes 4)
                   (bytes-ref/quad-le header-bytes 8)
                   (bytes-ref/quad-le header-bytes 12)
                   (bytes-ref/quad-le header-bytes 16)
                   (bytes-ref/quad-le header-bytes 20)
                   (bytes-ref/quad-le header-bytes 24)
                   (bytes-ref/quad-le header-bytes 28))])
            (case (read-load-commands (mach-o-header-number-commands header) input)
              [(left v) (left v)]
              [(right commands)
               (right (mach-o-file header commands))]))))))
