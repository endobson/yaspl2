(module mach-o
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array Void S64)
      #:values (- < = array-length array-ref read-bytes make-bytes
                panic void bytes-ref)
      #:patterns ())
    (boolean not)
    (list
      #:types (List)
      #:values (cons empty)
      #:patterns ())
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (io write-line write-all-bytes call-with-input-file)
    (numbers integer->hex-bytes integer->decimal-bytes)
    (bytes bytes-ref/quad-le make-null-terminated))
  (export
    #:types (MachOFile MachOLoadCommand)
    #:values (read-mach-o)
    #:patterns (mach-o-file mach-o-header lc-segment-64 lc-symtab lc-version-min-macosx
                lc-data-in-code))
  (types
    (define-type MachOFile
      (mach-o-file
        [header MachOHeader]
        [commands (List MachOLoadCommand)]))
    (define-type MachOHeader
      (mach-o-header
        [magic Byte]
        [cpu-type Byte]
        [cpu-subtype Byte]
        [file-type Byte]
        [number-commands Byte]
        [commands-size Byte]
        [flags Byte]
        [reserved Byte]))
    (define-type MachOLoadCommand
      (lc-segment-64 [raw-contents Bytes])
      (lc-symtab [raw-contents Bytes])
      (lc-version-min-macosx [raw-contents Bytes])
      (lc-data-in-code [raw-contents Bytes])))


  (define (read-load-command [input : InputPort]) : (Either Bytes MachOLoadCommand)
    (let ([standard-header (make-bytes 8)])
      (if (not (= 8 (read-bytes standard-header input 0 8)))
          (left #"Not enough bytes")
          (let ([number (bytes-ref/quad-le standard-header 0)])
            (let ([command-size (bytes-ref/quad-le standard-header 4)])
              (let ([command-buffer (make-bytes (- command-size 8))])
                (if (= (- command-size 8) (read-bytes command-buffer input 0 (- command-size 8)))
                    (case number
                      [#x02 (right (lc-symtab command-buffer))]
                      [#x19 (right (lc-segment-64 command-buffer))]
                      [#x24 (right (lc-version-min-macosx command-buffer))]
                      [#x29 (right (lc-data-in-code command-buffer))]
                      [_ (left #"Unknown load command")])
                    (left #"Not enough bytes"))))))))

  (define (read-load-commands [amount : S64] [input : InputPort])
    : (Either Bytes (List MachOLoadCommand))
    (if (= amount 0)
        (right (empty))
        (case (read-load-command input)
          [(left v) (left v)]
          [(right cmd)
           (case (read-load-commands (- amount 1) input)
             [(left v) (left v)]
             [(right cmds)
              (right (cons cmd cmds))])])))

  (define (read-mach-o [input : InputPort]) : (Either Bytes MachOFile)
    (let ([header-bytes (make-bytes 32)])
      (if (not (= 32 (read-bytes header-bytes input 0 32)))
          (left #"Not enough bytes")
          (let ([header
                 (mach-o-header
                   (bytes-ref/quad-le header-bytes 0)
                   (bytes-ref/quad-le header-bytes 4)
                   (bytes-ref/quad-le header-bytes 8)
                   (bytes-ref/quad-le header-bytes 12)
                   (bytes-ref/quad-le header-bytes 16)
                   (bytes-ref/quad-le header-bytes 20)
                   (bytes-ref/quad-le header-bytes 24)
                   (bytes-ref/quad-le header-bytes 28))])
            (case (read-load-commands (mach-o-header-number-commands header) input)
              [(left v) (left v)]
              [(right commands)
               (right (mach-o-file header commands))]))))))
