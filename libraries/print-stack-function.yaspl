(module print_stack_function ;; TODO fix mangling of module names
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array Void)
      #:values (panic make-bytes read-bytes < + = array-length array-ref open-input-file
                open-output-file close-output-port)
      #:patterns ())
    (io read-all-bytes write-all-bytes write-line)
    (list
      #:types (List)
      #:values (empty cons append map list)
      #:patterns (empty cons))
    (maybe
      #:types (Maybe)
      #:values ()
      #:patterns (just nothing))
    (dict make-dict dict-set dict-add-all)
    (tuples tuple2)
    (bytes bytes=? bytes-append make-null-terminated)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (source-to-stack
      #:types (ModuleSignature)
      #:values (compile-module module-signature)
      #:patterns (compiled-module))
    (stack-machine
      #:types (StackFunction)
      #:values ()
      #:patterns (stack-function))
    (x86-64-stack-machine compile-stack-machine)
    (prim-implementation prim-implementation)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (compiler compile-modules extract-modules extract-sexps read-module-files prim-signature))
  (export)
  (types)

  (define (find-function [name : Bytes] [code : (List StackFunction)]) : (Either Bytes StackFunction)
    (case code
      [(empty) (left #"Function not found")]
      [(cons func code)
       (case func
         [(stack-function func-name _)
          (if (bytes=? name func-name)
              (right func)
              (find-function name code))])]))

  (define (print-function [fun : StackFunction] [output : OutputPort]) : Void
    (case fun
     [(stack-function fun-name _)
      (begin
        (write-line fun-name output))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 3)
        (begin
          (write-line #"Module/Function name not supplied" stderr)
          1)
        (begin
          (case (compile-modules
                  (extract-modules
                    (map parse-module
                      (extract-sexps
                        (parse-sexps (bytes-append (read-module-files 3 args)))
                        stderr))
                    stderr)
                  (cons (prim-signature) (empty))
                  (prim-implementation))
            [(left v)
             (begin
               (write-line v stderr)
               (panic #""))]
            [(right code)
             (case (find-function (bytes-append (varargs list (array-ref args 1) #"_" (array-ref args 2))) code)
               [(left msg) (panic msg)]
               [(right func)
                (print-function func stdout)])])
          0))))
