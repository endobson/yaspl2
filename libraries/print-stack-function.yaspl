(module print_stack_function ;; TODO fix mangling of module names
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array Void)
      #:values (panic make-bytes read-bytes < + = array-length array-ref open-input-file
                open-output-file close-output-port void)
      #:patterns ())
    (io read-all-bytes write-all-bytes write-line newline)
    (list
      #:types (List)
      #:values (empty cons append map list)
      #:patterns (empty cons))
    (numbers integer->decimal-bytes)
    (maybe
      #:types (Maybe)
      #:values ()
      #:patterns (just nothing))
    (dict make-dict dict-set dict-add-all)
    (tuples tuple2)
    (bytes bytes=? bytes-append make-null-terminated)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (source-to-stack
      #:types ()
      #:values (compile-module)
      #:patterns (compiled-module))
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns ())
    (stack-machine
      #:types (StackFunction StackBasicBlock StackCmd StackTerminal VariantCases BinMathOp
               BinLogicMathOp TopLevelObject)
      #:values ()
      #:patterns (
          stack-function stack-basic-block boolean-jmp uncond-jmp variant-switch return
          no-catch-all-case catch-all-case variant-case num-lit-cmd boolean-lit-cmd
          bytes-lit-cmd bytes-cmp-cmd create-closure-cmd dup-cmd alloc-variant-cmd variant-ref-cmd
          bin-math-cmd bin-logic-math-cmd make-array-from-stack-cmd make-array-cmd
          array-length-cmd array-ref-cmd array-set!-cmd pop-cmd swap-cmd fun-call-cmd
          known-fun-call-cmd
          bin-math-cmd bin-add-op bin-sub-op bin-mult-op bin-quotient-op bin-remainder-op
          bin-logic-math-cmd less-than-op less-than-or-equal-op equal-op greater-than-or-equal-op
          greater-than-op function-tlo trivial-closure-tlo))
    (prim-implementation prim-implementation)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (compiler compile-modules extract-modules extract-sexps read-module-files prim-signature)
    (stack-machine-optimizer optimize-stack-function))
  (export)
  (types)

  (define (find-function [name : Bytes] [code : (List TopLevelObject)]) : (Either Bytes StackFunction)
    (case code
      [(empty) (left #"Function not found")]
      [(cons (function-tlo func) code)
       (case func
         [(stack-function func-name _)
          (if (bytes=? name func-name)
              (right func)
              (find-function name code))])]
      [(cons (trivial-closure-tlo _ _) code)
       (find-function name code)]))

  (define (print-function [fun : StackFunction] [output : OutputPort]) : Void
    (case fun
     [(stack-function fun-name blocks)
      (begin
        (write-line fun-name output)
        (print-blocks blocks 0 output))]))

  (define (print-blocks [blocks : (List StackBasicBlock)] [index : Byte] [output : OutputPort]) : Void
    (case blocks
     [(empty) (void)]
     [(cons (stack-basic-block cmds terminal) blocks)
      (begin
        (write-all-bytes #"Block " output)
        (write-all-bytes (integer->decimal-bytes index) output)
        (newline output)
        (print-commands cmds output)
        (print-terminal terminal output)
        (print-blocks blocks (+ 1 index) output))]))

  (define (print-commands [commands : (List StackCmd)] [output : OutputPort]) : Void
    (case commands
     [(empty) (void)]
     [(cons command commands)
      (begin
        (write-all-bytes #"  " output)
        (case command
          [(num-lit-cmd v)
           (begin
             (write-all-bytes #"numeric-literal: " output)
             (write-all-bytes (integer->decimal-bytes v) output)
             (newline output))]
          [(boolean-lit-cmd v)
           (begin
             (write-all-bytes #"boolean-literal: " output)
             (write-all-bytes (if v #"true" #"false") output)
             (newline output))]
          [(bytes-lit-cmd v)
           (begin
             (write-all-bytes #"bytes-literal: " output)
             (write-all-bytes v output)
             (newline output))]
          [(bytes-cmp-cmd)
           (write-line #"bytes-cmp" output)]
          [(create-closure-cmd free-vars)
           (begin
             (write-all-bytes #"create-closure: " output)
             (write-all-bytes (integer->decimal-bytes free-vars) output)
             (newline output))]
          [(dup-cmd offset)
           (begin
             (write-all-bytes #"dup: " output)
             (write-all-bytes (integer->decimal-bytes offset) output)
             (newline output))]
          [(alloc-variant-cmd tag _)
           (begin
             (write-all-bytes #"alloc-variant: " output)
             (write-all-bytes (integer->decimal-bytes tag) output)
             (newline output))]
          [(variant-ref-cmd tag field)
           (begin
             (write-all-bytes #"variant-ref: " output)
             (write-all-bytes (integer->decimal-bytes tag) output)
             (write-all-bytes #" " output)
             (write-all-bytes (integer->decimal-bytes field) output)
             (newline output))]
          [(bin-math-cmd op)
           (write-line
             (case op
               [(bin-add-op) #"add"]
               [(bin-sub-op) #"sub"]
               [(bin-mult-op) #"mult"]
               [(bin-quotient-op) #"quotient"]
               [(bin-remainder-op) #"remainder"])
             output)]
          [(bin-logic-math-cmd op)
           (write-line
             (case op
               [(less-than-op) #"<"]
               [(less-than-or-equal-op) #"<="]
               [(equal-op) #"="]
               [(greater-than-or-equal-op) #">="]
               [(greater-than-op) #">"])
             output)]
          [(make-array-from-stack-cmd num-args)
           (begin
             (write-all-bytes #"make-array-from-stack: " output)
             (write-all-bytes (integer->decimal-bytes num-args) output)
             (newline output))]
          [(make-array-cmd)
           (write-line #"make-array" output)]
          [(array-length-cmd)
           (write-line #"array-length" output)]
          [(array-ref-cmd)
           (write-line #"array-ref" output)]
          [(array-set!-cmd)
           (write-line #"array-set!" output)]
          [(pop-cmd)
           (write-line #"pop" output)]
          [(swap-cmd)
           (write-line #"swap" output)]
          [(fun-call-cmd num-args)
           (begin
             (write-all-bytes #"fun-call: " output)
             (write-all-bytes (integer->decimal-bytes num-args) output)
             (newline output))]
          [(known-fun-call-cmd name num-args)
           (begin
             (write-all-bytes #"known-fun-call: " output)
             (write-all-bytes name output)
             (write-all-bytes #" " output)
             (write-all-bytes (integer->decimal-bytes num-args) output)
             (newline output))])
        (print-commands commands output))]))

  (define (print-terminal [terminal : StackTerminal] [output : OutputPort]) : Void
    (begin
      (write-all-bytes #"  " output)
      (case terminal
        [(boolean-jmp true false)
         (begin
           (write-all-bytes #"cond-jmp " output)
           (write-all-bytes (integer->decimal-bytes true) output)
           (write-all-bytes #" " output)
           (write-all-bytes (integer->decimal-bytes false) output)
           (newline output))]
        [(uncond-jmp index)
         (begin
           (write-all-bytes #"jmp " output)
           (write-all-bytes (integer->decimal-bytes index) output)
           (newline output))]
        [(variant-switch cases)
         (begin
           (write-all-bytes #"switch" output)
           (print-cases cases output))]
        [(return _)
         (begin
           (write-line #"ret" output))])))

  (define (print-cases [cases : VariantCases] [output : OutputPort]) : Void
    (case cases
      [(no-catch-all-case) (newline output)]
      [(catch-all-case index)
       (begin
         (write-all-bytes #" _->" output)
         (write-all-bytes (integer->decimal-bytes index) output)
         (newline output))]
      [(variant-case tag index cases)
       (begin
         (write-all-bytes #" " output)
         (write-all-bytes (integer->decimal-bytes tag) output)
         (write-all-bytes #"->" output)
         (write-all-bytes (integer->decimal-bytes index) output)
         (print-cases cases output))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 3)
        (begin
          (write-line #"Module/Function name not supplied" stderr)
          1)
        (begin
          (case (compile-modules
                  (extract-modules
                    (map parse-module
                      (extract-sexps
                        (parse-sexps (bytes-append (read-module-files 3 args)))
                        stderr))
                    stderr)
                  (cons (prim-signature) (empty))
                  (prim-implementation))
            [(left v)
             (begin
               (write-line v stderr)
               (panic #""))]
            [(right code)
             (case (find-function (bytes-append (varargs list (array-ref args 1) #"_" (array-ref args 2))) code)
               [(left msg) (panic msg)]
               [(right func)
                (print-function (optimize-stack-function func) stdout)])])
          0))))
