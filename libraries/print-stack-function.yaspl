(module print-stack-function
  (import
    (prim
      #:types (Bytes Byte InputPort OutputPort Array Void)
      #:values (panic make-bytes read-bytes < + = array-length array-ref open-input-file
                open-output-file close-output-port void bytes-set!)
      #:patterns ())
    (io write-all-bytes write-line)
    (list
      #:types (List)
      #:values (empty cons append map list)
      #:patterns (empty cons))
    (numbers integer->decimal-bytes)
    (join-list
      #:types (JoinList)
      #:values (empty-jl cons-jl append-jl append-jl* join-list jl->list single-jl)
      #:patterns ())
    (bytes bytes=? bytes-append)
    (source-language
      #:types (Module)
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types (Sexp)
      #:values (parse-sexps)
      #:patterns ())
    (intermediate-to-stack
      #:types ()
      #:values (compile-module)
      #:patterns (compiled-module))
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values (module-signature)
      #:patterns ())
    (stack-machine
      #:types (StackFunction StackBasicBlock StackCmd StackTerminal VariantCases BinMathOp
               BinLogicMathOp TopLevelObject)
      #:values ()
      #:patterns (
          stack-function stack-basic-block boolean-jmp uncond-jmp variant-switch return
          no-catch-all-case catch-all-case variant-case num-lit-cmd boolean-lit-cmd
          bytes-cmp-cmd create-closure-cmd dup-cmd alloc-variant-cmd variant-ref-cmd
          make-array-from-stack-cmd make-array-cmd
          array-length-cmd array-ref-cmd array-set!-cmd pop-cmd swap-cmd fun-call-cmd
          known-fun-call-cmd load-global-cmd dup-free-var-cmd
          bin-math-cmd bin-add-op bin-sub-op bin-mult-op bin-quotient-op bin-remainder-op
          bin-logic-math-cmd less-than-op less-than-or-equal-op equal-op greater-than-or-equal-op
          greater-than-op function-tlo trivial-closure-tlo))
    (prim-implementation prim-implementation)
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (compiler compile-modules extract-modules extract-sexps read-module-files prim-signature))
  (export
    #:types ()
    #:values (extract-top-level-objects function->bytes)
    #:patterns ())
  (types)

  (define (find-function [name : Bytes] [code : (List TopLevelObject)]) : (Either Bytes StackFunction)
    (case code
      [(empty) (left #"Function not found")]
      [(cons (function-tlo func) code)
       (case func
         [(stack-function func-name _ _)
          (if (bytes=? name func-name)
              (right func)
              (find-function name code))])]
      [(cons _ code)
       (find-function name code)]))

  (define (print-function [fun : StackFunction] [output : OutputPort]) : Void
    (case fun
     [(stack-function fun-name _ blocks)
      (write-all-bytes
        (bytes-append (jl->list (function->bytes fun)))
        output)]))

  (define (function->bytes [fun : StackFunction]) : (JoinList Bytes)
    (case fun
     [(stack-function fun-name _ blocks)
      (cons-jl
        fun-name
        (cons-jl
          #"\n"
          (blocks->bytes blocks 0)))]))

  (define (blocks->bytes [blocks : (List StackBasicBlock)] [index : Byte]) : (JoinList Bytes)
    (case blocks
     [(empty) (empty-jl)]
     [(cons (stack-basic-block cmds terminal) blocks)
      (varargs append-jl*
        (single-jl #"Block ")
        (single-jl (integer->decimal-bytes index))
        (single-jl #"\n")
        (commands->bytes cmds)
        (terminal->bytes terminal)
        (blocks->bytes blocks (+ 1 index)))]))

  (define (commands->bytes [commands : (List StackCmd)]) : (JoinList Bytes)
    (case commands
     [(empty) (empty-jl)]
     [(cons command commands)
      (varargs append-jl*
        (single-jl #"  ")
        (case command
          [(num-lit-cmd v)
           (varargs join-list
             #"numeric-literal: "
             (integer->decimal-bytes v)
             #"\n")]
          [(boolean-lit-cmd v)
           (varargs join-list
             #"boolean-literal: "
             (if v #"true" #"false")
             #"\n")]
          [(bytes-cmp-cmd)
           (single-jl #"bytes-cmp \n")]
          [(create-closure-cmd free-vars)
           (varargs join-list
             #"create-closure: "
             (integer->decimal-bytes free-vars)
             #"\n")]
          [(load-global-cmd name)
           (varargs join-list
             #"load-global: "
             name
             #"\n")]
          [(dup-cmd offset)
           (varargs join-list
             #"dup: "
             (integer->decimal-bytes offset)
             #"\n")]
          [(dup-free-var-cmd index offset)
           (varargs join-list
             #"dup-free-var: "
             (integer->decimal-bytes index)
             #" "
             (integer->decimal-bytes offset)
             #"\n")]
          [(alloc-variant-cmd tag _)
           (varargs join-list
             #"alloc-variant: "
             (integer->decimal-bytes tag)
             #"\n")]
          [(variant-ref-cmd tag field)
           (varargs join-list
             #"variant-ref: "
             (integer->decimal-bytes tag)
             #" "
             (integer->decimal-bytes field)
             #"\n")]
          [(bin-math-cmd op)
           (varargs join-list
             (case op
               [(bin-add-op) #"add"]
               [(bin-sub-op) #"sub"]
               [(bin-mult-op) #"mult"]
               [(bin-quotient-op) #"quotient"]
               [(bin-remainder-op) #"remainder"])
             #"\n")]
          [(bin-logic-math-cmd op)
           (varargs join-list
             (case op
               [(less-than-op) #"<"]
               [(less-than-or-equal-op) #"<="]
               [(equal-op) #"="]
               [(greater-than-or-equal-op) #">="]
               [(greater-than-op) #">"])
             #"\n")]
          [(make-array-from-stack-cmd num-args)
           (varargs join-list
             #"make-array-from-stack: "
             (integer->decimal-bytes num-args)
             #"\n")]
          [(make-array-cmd)
           (single-jl #"make-array\n")]
          [(array-length-cmd)
           (single-jl #"array-length\n")]
          [(array-ref-cmd)
           (single-jl #"array-ref\n")]
          [(array-set!-cmd)
           (single-jl #"array-set!\n")]
          [(pop-cmd)
           (single-jl #"pop\n")]
          [(swap-cmd)
           (single-jl #"swap\n")]
          [(fun-call-cmd num-args)
           (varargs join-list
             #"fun-call: "
             (integer->decimal-bytes num-args)
             #"\n")]
          [(known-fun-call-cmd name num-args)
           (varargs join-list
             #"known-fun-call: "
             name
             #" "
             (integer->decimal-bytes num-args)
             #"\n")])
          (commands->bytes commands))]))

  (define (terminal->bytes [terminal : StackTerminal]) : (JoinList Bytes)
    (append-jl
      (single-jl #"  ")
      (case terminal
        [(boolean-jmp true false)
         (varargs join-list
           #"cond-jmp "
           (integer->decimal-bytes true)
           #" "
           (integer->decimal-bytes false)
           #"\n")]
        [(uncond-jmp index)
         (varargs join-list
           #"jmp "
           (integer->decimal-bytes index)
           #"\n")]
        [(variant-switch cases)
         (cons-jl #"switch" (cases->bytes cases))]
        [(return _)
         (varargs join-list
           #"ret"
           #"\n")])))

  (define (cases->bytes [cases : VariantCases]) : (JoinList Bytes)
    (case cases
      [(no-catch-all-case) (single-jl #"\n")]
      [(catch-all-case index)
       (varargs join-list
         #" _->"
         (integer->decimal-bytes index)
         #"\n")]
      [(variant-case tag index cases)
       (append-jl
         (varargs join-list
           #" "
           (integer->decimal-bytes tag)
           #"->"
           (integer->decimal-bytes index))
         (cases->bytes cases))]))

  (define (extract-top-level-objects [offset : Byte] [args : (Array Bytes)] [stderr : OutputPort])
    : (Either Bytes (List TopLevelObject))
    (case (extract-modules
            (map parse-module
              (extract-sexps
                (parse-sexps (bytes-append (read-module-files 3 args)))
                stderr)))
      [(left v)
       (left v)]
      [(right modules)
       (compile-modules
         modules
         (cons (prim-signature) (empty))
         (prim-implementation))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 3)
        (begin
          (write-line #"Module/Function name not supplied" stderr)
          1)
        (case (extract-top-level-objects 3 args stderr)
          [(left v)
           (begin
             (write-line v stderr)
             1)]
          [(right code)
           (case (find-function
                   (bytes-append (varargs list (array-ref args 1) #"_" (array-ref args 2)))
                   code)
             [(left msg)
              (begin
                (write-line msg stderr)
                1)]
             [(right func)
              (begin
                (print-function func stdout)
                0)])]))))
