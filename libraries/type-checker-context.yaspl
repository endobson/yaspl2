#:module (type-checker-context)
#:import {
  (bytes)
  (dict)
  (list)
  (maybe)
  (prim)
  (tuples)
  (types)
}
(export
  (#:types Context)
  (#:values context merge-contexts merge-contexts*
            context-ref-value context-set-values context-set-value
            context-values)
  (#:patterns))
(types
  (define-type Context
    (context
      [values : (Dict Bytes Type)])))


(define (context-set-values [context : Context] [vs : (List (Tuple2 Bytes Type))]) : Context
  (case vs
    [(empty) context]
    [(cons (tuple2 name type) vs)
     (context-set-values
       (context-set-value context name type)
       vs)]))

(define (context-set-value [ctx : Context] [name : Bytes] [type : Type]) : Context
  (case ctx
    [(context values)
     (context (dict-set values name type))]))

(define (context-ref-value [ctx : Context] [name : Bytes]) : (Maybe Type)
  (case ctx
    [(context values)
     (dict-ref values name)]))

(define (merge-contexts* [cs : (List Context)]) : Context
  (case cs
    [(empty)
     (context (make-dict bytes-cmp))]
    [(cons c (empty)) c]
    [(cons c1 (cons c2 cs))
     (merge-contexts* (cons (merge-contexts c1 c2) cs))]))

(define (merge-contexts [c1 : Context] [c2 : Context]) : Context
  (case c1
    [(context v1)
     (case c2
       [(context v2)
        (context (merge-dicts v1 v2))])]))
