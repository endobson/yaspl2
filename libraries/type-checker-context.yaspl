#:module (type-checker-context)
#:import {
  (bytes)
  (dict)
  (list)
  (maybe)
  (prim)
  (tuples)
  (types)
}
(export
  (#:types Context PatternDescriptor)
  (#:values context context-add-types merge-contexts merge-contexts*
            context-ref-value context-set-values context-set-value
            context-ref-type context-ref-pattern context-values
            context-types pattern-descriptor)
  (#:patterns pattern-descriptor))
(types
  (define-type Context
    (context
      [types : (Dict Bytes Type)]
      [patterns : (Dict Bytes PatternDescriptor)]
      [values : (Dict Bytes Type)]))
  (define-type PatternDescriptor
    (pattern-descriptor
      [type-vars : (List Bytes)]
      [input-type : Type]
      [field-types : (List Type)]
      [variant-name : Bytes]
      [all-variant-names : (List Bytes)])))

(define (context-add-types [context : Context] [vs : (List (Tuple2 Bytes Type))]) : Context
  (case vs
    [(empty) context]
    [(cons (tuple2 name type) vs)
     (context-add-types
       (context-add-type context name type)
       vs)]))

(define (context-add-type [ctx : Context] [name : Bytes] [type : Type]) : Context
  (case ctx
    [(context types patterns values)
     (context (dict-add types name type) patterns values)]))

(define (context-set-values [context : Context] [vs : (List (Tuple2 Bytes Type))]) : Context
  (case vs
    [(empty) context]
    [(cons (tuple2 name type) vs)
     (context-set-values
       (context-set-value context name type)
       vs)]))

(define (context-set-value [ctx : Context] [name : Bytes] [type : Type]) : Context
  (case ctx
    [(context types patterns values)
     (context types patterns (dict-set values name type))]))

(define (context-ref-value [ctx : Context] [name : Bytes]) : (Maybe Type)
  (case ctx
    [(context _ _ values)
     (dict-ref values name)]))

(define (context-ref-type [ctx : Context] [name : Bytes]) : (Maybe Type)
  (case ctx
    [(context types _ _)
     (dict-ref types name)]))

(define (context-ref-pattern [ctx : Context] [name : Bytes]) : (Maybe PatternDescriptor)
  (case ctx
    [(context _ patterns _)
     (dict-ref patterns name)]))

(define (merge-contexts* [cs : (List Context)]) : Context
  (case cs
    [(empty)
     (context
       (make-dict bytes-cmp)
       (make-dict bytes-cmp)
       (make-dict bytes-cmp))]
    [(cons c (empty)) c]
    [(cons c1 (cons c2 cs))
     (merge-contexts* (cons (merge-contexts c1 c2) cs))]))

(define (merge-contexts [c1 : Context] [c2 : Context]) : Context
  (case c1
    [(context t1 p1 v1)
     (case c2
       [(context t2 p2 v2)
        (context
          (merge-dicts t1 t2)
          (merge-dicts p1 p2)
          (merge-dicts v1 v2))])]))
