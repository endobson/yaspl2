#:module (lexer-test)
#:import {
  (lexer)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export)
(types)

(define (lex-all [bytes : Bytes]) : (Maybe (List Lexeme))
  (lex-all/run (make-lexer bytes) (empty)))
(define (lex-all/run [lexer : Lexer] [lexemes : (List Lexeme)]) : (Maybe (List Lexeme))
  (case (run-lexer lexer)
    [(lex-result v lexer) (lex-all/run lexer (cons v lexemes))]
    [(end-of-input) (just (reverse lexemes))]
    [(bad-input _) (nothing)]))

(define (count-lexemes [bytes : Bytes] [expected-count : Int]) : (-> Boolean)
  (lambda ()
    (case (lex-all bytes)
      [(nothing) #f]
      [(just lexemes) (= (length lexemes) expected-count)])))

(define (unlexable [bytes : Bytes]) : (-> Boolean)
  (lambda ()
    (case (lex-all bytes)
      [(nothing) #t]
      [(just _) #f])))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"left parens" (count-lexemes #"((((" 4))
      (test-case #"matching parens" (count-lexemes #"()()()" 6))
      (test-case #"unmatched parens" (count-lexemes #"(()" 3))
      (test-case #"symbol" (count-lexemes #"aaaa" 1))
      (test-case #"keyword" (count-lexemes #"#:foo" 1))
      (test-case #"bytes" (count-lexemes #"#\"foo\"" 1))
      (test-case #"comment" (count-lexemes #"a;.&\na" 3))
      (test-case #"unmatched quotes" (unlexable #"#\"foo"))
      (test-case #"unclosed hash" (unlexable #"#")))))
