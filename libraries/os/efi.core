#:module (os efi)

#:import_module (prim os)
#:import_module (os write_serial)

#:export_type EfiSystemTable
#:export_type RsdpDescriptor

#:export_value exitBootServices
#:export_value find_rsdp


#:define_struct EfiHandle {}

#:define_struct EfiTableHeader {
  U32 signature;
  U32 revision;
  U32 header_size;
  U32 crc32;
  U32 reserved1;
}

#:define_struct EfiRuntimeServices {}

#:define_struct EfiUnknown {}

#:define_struct EfiBootServices {
    EfiTableHeader Hdr;
    U32 padding1;
    EfiUnknown*    RaiseTPL;
    EfiUnknown*    RestoreTPL;
    EfiUnknown*    AllocatePages;
    EfiUnknown*    FreePages;
    U64            GetMemoryMap;
    U64            AllocatePool;
    EfiUnknown*    FreePool;
    EfiUnknown*    CreateEvent;
    EfiUnknown*    SetTimer;
    EfiUnknown*    WaitForEvent;
    EfiUnknown*    SignalEvent;
    EfiUnknown*    CloseEvent;
    EfiUnknown*    CheckEvent;
    EfiUnknown*    InstallProtocolInterface;
    EfiUnknown*    ReinstallProtocolInterface;
    EfiUnknown*    UninstallProtocolInterface;
    EfiUnknown*    HandleProtocol;
    EfiUnknown*    Reserved;
    EfiUnknown*    RegisterProtocolNotify;
    EfiUnknown*    LocateHandle;
    EfiUnknown*    LocateDevicePath;
    EfiUnknown*    InstallConfigurationTable;
    EfiUnknown*    LoadImage;
    EfiUnknown*    StartImage;
    EfiUnknown*    Exit;
    EfiUnknown*    UnloadImage;
    U64            ExitBootServices;
}

#:define_struct EfiGuid {
  U32   data1;
  U16   data2;
  U16   data3;
  U8[8] data4;
}

#:define_struct EfiConfigurationTable {
  EfiGuid guid;
  U64 address;
}

#:define_struct EfiSystemTable {
  EfiTableHeader header;
  U32 padding1;
  U16* firmware_vendor;
  U32 firmware_revision;
  U32 padding2;
  EfiHandle* console_in_handle;
  U64* console_in;
  EfiHandle* console_out_handle;
  EfiSimpleTextOutputProtocol* console_out;
  EfiHandle* console_err_handle;
  EfiSimpleTextOutputProtocol* console_err;
  EfiRuntimeServices* runtime_services;
  EfiBootServices* boot_services;
  U64 number_of_table_entries;
  EfiConfigurationTable[]* configuration_tables;
}

#:define_struct EfiTextString {}

#:define_struct EfiSimpleTextOutputProtocol {
  U64* reset;
  EfiTextString* output_string;
}

#:define_struct EfiMemoryMap {}

// TODO find a better home for this
#:define_struct RsdpDescriptor {
  U8[8] signature;
  U8 checksum;
  U8[6] oem_id;
  U8 revision;
  U32 rsdt_address;
  U32 length;
  U64 xsdt_address;
  U8 extended_checksum;
  U8[3] reserved;
}

// Globals

#:define_global U64 efi_memory_map_size
#:define_global U8[4096] efi_memory_map_space
#:define_global U64 efi_memory_map_key
#:define_global U64 efi_memory_descriptor_size
#:define_global U32 efi_memory_descriptor_version


#:define_global U8*      efi_writer
#:define_global U8[4096] efi_output_buffer

#:define_function
U64 reset_efi_writer() {
  *efi_writer <- efi_output_buffer->&[0];
  return 0;
}

#:define_function
U64 terminate_efi_writer() {
  return efi_writer_add_byte(as<U8>(0));
}

#:define_function
U64 efi_writer_add_byte(U8 v) {
  *(*efi_writer) <- v;
  *efi_writer <- as<U8*>(as<U64>(*efi_writer) + 2);
  return 0;
}

#:define_function
U64 efi_writer_add_hex_U8(U8 byte) {
  <> efi_writer_add_byte(nibble_to_hex((as<U64>(byte) >> 4) & #x0f));
  <> efi_writer_add_byte(nibble_to_hex(as<U64>(byte) & #x0f));
  return 0;
}


#:define_function
U64 efi_writer_add_hex_U16(U16 v) {
  <> efi_writer_add_hex_U8(as<U8>((as<U64>(v) >> 8) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((as<U64>(v) >> 0) & #xff));
  return 0;
}

#:define_function
U64 efi_writer_add_hex_U32(U32 v) {
  <> efi_writer_add_hex_U8(as<U8>((as<U64>(v) >> 24) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((as<U64>(v) >> 16) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((as<U64>(v) >>  8) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((as<U64>(v) >>  0) & #xff));
  return 0;
}

#:define_function
U64 efi_writer_add_hex_U64(U64 v) {
  <> efi_writer_add_hex_U8(as<U8>((v >> 56) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((v >> 48) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((v >> 40) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((v >> 32) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((v >> 24) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((v >> 16) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((v >>  8) & #xff));
  <> efi_writer_add_hex_U8(as<U8>((v >>  0) & #xff));
  return 0;
}

#:define_function
U64 efi_writer_add_guid(EfiGuid* guid) {
  <> efi_writer_add_hex_U32(guid->data1);
  <> efi_writer_add_byte(as<U8>(45));
  <> efi_writer_add_hex_U16(guid->data2);
  <> efi_writer_add_byte(as<U8>(45));
  <> efi_writer_add_hex_U16(guid->data3);
  <> efi_writer_add_byte(as<U8>(45));
  <> efi_writer_add_hex_U8((guid->&data4)->[0]);
  <> efi_writer_add_hex_U8((guid->&data4)->[1]);
  <> efi_writer_add_hex_U8((guid->&data4)->[2]);
  <> efi_writer_add_hex_U8((guid->&data4)->[3]);
  <> efi_writer_add_hex_U8((guid->&data4)->[4]);
  <> efi_writer_add_hex_U8((guid->&data4)->[5]);
  <> efi_writer_add_hex_U8((guid->&data4)->[6]);
  <> efi_writer_add_hex_U8((guid->&data4)->[7]);
  return 0;
}

#:define_function
U64 efi_writer_add_bytes(Bytes bytes) {
  BytesLayout* bytes_ptr := as<BytesLayout*>(bytes);
  U8[]* buffer := as<U8[]*>(bytes_ptr->&data);
  U64 length := bytes_ptr->length;
  U64 i := 0;
  while (i < length) {
    <> efi_writer_add_byte(buffer->[i]);
    i := i + 1;
  }
  return 0;
}

#:define_function
U64 efi_writer_finish_line() {
  <> efi_writer_add_bytes(#"\r\n");
  return 0;
}



#:define_function
U64 exitBootServices(U64 image_handle, EfiSystemTable* st) {
  EfiSimpleTextOutputProtocol* output := st->console_out;

  *efi_memory_map_size <- 4096;
  U64 status := call_ms5((st->boot_services)->GetMemoryMap,
                         as<U64>(efi_memory_map_size),
                         as<U64>(efi_memory_map_space),
                         as<U64>(efi_memory_map_key),
                         as<U64>(efi_memory_descriptor_size),
                         as<U64>(efi_memory_descriptor_version));
  if (status != 0) {
    <> reset_efi_writer();
    <> efi_writer_add_hex_U64(status);
    <> efi_writer_finish_line();
    <> terminate_efi_writer();
    <> call_ms2(as<U64>(output->output_string), as<U64>(output), as<U64>(efi_output_buffer));
    return status;
  }

  status := call_ms2((st->boot_services)->ExitBootServices, image_handle, *efi_memory_map_key);
  if (status != 0) {
    <> reset_efi_writer();
    <> efi_writer_add_hex_U64(status);
    <> efi_writer_finish_line();
    <> terminate_efi_writer();
    <> call_ms2(as<U64>(output->output_string), as<U64>(output), as<U64>(efi_output_buffer));
    return status;
  }

  return 0;
}


#:define_function
Boolean is_efi_acpi_table_guid(EfiGuid* guid) {
  return (as<U64>(guid->data1) == #x8868e871) &&
         (as<U64>(guid->data2) == #xe4f1) &&
         (as<U64>(guid->data3) == #x11d3) &&
         (as<U64>((guid->&data4)->[0]) == #xbc) &&
         (as<U64>((guid->&data4)->[1]) == #x22) &&
         (as<U64>((guid->&data4)->[2]) == #x00) &&
         (as<U64>((guid->&data4)->[3]) == #x80) &&
         (as<U64>((guid->&data4)->[4]) == #xc7) &&
         (as<U64>((guid->&data4)->[5]) == #x3c) &&
         (as<U64>((guid->&data4)->[6]) == #x88) &&
         (as<U64>((guid->&data4)->[7]) == #x81);
}



#:define_function
RsdpDescriptor* find_rsdp(EfiSystemTable* st) {
  EfiSimpleTextOutputProtocol* output := st->console_out;

  U64 i := 0;
  while (i < st->number_of_table_entries) {
    EfiConfigurationTable* table := (st->configuration_tables)->&[i];

    if (is_efi_acpi_table_guid(table->&guid)) {
      <> reset_efi_writer();
      <> efi_writer_add_bytes(#"Found RSDP");
      <> efi_writer_finish_line();
      <> terminate_efi_writer();
      <> call_ms2(as<U64>(output->output_string), as<U64>(output), as<U64>(efi_output_buffer));
      return as<RsdpDescriptor*>(table->address);
    }

    i := i + 1;
  }

  <> reset_efi_writer();
  <> efi_writer_add_bytes(#"Did not find RSDP");
  <> efi_writer_finish_line();
  <> terminate_efi_writer();
  <> call_ms2(as<U64>(output->output_string), as<U64>(output), as<U64>(efi_output_buffer));

  return as<RsdpDescriptor*>(0);
}
