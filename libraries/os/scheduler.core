#:module (os scheduler)

#:import_module (prim os)
#:import_module (os write_serial)

#:export_type TaskDescriptor
#:export_value initializeScheduler
#:export_value runSchedulerLoop
#:export_value add_task
#:export_value yield

#:define_struct TaskDescriptor {
  U64 stack_pointer;
  TaskDescriptor* next;
  U32 state;
}

#:define_global TaskDescriptor root_task
#:define_global TaskDescriptor* current_task

#:define_function
U64 initializeScheduler() {
  <> write_bytes(#"Scheduler code\r\n");

  // Initialize root_task
  *root_task->&stack_pointer <- 0;
  *root_task->&next <- root_task;
  *root_task->&state <- as<U32>(0); // Runnable

  // Initialize the current task as the root_task;
  *current_task <- root_task;

  <> write_bytes(#"Scheduler code done\r\n");
  return 0;
}

#:define_function
U64 add_task(TaskDescriptor* task, U64 stack_address, (-> U64) start_func) {

  // Push initial values onto the stack.
  U64 stack_pointer := stack_address;

  // First return address
  stack_pointer := stack_pointer - 8;
  *(as<U64*>(stack_pointer)) <- as<U64[]*>(scheduler_start_task)->[1];
  // Setup initial registers.
  U64 i := 0;
  while (i < 15) {
    U64 val := 0;
    if (i == 6) { // rdi
      val := as<U64>(start_func);
    }

    stack_pointer := stack_pointer - 8;
    *(as<U64*>(stack_pointer)) <- val;
    i := i + 1;
  }

  *task->&stack_pointer <- stack_pointer;

  // Add the task and mark as runnable.
  *task->&state <- as<U32>(0); // Runnable
  *task->&next <- (*current_task)->next;
  *((*current_task)->&next) <- task;

  return 0;
}

#:define_function
U64 scheduler_start_task((-> U64) func) {
  <> enable_interrupts();

  <> func();
}

// Marks all the tasks runnable. Called by interrupt handlers.
#:define_function
U64 markAllRunnable() {
  TaskDescriptor* task := *current_task;
  *task->&state <- as<U32>(0); // Runnable
  task := task->next;
  while (as<U64>(task) != as<U64>(*current_task)) {
    *task->&state <- as<U32>(0); // Runnable
    task := task->next;
  }
  return 0;
}

#:define_function
Boolean yield(U32 new_old_state) {
  TaskDescriptor* old_task := *current_task;
  TaskDescriptor* new_task := old_task->next;

  while ((as<U64>(new_task) != as<U64>(old_task))
         && (as<U64>(new_task->state) != 0)) {
    new_task := new_task->next;
  }

  Boolean ret_val := (0 == 1);
  if (as<U64>(new_task) != as<U64>(old_task)) {
    ret_val := (1 == 1);
    *old_task->&state <- new_old_state;
    *current_task <- new_task;
    <> switch_stack(old_task->&stack_pointer, new_task->&stack_pointer);
  }

  return ret_val;
}

#:define_function
U64 runSchedulerLoop() {
  while (1 != 0) {
    <> disable_interrupts();
    // 0 for input = Runnable, 0 for output = no other Runnable tasks
    while (yield(as<U32>(0))) {}
    <> enable_interrupts_and_halt();
  }
}



