#:module (os)

#:declare_external call_ms0c (U64 -> U64)
#:declare_external call_ms1c (U64, U64 -> U64)
#:declare_external call_ms2c (U64, U64, U64 -> U64)
#:declare_external read_serial U64
#:declare_external write_serial U64

#:define_function
U64 a(U64 arg, U64 arg2, U64 arg3, U64 arg4) {
  return arg4 + 7;
}

#:define_function
U64 g(U64 arg, U64 arg2) {
  return arg2;
}

#:define_function
U64 write_bytes(Bytes bytes) {
  U64[]* bytes_ptr := as<U64[]*>(bytes);
  U64 size := bytes_ptr->[1];
  U64 index := 0;
  while (index < size) {
    U64 base := as<U64>(bytes_ptr->&[2]);
    U64* addr := as<U64*>(base + index);
    U64 value := (*addr) & #xff;
    <> call_ms1c(write_serial, value);
    index := index + 1;
  }
  return 0;
}

#:define_function
U64 write_hex_byte(U64 byte) {
  <> call_ms1c(write_serial, nibble_to_hex((byte / 16) & #x0f));
  <> call_ms1c(write_serial, nibble_to_hex(byte & #x0f));
  return 0;
}


#:define_function
U64 nibble_to_hex(U64 v) {
  if (v < 10) {
    return 48 + v;
  } else {
    return 87 + v;
  }
}

#:define_global U64 serial_counter

#:define_function
U64 serialTaskStart(U64 arg, U64 arg2, U64 arg3, U64 arg4) {
  while (1 > 0) {
    U64 v := call_ms0c(read_serial);
    <> write_bytes(#"SerialInput (");
    <> write_hex_byte(*serial_counter);
    <> write_bytes(#"): ");
    <> write_hex_byte(v);
    <> write_bytes(#"\n");
    *serial_counter <- (*serial_counter) + 1;
  }
}

#:define_function
U64 welcomeMessage() {
  <> write_bytes(#"\x1bc");
  <> write_bytes(#"Welcome to Yaspl OS.\r\n");
  return 0;
}

#:define_struct EfiHandle {}

#:define_struct EfiSystemTable {
  U32 signature;
  U32 revision;
  U32 header_size;
  U32 crc32;
  U32 reserved1;
  U32 padding1;
  U16* firmware_vendor;
  U32 firmware_revision;
  U32 padding2;
  EfiHandle* console_in_handle;
  U64* console_in;
  EfiHandle* console_out_handle;
  EfiSimpleTextOutputProtocol* console_out;
  EfiHandle* console_err_handle;
  EfiSimpleTextOutputProtocol* console_err;
}

#:define_struct EfiTextString {}

#:define_struct EfiSimpleTextOutputProtocol {
  U64* reset;
  EfiTextString* output_string;
}

#:define_function
U64 testEfiPrinter(EfiSystemTable* st, U64 fn) {
  EfiSimpleTextOutputProtocol* output := st->console_out;
  EfiTextString* fn2 := output->output_string;

  Bytes b := #"\x35\x00\r\x00\n\x00\x00\x00";
  U64 bytes_addr := as<U64>(b) + 16;
  <> call_ms2c(as<U64>(output->output_string), as<U64>(output), bytes_addr);
  return 0;
}
