#:module (os write_serial)

#:import_module (prim os)

#:export_value write_bytes
#:export_value write_raw_buffer
#:export_value write_hex_byte
#:export_value write_hex_U8
#:export_value write_hex_U16
#:export_value write_hex_U32
#:export_value write_hex_U64
#:export_value nibble_to_hex

// TODO find better home/syntax for these.
#:define_struct PacketData {}
#:define_struct BytesLayout {
  U64* descriptor;
  U64 length;
  PacketData data;
}

#:define_function
Boolean is_transmit_empty() {
  // #x3F8 is SERIAL_COM1_BASE
  U64 port := #x3F8;
  U64 result := as<U64>(inb(as<U16>(port + 5)));
  return (result & #x20) != 0;
}

#:define_function
U64 write_serial(U8 v) {
  // #x3F8 is SERIAL_COM1_BASE
  U64 port := #x3F8;

  while (!is_transmit_empty()) {
    // Busy Loop
  }

  <> outb(v, as<U16>(port));
  return 0;
}

#:define_function
U64 write_bytes(Bytes bytes) {
  BytesLayout* bytes_ptr := as<BytesLayout*>(bytes);
  U8[]* buffer := as<U8[]*>(bytes_ptr->&data);
  <> write_raw_buffer(buffer, bytes_ptr->length);
  return 0;
}


#:define_function
U64 write_raw_buffer(U8[]* buffer, U64 amount) {
  U64 i := 0;
  while (i < amount) {
    <> write_serial(buffer->[i]);
    i := i + 1;
  }
  return 0;
}

#:define_function
U64 write_hex_byte(U8 b) {
  U64 v := as<U64>(b);
  <> write_serial(nibble_to_hex((v >> 4) & #x0f));
  <> write_serial(nibble_to_hex(v & #x0f));
  return 0;
}

#:define_function
U64 write_hex_U8(U8 v) {
  return write_hex_byte(v);
}

#:define_function
U64 write_hex_U16(U16 v) {
  <> write_hex_byte(as<U8>((as<U64>(v) >>  8) & #xff));
  <> write_hex_byte(as<U8>((as<U64>(v) >>  0) & #xff));
  return 0;
}

#:define_function
U64 write_hex_U32(U32 v) {
  <> write_hex_byte(as<U8>((as<U64>(v) >> 24) & #xff));
  <> write_hex_byte(as<U8>((as<U64>(v) >> 16) & #xff));
  <> write_hex_byte(as<U8>((as<U64>(v) >>  8) & #xff));
  <> write_hex_byte(as<U8>((as<U64>(v) >>  0) & #xff));
  return 0;
}


#:define_function
U64 write_hex_U64(U64 v) {
  <> write_hex_byte(as<U8>((v >> 56) & #xff));
  <> write_hex_byte(as<U8>((v >> 48) & #xff));
  <> write_hex_byte(as<U8>((v >> 40) & #xff));
  <> write_hex_byte(as<U8>((v >> 32) & #xff));
  <> write_hex_byte(as<U8>((v >> 24) & #xff));
  <> write_hex_byte(as<U8>((v >> 16) & #xff));
  <> write_hex_byte(as<U8>((v >>  8) & #xff));
  <> write_hex_byte(as<U8>((v >>  0) & #xff));
  return 0;
}

#:define_function
U8 nibble_to_hex(U64 v) {
  if (v < 10) {
    return as<U8>(48 + v);
  } else {
    return as<U8>(87 + v);
  }
}
