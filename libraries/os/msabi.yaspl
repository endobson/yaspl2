#:module (os msabi)
#:import {
  (bytes)
  (dict)
  (join-list)
  (list)
  (module-name)
  (module-signature)
  (prim)
  (prim-names)
  (prim-types)
  (top-level-name)
  (tuples)
  (types)
  (yaspl assembly-function)
  (yaspl x86-64-assembly)
}
(export
  (#:values make-assembly-fragments/signature))
(types)



(define (make-assembly-fragments/signature) :
  (Tuple2 AssemblyFragments ModuleSignature)
  (match-define start-functions (make-start-function-fragments))

  (match-define (tuple2 functions closures)
    (unzip (map prim-assembly-function->fragments (make-functions))))


  (tuple2
    (assembly-fragments
      (append start-functions functions)
      (append (make-data-fragments) closures)
      (empty))
    (make-signature)))


(define (make-signature) : ModuleSignature
  (match-define value-export
    (lambda ([name : Bytes] [type : Type]) : (Tuple2 Bytes ValueSignature)
      (tuple2 name (value-signature type
                                    (prim-name (bytes-append (varargs list name #"_closure")))))))

  (module-signature
    (mod-name
      (varargs list #"prim" #"os"))
    (dict-add-all
      (make-dict bytes-cmp)
      (varargs list
        (value-export #"lidt" (fun1-type (u64-type) (u64-type)))
        (value-export #"outb" (fun2-type (u8-type) (u16-type) (u64-type)))
        (value-export #"outw" (fun2-type (u16-type) (u16-type) (u64-type)))
        (value-export #"outd" (fun2-type (u32-type) (u16-type) (u64-type)))
        (value-export #"inb" (fun1-type (u16-type) (u8-type)))
        (value-export #"inw" (fun1-type (u16-type) (u16-type)))
        (value-export #"ind" (fun1-type (u16-type) (u32-type)))
        (value-export #"panic" (fun0-type (u64-type)))
        (value-export #"enable_interrupts" (fun0-type (u64-type)))
        (value-export #"enable_interrupts_and_halt" (fun0-type (u64-type)))
        (value-export #"disable_interrupts" (fun0-type (u64-type)))
        (value-export #"switch_stack"
          (fun2-type (pointer-type (u64-type)) (pointer-type (u64-type)) (u64-type)))

        (value-export #"call_ms0" (fun1-type (u64-type) (u64-type)))
        (value-export #"call_ms1" (fun2-type (u64-type) (u64-type) (u64-type)))
        (value-export #"call_ms2" (fun3-type (u64-type) (u64-type) (u64-type) (u64-type)))
        (value-export #"call_ms5"
          (fun6-type (u64-type) (u64-type) (u64-type) (u64-type) (u64-type) (u64-type) (u64-type)))

        (value-export #"irqfun_com1" (fun0-type (u64-type)))
        (value-export #"irqfun_nic" (fun0-type (u64-type)))
        (value-export #"irqfun_default" (fun0-type (u64-type)))

        (value-export #"read_msr" (fun1-type (u64-type) (u64-type)))
        (value-export #"write_msr" (fun2-type (u64-type) (u64-type) (u64-type)))
        ))
    (make-dict bytes-cmp)
    (make-dict bytes-cmp)
    (make-dict bytes-cmp)
    (make-dict top-level-name-cmp)))


(define (make-functions) : (List PrimAssemblyFunction)
  (varargs list
    (prim-assembly-function
      #"call_ms0"
      (varargs join-list
        (pushq (r64mi-reg (rbp)))
        (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
        ;; Shadow space
        (subq (imm64/s32 32) (rsp))
        (call/indirect (r64m-reg (rdi)))
        (addq (imm64/s32 32) (r64m-reg (rsp)))

        (popq (r64m-reg (rbp)))
        (ret)))

    (prim-assembly-function
      #"call_ms1"
      (varargs join-list
        (pushq (r64mi-reg (rbp)))
        (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
        ;; Shadow space
        (subq (imm64/s32 32) (rsp))
        (movq (r64mi-reg (rsi)) (r64m-reg (rcx)))
        (call/indirect (r64m-reg (rdi)))
        (addq (imm64/s32 32) (r64m-reg (rsp)))

        (popq (r64m-reg (rbp)))
        (ret)))

    (prim-assembly-function
      #"call_ms2"
      (varargs join-list
        (pushq (r64mi-reg (rbp)))
        (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
        ;; Shadow space
        (subq (imm64/s32 32) (rsp))
        (movq (r64mi-reg (rsi)) (r64m-reg (rcx)))
        ; This happens to be a noop.
        ; (movq (r64mi-reg (rdx)) (r64m-reg (rdx)))
        (call/indirect (r64m-reg (rdi)))
        (addq (imm64/s32 32) (r64m-reg (rsp)))

        (popq (r64m-reg (rbp)))
        (ret)))


    (prim-assembly-function
      #"call_ms5"
      (varargs join-list
        (pushq (r64mi-reg (rbp)))
        (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
        ;; Do arguments in reverse order to avoid overwriting.
        (pushq (imm64/s32 0))                       ;; Padding to keep 16 byte aligned
        (pushq (r64mi-reg (r9)))                    ;; Argument 5
        ;; Shadow space
        (subq (imm64/s32 32) (rsp))
        (movq (r64mi-reg (r8)) (r64m-reg (r9)))     ;; Argument 4
        (movq (r64mi-reg (rcx)) (r64m-reg (r8)))    ;; Argument 3
        ; This happens to be a noop.
        ; (movq (r64mi-reg (rdx)) (r64m-reg (rdx))) ;; Argument 2
        (movq (r64mi-reg (rsi)) (r64m-reg (rcx)))   ;; Argument 1
        (call/indirect (r64m-reg (rdi)))
        (addq (imm64/s32 48) (r64m-reg (rsp)))

        (popq (r64m-reg (rbp)))
        (ret)))


    (prim-assembly-function
      #"lidt"
      (varargs join-list
        (lidt (mem (rdi) 0))
        (ret)))

    (prim-assembly-function
      #"outb"
      (varargs join-list
        (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
        (movq (r64mi-reg (rsi)) (r64m-reg (rdx)))
        (outb)
        (ret)))

    (prim-assembly-function
      #"outw"
      (varargs join-list
        (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
        (movq (r64mi-reg (rsi)) (r64m-reg (rdx)))
        (outw)
        (ret)))

    (prim-assembly-function
      #"outd"
      (varargs join-list
        (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
        (movq (r64mi-reg (rsi)) (r64m-reg (rdx)))
        (outd)
        (ret)))

    (prim-assembly-function
      #"inb"
      (varargs join-list
        (movq (r64mi-reg (rdi)) (r64m-reg (rdx)))
        (inb)
        (ret)))

    (prim-assembly-function
      #"inw"
      (varargs join-list
        (movq (r64mi-reg (rdi)) (r64m-reg (rdx)))
        (inw)
        (ret)))

    (prim-assembly-function
      #"ind"
      (varargs join-list
        (movq (r64mi-reg (rdi)) (r64m-reg (rdx)))
        (ind)
        (ret)))

    (prim-assembly-function
      #"enable_interrupts"
      (varargs join-list
        (sti)
        (ret)))
    (prim-assembly-function
      #"enable_interrupts_and_halt"
      (varargs join-list
        (sti)
        (hlt)
        (ret)))
    (prim-assembly-function
      #"disable_interrupts"
      (varargs join-list
        (cli)
        (ret)))


    ; Panic, and stop forever
    ; Disables interupts
    (prim-assembly-function
      #"panic"
      (varargs join-list
        (cli)
        (movq/imm* #xDEADDEAD (rax))
        (hlt)
        (jmp #"yprim_panic")))


    (prim-assembly-function
      #"irqfun_default"
      (varargs join-list
        (jmp #"yprim_panic")))

    (prim-assembly-function
      #"irqfun_com1"
      (varargs join-list
        (pushfq)
        (pushq (r64mi-reg (rax)))
        (pushq (r64mi-reg (rdx)))
        (cld)

        ; Disable other interrupts
        (sti)
        (pushq (r64mi-reg (rax)))
        (pushq (r64mi-reg (rcx)))
        (pushq (r64mi-reg (rdx)))
        (pushq (r64mi-reg (rdi)))
        (pushq (r64mi-reg (rsi)))
        (pushq (r64mi-reg (r8)))
        (pushq (r64mi-reg (r9)))
        (pushq (r64mi-reg (r10)))
        (pushq (r64mi-reg (r11)))

        (call #"yos_markAllRunnable")

        (popq (r64m-reg (r11)))
        (popq (r64m-reg (r10)))
        (popq (r64m-reg (r9)))
        (popq (r64m-reg (r8)))
        (popq (r64m-reg (rsi)))
        (popq (r64m-reg (rdi)))
        (popq (r64m-reg (rdx)))
        (popq (r64m-reg (rcx)))
        (popq (r64m-reg (rax)))
        ; Reenable interrupts
        (cli)

        ; Port for PIC 1
        (movq/imm* #x20 (rdx))
        ; EOI (End of Interrupt) command
        (movq/imm* #x20 (rax))
        ; Send command
        (outb)

        (popq (r64m-reg (rdx)))
        (popq (r64m-reg (rax)))
        (popfq)
        (iretq)))

    (prim-assembly-function
      #"irqfun_nic"
      (varargs join-list
        (pushfq)
        (pushq (r64mi-reg (rax)))
        (pushq (r64mi-reg (rdx)))
        (cld)

        ; Disable other interrupts
        (sti)
        (pushq (r64mi-reg (rax)))
        (pushq (r64mi-reg (rcx)))
        (pushq (r64mi-reg (rdx)))
        (pushq (r64mi-reg (rdi)))
        (pushq (r64mi-reg (rsi)))
        (pushq (r64mi-reg (r8)))
        (pushq (r64mi-reg (r9)))
        (pushq (r64mi-reg (r10)))
        (pushq (r64mi-reg (r11)))

        (call #"yos_markAllRunnable")

        (popq (r64m-reg (r11)))
        (popq (r64m-reg (r10)))
        (popq (r64m-reg (r9)))
        (popq (r64m-reg (r8)))
        (popq (r64m-reg (rsi)))
        (popq (r64m-reg (rdi)))
        (popq (r64m-reg (rdx)))
        (popq (r64m-reg (rcx)))
        (popq (r64m-reg (rax)))
        ; Reenable interrupts
        (cli)

        ; Port for PIC 1
        (movq/imm* #x20 (rdx))
        ; EOI (End of Interrupt) command
        (movq/imm* #x20 (rax))
        ; Send command
        (outb)

        ; Port for PIC 2
        (movq/imm* #xa0 (rdx))
        ; Send command (Still EOI)
        (outb)

        (popq (r64m-reg (rdx)))
        (popq (r64m-reg (rax)))
        (popfq)
        (iretq)))


    (prim-assembly-function
      #"switch_stack"
      (varargs join-list
        (pushq (r64mi-reg (rax)))
        (pushq (r64mi-reg (rbx)))
        (pushq (r64mi-reg (rcx)))
        (pushq (r64mi-reg (rdx)))
        (pushq (r64mi-reg (rbp)))
        (pushq (r64mi-reg (rsi)))
        (pushq (r64mi-reg (rdi)))
        (pushq (r64mi-reg (r8)))
        (pushq (r64mi-reg (r9)))
        (pushq (r64mi-reg (r10)))
        (pushq (r64mi-reg (r11)))
        (pushq (r64mi-reg (r12)))
        (pushq (r64mi-reg (r13)))
        (pushq (r64mi-reg (r14)))
        (pushq (r64mi-reg (r15)))

        (movq (r64mi-reg (rsp)) (r64m-mem (mem (rdi) 0)))
        (movq (r64mi-mem (mem (rsi) 0)) (r64m-reg (rsp)))

        (popq (r64m-reg (r15)))
        (popq (r64m-reg (r14)))
        (popq (r64m-reg (r13)))
        (popq (r64m-reg (r12)))
        (popq (r64m-reg (r11)))
        (popq (r64m-reg (r10)))
        (popq (r64m-reg (r9)))
        (popq (r64m-reg (r8)))
        (popq (r64m-reg (rdi)))
        (popq (r64m-reg (rsi)))
        (popq (r64m-reg (rbp)))
        (popq (r64m-reg (rdx)))
        (popq (r64m-reg (rcx)))
        (popq (r64m-reg (rbx)))
        (popq (r64m-reg (rax)))
        (ret)))

    (prim-assembly-function
      #"read_msr"
      (varargs join-list

        (movq (r64mi-reg (rdi)) (r64m-reg (rcx)))
        (rdmsr)
        ;; Move EDX:EAX into RAX
        (shlq/imm (s8 32) (rdx))
        (orq (rdx) (rax))

        (ret)))

    (prim-assembly-function
      #"write_msr"
      (varargs join-list

        ;; Move RAX into EDX:EAX
        (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
        (movq (r64mi-reg (rdi)) (r64m-reg (rdx)))
        (shrq/imm (s8 32) (rdx))
        (movq (r64mi-reg (rsi)) (r64m-reg (rcx)))

        (wrmsr)

        (ret)))

    ))



(define (make-start-function-fragments) : (List TextFragment)
  (varargs list

    (function-fragment
      #"efi_main"
      (varargs append-jl*
        (named-block #"efi_main_0"
          (varargs join-list
            (pushq (r64mi-reg (rdi)))
            (pushq (r64mi-reg (rsi)))
            (movq (r64mi-reg (rcx)) (r64m-reg (rdi)))
            (movq (r64mi-reg (rdx)) (r64m-reg (rsi)))
            (call #"yos_main")
            (popq (r64m-reg (rdi)))
            (popq (r64m-reg (rsi)))
            (ret)
            ))))

    ;; OSX start
    (function-fragment
      #"start"
      (varargs append-jl*
        (named-block #"start_0"
          (varargs join-list
            (ud2)))))

    ;; Linux start
    (function-fragment
      #"_start"
      (varargs append-jl*
        (named-block #"_start_0"
          (varargs join-list
            (ud2)))))))

(define (make-data-fragments) : (List ConstFragment)
  (varargs list
    (const-fragment
      (trivial-closure-variant-descriptor-symbol)
      8
      (varargs list (bytes-fragment (make-bytes 8))))
    (const-fragment
      (bytes-variant-descriptor-symbol)
      8
      (varargs list (bytes-fragment (make-bytes 8))))))
