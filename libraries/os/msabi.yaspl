#:module (os msabi)
#:import {
  (join-list)
  (list)
  (prim)
  (yaspl x86-64-assembly)
}
(export
  (#:values make-function-fragments make-data-fragments))
(types)


(define (make-function-fragments) : (List TextFragment)
  (varargs list
    (function-fragment
      #"call_ms0"
      (varargs append-jl*
        (named-block #"call_ms0_0"
          (varargs join-list
            (pushq (r64mi-reg (rbp)))
            (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
            ;; Shadow space
            (subq (imm64/s32 32) (rsp))
            (call/indirect (r64m-reg (rdi)))
            (addq (imm64/s32 32) (r64m-reg (rsp)))

            (popq (r64m-reg (rbp)))
            (ret)))))

    (function-fragment
      #"call_ms1"
      (varargs append-jl*
        (named-block #"call_ms1_0"
          (varargs join-list
            (pushq (r64mi-reg (rbp)))
            (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
            ;; Shadow space
            (subq (imm64/s32 32) (rsp))
            (movq (r64mi-reg (rsi)) (r64m-reg (rcx)))
            (call/indirect (r64m-reg (rdi)))
            (addq (imm64/s32 32) (r64m-reg (rsp)))

            (popq (r64m-reg (rbp)))
            (ret)))))

    (function-fragment
      #"call_ms2"
      (varargs append-jl*
        (named-block #"call_ms2_0"
          (varargs join-list
            (pushq (r64mi-reg (rbp)))
            (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
            ;; Shadow space
            (subq (imm64/s32 32) (rsp))
            (movq (r64mi-reg (rsi)) (r64m-reg (rcx)))
            ; This happens to be a noop.
            ; (movq (r64mi-reg (rdx)) (r64m-reg (rdx)))
            (call/indirect (r64m-reg (rdi)))
            (addq (imm64/s32 32) (r64m-reg (rsp)))

            (popq (r64m-reg (rbp)))
            (ret)))))


    (function-fragment
      #"call_ms5"
      (varargs append-jl*
        (named-block #"call_ms5_0"
          (varargs join-list
            (pushq (r64mi-reg (rbp)))
            (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
            ;; Do arguments in reverse order to avoid overwriting.
            (pushq (imm64/s32 0))                       ;; Padding to keep 16 byte aligned
            (pushq (r64mi-reg (r9)))                    ;; Argument 5
            ;; Shadow space
            (subq (imm64/s32 32) (rsp))
            (movq (r64mi-reg (r8)) (r64m-reg (r9)))     ;; Argument 4
            (movq (r64mi-reg (rcx)) (r64m-reg (r8)))    ;; Argument 3
            ; This happens to be a noop.
            ; (movq (r64mi-reg (rdx)) (r64m-reg (rdx))) ;; Argument 2
            (movq (r64mi-reg (rsi)) (r64m-reg (rcx)))   ;; Argument 1
            (call/indirect (r64m-reg (rdi)))
            (addq (imm64/s32 48) (r64m-reg (rsp)))

            (popq (r64m-reg (rbp)))
            (ret)))))



    (function-fragment
      #"call_sysv0"
      (varargs append-jl*
        (named-block #"call_sysv0_0"
          (varargs join-list
            (pushq (r64mi-reg (rbp)))
            (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
            ;; Save RDI and RSI
            (pushq (r64mi-reg (rdi)))
            (pushq (r64mi-reg (rsi)))
            (call/indirect (r64m-reg (rcx)))
            (popq (r64m-reg (rsi)))
            (popq (r64m-reg (rdi)))

            (popq (r64m-reg (rbp)))
            (ret)))))


    (function-fragment
      #"call_sysv1"
      (varargs append-jl*
        (named-block #"call_sysv1_0"
          (varargs join-list
            (pushq (r64mi-reg (rbp)))
            (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
            ;; Save RDI and RSI
            (pushq (r64mi-reg (rdi)))
            (pushq (r64mi-reg (rsi)))
            (movq (r64mi-reg (rdx)) (r64m-reg (rdi)))
            (call/indirect (r64m-reg (rcx)))
            (popq (r64m-reg (rsi)))
            (popq (r64m-reg (rdi)))

            (popq (r64m-reg (rbp)))
            (ret)))))

    (function-fragment
      #"call_sysv2"
      (varargs append-jl*
        (named-block #"call_sysv2_0"
          (varargs join-list
            (pushq (r64mi-reg (rbp)))
            (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
            ;; Save RDI and RSI
            (pushq (r64mi-reg (rdi)))
            (pushq (r64mi-reg (rsi)))
            (movq (r64mi-reg (rdx)) (r64m-reg (rdi)))
            (movq (r64mi-reg (r8)) (r64m-reg (rsi)))
            (call/indirect (r64m-reg (rcx)))
            (popq (r64m-reg (rsi)))
            (popq (r64m-reg (rdi)))

            (popq (r64m-reg (rbp)))
            (ret)))))

    (function-fragment
      #"y_lidt"
      (varargs append-jl*
        (named-block #"y_lidt_0"
          (varargs join-list
            (lidt (mem (rdi) 0))
            (ret)))))

    (function-fragment
      #"y_outb"
      (varargs append-jl*
        (named-block #"y_outb_0"
          (varargs join-list
            (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
            (movq (r64mi-reg (rsi)) (r64m-reg (rdx)))
            (outb)
            (ret)))))


    (function-fragment
      #"y_outw"
      (varargs append-jl*
        (named-block #"y_outw_0"
          (varargs join-list
            (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
            (movq (r64mi-reg (rsi)) (r64m-reg (rdx)))
            (outw)
            (ret)))))

    (function-fragment
      #"y_outd"
      (varargs append-jl*
        (named-block #"y_outd_0"
          (varargs join-list
            (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
            (movq (r64mi-reg (rsi)) (r64m-reg (rdx)))
            (outd)
            (ret)))))

    (function-fragment
      #"y_inb"
      (varargs append-jl*
        (named-block #"y_inb_0"
          (varargs join-list
            (movq (r64mi-reg (rdi)) (r64m-reg (rdx)))
            (inb)
            (ret)))))

    (function-fragment
      #"y_inw"
      (varargs append-jl*
        (named-block #"y_inw_0"
          (varargs join-list
            (movq (r64mi-reg (rdi)) (r64m-reg (rdx)))
            (inw)
            (ret)))))

    (function-fragment
      #"y_ind"
      (varargs append-jl*
        (named-block #"y_ind_0"
          (varargs join-list
            (movq (r64mi-reg (rdi)) (r64m-reg (rdx)))
            (ind)
            (ret)))))

    (function-fragment
      #"enable_interrupts"
      (varargs append-jl*
        (named-block #"enable_interrupts_0"
          (varargs join-list
            (sti)
            (ret)))))
    (function-fragment
      #"enable_interrupts_and_halt"
      (varargs append-jl*
        (named-block #"enable_interrupts_and_halt_0"
          (varargs join-list
            (sti)
            (hlt)
            (ret)))))
    (function-fragment
      #"disable_interrupts"
      (varargs append-jl*
        (named-block #"disable_interrupts_0"
          (varargs join-list
            (cli)
            (ret)))))

    (function-fragment
      #"efi_main"
      (varargs append-jl*
        (named-block #"efi_main_0"
          (varargs join-list
            (movq (r64mi-reg (rcx)) (r64m-reg (rdi)))
            (movq (r64mi-reg (rdx)) (r64m-reg (rsi)))
            (call #"yos_main")
            ))))

    ; Panic, and stop forever
    ; Disables interupts
    (function-fragment
      #"y_panic"
      (varargs append-jl*
        (named-block #"y_panic_0"
          (varargs join-list
            (cli)
            (movq/imm* #xDEADDEAD (rax))
            (hlt)
            (jmp #"y_panic")))))


    (function-fragment
      #"y_irqfun_default"
      (varargs append-jl*
        (named-block #"y_irqfun_default_0"
          (varargs join-list
            (jmp #"y_panic")
            ))))

    (function-fragment
      #"y_irqfun_com1"
      (varargs append-jl*
        (named-block #"y_irqfun_com1_0"
          (varargs join-list
            (pushfq)
            (pushq (r64mi-reg (rax)))
            (pushq (r64mi-reg (rdx)))
            (cld)

            ; Disable other interrupts
            (sti)
            (pushq (r64mi-reg (rax)))
            (pushq (r64mi-reg (rcx)))
            (pushq (r64mi-reg (rdx)))
            (pushq (r64mi-reg (rdi)))
            (pushq (r64mi-reg (rsi)))
            (pushq (r64mi-reg (r8)))
            (pushq (r64mi-reg (r9)))
            (pushq (r64mi-reg (r10)))
            (pushq (r64mi-reg (r11)))

            (call #"yos_markAllRunnable")

            (popq (r64m-reg (r11)))
            (popq (r64m-reg (r10)))
            (popq (r64m-reg (r9)))
            (popq (r64m-reg (r8)))
            (popq (r64m-reg (rsi)))
            (popq (r64m-reg (rdi)))
            (popq (r64m-reg (rdx)))
            (popq (r64m-reg (rcx)))
            (popq (r64m-reg (rax)))
            ; Reenable interrupts
            (cli)

            ; Port for PIC 1
            (movq/imm* #x20 (rdx))
            ; EOI (End of Interrupt) command
            (movq/imm* #x20 (rax))
            ; Send command
            (outb)

            (popq (r64m-reg (rdx)))
            (popq (r64m-reg (rax)))
            (popfq)
            (iretq)
            ))))

    (function-fragment
      #"y_irqfun_nic"
      (varargs append-jl*
        (named-block #"y_irqfun_nic_0"
          (varargs join-list
            (pushfq)
            (pushq (r64mi-reg (rax)))
            (pushq (r64mi-reg (rdx)))
            (cld)

            ; Disable other interrupts
            (sti)
            (pushq (r64mi-reg (rax)))
            (pushq (r64mi-reg (rcx)))
            (pushq (r64mi-reg (rdx)))
            (pushq (r64mi-reg (rdi)))
            (pushq (r64mi-reg (rsi)))
            (pushq (r64mi-reg (r8)))
            (pushq (r64mi-reg (r9)))
            (pushq (r64mi-reg (r10)))
            (pushq (r64mi-reg (r11)))

            (call #"yos_markAllRunnable")

            (popq (r64m-reg (r11)))
            (popq (r64m-reg (r10)))
            (popq (r64m-reg (r9)))
            (popq (r64m-reg (r8)))
            (popq (r64m-reg (rsi)))
            (popq (r64m-reg (rdi)))
            (popq (r64m-reg (rdx)))
            (popq (r64m-reg (rcx)))
            (popq (r64m-reg (rax)))
            ; Reenable interrupts
            (cli)

            ; Port for PIC 1
            (movq/imm* #x20 (rdx))
            ; EOI (End of Interrupt) command
            (movq/imm* #x20 (rax))
            ; Send command
            (outb)

            ; Port for PIC 2
            (movq/imm* #xa0 (rdx))
            ; Send command (Still EOI)
            (outb)

            (popq (r64m-reg (rdx)))
            (popq (r64m-reg (rax)))
            (popfq)
            (iretq)
            ))))


    (function-fragment
      #"y_switch_to_task"
      (varargs append-jl*
        (named-block #"y_switch_to_task_0"
          (varargs join-list
            (pushq (r64mi-reg (rax)))
            (pushq (r64mi-reg (rbx)))
            (pushq (r64mi-reg (rcx)))
            (pushq (r64mi-reg (rdx)))
            (pushq (r64mi-reg (rbp)))
            (pushq (r64mi-reg (rsi)))
            (pushq (r64mi-reg (rdi)))
            (pushq (r64mi-reg (r8)))
            (pushq (r64mi-reg (r9)))
            (pushq (r64mi-reg (r10)))
            (pushq (r64mi-reg (r11)))
            (pushq (r64mi-reg (r12)))
            (pushq (r64mi-reg (r13)))
            (pushq (r64mi-reg (r14)))
            (pushq (r64mi-reg (r15)))

            (movq (r64mi-reg (rsp)) (r64m-mem (mem (rcx) 0)))
            (movq (r64mi-mem (mem (rdx) 0)) (r64m-reg (rsp)))

            (popq (r64m-reg (r15)))
            (popq (r64m-reg (r14)))
            (popq (r64m-reg (r13)))
            (popq (r64m-reg (r12)))
            (popq (r64m-reg (r11)))
            (popq (r64m-reg (r10)))
            (popq (r64m-reg (r9)))
            (popq (r64m-reg (r8)))
            (popq (r64m-reg (rdi)))
            (popq (r64m-reg (rsi)))
            (popq (r64m-reg (rbp)))
            (popq (r64m-reg (rdx)))
            (popq (r64m-reg (rcx)))
            (popq (r64m-reg (rbx)))
            (popq (r64m-reg (rax)))
            (ret)))))


    ))

(define (make-data-fragments) : (List ConstFragment)
  (varargs list
    ;; TODO Make this less hacky
    (const-fragment
      #"call_ms0c" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"call_ms0" 0)))
    (const-fragment
      #"call_ms1c" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"call_ms1" 0)))
    (const-fragment
      #"call_ms2c" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"call_ms2" 0)))
    (const-fragment
      #"call_ms5c" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"call_ms5" 0)))
    (const-fragment
      #"y_lidtc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_lidt" 0)))
    (const-fragment
      #"y_outbc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_outb" 0)))
    (const-fragment
      #"y_outwc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_outw" 0)))
    (const-fragment
      #"y_outdc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_outd" 0)))
    (const-fragment
      #"y_inbc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_inb" 0)))
    (const-fragment
      #"y_inwc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_inw" 0)))
    (const-fragment
      #"y_indc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_ind" 0)))

    (const-fragment
      #"enable_interruptsc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"enable_interrupts" 0)))
    (const-fragment
      #"enable_interrupts_and_haltc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"enable_interrupts_and_halt" 0)))
    (const-fragment
      #"disable_interruptsc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"disable_interrupts" 0)))
    (const-fragment
      #"y_panicc" 3
      (varargs list
        (bytes-fragment (make-bytes 8))
        (address-fragment #"y_panic" 0)))


    (const-fragment
      #"yprim_trivial_closure_variant_descriptor" 8
      (varargs list (bytes-fragment (make-bytes 8))))
    (const-fragment
      #"yprim_bytes_variant_descriptor" 8
      (varargs list (bytes-fragment (make-bytes 8))))))
