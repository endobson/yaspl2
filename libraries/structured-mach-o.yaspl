#:module (structured-mach-o)
#:import {
  (bytes)
  (list)
  (prim)
}
(export
  #:types (RelocationKind Relocation SectionPart DefinedSymbol TextSegment)
  #:values (branch-relocation signed-relocation unsigned-relocation
            relocation-kind->u8 u8->relocation-kind
            relocation relocation-symbol section-part section-part-contents
            defined-symbol defined-symbol-name defined-symbol< construct-text-segment)
  #:patterns (branch-relocation signed-relocation unsigned-relocation relocation section-part
              defined-symbol text-segment))
(types
  ;; branch-relocation and signed relocation are treated exactly the same, but are still distinquished
  ;; in the object file.
  (define-type RelocationKind
    (branch-relocation)
    (signed-relocation)
    (unsigned-relocation))

  (define-type Relocation
    (relocation [kind : RelocationKind] [offset : Int] [symbol : Bytes]))

  (define-type SectionPart
    (section-part
      [contents : Bytes]
      [relocations : (List Relocation)]
      [defined-symbols : (List DefinedSymbol)]))
  (define-type DefinedSymbol
    (defined-symbol [name : Bytes] [offset : Int]))

  (define-type CombinedSectionParts
    (combined-section-parts
      [reversed-contents : (List Bytes)]
      [total-content-size : Int]
      [relocations : (List Relocation)]
      [defined-symbols : (List DefinedSymbol)]))

  (define-type TextSegment
    (text-segment
      [contents : Bytes]
      [text-section-offset : Int]
      [text-section-size : Int]
      [const-section-offset : Int]
      [const-section-size : Int]
      [relocations : (List Relocation)]
      [defined-symbols : (List DefinedSymbol)])))

(define (defined-symbol< [x : DefinedSymbol] [y : DefinedSymbol]) : Boolean
  (bytes< (defined-symbol-name x) (defined-symbol-name y)))

(define (relocation-kind->u8 [kind : RelocationKind]) : U8
  (case kind
    [(branch-relocation) (u8 #x2D)]
    [(signed-relocation) (u8 #x1D)]
    [(unsigned-relocation) (u8 #x0E)]))

(define (u8->relocation-kind [v : U8]) : RelocationKind
  (case (u8->s64 v)
    [#x2D (branch-relocation)]
    [#x1D (signed-relocation)]
    [#x0E (unsigned-relocation)]
    [_ (panic #"Unknown relocation kind")]))

(define (section-part-fold
          [section-parts : (List SectionPart)]
          [reversed-contents : (List Bytes)]
          [current-offset : Int]
          [relocations : (List Relocation)]
          [defined-symbols : (List DefinedSymbol)]) : CombinedSectionParts
  (case section-parts
    [(empty)
     (combined-section-parts
       reversed-contents
       current-offset
       relocations
       defined-symbols)]
    [(cons (section-part section-content section-relocations section-symbols) section-parts)
     (section-part-fold
       section-parts
       (cons section-content reversed-contents)
       (+ current-offset (bytes-length section-content))
       (append
         (map (lambda ([reloc : Relocation])
                (case reloc
                  [(relocation type offset symbol)
                   (relocation type (+ current-offset offset) symbol)]))
              section-relocations)
         relocations)
       (append
         (map (lambda ([sym : DefinedSymbol])
                (case sym
                  [(defined-symbol name offset)
                   (defined-symbol name (+ current-offset offset))]))
              section-symbols)
         defined-symbols))]))

(define (construct-text-segment
          [text-sections : (List SectionPart)]
          [const-sections : (List SectionPart)]) : TextSegment
  (match-define
    (combined-section-parts reversed-contents text-offset-end relocations defined-symbols)
    (section-part-fold text-sections (empty) 0 (empty) (empty)))

  (match-define
    (combined-section-parts reversed-contents total-size relocations defined-symbols)
    (section-part-fold const-sections reversed-contents text-offset-end relocations defined-symbols))

  (match-define contents (bytes-append (reverse reversed-contents)))
  (text-segment contents 0 text-offset-end text-offset-end (- (bytes-length contents) text-offset-end)
                relocations defined-symbols))
