#:module (structured-mach-o)
#:import {
  (bytes)
  (list)
  (numbers)
  (prim)
}
(export
  #:types (RelocationKind Relocation DefinedSymbol TextSegment TextSegmentSection)
  #:values (branch-relocation signed-relocation unsigned-relocation
            relocation-kind->u8 u8->relocation-kind
            relocation relocation-symbol
            defined-symbol defined-symbol-name defined-symbol<
            combine-sections text-segment-section)
  #:patterns (branch-relocation signed-relocation unsigned-relocation relocation
              defined-symbol text-segment text-segment-section))
(types
  ;; branch-relocation and signed relocation are treated exactly the same, but are still distinquished
  ;; in the object file.
  (define-type RelocationKind
    (branch-relocation)
    (signed-relocation)
    (unsigned-relocation))

  (define-type Relocation
    (relocation [kind : RelocationKind] [offset : Int] [symbol : Bytes]))

  (define-type DefinedSymbol
    (defined-symbol [name : Bytes] [offset : Int]))

  (define-type CombinedSectionParts
    (combined-section-parts
      [reversed-contents : (List Bytes)]
      [total-content-size : Int]
      [relocations : (List Relocation)]
      [defined-symbols : (List DefinedSymbol)]))

  (define-type TextSegment
    (text-segment
      [text-section : TextSegmentSection]
      [const-section : TextSegmentSection]))
  (define-type TextSegmentSection
    (text-segment-section
      [contents : Bytes]
      [alignment : Int]
      [relocations : (List Relocation)]
      [symbols : (List DefinedSymbol)])))

(define (defined-symbol< [x : DefinedSymbol] [y : DefinedSymbol]) : Boolean
  (bytes< (defined-symbol-name x) (defined-symbol-name y)))

(define (relocation-kind->u8 [kind : RelocationKind]) : U8
  (case kind
    [(branch-relocation) (u8 #x2D)]
    [(signed-relocation) (u8 #x1D)]
    [(unsigned-relocation) (u8 #x0E)]))

(define (u8->relocation-kind [v : U8]) : RelocationKind
  (case (u8->s64 v)
    [#x2D (branch-relocation)]
    [#x1D (signed-relocation)]
    [#x0E (unsigned-relocation)]
    [_ (panic #"Unknown relocation kind")]))

(define (combine-sections [sections : (List TextSegmentSection)]) : TextSegmentSection
  (section-fold sections (empty) 0 0 (empty) (empty)))

(define (section-fold
          [sections : (List TextSegmentSection)]
          [reversed-contents : (List Bytes)]
          [current-offset : Int]
          [current-max-alignment : Int]
          [relocations : (List Relocation)]
          [defined-symbols : (List DefinedSymbol)]) : TextSegmentSection
  (case sections
    [(empty)
     (text-segment-section
       (bytes-append (reverse reversed-contents))
       current-max-alignment
       relocations
       defined-symbols)]
    [(cons (text-segment-section section-content alignment section-relocations section-symbols) sections)
     (match-define aligned-offset (round-up current-offset (logical-shift-left 1 alignment)))
     (match-define reversed-contents
       (if (= aligned-offset current-offset)
           reversed-contents
           (cons (make-bytes (- aligned-offset current-offset)) reversed-contents)))

     (section-fold
       sections
       (cons section-content reversed-contents)
       (+ aligned-offset (bytes-length section-content))
       (max current-max-alignment alignment)
       (append
         (map (lambda ([reloc : Relocation])
                (case reloc
                  [(relocation type offset symbol)
                   (relocation type (+ aligned-offset offset) symbol)]))
              section-relocations)
         relocations)
       (append
         (map (lambda ([sym : DefinedSymbol])
                (case sym
                  [(defined-symbol name offset)
                   (defined-symbol name (+ aligned-offset offset))]))
              section-symbols)
         defined-symbols))]))
