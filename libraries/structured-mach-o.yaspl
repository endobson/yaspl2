#:module (structured-mach-o)
#:import {
  (list)
  (prim)
}
(export
  #:types (RelocationKind Relocation SectionPart DefinedSymbol)
  #:values (branch-relocation signed-relocation unsigned-relocation
            relocation-kind->u8 u8->relocation-kind
            relocation relocation-symbol section-part section-part-contents
            defined-symbol defined-symbol-name)
  #:patterns (branch-relocation signed-relocation unsigned-relocation relocation section-part
              defined-symbol))
(types
  ;; branch-relocation and signed relocation are treated exactly the same, but are still distinquished
  ;; in the object file.
  (define-type RelocationKind
    (branch-relocation)
    (signed-relocation)
    (unsigned-relocation))

  (define-type Relocation
    (relocation [kind : RelocationKind] [offset : Int] [symbol : Bytes]))

  (define-type SectionPart
    (section-part
      [contents : Bytes]
      [relocations : (List Relocation)]
      [defined-symbols : (List DefinedSymbol)]))
  (define-type DefinedSymbol
    (defined-symbol [name : Bytes] [offset : Int])))

(define (relocation-kind->u8 [kind : RelocationKind]) : U8
  (case kind
    [(branch-relocation) (u8 #x2D)]
    [(signed-relocation) (u8 #x1D)]
    [(unsigned-relocation) (u8 #x0E)]))

(define (u8->relocation-kind [v : U8]) : RelocationKind
  (case (u8->s64 v)
    [#x2D (branch-relocation)]
    [#x1D (signed-relocation)]
    [#x0E (unsigned-relocation)]
    [_ (panic #"Unknown relocation kind")]))
