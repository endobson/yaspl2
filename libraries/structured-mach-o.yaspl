#:module (structured-mach-o)
#:import {
  (aligned-bytes)
  (either)
  (list)
  (mach-o)
  (maybe)
  (prim)
  (structured-native-code)
}
(export
  (#:types MachORelocationKind ParsedMachO)
  (#:values
     relocation-kind->u8 u8->relocation-kind
     abstract-relocation->mach-o-relocation
     parse-mach-o parsed-mach-o-text-section parsed-mach-o-const-section)
  (#:patterns mach-o-branch-relocation mach-o-signed-relocation mach-o-unsigned-relocation))
(types
  (define-type ParsedMachO
    (parsed-mach-o
      [text-section : (ProgramSection MachORelocationKind)]
      [const-section : (ProgramSection MachORelocationKind)]))

  (define-type MachORelocationKind
    (mach-o-branch-relocation)
    (mach-o-signed-relocation)
    (mach-o-unsigned-relocation)))

(define (relocation-kind->u8 [kind : MachORelocationKind]) : U8
  (case kind
    [(mach-o-branch-relocation) (u8 #x2D)]
    [(mach-o-signed-relocation) (u8 #x1D)]
    [(mach-o-unsigned-relocation) (u8 #x0E)]))

(define (u8->relocation-kind [v : U8]) : MachORelocationKind
  (case (u8->s64 v)
    [#x2D (mach-o-branch-relocation)]
    [#x1D (mach-o-signed-relocation)]
    [#x0E (mach-o-unsigned-relocation)]
    [_ (panic #"Unknown relocation kind")]))

(define (abstract-relocation->mach-o-relocation [r : AbstractRelocationKind])
  : MachORelocationKind
  (case r
    [(branch-relocation) (mach-o-branch-relocation)]
    [(call-relocation) (mach-o-branch-relocation)]
    [(load-relocation) (mach-o-signed-relocation)]
    [(address-relocation _) (mach-o-unsigned-relocation)]))

(define (find-text-section [load-commands : (List MachOLoadCommand)]) : Section64
  (case load-commands
    [(empty) (panic #"No text section")]
    [(cons (lc-load-segment64 (load-segment64 _ _ _ _ _ _ _ _ sections)) lc)
     (case (find-text-section* sections)
       [(just sec) sec]
       [_ (find-text-section lc)])]
    [(cons _ lc) (find-text-section lc)]))

(define (find-text-section* [sections : (List Section64)]) : (Maybe Section64)
  (case sections
    [(empty) (nothing)]
    [(cons sec secs)
     (case sec
       [(section64 #"__text" #"__TEXT" _ _ _ _ _ _ _)
        (just sec)]
       [_ (find-text-section* secs)])]))

(define (find-const-section [load-commands : (List MachOLoadCommand)]) : Section64
  (case load-commands
    [(empty) (panic #"No const section")]
    [(cons (lc-load-segment64 (load-segment64 _ _ _ _ _ _ _ _ sections)) lc)
     (case (find-const-section* sections)
       [(just sec) sec]
       [_ (find-const-section lc)])]
    [(cons _ lc) (find-const-section lc)]))

(define (find-const-section* [sections : (List Section64)]) : (Maybe Section64)
  (case sections
    [(empty) (nothing)]
    [(cons sec secs)
     (case sec
       [(section64 #"__const" #"__TEXT" _ _ _ _ _ _ _)
        (just sec)]
       [_ (find-const-section* secs)])]))


(define (symbol-entries->defined-symbols
          [section-base-address : Int]
          [entries : (List SymbolTableEntry)]) : (List DefinedSymbol)
  (filter-map
    (lambda ([entry : SymbolTableEntry]) : (Maybe DefinedSymbol)
      (case entry
        [(symbol-table-entry name type _ _ value)
         (case (u8->s64 type)
           [#x0f
            (just (defined-symbol name (- (u64->s64 value) section-base-address)))]
           [_
            (nothing)])]))
    entries))

(define (text-symbol? [entry : SymbolTableEntry]) : Boolean
  (case entry
    [(symbol-table-entry _ _ section _ _)
     (= (u8->s64 section) 1)]))
(define (const-symbol? [entry : SymbolTableEntry]) : Boolean
  (case entry
    [(symbol-table-entry _ _ section _ _)
     (= (u8->s64 section) 2)]))


(define (lookup-symbol [symbols : (List SymbolTableEntry)] [symbol-num : Int])
  : (Maybe SymbolTableEntry)
  (list-ref symbols symbol-num))

(define (resolve-relocations
          [relocations : (List RelocationEntry)]
          [symbols : (List SymbolTableEntry)]) : (List (Relocation MachORelocationKind))
  (map
    (lambda ([entry : RelocationEntry]) : (Relocation MachORelocationKind)
      (case entry
        [(relocation-entry address symbol-num type)
         (case (lookup-symbol symbols (u32->s64 symbol-num))
           [(nothing) (panic #"Not a valid symbol number")]
           [(just symbol-entry)
            (relocation
              (u8->relocation-kind type)
              (u32->s64 address)
              (symbol-table-entry-name symbol-entry))])]))
    relocations))


(define (parse-mach-o [mach-o : MachOFile]) : (Either Bytes ParsedMachO)
  (match-define all-symbols (read-symbol-table mach-o))
  (right
    (parsed-mach-o
      (parse-text-section mach-o all-symbols)
      (parse-const-section mach-o all-symbols))))

(define (parse-text-section [mach-o : MachOFile] [symbols : (List SymbolTableEntry)])
  : (ProgramSection MachORelocationKind)
  (case mach-o
    [(mach-o-file _header load-commands contents)
     (case (find-text-section load-commands)
       [(section64 _ _ address size offset alignment relocation-offset num-relocations _)
        (match-define size (u64->s64 size))
        (match-define offset (u32->s64 offset))
        (match-define alignment (u32->s64 alignment))
        (match-define relocation-offset (u32->s64 relocation-offset))
        (match-define num-relocations (u32->s64 num-relocations))
        (match-define address (u64->s64 address))
        (program-section
          (aligned-bytes (mach-o-raw-contents-subbytes contents offset size) alignment)
          (resolve-relocations (read-relocations num-relocations relocation-offset contents) symbols)
          (symbol-entries->defined-symbols address (filter text-symbol? symbols))
          (empty))])]))

(define (parse-const-section [mach-o : MachOFile] [symbols : (List SymbolTableEntry)])
  : (ProgramSection MachORelocationKind)
  (case mach-o
    [(mach-o-file _header load-commands contents)
     (case (find-const-section load-commands)
       [(section64 _ _ address size offset alignment relocation-offset num-relocations _)
        (match-define size (u64->s64 size))
        (match-define offset (u32->s64 offset))
        (match-define alignment (u32->s64 alignment))
        (match-define relocation-offset (u32->s64 relocation-offset))
        (match-define num-relocations (u32->s64 num-relocations))
        (match-define address (u64->s64 address))
        (program-section
          (aligned-bytes (mach-o-raw-contents-subbytes contents offset size) alignment)
          (resolve-relocations (read-relocations num-relocations relocation-offset contents) symbols)
          (symbol-entries->defined-symbols address (filter const-symbol? symbols))
          (empty))])]))
