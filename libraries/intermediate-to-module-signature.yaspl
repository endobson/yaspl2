#:module (intermediate-to-module-signature)
#:import {
  (bytes)
  (dict)
  (intermediate-language)
  (list)
  (maybe)
  (module-signature)
  (prim)
  (types)
  (yaspl module-environment)
}
(export
  #:types ()
  #:values (module->module-signature)
  #:patterns ())
(types)

(define (module->module-signature
          [mod : Module]
          [env : ModuleEnvironment]
          [known-funcs : (Dict Bytes Bytes)]) : ModuleSignature
  (let ([exports (module-exports mod)])
    (module-signature
      (module-name mod)
      (make-exports (exports-values exports) env (make-dict bytes=?))
      (make-exported-patterns (module-types mod) (make-dict bytes=?))
      (make-type-exports (exports-types exports) (make-dict bytes=?))
      known-funcs)))

(define (make-exports
          [exports : (List TypedExport)]
          [env : ModuleEnvironment]
          [acc : (Dict Bytes ValueSignature)])
  : (Dict Bytes ValueSignature)
  (case exports
    [(empty) acc]
    [(cons (typed-export local-name exported-name type) exports)
     (case (module-environment-global-ref env local-name)
       [(nothing)
        (panic #"Exported value has no definition")]
       [(just exported-name*)
        (make-exports
          exports
          env
          (dict-add acc exported-name (value-signature type exported-name*)))])]))

(define (make-type-exports
          [exports : (List TypedExport)]
          [acc : (Dict Bytes Type)])
  : (Dict Bytes Type)
  (case exports
    [(empty) acc]
    [(cons (typed-export _ exported-name type) exports)
     (make-type-exports exports (dict-add acc exported-name type))]))

(define (make-exported-patterns
          [types : (List TypeDefinition)]
          [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
  (case types
    [(empty) acc]
    [(cons (type-definition _ _ type-vars self-type variants) types)
     (make-exported-patterns
       types
       (make-exported-patterns/variants
         type-vars
         self-type
         (type-signature (map variant-definition-name variants))
         variants
         acc))]))

(define (make-exported-patterns/variants
          [type-vars : (List Bytes)]
          [self-type : Type]
          [type-signature : TypeSignature]
          [variants : (List VariantDefinition)]
          [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
  (case variants
    [(empty) acc]
    [(cons (variant-definition name tag fields) variants)
     (make-exported-patterns/variants
       type-vars
       self-type
       type-signature
       variants
       (dict-add acc name (pattern-signature name tag type-vars self-type
                                             (map variant-field-type fields)
                                             type-signature)))]))
