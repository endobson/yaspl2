#:module (intermediate-to-module-signature)
#:import {
  (bytes)
  (dict)
  (intermediate-language)
  (list)
  (maybe)
  (module-signature)
  (prim)
  (top-level-name)
  (types)
}
(export
  #:types ()
  #:values (module->module-signature)
  #:patterns ())
(types)

(define (module->module-signature [mod : Module]) : ModuleSignature
  (let ([exports (module-exports mod)])
    (module-signature
      (module-name mod)
      (make-exports (exports-values exports) (make-dict bytes-cmp))
      (make-pattern-exports (exports-patterns exports) (make-dict bytes-cmp))
      (make-type-exports (exports-types exports) (make-dict bytes-cmp))
      (make-static-info mod))))

(define (make-exports
          [exports : (List ValueExport)]
          [acc : (Dict Bytes ValueSignature)])
  : (Dict Bytes ValueSignature)
  (case exports
    [(empty) acc]
    [(cons (value-export exported-name top-level-name type) exports)
     (make-exports
       exports
       (dict-add acc exported-name (value-signature type top-level-name)))]))

(define (make-type-exports
          [exports : (List TypeExport)]
          [acc : (Dict Bytes Type)])
  : (Dict Bytes Type)
  (case exports
    [(empty) acc]
    [(cons (type-export exported-name type) exports)
     (make-type-exports exports (dict-add acc exported-name type))]))


(define (make-pattern-exports
          [exports : (List PatternExport)]
          [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
  (case exports
    [(empty) acc]
    [(cons (pattern-export name sig) exports)
     (make-pattern-exports exports (dict-add acc name sig) )]))

(define (make-static-info [mod : Module]) : (Dict TopLevelName TopLevelSignature)
  (make-closure-static-info mod))


(define (make-closure-static-info [mod : Module]) : (Dict TopLevelName TopLevelSignature)
  (match-define mod-name (module-name mod))
  (foldl
    (lambda ([c : ConstantDefinition] [acc : (Dict TopLevelName TopLevelSignature)])
      (case c
        [(closure-constant name fun-name)
         (dict-add
           acc
           (top-level-name mod-name name)
           (top-level-signature (just (top-level-name mod-name fun-name)) (nothing)))]
        [(bytes-constant _ _)
         acc]
        [(trivial-variant-constant _ _)
         acc]))
    (module-constants mod)
    ((lambda () : (Dict TopLevelName TopLevelSignature) (make-dict top-level-name-cmp)))))
