(module intermediate-to-module-signature
  (import
    (prim
      #:types (Bytes)
      #:values (panic)
      #:patterns ())
    (list
      #:types (List)
      #:values ()
      #:patterns (cons empty))
    (bytes bytes=?)
    (environment
      #:types (Environment)
      #:values (global-value-name environment-value-ref
                environment-type-bindings)
      #:patterns ())
    (dict
      #:types (Dict)
      #:values (make-dict dict-add dict-ref)
      #:patterns ())
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (module-signature
      #:types (ModuleSignature PatternSignature)
      #:values (module-signature pattern-signature)
      #:patterns ())
    (intermediate-language
      #:types (Module TypeDefinition VariantDefinition)
      #:values (module-name module-types module-exports)
      #:patterns (variant-definition type-definition))
    (types
      #:types (Type)
      #:values ()
      #:patterns ())
    (source-language
      #:types (Export)
      #:values (exports-values exports-types)
      #:patterns (export)))
  (export
    #:types ()
    #:values (module->module-signature)
    #:patterns ())
  (types)

  (define (module->module-signature
            [mod : Module]
            [env : Environment]
            [known-funcs : (Dict Bytes Bytes)]) : ModuleSignature
    (let ([exports (module-exports mod)])
      (module-signature
        (module-name mod)
        (make-exports (exports-values exports) env (make-dict bytes=?))
        (make-exported-patterns (module-types mod) (make-dict bytes=?))
        (make-type-exports (exports-types exports) (environment-type-bindings env)
                           (make-dict bytes=?))
        (make-dict bytes=?)
        known-funcs)))

  (define (make-exports [exports : (List Export)] [env : Environment] [acc : (Dict Bytes Bytes)])
    : (Dict Bytes Bytes)
    (case exports
      [(empty) acc]
      [(cons (export local-name exported-name) exports)
       (case (environment-value-ref env local-name)
         [(nothing)
          (panic #"Exported value has no definition")]
         [(just exported-name*)
          (make-exports
            exports
            env
            (dict-add
              acc
              exported-name
              (global-value-name exported-name*)))])]))

  (define (make-type-exports
            [exports : (List Export)]
            [env : (Dict Bytes Type)]
            [acc : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case exports
      [(empty) acc]
      [(cons (export local-name exported-name) exports)
       (case (dict-ref env local-name)
         [(nothing)
          (panic #"Exported type has no definition")]
         [(just exported-type)
          (make-type-exports
            exports
            env
            (dict-add
              acc
              exported-name
              exported-type))])]))

  (define (make-exported-patterns
            [types : (List TypeDefinition)]
            [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
    (case types
      [(empty) acc]
      [(cons (type-definition _ _ _ variants) types)
       (make-exported-patterns
         types
         (make-exported-patterns/variants variants acc))]))

  (define (make-exported-patterns/variants
            [variants : (List VariantDefinition)]
            [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
    (case variants
      [(empty) acc]
      [(cons (variant-definition name tag _) variants)
       (make-exported-patterns/variants
         variants
         (dict-add acc name (pattern-signature tag)))]))
  )
