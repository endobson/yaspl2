#:module (intermediate-to-module-signature)
#:import {
  (bytes)
  (dict)
  (intermediate-language)
  (join-list)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (top-level-name)
  (tuples)
  (types)
}
(export
  #:types ()
  #:values (module->module-signature)
  #:patterns ())
(types)

(define (module->module-signature [mod : Module]) : ModuleSignature
  (let ([exports (module-exports mod)])
    (module-signature
      (module-name mod)
      (make-exports (exports-values exports) (make-dict bytes-cmp))
      (make-exported-patterns (module-types mod) (make-dict bytes-cmp))
      (make-type-exports (exports-types exports) (make-dict bytes-cmp))
      (make-static-info mod))))

(define (make-exports
          [exports : (List ValueExport)]
          [acc : (Dict Bytes ValueSignature)])
  : (Dict Bytes ValueSignature)
  (case exports
    [(empty) acc]
    [(cons (value-export exported-name top-level-name type) exports)
     (make-exports
       exports
       (dict-add acc exported-name (value-signature type top-level-name (nothing))))]))

(define (make-type-exports
          [exports : (List TypeExport)]
          [acc : (Dict Bytes Type)])
  : (Dict Bytes Type)
  (case exports
    [(empty) acc]
    [(cons (type-export exported-name type) exports)
     (make-type-exports exports (dict-add acc exported-name type))]))

(define (make-exported-patterns
          [types : (List TypeDefinition)]
          [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
  (case types
    [(empty) acc]
    [(cons (type-definition _ _ type-vars self-type variants) types)
     (make-exported-patterns
       types
       (make-exported-patterns/variants
         type-vars
         self-type
         (type-signature (map variant-definition-name variants))
         variants
         acc))]))

(define (make-exported-patterns/variants
          [type-vars : (List Bytes)]
          [self-type : Type]
          [type-signature : TypeSignature]
          [variants : (List VariantDefinition)]
          [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
  (case variants
    [(empty) acc]
    [(cons (variant-definition name tag fields) variants)
     (make-exported-patterns/variants
       type-vars
       self-type
       type-signature
       variants
       (dict-add acc name (pattern-signature name tag type-vars self-type
                                             (map variant-field-type fields)
                                             type-signature)))]))

(define (make-static-info [mod : Module]) : (Dict TopLevelName TopLevelSignature)
  (merge-dicts
    (make-type-definition-static-info mod)
    (make-closure-static-info mod)))


(define (make-closure-static-info [mod : Module]) : (Dict TopLevelName TopLevelSignature)
  (match-define mod-name (module-name mod))
  (foldl
    (lambda ([c : ClosureConstant] [acc : (Dict TopLevelName TopLevelSignature)])
      (case c
        [(closure-constant name fun-name)
         (dict-add
           acc
           (top-level-name mod-name name)
           (top-level-signature (just (top-level-name mod-name fun-name))))]))
    (module-closures mod)
    ((lambda () : (Dict TopLevelName TopLevelSignature) (make-dict top-level-name-cmp)))))


(define (make-type-definition-static-info [mod : Module]) : (Dict TopLevelName TopLevelSignature)
  (match-define mod-name (module-name mod))
  (dict-add-all
    (make-dict top-level-name-cmp)
    (jl->list
      (concat-jl
        (map
          (lambda ([type-def : TypeDefinition])
            (case type-def
              [(type-definition type-name _ _ _ (cons variant (empty)))
               (cons-jl
                 (compile-variant-definition/constructor mod-name type-name variant)
                 (compile-variant-definition/accessors mod-name type-name variant))]
              [(type-definition type-name _ _ _ variants)
               (list->jl
                 (map
                   (lambda ([variant : VariantDefinition])
                     (compile-variant-definition/constructor mod-name type-name variant))
                   variants))]))
          (module-types mod))))))

(define (compile-variant-definition/constructor
          [mod-name : ModName]
          [type-name : Bytes]
          [def : VariantDefinition]) : (Tuple2 TopLevelName TopLevelSignature)
  (match-define (variant-definition name variant-tag fields) def)
  (match-define fun-name (bytes-append (varargs list type-name #"_" name)))
  (match-define top-fun-name (top-level-name mod-name fun-name))
  (match-define closure-name (bytes-append (varargs list type-name #"_" name #"_closure")))
  (match-define top-closure-name (top-level-name mod-name closure-name))
  (tuple2
    top-closure-name
    (top-level-signature (just top-fun-name))))


(define (compile-variant-definition/accessors
          [mod-name : ModName]
          [type-name : Bytes]
          [variant : VariantDefinition])
  : (JoinList (Tuple2 TopLevelName TopLevelSignature))
  (case variant
    [(variant-definition variant-name variant-tag fields)
     (compile-variant-definition/accessors*
       mod-name
       type-name
       variant-name
       0
       fields)]))

(define (compile-variant-definition/accessors*
          [mod-name : ModName]
          [type-name : Bytes]
          [variant-name : Bytes]
          [field-index : Int]
          [fields : (List VariantField)])
  : (JoinList (Tuple2 TopLevelName TopLevelSignature))
  (case fields
    [(empty) (empty-jl)]
    [(cons (variant-field field-name _) fields)
     (cons-jl
       (compile-variant-definition-accessor
         mod-name
         type-name
         variant-name
         field-name
         field-index)
       (compile-variant-definition/accessors*
         mod-name
         type-name
         variant-name
         (+ field-index 1)
         fields))]))

(define (compile-variant-definition-accessor
          [mod-name : ModName]
          [type-name : Bytes]
          [variant-name : Bytes]
          [field-name : Bytes]
          [field-index : Int]) : (Tuple2 TopLevelName TopLevelSignature)
  (match-define fun-name
    (bytes-append (varargs list type-name #"_" variant-name #"_" field-name)))
  (match-define closure-name
    (bytes-append (varargs list type-name #"_" variant-name #"_" field-name #"_closure")))
  (match-define top-fun-name (top-level-name mod-name fun-name))
  (match-define top-closure-name (top-level-name mod-name closure-name))
  (tuple2
    top-closure-name
    (top-level-signature (just top-fun-name))))
