(module intermediate-to-module-signature
  (import
    (prim
      #:types (Bytes)
      #:values (panic)
      #:patterns ())
    (list
      #:types (List)
      #:values (map)
      #:patterns (cons empty))
    (bytes bytes=?)
    (environment
      #:types (Environment)
      #:values (environment-value-ref)
      #:patterns (global-value))
    (dict
      #:types (Dict)
      #:values (make-dict dict-add)
      #:patterns ())
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (module-signature
      #:types (ModuleSignature PatternSignature)
      #:values (module-signature pattern-signature)
      #:patterns ())
    (intermediate-language
      #:types (Module TypeDefinition VariantDefinition TypedExport)
      #:values (module-name module-types module-exports variant-field-type
                exports-values exports-types)
      #:patterns (variant-definition type-definition typed-export))
    (types
      #:types (Type)
      #:values ()
      #:patterns ()))
  (export
    #:types ()
    #:values (module->module-signature)
    #:patterns ())
  (types)

  (define (module->module-signature
            [mod : Module]
            [env : Environment]
            [known-funcs : (Dict Bytes Bytes)]) : ModuleSignature
    (let ([exports (module-exports mod)])
      (module-signature
        (module-name mod)
        (make-exports (exports-values exports) env (make-dict bytes=?))
        (make-exported-patterns (module-types mod) (make-dict bytes=?))
        (make-type-exports (exports-types exports) (make-dict bytes=?))
        (make-value-type-exports (exports-values exports) (make-dict bytes=?))
        known-funcs)))

  (define (make-value-type-exports
            [exports : (List TypedExport)]
            [acc : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case exports
      [(empty) acc]
      [(cons (typed-export _ exported-name type) exports)
       (make-value-type-exports exports (dict-add acc exported-name type))]))

  (define (make-exports [exports : (List TypedExport)] [env : Environment] [acc : (Dict Bytes Bytes)])
    : (Dict Bytes Bytes)
    (case exports
      [(empty) acc]
      [(cons (typed-export local-name exported-name _) exports)
       (case (environment-value-ref env local-name)
         [(nothing)
          (panic #"Exported value has no definition")]
         [(just (global-value exported-name*))
          (make-exports
            exports
            env
            (dict-add
              acc
              exported-name
              exported-name*))]
         [(just _)
          (panic #"Exported value is not a global")])]))

  (define (make-type-exports
            [exports : (List TypedExport)]
            [acc : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case exports
      [(empty) acc]
      [(cons (typed-export _ exported-name type) exports)
       (make-type-exports exports (dict-add acc exported-name type))]))

  (define (make-exported-patterns
            [types : (List TypeDefinition)]
            [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
    (case types
      [(empty) acc]
      [(cons (type-definition _ _ type-vars self-type variants) types)
       (make-exported-patterns
         types
         (make-exported-patterns/variants type-vars self-type variants acc))]))

  (define (make-exported-patterns/variants
            [type-vars : (List Bytes)]
            [self-type : Type]
            [variants : (List VariantDefinition)]
            [acc : (Dict Bytes PatternSignature)]) : (Dict Bytes PatternSignature)
    (case variants
      [(empty) acc]
      [(cons (variant-definition name tag fields) variants)
       (make-exported-patterns/variants
         type-vars
         self-type
         variants
         (dict-add acc name (pattern-signature tag type-vars self-type
                                               (map variant-field-type fields))))])))
