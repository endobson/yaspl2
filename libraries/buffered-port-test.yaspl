#:module (buffered-port-test)
#:import {
  (buffered-port)
  (bytes)
  (io)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (read-crlf-lines [bp : BufferedPort]) : (List Bytes)
  (match-define (line-result l eof bp) (read-crlf-line bp))
  (if eof
      (if (= (bytes-length l) 0)
          (empty)
          (cons l (empty)))
      (cons l (read-crlf-lines bp))))

(define (test-case-from-file [name : Bytes] [expected-lines : (List Bytes)]) : TestCase
  (match-define test-from-file
    (lambda () : (Maybe FailedAssertion)
      (call-with-input-file
        (bytes-append (varargs list #"libraries/test-data/buffered-port-test/" name))
        (lambda ([input : InputPort])
          (match-define lines (read-crlf-lines (make-buffered-port* input 1)))
          ((expect-equal (eq/list (eq/bytes)))
            lines
            expected-lines)))))
  (test-case name test-from-file))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (yunit/main stderr
    (varargs list
      (test-case-from-file #"empty-file" (empty))
      (test-case-from-file #"empty-line" (varargs list #""))
      (test-case-from-file #"one-line" (varargs list #"abc"))
      (test-case-from-file #"two-lines" (varargs list #"abc" #"def"))
      )))
