#:module (depth-first-search)
#:import {
  (data ordering)
  (list)
  (prim)
  (set)
  (tuples)
}
(export
  (#:types)
  (#:values depth-first-search)
  (#:patterns))
(types)

(define [A] (depth-first-search [succ : (A -> (List A))] [roots : (List A)] [cmp : (A A -> Ordering)])
  : (List A)
  (case (loop succ roots (make-set cmp) (ann (List A) (empty)))
    [(tuple2 _ vs) vs]))

(define [A] (loop [succ : (A -> (List A))]
                  [vs : (List A)]
                  [marks : (Set A)]
                  [acc : (List A)]) : (Tuple2 (Set A) (List A))
  (case vs
    [(empty) (tuple2 marks acc)]
    [(cons v vs)
     (if (set-member? marks v)
         (loop succ vs marks acc)
         (case (loop succ (succ v) (set-add marks v) acc)
           [(tuple2 marks acc)
            (loop succ vs marks (cons v acc))]))]))
