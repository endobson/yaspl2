#:module (depth-first-search)
#:import {
  (list) {
    #:types
      List
    #:values
      cons
      empty
    #:patterns
      cons
      empty
  }
  (prim) {
    #:types
      Boolean
  }
  (set) {
    #:types
      Set
    #:values
      make-set
      set-add
      set-member?
  }
  (tuples) {
    #:types
      Tuple2
    #:values
      tuple2
    #:patterns
      tuple2
  }
}
(export
  #:types ()
  #:values (depth-first-search)
  #:patterns ())
(types)

(define (A) (depth-first-search [succ : (A -> (List A))] [roots : (List A)] [= : (A A -> Boolean)])
  : (List A)
  (case (loop succ roots (make-set =) ((lambda () : (List A) (empty))))
    [(tuple2 _ vs) vs]))

(define (A) (loop [succ : (A -> (List A))]
                  [vs : (List A)]
                  [marks : (Set A)]
                  [acc : (List A)]) : (Tuple2 (Set A) (List A))
  (case vs
    [(empty) (tuple2 marks acc)]
    [(cons v vs)
     (if (set-member? marks v)
         (loop succ vs marks acc)
         (case (loop succ (succ v) (set-add marks v) acc)
           [(tuple2 marks acc)
            (loop succ vs marks (cons v acc))]))]))
