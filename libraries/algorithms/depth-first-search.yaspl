(module depth-first-search
  (import
    (dict
      #:types (Dict)
      #:values (make-dict dict-ref dict-add dict-replace)
      #:patterns ())
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (list
      #:types (List)
      #:values (cons)
      #:patterns (cons empty))
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (prim
      #:types (Bytes Boolean)
      #:values ()
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2)))
  (export
    #:types ()
    #:values (depth-first-search)
    #:patterns ())
  (types)

  (define (A) (make-mark-dict [= : (A A -> Boolean)]) : (Dict A Boolean)
    (make-dict =))

  (define (A) (depth-first-search [succ : (A -> (List A))] [roots : (List A)] [= : (A A -> Boolean)]
                                  [acc : (List A)])
    : (Either Bytes (List A))
    (case (loop succ roots (make-mark-dict =) acc)
      [(left v) (left v)]
      [(right (tuple2 _ vs)) (right vs)]))

  (define (A) (loop [succ : (A -> (List A))]
                    [vs : (List A)]
                    [marks : (Dict A Boolean)]
                    [acc : (List A)]) : (Either Bytes (Tuple2 (Dict A Boolean) (List A)))
    (case vs
      [(empty) (right (tuple2 marks acc))]
      [(cons v vs)
       (case (dict-ref marks v)
         [(just mark)
          (if mark
              (loop succ vs marks acc)
              (left #"Not a DAG"))]
         [(nothing)
          (case (loop succ (succ v) (dict-add marks v #f) acc)
            [(left v) (left v)]
            [(right (tuple2 marks acc))
             (loop succ vs (dict-replace marks v #t) (cons v acc))])])])))
