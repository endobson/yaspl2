#:module (depth-first-search-test)
#:import {
  (bytes)
  (depth-first-search)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (graph1 [v : Bytes]) : (List Bytes)
  (case v
    [#"A" (varargs list #"B" #"C")]
    [#"B" (empty)]
    [#"C" (varargs list #"D")]
    [#"D" (varargs list #"B")]
    [_ (panic #"Bad node")]))

(define (test-depth-first-search [graph : (Bytes -> (List Bytes))] [expected : (List Bytes)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (let ([actual (depth-first-search graph (varargs list #"A") bytes-cmp)])
      (if ((list=? bytes=?) actual expected)
          (nothing)
          (just (failure #"Actual value doesn't match expected"))))))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"graph1" (test-depth-first-search graph1 (varargs list #"A" #"C" #"D" #"B"))))))
