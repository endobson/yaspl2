#:module depth-first-search-test
(import
  (depth-first-search depth-first-search)
  (either
    #:types ()
    #:values ()
    #:patterns (left right))
  (list
    #:types (List)
    #:values (empty list list=?)
    #:patterns ())
  (maybe
    #:types (Maybe)
    #:values (just nothing)
    #:patterns ())
  (prim
    #:types (Array Bytes InputPort Int OutputPort)
    #:values (= panic)
    #:patterns ())
  (yunit
    #:types (FailedAssertion)
    #:values (failure new-test-case yunit/main)
    #:patterns ()))
(export)
(types)

(define (panic/int-list [bytes : Bytes]) : (List Int)
  (panic bytes))
(define (empty/int-list) : (List Int)
  (empty))

(define (graph1 [v : Int]) : (List Int)
  (case v
    [0 (varargs list 1 2)]
    [1 (empty)]
    [2 (varargs list 3)]
    [3 (varargs list 1)]
    [_ (panic/int-list #"Bad node")]))

(define (test-depth-first-search [graph : (Int -> (List Int))] [expected : (List Int)])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (depth-first-search graph (varargs list 0) = (empty/int-list))
      [(left v)
       (just (failure v))]
      [(right actual)
       (if ((list=? =) actual expected)
           (nothing)
           (just (failure #"Actual value doesn't match expected")))])))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (yunit/main stderr
    (varargs list
      (new-test-case #"graph1" (test-depth-first-search graph1 (varargs list 0 2 3 1))))))
