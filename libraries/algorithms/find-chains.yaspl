#:module find-chains
#:import {
  list {
    #:types
      List
    #:values
      cons
      empty
  }
  maybe {
    #:patterns
      just
      nothing
  }
  set {
    #:types
      Set
    #:values
      set-remove-all
      set-split
  }
  tuples {
    #:patterns
      tuple2
  }
  unique-dict {
    #:types
      UniqueDict
    #:values
      unique-dict-ref
      unique-dict-reverse-ref
  }
}
(export
  #:types ()
  #:values (find-chains)
  #:patterns ())
(types)

(define (A) (find-chains [nodes : (Set A)] [links : (UniqueDict A A)]) : (List (List A))
  (case (set-split nodes)
    [(nothing) (empty)]
    [(just (tuple2 a _))
     (let ([chain (find-chain links a)])
       (cons
         chain
         (find-chains
           (set-remove-all nodes chain)
           links)))]))

(define (A) (find-chain [links : (UniqueDict A A)] [a : A]) : (List A)
  (find-chain/backward links (find-forward-end links a) (empty)))

(define (A) (find-forward-end [links : (UniqueDict A A)] [a : A]) : A
  (case (unique-dict-ref links a)
    [(nothing) a]
    [(just a2) (find-forward-end links a2)]))

(define (A) (find-chain/backward [links : (UniqueDict A A)] [a : A] [acc : (List A)]) : (List A)
  (case (unique-dict-reverse-ref links a)
    [(nothing) (cons a acc)]
    [(just a2) (find-chain/backward links a2 (cons a acc))]))
