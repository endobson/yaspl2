#:module (top-level-name)
#:import {
  (bytes)
  (data ordering)
  (list)
  (maybe)
  (module-name)
  (prim)
  (sexp-parser)
  (sexp-printer)
}
(export
  (#:types TopLevelName)
  (#:values top-level-name top-level-name-mod-name top-level-name-local-name
            top-level-name=? top-level-name->sexp sexp->top-level-name
            top-level-name-cmp)
  (#:patterns top-level-name))
(types
  (define-type TopLevelName
    (top-level-name [mod-name : ModName] [local-name : Bytes])))

(define (top-level-name=? [t1 : TopLevelName] [t2 : TopLevelName]) : Boolean
  (match-define (top-level-name m1 l1) t1)
  (match-define (top-level-name m2 l2) t2)
  (and (mod-name=? m1 m2) (bytes=? l1 l2)))

(define (top-level-name-cmp [t1 : TopLevelName] [t2 : TopLevelName]) : Ordering
  (match-define (top-level-name m1 l1) t1)
  (match-define (top-level-name m2 l2) t2)
  (case (mod-name-cmp m1 m2)
    [(equal-to)
     (bytes-cmp l1 l2)]
    [order
     order]))

(define (top-level-name->sexp [t : TopLevelName]) : Sexp/P
  (match-define (top-level-name m l) t)
  (node/p (varargs list (mod-name->sexp m) (bytes-sexp/p l))))

(define (sexp->top-level-name [t : Sexp]) : (Maybe TopLevelName)
  (case t
    [(node (cons m (cons (bytes-sexp l) (empty))))
     (case (sexp->mod-name m)
       [(just m) (just (top-level-name m l))]
       [(nothing) (nothing)])]
    [_ (nothing)]))
