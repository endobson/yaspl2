#:module (unused-bindings)
#:import {
  (bytes)
  (data indexed-set)
  (depth-first-search)
  (dict)
  (free-variables)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (set)
  (source-language)
  (tuples)
}
(export
  (#:types UnusedBindings ImportsUnusedBindings)
  (#:values module-unused-bindings)
  (#:patterns unused-bindings partial-imports-unused partial-imports-completely-unused full-imports-unused))
(types
  (define-type UnusedBindings
    (unused-bindings
      [imports : (List ImportsUnusedBindings)]
      [value-definitions : (List Bytes)]))
  (define-type ImportsUnusedBindings
    (partial-imports-unused
      [m : ModName]
      [types : (List Bytes)]
      [values : (List Bytes)]
      [patterns : (List Bytes)])
    (partial-imports-completely-unused
      [m : ModName])
    (full-imports-unused
      [m : ModName])))


(define (module-unused-bindings [mod : Module] [sigs : (IndexedSet ModuleSignature ModName)]) : UnusedBindings
  (case mod
    [(module _ imports (exports exported-types exported-values exported-patterns) _ _)
     (match-define used-types
       (set-add-all (free-types/module mod (make-set bytes-cmp))
                    (map export-local-name exported-types)))
     (match-define used-values
       (set-add-all (free-variables/module mod (make-set bytes-cmp))
                    (map export-local-name exported-values)))
     (match-define used-patterns
       (set-add-all (free-patterns/module mod (make-set bytes-cmp))
                    (map export-local-name exported-patterns)))
     (unused-bindings
       (filter-map
         (lambda ([imports : Imports]) : (Maybe ImportsUnusedBindings)
           (case imports
             [(partial-imports mod-name types values patterns)
              (match-define unused-types
                (set->list
                  (set-difference
                    (set-add-all (make-set bytes-cmp) (map import-local-name types))
                    used-types)))
              (match-define unused-values
                (set->list
                  (set-difference
                    (set-add-all (make-set bytes-cmp) (map import-local-name values))
                    used-values)))
              (match-define unused-patterns
                (set->list
                  (set-difference
                    (set-add-all (make-set bytes-cmp) (map import-local-name patterns))
                    used-patterns)))
              (if (and (= (length unused-types) (length types))
                       (and (= (length unused-values) (length values))
                            (= (length unused-patterns) (length patterns))))
                  (just (partial-imports-completely-unused mod-name))
                  (case (tuple3 unused-types unused-values unused-patterns)
                    [(tuple3 (empty) (empty) (empty)) (nothing)]
                    [_
                     (just (partial-imports-unused mod-name unused-types unused-values unused-patterns))]))]
             [(full-imports mod-name)
              (case (indexed-set-ref sigs mod-name)
                [(nothing) (nothing)] ;; This won't compile anyways no use linting
                [(just (module-signature _ values pattern types _))
                 (match-define used-type-imports
                   (set-intersect (dict-keys types) used-types))
                 (match-define used-value-imports
                   (set-intersect (dict-keys values) used-values))
                 (match-define used-pattern-imports
                   (set-intersect (dict-keys pattern) used-patterns))
                 (if (and (set-empty? used-type-imports)
                          (and (set-empty? used-value-imports)
                               (set-empty? used-pattern-imports)))
                     (just (full-imports-unused mod-name))
                     (nothing))])]))
         imports)
       (let ([defined-functions (map function-definition-name (module-definitions mod))])
         (let ([exported-functions (cons #"main" (map export-local-name exported-values))])
           (let ([used-vars (free-variables-by-function-definition mod)])
             (let ([reachable-functions
                     (depth-first-search
                       (lambda ([f : Bytes]) : (List Bytes)
                         (case (dict-ref used-vars f)
                           [(nothing) (empty)]
                           [(just set) (set->list set)]))
                       exported-functions
                       bytes-cmp)])
               (sort
                 (set->list
                   (set-remove-all
                     (set-add-all
                       (make-set bytes-cmp)
                       defined-functions)
                     reachable-functions))
                 bytes<))))))]))
