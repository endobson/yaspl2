#:module unused-bindings
(import
  (bytes bytes< bytes=?)
  (free-variables free-patterns/module free-types/module free-variables/module)
  (list
    #:types (List)
    #:values (map sort)
    #:patterns ())
  (multi-set multi-set-keys)
  (prim
    #:types (Bytes)
    #:values ()
    #:patterns ())
  (set make-set set->list set-add-all set-remove set-remove-all)
  (source-language
    #:types (Module)
    #:values (export-local-name)
    #:patterns (exports module))
  (validator
    #:types ()
    #:values (module-defined-functions module-imported-environment
              module-imported-pattern-environment module-imported-type-environment)
    #:patterns ()))
(export
  #:types (UnusedBindings)
  #:values (module-unused-bindings)
  #:patterns (unused-bindings))
(types
  (define-type UnusedBindings
    (unused-bindings
      [type-imports : (List Bytes)]
      [value-imports : (List Bytes)]
      [pattern-imports : (List Bytes)]
      [value-definitions : (List Bytes)])))

(define (module-unused-bindings [mod : Module]) : UnusedBindings
  (case mod
    [(module name imports (exports exported-types exported-values exported-patterns) types _)
     (unused-bindings
       (let ([env (multi-set-keys (module-imported-type-environment mod))])
         (let ([used-types
                 (set-add-all (free-types/module mod (make-set bytes=?))
                              (map export-local-name exported-types))])
           (sort (set->list (set-remove-all env (set->list used-types))) bytes<)))
       (let ([env (multi-set-keys (module-imported-environment mod))])
         (let ([used-vars
                 (set-add-all (free-variables/module mod (make-set bytes=?))
                              (map export-local-name exported-values))])
           (sort (set->list (set-remove-all env (set->list used-vars))) bytes<)))
       (let ([env (multi-set-keys (module-imported-pattern-environment mod))])
         (let ([used-patterns
                 (set-add-all (free-patterns/module mod (make-set bytes=?))
                              (map export-local-name exported-patterns))])
           (sort (set->list (set-remove-all env (set->list used-patterns))) bytes<)))
       (let ([env (multi-set-keys (module-defined-functions mod))])
         (let ([used-vars (free-variables/module mod (make-set bytes=?))])
           (sort
             (set->list (set-remove
                          (set-remove-all
                            (set-remove-all env (set->list used-vars))
                            (map export-local-name exported-values))
                          #"main"))
             bytes<))))]))
