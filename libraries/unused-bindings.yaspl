#:module (unused-bindings)
#:import {
  (bytes) {
    #:values
      bytes<
      bytes=?
  }
  (depth-first-search) {
    #:values
      depth-first-search
  }
  (dict) {
    #:values
      dict-ref
  }
  (free-variables) {
    #:values
      free-patterns/module
      free-types/module
      free-variables-by-function-definition
      free-variables/module
  }
  (list) {
    #:types
      List
    #:values
      cons
      empty
      map
      sort
    #:patterns
      cons
      empty
  }
  (maybe) {
    #:patterns
      just
      nothing
  }
  (multi-set) {
    #:types
      MultiSet
    #:values
      make-multi-set
      multi-set-add
      multi-set-keys
  }
  (prim) {
    #:types
      Bytes
  }
  (set) {
    #:values
      make-set
      set->list
      set-add-all
      set-remove-all
  }
  (source-language) {
    #:types
      Import
      Imports
      Module
    #:values
      export-local-name
      function-definition-name
      module-definitions
    #:patterns
      exports
      full-imports
      import
      module
      partial-imports
  }
}
(export
  #:types (UnusedBindings)
  #:values (module-unused-bindings)
  #:patterns (unused-bindings))
(types
  (define-type UnusedBindings
    (unused-bindings
      [type-imports : (List Bytes)]
      [value-imports : (List Bytes)]
      [pattern-imports : (List Bytes)]
      [value-definitions : (List Bytes)])))

(define (module-unused-bindings [mod : Module]) : UnusedBindings
  (case mod
    [(module name imports (exports exported-types exported-values exported-patterns) types _)
     (unused-bindings
       (let ([env (multi-set-keys (module-imported-type-environment mod))])
         (let ([used-types
                 (set-add-all (free-types/module mod (make-set bytes=?))
                              (map export-local-name exported-types))])
           (sort (set->list (set-remove-all env (set->list used-types))) bytes<)))
       (let ([env (multi-set-keys (module-imported-environment mod))])
         (let ([used-vars
                 (set-add-all (free-variables/module mod (make-set bytes=?))
                              (map export-local-name exported-values))])
           (sort (set->list (set-remove-all env (set->list used-vars))) bytes<)))
       (let ([env (multi-set-keys (module-imported-pattern-environment mod))])
         (let ([used-patterns
                 (set-add-all (free-patterns/module mod (make-set bytes=?))
                              (map export-local-name exported-patterns))])
           (sort (set->list (set-remove-all env (set->list used-patterns))) bytes<)))
       (let ([defined-functions (map function-definition-name (module-definitions mod))])
         (let ([exported-functions (cons #"main" (map export-local-name exported-values))])
           (let ([used-vars (free-variables-by-function-definition mod)])
             (let ([reachable-functions
                     (depth-first-search
                       (lambda ([f : Bytes]) : (List Bytes)
                         (case (dict-ref used-vars f)
                           [(nothing) (empty)]
                           [(just set) (set->list set)]))
                       exported-functions
                       bytes=?)])
               (sort
                 (set->list
                   (set-remove-all
                     (set-add-all
                       (make-set bytes=?)
                       defined-functions)
                     reachable-functions))
                 bytes<))))))]))


(define (module-imported-environment [mod : Module]) : (MultiSet Bytes)
  (case mod
    [(module _ imports _ _ _)
     (add-importss-bindings imports
       (make-multi-set bytes=?))]))

(define (module-imported-pattern-environment [mod : Module]) : (MultiSet Bytes)
  (case mod
    [(module _ imports _ _ _)
       (add-importss-pattern-bindings imports
         (make-multi-set bytes=?))]))

(define (module-imported-type-environment [mod : Module]) : (MultiSet Bytes)
  (case mod
    [(module _ imports _ types definitions)
     (add-importss-type-bindings imports
       (make-multi-set bytes=?))]))

(define (add-importss-type-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
  : (MultiSet Bytes)
  (case importss
    [(empty) env]
    [(cons (full-imports _) importss)
     (add-importss-type-bindings importss env)]
    [(cons (partial-imports _ types _ _) importss)
     (add-importss-type-bindings importss (add-imports-bindings types env))]))

(define (add-importss-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
  : (MultiSet Bytes)
  (case importss
    [(empty) env]
    [(cons (full-imports _) importss)
     (add-importss-bindings importss env)]
    [(cons (partial-imports _ _ values _) importss)
     (add-importss-bindings importss (add-imports-bindings values env))]))

(define (add-importss-pattern-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
  : (MultiSet Bytes)
  (case importss
    [(empty) env]
    [(cons (full-imports _) importss)
     (add-importss-pattern-bindings importss env)]
    [(cons (partial-imports _ _ _ patterns) importss)
     (add-importss-pattern-bindings importss (add-imports-bindings patterns env))]))

(define (add-imports-bindings [imports : (List Import)] [env : (MultiSet Bytes)])
  : (MultiSet Bytes)
  (case imports
    [(empty) env]
    [(cons (import _ name) imports)
     (add-imports-bindings imports (multi-set-add env name))]))
