(module unused-bindings
  (import
    (bytes bytes=?)
    (free-variables free-variables/module free-types/module free-patterns/module)
    (list
      #:types (List)
      #:values (map)
      #:patterns ())
    (multi-set multi-set-keys)
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (set make-set set-remove-all set->list set-remove)
    (source-language
      #:types (Module)
      #:values (export-local-name)
      #:patterns (exports module))
    (validator
      #:types ()
      #:values (module-defined-functions module-imported-environment
                module-imported-pattern-environment module-imported-type-environment)
      #:patterns ()))
  (export
    #:types (UnusedBindings)
    #:values (module-unused-bindings)
    #:patterns (unused-bindings))
  (types
    (define-type UnusedBindings
      (unused-bindings
        [type-imports : (List Bytes)]
        [value-imports : (List Bytes)]
        [pattern-imports : (List Bytes)]
        [value-definitions : (List Bytes)])))

  (define (module-unused-bindings [mod : Module]) : UnusedBindings
    (case mod
      [(module name imports (exports _ exported-values _) types _)
       (unused-bindings
         (let ([env (multi-set-keys (module-imported-type-environment mod))])
           (let ([used-types (free-types/module mod (make-set bytes=?))])
             (set->list (set-remove-all env (set->list used-types)))))
         (let ([env (multi-set-keys (module-imported-environment mod))])
           (let ([used-vars (free-variables/module mod (make-set bytes=?))])
             (set->list (set-remove-all env (set->list used-vars)))))
         (let ([env (multi-set-keys (module-imported-pattern-environment mod))])
           (let ([used-patterns (free-patterns/module mod (make-set bytes=?))])
             (set->list (set-remove-all env (set->list used-patterns)))))
         (let ([env (multi-set-keys (module-defined-functions mod))])
           (let ([used-vars (free-variables/module mod (make-set bytes=?))])
             (set->list (set-remove
                          (set-remove-all
                            (set-remove-all env (set->list used-vars))
                            (map export-local-name exported-values))
                          #"main")))))])))
