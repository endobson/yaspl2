#:module (unused-bindings)
#:import {
  (bytes)
  (data indexed-set)
  (data source-location)
  (depth-first-search)
  (dict)
  (free-variables)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (set)
  (tuples)
  (yaspl languages source-language)
}
(export
  (#:types UnusedBindings ImportsUnusedBindings)
  (#:values module-unused-bindings)
  (#:patterns unused-bindings partial-imports-unused partial-imports-completely-unused full-imports-unused))
(types
  (define-type UnusedBindings
    (unused-bindings
      [imports : (List ImportsUnusedBindings)]
      [value-definitions : (List Bytes)]
      [static-definitions : (List Bytes)]))
  (define-type ImportsUnusedBindings
    (partial-imports-unused
      [m : ModName]
      [types : (List Bytes)]
      [values : (List Bytes)]
      [patterns : (List Bytes)]
      [statics : (List Bytes)])
    (partial-imports-completely-unused
      [m : ModName])
    (full-imports-unused
      [m : ModName])))


(define (module-unused-bindings [mod : Module] [sigs : (IndexedSet ModuleSignature ModName)]) : UnusedBindings
  (case mod
    [(module _ imports (exports exported-types exported-values exported-patterns exported-statics) _ _ _)
     (match-define used-bindings
       (lambda ([free-bindings : (Module -> (List Identifier))]
                [exports : (List Export)])
         (set-add-all
           (set-add-all
             (make-set bytes-cmp)
             (map identifier-name (free-bindings mod)))
           (map export-local-name* exports))))
     (match-define used-types (used-bindings free-types/module exported-types))
     (match-define used-values (used-bindings free-variables/module exported-values))
     (match-define used-patterns (used-bindings free-patterns/module exported-patterns))
     (match-define used-statics (used-bindings free-statics/module exported-statics))
     (unused-bindings
       (filter-map
         (lambda ([imports : Imports]) : (Maybe ImportsUnusedBindings)
           (case imports
             [(partial-imports (source-span-annotated mod-name _) types values patterns statics)
              (match-define unused-imports
                (lambda ([imports : (List Import)] [used-bindings : (Set Bytes)])
                  (set->list
                    (set-difference
                      (set-add-all (make-set bytes-cmp) (map import-local-name* imports))
                      used-bindings))))

              (match-define unused-types (unused-imports types used-types))
              (match-define unused-values (unused-imports values used-values))
              (match-define unused-patterns (unused-imports patterns used-patterns))
              (match-define unused-statics (unused-imports statics used-statics))
              (if (and (= (length unused-types) (length types))
                       (and (= (length unused-values) (length values))
                            (and (= (length unused-patterns) (length patterns))
                                 (= (length unused-statics) (length statics)))))
                  (just (partial-imports-completely-unused mod-name))
                  (case (tuple2 (tuple2 unused-types unused-values)
                                (tuple2 unused-patterns unused-statics))
                    [(tuple2 (tuple2 (empty) (empty))
                             (tuple2 (empty) (empty)))
                     (nothing)]
                    [_
                     (just (partial-imports-unused mod-name unused-types unused-values unused-patterns
                                                   unused-statics))]))]
             [(full-imports (source-span-annotated mod-name _))
              (case (indexed-set-ref sigs mod-name)
                [(nothing) (nothing)] ;; This won't compile anyways no use linting
                [(just (module-signature _ values pattern types statics _))
                 (match-define used-type-imports
                   (set-intersect (dict-keys types) used-types))
                 (match-define used-value-imports
                   (set-intersect (dict-keys values) used-values))
                 (match-define used-pattern-imports
                   (set-intersect (dict-keys pattern) used-patterns))
                 (match-define used-static-imports
                   (set-intersect (dict-keys statics) used-statics))
                 (if (and (set-empty? used-type-imports)
                          (and (set-empty? used-value-imports)
                               (and (set-empty? used-pattern-imports)
                                    (set-empty? used-static-imports))))
                     (just (full-imports-unused mod-name))
                     (nothing))])]))
         imports)
       (let ([defined-functions (map function-definition-name* (module-definitions mod))])
         (let ([exported-functions (cons #"main" (map export-local-name* exported-values))])
           (let ([used-vars (free-variables-by-function-definition mod)])
             (let ([reachable-functions
                     (depth-first-search
                       (lambda ([f : Bytes]) : (List Bytes)
                         (case (dict-ref used-vars f)
                           [(nothing) (empty)]
                           [(just set) (set->list set)]))
                       exported-functions
                       bytes-cmp)])
               (sort
                 (set->list
                   (set-remove-all
                     (set-add-all
                       (make-set bytes-cmp)
                       defined-functions)
                     reachable-functions))
                 bytes<)))))
       (let ([defined-statics
              (map (lambda ([s : StaticDefinition])
                     (case s
                       [(varargs-definition (source-span-annotated name _) _ _ _ _ _)
                     name]))
                   (module-statics mod))])
         (sort
           (set->list
             (set-difference
               (set-add-all
                 (make-set bytes-cmp)
                 defined-statics)
               used-statics))
           bytes<)))]))
