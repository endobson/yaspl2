#:module (core-language conversions lower-to-register)
#:import {
  (block-number)
  (bytes)
  (core-language languages lifted-values-language)
  (core-language sized-types)
  (core-language struct-info)
  (data indexed-set)
  (dict)
  (list)
  (maybe)
  (module-signature)
  (prim)
  (prim-language register-language-builder)
  {(register-language)
    {#:types
      [FunctionDefinition r:FunctionDefinition]
      MemoryOperationSize
    }
    {#:values
      basic-block-number
      bin-op-inst
      block-call
      boolean-not
      closure-call
      cond-jump
      eight-byte-mem-op
      fixed-pointer-offset
      four-byte-mem-op
      [function-definition r:function-definition]
      halt
      int-literal
      jump
      jump-target
      negated-var-condition
      one-byte-mem-op
      plain-function-convention
      pointer-ref-inst
      pointer-set!-inst
      [return r:return]
      symbol-address-inst
      two-byte-mem-op
      unary-op-inst
    }
  }
  (set)
  (top-level-name)
  (tuples)
  (types)
  {(yaspl intermediate-to-register)
    {#:values
      mangle-top-level-name
    }
  }
  (yaspl math-operations)
  (yaspl top-level-objects)
  (yaspl var)
}
(export
  (#:types)
  (#:values
     module-to-top-level-objects
     module->module-signature)
  (#:patterns))
(types
  (define-type Environment
    (environment
      [vars : (Dict Var Var)]))
  (define-type Global
    (global/top-level [v : TopLevelName])
    (global/external [v : Bytes])))

(define (module-to-top-level-objects [mod : Module]) : (List TopLevelObject)
  (match-define (module _ _ constants functions) mod)

  (append
    (map
      (lambda ([def : ConstantDefinition])
        (case def
          [(closure-constant closure-name func-name)
           (trivial-closure-tlo
             (mangle-top-level-name closure-name)
             (mangle-top-level-name func-name))]
          [(bytes-constant name value)
           (bytes-tlo (mangle-top-level-name name) value)]
          [(mutable-data-constant name alignment size)
           (mutable-buffer-tlo (mangle-top-level-name name) alignment size)]))
      constants)
    (map
      (lambda ([def : FunctionDefinition])
        (case def
          [(function-definition func-name _ _)
           (register-function-tlo
             (mangle-top-level-name func-name)
             (convert-function def))]))
      functions)))

(define (module->module-signature [mod : Module]) : ModuleSignature
  (match-define (module mod-name exports _ _) mod)

  (match-define values : (Dict Bytes ValueSignature)
    (dict-value-map
      exports
      (lambda ([e : Export])
        (match-define (export name ty) e)
        (value-signature ty name))))

  (module-signature
    mod-name
    values
    (make-dict bytes-cmp) ;; Patterns
    (make-dict bytes-cmp) ;; Types
    (make-dict bytes-cmp) ;; Static Bindings
    (make-dict top-level-name-cmp) ;; Static Info
    ))


(define (convert-function [f : FunctionDefinition])
  : r:FunctionDefinition
  (case f
    [(function-definition _ args statements)
     (match-define acc (block-accumulator (initial-var-number) (initial-block-number)
                                          (make-indexed-set basic-block-number block-number-cmp)))
     (match-define (tuple2 freshened-args acc)
       (map/state fresh-name2* (map parameter-name args) acc))
     (match-define env
       (add-all-args freshened-args (environment (make-dict var-cmp))))

     (match-define (tuple2 start-block-num acc) (fresh-block-number* acc))
     (match-define acc (start-block start-block-num (map new-arg2 freshened-args) acc))

     (match-define (tuple2 acc _env)
       (convert-statements statements acc env))
     (match-define (block-accumulator next-var next-block blocks) (add-terminal acc (halt)))

     (r:function-definition
       (plain-function-convention (length args) start-block-num)
       blocks next-var next-block)]))


(define (convert-statements
          [statements : (List Statement)]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 Accumulator Environment)
  (case statements
    [(empty) (tuple2 acc env)]
    [(cons statement statements)
     (case (convert-statement statement acc env)
       [(tuple2 acc env)
        (convert-statements statements acc env)])]))

(define (convert-statement
          [statement : Statement]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 Accumulator Environment)
  (case statement
    [(return-statement expr)
     (match-define (tuple2 temp acc)
       (convert-expr #"ret" expr acc env))
     (match-define (tuple2 block-num acc) (fresh-block-number acc))
     (tuple2
       (start-block block-num (empty) (add-terminal acc (r:return temp)))
       env)]
    [(define-local-variable-statement var _type expr)
     (match-define (tuple2 val acc)
       (convert-expr (var->bytes var) expr acc env))
     (tuple2 acc (env-add env var val))]
    [(effect-statement expr)
     (match-define (tuple2 _ acc) (convert-expr #"void" expr acc env))
     (tuple2 acc env)]
    [(assignment-statement var expr)
     (match-define (tuple2 val acc)
       (convert-expr (var->bytes var) expr acc env))
     (tuple2 acc (env-replace env var val))]
    [(pointer-assignment-statement pointer type expr)
     (match-define (tuple2 p acc)
       (convert-expr #"ptr" pointer acc env))
     (match-define (tuple2 e acc)
       (convert-expr #"val" expr acc env))
     (tuple2
       (add-instruction acc (pointer-set!-inst (type->mem-op-size type) p (fixed-pointer-offset 0) e))
       env)]
    [(if-statement cond t-statements f-statements)

     (match-define (tuple2 branch-var acc)
       (convert-expr #"cond" cond acc env))
     (match-define (tuple2 t-block-num acc) (fresh-block-number acc))
     (match-define (tuple2 f-block-num acc) (fresh-block-number acc))
     (match-define acc
       (add-terminal acc (cond-jump (negated-var-condition branch-var)
                                    (jump-target f-block-num (empty))
                                    (jump-target t-block-num (empty)))))

     ;; Get the two pending basic blocks without their final terminators
     (match-define (tuple2 acc t-env)
       (convert-statements t-statements (start-block t-block-num (empty) acc) env))
     (match-define (tuple2 t-block acc) (split-accumulator acc))
     (match-define (tuple2 acc f-env)
       (convert-statements f-statements (start-block f-block-num (empty) acc) env))
     (match-define (tuple2 f-block acc) (split-accumulator acc))

     ;; Figure out the differing variables so that they can be joined.
     (match-define mut-vars (get-differing-vars env t-env f-env))
     (match-define t-mut-vars (env-ref* t-env mut-vars))
     (match-define f-mut-vars (env-ref* f-env mut-vars))

     (match-define (tuple2 c-block-num acc) (fresh-block-number* acc))

     (match-define acc
       (add-terminal* acc t-block (jump (jump-target c-block-num t-mut-vars))))
     (match-define acc
       (add-terminal* acc f-block (jump (jump-target c-block-num f-mut-vars))))

     (match-define (tuple2 fresh-mut-args acc)
       (map/state fresh-name2* mut-vars acc))

     (tuple2
       (start-block c-block-num (map new-arg2 fresh-mut-args) acc)
       (replace-all-args fresh-mut-args env))]
    [(while-statement cond body)

     (match-define (tuple2 header-block-num acc) (fresh-block-number acc))
     (match-define mut-vars (set->list (mutated-vars/statements body)))
     (match-define acc
       (add-terminal acc (jump (jump-target header-block-num (env-ref* env mut-vars)))))

     (match-define (tuple2 fresh-mut-args acc)
       (map/state fresh-name2* mut-vars acc))

     (match-define acc (start-block header-block-num (map new-arg2 fresh-mut-args) acc))
     (match-define header-env (replace-all-args fresh-mut-args env))

     (match-define (tuple2 branch-var acc)
       (convert-expr #"cond" cond acc header-env))
     (match-define (tuple2 header-block acc) (split-accumulator acc))

     (match-define (tuple2 body-block-num acc) (fresh-block-number* acc))
     (match-define (tuple2 acc body-env)
       (convert-statements
         body
         (start-block body-block-num (empty) acc)
         header-env))
     (match-define (tuple2 body-block acc) (split-accumulator acc))

     (match-define (tuple2 after-block-num acc) (fresh-block-number* acc))

     (match-define acc
       (add-terminal*
         (add-terminal* acc header-block (cond-jump (negated-var-condition branch-var)
                                                    (jump-target after-block-num (empty))
                                                    (jump-target body-block-num (empty))))
         body-block (jump (jump-target header-block-num (env-ref* body-env mut-vars)))))

     (tuple2
       (start-block after-block-num (empty) acc)
       header-env)]))


(define (convert-exprs
          [base-name : Bytes]
          [exprs : (List Expression)]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 (List Var) Accumulator)
  (case exprs
    [(empty) (tuple2 (empty) acc)]
    [(cons expr exprs)
     (case (convert-expr base-name expr acc env)
       [(tuple2 var acc)
        (case (convert-exprs base-name exprs acc env)
          [(tuple2 vars acc)
           (tuple2 (cons var vars) acc)])])]))

(define (convert-expr
          [base-name : Bytes]
          [expr : Expression]
          [acc : Accumulator]
          [env : Environment])
  : (Tuple2 Var Accumulator)
  (case expr
    [(local-var-expr name)
     (tuple2 (env-ref env name) acc)]
    [(global-var-expr top-level-name)
      (match-define sym (mangle-top-level-name top-level-name))
      (match-define (top-level-name _mod-name local) top-level-name)
      (match-define (tuple2 (tuple2 _ var) acc) (fresh-name local acc))
      (tuple2 var (add-instruction acc (symbol-address-inst var sym)))]
    [(external-var-expr sym)
     (match-define (tuple2 (tuple2 _ var) acc) (fresh-name base-name acc))
     (tuple2 var (add-instruction acc (symbol-address-inst var sym)))]
    [(int-expr v)
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))
     (tuple2
       name
       (add-instruction acc (int-literal name v)))]
    [(bin-op-expr op l r)
     (match-define (tuple2 left-res acc) (convert-expr #"tmp" l acc env))
     (match-define (tuple2 right-res acc) (convert-expr #"tmp" r acc env))
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))
     (tuple2
       name
       (add-instruction acc (bin-op-inst name op left-res right-res)))]
    [(unary-op-expr op e)
     (match-define (tuple2 res acc) (convert-expr #"tmp" e acc env))
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))
     (match-define reg-op
       (case op
         [(not-op) (boolean-not)]))

     (tuple2
       name
       (add-instruction acc (unary-op-inst name reg-op res)))]
    [(cast-expr _t e)
     (convert-expr base-name e acc env)]
    [(deref-expr e type)
     (match-define (tuple2 p acc) (convert-expr #"ptr" e acc env))
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))
     (tuple2 name (add-instruction acc (pointer-ref-inst name (type->mem-op-size type) p
                                                         (fixed-pointer-offset 0))))]
    [(array-index-expr ptr type offset)
     (match-define (tuple2 ptr acc) (convert-expr #"ptr" ptr acc env))
     (match-define (tuple2 offset acc) (convert-expr #"off" offset acc env))
     (match-define (tuple2 (tuple2 _ size-name) acc) (fresh-name #"size" acc))
     (match-define (tuple2 (tuple2 _ offset-mul-name) acc) (fresh-name #"offset-mul" acc))
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))

     (tuple2 name
             (add-instruction
               (add-instruction
                 (add-instruction
                   acc
                   (int-literal size-name (sized-type->bytes-size type)))
                 (bin-op-inst offset-mul-name (numeric-bin-op (mult-op)) offset size-name))
               (bin-op-inst name (numeric-bin-op (add-op)) ptr offset-mul-name)))]
    [(struct-field-expr ptr (struct-field offset _type))
     (match-define (tuple2 ptr acc) (convert-expr #"ptr" ptr acc env))
     (match-define (tuple2 (tuple2 _ size-name) acc) (fresh-name #"size" acc))
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))

     (tuple2 name
             (add-instruction
               (add-instruction
                 acc
                 (int-literal size-name offset))
               (bin-op-inst name (numeric-bin-op (add-op)) ptr size-name)))]
    [(call-expr f args)
     (match-define (tuple2 fun acc) (convert-expr #"fun" f acc env))
     (match-define (tuple2 vars acc) (convert-exprs #"arg" args acc env))
     (match-define (tuple2 (tuple2 _ name) acc) (fresh-name base-name acc))
     (match-define (tuple2 block-num acc) (fresh-block-number acc))
     (match-define acc (add-terminal acc (block-call (closure-call fun) vars block-num)))
     (match-define acc (start-block block-num (varargs list name) acc))
     (tuple2 name acc)]
    ))


(define (mutated-vars/statements [ss : (List Statement)]) : (Set Var)
  (case ss
    [(empty) (make-set var-cmp)]
    [(cons (return-statement _) ss)
     (mutated-vars/statements ss)]
    [(cons (effect-statement _) ss)
     (mutated-vars/statements ss)]
    [(cons (define-local-variable-statement v _ _) ss)
     (set-remove (mutated-vars/statements ss) v)]
    [(cons (pointer-assignment-statement _ _ _) ss)
     (mutated-vars/statements ss)]
    [(cons (assignment-statement v _) ss)
     (set-add (mutated-vars/statements ss) v)]
    [(cons (while-statement _ body) ss)
     (set-union (mutated-vars/statements body)
                (mutated-vars/statements ss))]
    [(cons (if-statement _ then else) ss)
     (set-union (set-union (mutated-vars/statements then)
                           (mutated-vars/statements else))
                (mutated-vars/statements ss))]))

(define (type->mem-op-size [type : Type]) : MemoryOperationSize
  (case (type->type-size type)
    [(nothing) (panic #"Pointer type must be of sized type")]
    [(just (type-size8)) (one-byte-mem-op)]
    [(just (type-size16)) (two-byte-mem-op)]
    [(just (type-size32)) (four-byte-mem-op)]
    [(just (type-size64)) (eight-byte-mem-op)]))

(define (add-all-args [args : (List (Tuple2 Var Var))] [env : Environment]) : Environment
  (case env
    [(environment vars)
     (environment (dict-add-all vars args))]))

(define (replace-all-args [args : (List (Tuple2 Var Var))] [env : Environment]) : Environment
  (case env
    [(environment vars)
     (environment (dict-replace-all vars args))]))

(define (get-differing-vars [base-env : Environment] [env1 : Environment] [env2 : Environment])
  : (List Var)
  (match-define vars (environment-vars base-env))
  (filter
    (lambda ([name : Var]) : Boolean
      (not (var=? (env-ref env1 name) (env-ref env2 name))))
    (set->list (dict-keys vars))))

(define (env-ref [env : Environment] [name : Var]) : Var
  (case (dict-ref (environment-vars env) name)
    [(nothing) (panic (bytes-append (varargs list #"env-ref: " (var->bytes name))))]
    [(just v) v]))

(define (env-ref* [env : Environment] [names : (List Var)]) : (List Var)
  (map (lambda ([name : Var]) (env-ref env name)) names))


(define (env-add [env : Environment] [name : Var] [var : Var]) : Environment
  (case env
    [(environment vars)
     (environment (dict-add vars name var))]))

(define (env-replace [env : Environment] [name : Var] [var : Var]) : Environment
  (case env
    [(environment vars)
     (environment (dict-replace vars name var))]))
