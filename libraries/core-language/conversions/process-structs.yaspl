#:module (core-language conversions process-structs)
#:import {
  (bytes)
  (core-language languages processed-structs-language)
  {(core-language languages resolved-types-language)
    {#:types
      [Module rt:Module]
      [StructDefinition rt:StructDefinition]
      [StructField rt:StructField]
    }
    {#:patterns
      [module rt:module]
      [struct-definition rt:struct-definition]
      [struct-field rt:struct-field]
    }
  }
  (core-language struct-info)
  (dict)
  (either)
  (list)
  (prim)
  (tuples)
  (types)
}
(export
  (#:types)
  (#:values process-structs)
  (#:patterns))
(types)

(define (process-structs [mod : rt:Module]) : (Either Bytes Module)
  (match-define (rt:module mod-name imports structs functions) mod)

  (match-define struct-destruction-infos : (Dict Type StructDestructionInfo)
    (dict-add-all
      (make-dict type-cmp)
      (map definition->destruction-info structs)))


  (right (module mod-name imports struct-destruction-infos functions)))

(define (definition->destruction-info [def : rt:StructDefinition])
  : (Tuple2 Type StructDestructionInfo)
  (match-define (rt:struct-definition type field-list) def)
  (match-define field-dict : (Dict Bytes StructField)
    (dict-add-all
      (make-dict bytes-cmp)
      (map
        (lambda ([f : rt:StructField])
          (match-define (rt:struct-field name type) f)
          ;; TODO fix offset
          (tuple2 name (struct-field 0 type)))
        field-list)))
  (tuple2 type (struct-destruction-info field-dict)))
