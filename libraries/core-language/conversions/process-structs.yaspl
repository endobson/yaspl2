#:module (core-language conversions process-structs)
#:import {
  (bytes)
  (core-language languages processed-structs-language)
  {(core-language languages resolved-types-language)
    {#:types
      [Module rt:Module]
      [SpaceType rt:SpaceType]
      [StructDefinition rt:StructDefinition]
      [StructField rt:StructField]
    }
    {#:patterns
      [fixed-array-space-type rt:fixed-array-space-type]
      [module rt:module]
      [raw-space-type rt:raw-space-type]
      [struct-definition rt:struct-definition]
      [struct-field rt:struct-field]
    }
  }
  (core-language sized-types)
  (core-language struct-info)
  (data lifted-primitives)
  (dict)
  (either)
  (list)
  (maybe)
  (prim)
  (prim-types)
  (tuples)
  (types)
}
(export
  (#:types)
  (#:values process-structs)
  (#:patterns))
(types)

(define (process-structs [mod : rt:Module]) : (Either Bytes Module)
  (match-define (rt:module mod-name imports structs functions) mod)

  (case (definitions->struct-infos structs (make-dict type-cmp))
    [(left v) (left v)]
    [(right structs)
     (right (module mod-name imports structs functions))]))

(define (definitions->struct-infos
          [defs : (List rt:StructDefinition)]
          [acc : (Dict Type StructInfo)])
  : (Either Bytes (Dict Type StructInfo))
  (case defs
    [(empty) (right acc)]
    [(cons def defs)
     (case (definition->struct-info def acc)
       [(left v) (left v)]
       [(right (tuple2 ty info))
        (definitions->struct-infos defs (dict-add acc ty info))])]))


(define (definition->struct-info
          [def : rt:StructDefinition]
          [known-structs : (Dict Type StructInfo)])
  : (Either Bytes (Tuple2 Type StructInfo))
  (match-define (rt:struct-definition type field-list) def)
  (case (process-fields field-list 0 known-structs (make-dict bytes-cmp))
    [(left v) (left v)]
    [(right (tuple2 (lifted-int size) field-dict))
     (right (tuple2 type (struct-info (struct-destruction-info field-dict) size)))]))

(define (process-fields [fields : (List rt:StructField)]
                        [offset : Int]
                        [known-structs : (Dict Type StructInfo)]
                        [acc : (Dict Bytes StructField)])
  : (Either Bytes (Tuple2 LiftedInt (Dict Bytes StructField)))
  (case fields
    [(empty) (right (tuple2 (lifted-int offset) acc))]
    [(cons (rt:struct-field name space-type) fields)
     (match-define type (space-type->type space-type))
     (case (dict-maybe-add acc name (struct-field offset type))
       [(nothing) (left #"Duplicate field")]
       [(just acc)
        (case (space-type->size space-type known-structs)
          [(nothing) (left #"Struct field must be of sized type")]
          [(just (lifted-int size))
           (process-fields fields (+ offset size) known-structs acc)])])]))

(define (space-type->type [t : rt:SpaceType]) : Type
  (case t
    [(rt:raw-space-type t) t]
    [(rt:fixed-array-space-type t _) (array-type t)]))

(define (space-type->size [t : rt:SpaceType] [known-structs : (Dict Type StructInfo)])
  : (Maybe LiftedInt)
  (case t
    [(rt:raw-space-type t) (type->size t known-structs)]
    [(rt:fixed-array-space-type t len)
     (case (type->size t known-structs)
       [(nothing) (nothing)]
       [(just (lifted-int s)) (just (lifted-int (* s len)))])]))

(define (type->size [ty : Type] [known-structs : (Dict Type StructInfo)]) : (Maybe LiftedInt)
  (case (kind->bytes-size (type->kind ty))
    [(just s) (just s)]
    [(nothing)
     (case (dict-ref known-structs ty)
       [(nothing) (nothing)]
       [(just (struct-info _ size))
        (just (lifted-int size))])]))
