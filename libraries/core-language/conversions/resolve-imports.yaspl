#:module (core-language conversions resolve-imports)
#:import {
  (bytes)
  (core-language languages resolved-imports-language)
  {(core-language source-language)
    {#:types
      [Definition s:Definition]
      [Module s:Module]
    }
    {#:patterns
      [external-definition s:external-definition]
      [function-definition s:function-definition]
      [global-definition s:global-definition]
      [module s:module]
      [struct-definition s:struct-definition]
    }
  }
  (dict)
  (either)
  (list)
  (maybe)
  (module-signature)
  (prim)
  (tuples)
}
(export
  (#:types)
  (#:values resolve-imports)
  (#:patterns))
(types)



(define (resolve-imports [mod : s:Module] [sigs : (List ModuleSignature)]) : (Either Bytes Module)
  ;; TODO actually use signatures
  (match-define (s:module mod-name definitions) mod)

  (match-define imports : (Dict Bytes Import)
    (dict-add-all
      (make-dict bytes-cmp)
      (filter-map
        (lambda ([def : s:Definition]) : (Maybe (Tuple2 Bytes Import))
          (case def
            [(s:external-definition name ty)
             (just (tuple2 name (import-external name ty)))]
            [(s:global-definition _ _ _) (nothing)]
            [(s:struct-definition _ _) (nothing)]
            [(s:function-definition _ _ _ _) (nothing)]))
        definitions)))

  (match-define functions : (List FunctionDefinition)
    (filter-map
      (lambda ([def : s:Definition]): (Maybe FunctionDefinition)
        (case def
          [(s:external-definition _ _) (nothing)]
          [(s:struct-definition _ _) (nothing)]
          [(s:global-definition _ _ _) (nothing)]
          [(s:function-definition name params return-type body)
           (just (function-definition name params return-type body))]))
      definitions))

  (match-define structs : (List StructDefinition)
    (filter-map
      (lambda ([def : s:Definition]): (Maybe StructDefinition)
        (case def
          [(s:external-definition _ _) (nothing)]
          [(s:struct-definition name fields) (just (struct-definition name fields))]
          [(s:global-definition _ _ _) (nothing)]
          [(s:function-definition _ _ _ _) (nothing)]))
      definitions))

  (match-define globals : (List GlobalDefinition)
    (filter-map
      (lambda ([def : s:Definition]): (Maybe GlobalDefinition)
        (case def
          [(s:external-definition _ _) (nothing)]
          [(s:struct-definition _ _) (nothing)]
          [(s:global-definition name type alignment)
           (just (global-definition name type alignment))]
          [(s:function-definition _ _ _ _) (nothing)]))
      definitions))

  (right (module mod-name imports structs globals functions)))
