#:module (core-language conversions resolve-imports)
#:import {
  (bytes)
  (core-language languages resolved-imports-language)
  {(core-language languages source-language)
    {#:types
      [Definition s:Definition]
      [Module s:Module]
    }
    {#:patterns
      [export-type-definition s:export-type-definition]
      [export-value-definition s:export-value-definition]
      [external-definition s:external-definition]
      [function-definition s:function-definition]
      [global-definition s:global-definition]
      [import-module s:import-module]
      [module s:module]
      [struct-definition s:struct-definition]
    }
  }
  (data indexed-set)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (tuples)
}
(export
  (#:types)
  (#:values resolve-imports)
  (#:patterns))
(types)


(define (resolve-imports [mod : s:Module] [sigs : (List ModuleSignature)]) : (Either Bytes Module)
  (match-define (s:module mod-name definitions) mod)

  (case (indexed-set-maybe-add-all
          (make-indexed-set module-signature-name mod-name-cmp)
          sigs)
    [(left sig)
     (left
       (bytes-append (varargs list #"Duplicate signature for module: "
                              (mod-name->bytes (module-signature-name sig)))))]
    [(right sigs)
     (case (resolve-imports/imports definitions sigs)
       [(left v)
        (left v)]
       [(right (tuple2 value-imports type-imports))
        (match-define exports (split-imports/exports definitions))
        (match-define functions (split-imports/functions definitions))
        (match-define structs (split-imports/structs definitions))
        (match-define globals (split-imports/globals definitions))

        (right (module mod-name value-imports type-imports exports structs globals functions))])]))

(define (resolve-imports/imports
          [definitions : (List s:Definition)]
          [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either Bytes (Tuple2 (Dict Bytes Import) (Dict Bytes TypeSignature)))
  (case (map/failure/env resolve-imports/definition definitions sigs)
    [(left v) (left v)]
    [(right tuples)
     (match-define (tuple2 values types) (unzip tuples))
     (right
       (tuple2
         (merge-dicts* (make-dict bytes-cmp) values)
         (merge-dicts* (make-dict bytes-cmp) types)))]))

(define (resolve-imports/definition
          [definition : s:Definition]
          [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either Bytes (Tuple2 (Dict Bytes Import) (Dict Bytes TypeSignature)))
  (case definition
    [(s:external-definition name ty)
     (right (tuple2
               (dict-add (make-dict bytes-cmp) name (import-external name ty))
               (make-dict bytes-cmp)))]
    [(s:import-module mod-name)
     (case (indexed-set-ref sigs mod-name)
       [(nothing)
        (left (bytes-append (varargs list #"Unknown module name in import: "
                                          (mod-name->bytes mod-name))))]
       [(just (module-signature _ values _ types _ _))
        (right
          (tuple2
            (dict-value-map values import-value)
            types))])]
    [(s:global-definition _ _ _)
     (right (tuple2 (make-dict bytes-cmp) (make-dict bytes-cmp)))]
    [(s:struct-definition _ _)
     (right (tuple2 (make-dict bytes-cmp) (make-dict bytes-cmp)))]
    [(s:export-value-definition _)
     (right (tuple2 (make-dict bytes-cmp) (make-dict bytes-cmp)))]
    [(s:export-type-definition _)
     (right (tuple2 (make-dict bytes-cmp) (make-dict bytes-cmp)))]
    [(s:function-definition _ _ _ _)
     (right (tuple2 (make-dict bytes-cmp) (make-dict bytes-cmp)))]))



(define (split-imports/exports [definitions : (List s:Definition)]) : (List Export)
  (filter-map
    (lambda ([def : s:Definition]): (Maybe Export)
      (case def
        [(s:external-definition _ _) (nothing)]
        [(s:import-module _) (nothing)]
        [(s:struct-definition _ _) (nothing)]
        [(s:global-definition _ _ _) (nothing)]
        [(s:export-value-definition v) (just (export-value v))]
        [(s:export-type-definition v) (just (export-type v))]
        [(s:function-definition _ _ _ _) (nothing)]))
    definitions))

(define (split-imports/functions [definitions : (List s:Definition)]) : (List FunctionDefinition)
  (filter-map
    (lambda ([def : s:Definition]): (Maybe FunctionDefinition)
      (case def
        [(s:external-definition _ _) (nothing)]
        [(s:import-module _) (nothing)]
        [(s:struct-definition _ _) (nothing)]
        [(s:global-definition _ _ _) (nothing)]
        [(s:export-value-definition _) (nothing)]
        [(s:export-type-definition _) (nothing)]
        [(s:function-definition name params return-type body)
         (just (function-definition name params return-type body))]))
    definitions))

(define (split-imports/structs [definitions : (List s:Definition)]) : (List StructDefinition)
  (filter-map
    (lambda ([def : s:Definition]): (Maybe StructDefinition)
      (case def
        [(s:external-definition _ _) (nothing)]
        [(s:import-module _) (nothing)]
        [(s:struct-definition name fields) (just (struct-definition name fields))]
        [(s:global-definition _ _ _) (nothing)]
        [(s:export-value-definition _) (nothing)]
        [(s:export-type-definition _) (nothing)]
        [(s:function-definition _ _ _ _) (nothing)]))
    definitions))

(define (split-imports/globals [definitions : (List s:Definition)]) : (List GlobalDefinition)
  (filter-map
    (lambda ([def : s:Definition]): (Maybe GlobalDefinition)
      (case def
        [(s:external-definition _ _) (nothing)]
        [(s:import-module _) (nothing)]
        [(s:struct-definition _ _) (nothing)]
        [(s:global-definition name type alignment)
         (just (global-definition name type alignment))]
        [(s:export-value-definition _) (nothing)]
        [(s:export-type-definition _) (nothing)]
        [(s:function-definition _ _ _ _) (nothing)]))
    definitions))
