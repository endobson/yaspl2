#:module (core-language conversions type-check)
#:import {
  (bytes)
  {(core-language languages processed-structs-language)
    {#:types
      [Export ps:Export]
      [Expression ps:Expression]
      [FunctionDefinition ps:FunctionDefinition]
      [GlobalInfo ps:GlobalInfo]
      [Module ps:Module]
      [Statement ps:Statement]
    }
    {#:values
      [function-definition-name ps:function-definition-name]
    }
    {#:patterns
      [array-index-expr ps:array-index-expr]
      [assignment-statement ps:assignment-statement]
      [bin-op-expr ps:bin-op-expr]
      [bytes-expr ps:bytes-expr]
      [call-expr ps:call-expr]
      [cast-expr ps:cast-expr]
      [define-local-variable-statement ps:define-local-variable-statement]
      [deref-expr ps:deref-expr]
      [effect-statement ps:effect-statement]
      [export-type ps:export-type]
      [export-value ps:export-value]
      [function-definition ps:function-definition]
      [global-info ps:global-info]
      [if-statement ps:if-statement]
      [int-expr ps:int-expr]
      [module ps:module]
      [pointer-assignment-statement ps:pointer-assignment-statement]
      [return-statement ps:return-statement]
      [struct-field-expr ps:struct-field-expr]
      [unary-op-expr ps:unary-op-expr]
      [var-expr ps:var-expr]
      [while-statement ps:while-statement]
    }
  }
  (core-language languages type-checked-language)
  (core-language sized-types)
  (core-language struct-info)
  (data lifted-primitives)
  (dict)
  (either)
  (list)
  (maybe)
  (module-signature)
  (prim)
  (prim-types)
  (set)
  (sexp-printer)
  (tuples)
  (types)
  (yaspl math-operations)
}
(export
  (#:types)
  (#:values type-check)
  (#:patterns))
(types
  (define-type GlobalEnvironment
    (global-environment
      [var-types : (Dict Bytes Type)]
      [struct-infos : (Dict Type StructInfo)]))
  (define-type Environment
    (environment
      [return-type : Type]
      [var-types : (Dict Bytes Type)]
      [struct-infos : (Dict Type StructInfo)])))

(define (type-check [mod : ps:Module]) : (Either Bytes Module)
  (match-define (ps:module name imports exports structs globals functions) mod)
  ;; TODO actually add the globals to the type environment

  (match-define function-names
    (set-add-all (make-set bytes-cmp) (map ps:function-definition-name functions)))


  (if (not (= (set-count function-names) (length functions)))
      (left #"Duplicate function name")
      (let ([local-function-types
             (ann (Dict Bytes Type)
               (dict-add-all
                 (make-dict bytes-cmp)
                 (map
                   (lambda ([f : ps:FunctionDefinition])
                     (match-define (ps:function-definition name parameters return-type _) f)
                     (tuple2
                       name
                       (fun-type
                         (empty)
                         (map parameter-type parameters)
                         return-type)))
                   functions)))])
        (match-define local-global-types : (Dict Bytes Type)
          (dict-value-map
            globals
            (lambda ([g : ps:GlobalInfo])
              (match-define (ps:global-info type _ _) g)
              (pointer-type type))))

        (match-define imported-function-types
          (dict-value-map
            imports
            (lambda ([i : Import])
              (case i
                [(import-external _ ty) ty]
                [(import-value _ ty) ty]))))
        (match-define env
          (global-environment
            (merge-dicts
              imported-function-types
              (merge-dicts
                local-function-types
                local-global-types))
            structs))
        (match-define exports
          (map (lambda ([e : ps:Export]) (convert-export e env)) exports))

        (case (map/failure/env type-check/function functions env)
          [(left v) (left v)]
          [(right functions)
           (right (module name imports exports globals functions))]))))


(define (convert-export [e : ps:Export] [env : GlobalEnvironment]) : Export
  (match-define (global-environment _ struct-infos) env)
  (case e
    [(ps:export-value name) (export-value name)]
    [(ps:export-type name type)
     (export-type name (type-signature type (dict-ref struct-infos type)))]))

(define (type-check/function [f : ps:FunctionDefinition] [env : GlobalEnvironment])
  : (Either Bytes FunctionDefinition)
  (match-define (ps:function-definition name parameters return-type body) f)
  (match-define (global-environment global-var-types struct-infos) env)

  (match-define initial-var-types : (Dict Bytes Type)
    (dict-add-all
      global-var-types
      (map
        (lambda ([p : Parameter])
          (match-define (parameter name type) p)
          (tuple2 name type))
        parameters)))

  (match-define env (environment return-type initial-var-types struct-infos))

  (case (type-check/statements body env)
    [(left v) (left v)]
    [(right body)
     (right (function-definition name parameters return-type body))]))


(define (type-check/statements [ss : (List ps:Statement)] [env : Environment])
  : (Either Bytes (List Statement))
  (case ss
    [(empty) (right (empty))]
    [(cons s ss)
     (case (type-check/statement s env)
       [(left v) (left v)]
       [(right (tuple2 s env))
        (case (type-check/statements ss env)
          [(left v) (left v)]
          [(right ss)
           (right (cons s ss))])])]))

(define (type-check/statement [s : ps:Statement] [env : Environment])
  : (Either Bytes (Tuple2 Statement Environment))
  (case s
    [(ps:return-statement e)
     (case (type-check/expression e (environment-return-type env) env)
       [(left v) (left v)]
       [(right e)
        (right (tuple2 (return-statement e) env))])]
    [(ps:define-local-variable-statement v type e)
     (case (type-check/expression e type env)
       [(left v) (left v)]
       [(right e)
        (match-define env (environment-add-local env v type))
        (right (tuple2 (define-local-variable-statement v type e) env))])]
    [(ps:assignment-statement v e)
     (case (dict-ref (environment-var-types env) v)
       [(nothing)
        (left #"Cannot assign to unbound variable.")]
       [(just ty)
        (case (type-check/expression e ty env)
          [(left v) (left v)]
          [(right e)
           (right (tuple2 (assignment-statement v e) env))])])]
    [(ps:effect-statement e)
     (case (type-infer/expression e env)
       [(left v) (left v)]
       [(right (tuple2 e _))
        (right (tuple2 (effect-statement e) env))])]
    [(ps:pointer-assignment-statement p e)
     (case (type-infer/expression p env)
       [(left v) (left v)]
       [(right (tuple2 p p-ty))
        (case (pointer-type->element-type p-ty)
          [(nothing)
           (left (bytes-append
                   (varargs list
                     #"Expected Pointer Type, got: "
                     (print-sexp (type->sexp p-ty)))))]
          [(just e-ty)
           (case (type-check/expression e e-ty env)
             [(left v) (left v)]
             [(right e)
              (right (tuple2 (pointer-assignment-statement p e-ty e) env))])])])]
    [(ps:while-statement e body)
     (case (type-check/expression e (boolean-type) env)
       [(left v) (left v)]
       [(right e)
        (case (type-check/statements body env)
          [(left v) (left v)]
          [(right body)
           (right (tuple2 (while-statement e body) env))])])]
    [(ps:if-statement c t f)
     (case (type-check/expression c (boolean-type) env)
       [(left v) (left v)]
       [(right c)
        (case (type-check/statements t env)
          [(left v) (left v)]
          [(right t)
           (case (type-check/statements f env)
             [(left v) (left v)]
             [(right f)
              (right (tuple2 (if-statement c t f) env))])])])]))

(define (type-check/expression [e : ps:Expression] [expected-type : Type] [env : Environment])
  : (Either Bytes Expression)
  (case (type-infer/expression e env)
    [(left v) (left v)]
    [(right (tuple2 e actual-type))
     (if (type=? actual-type expected-type)
         (right e)
         (left
           (bytes-append
             (varargs list
               #"Types don't match:\nGot: "
               (print-sexp (type->sexp actual-type))
               #"\nExpected: "
               (print-sexp (type->sexp expected-type))))))]))

(define (type-infer/expression [e : ps:Expression] [env : Environment])
  : (Either Bytes (Tuple2 Expression Type))
  (case e
    [(ps:int-expr i)
     (right (tuple2 (int-expr i) (u64-type)))]
    [(ps:bytes-expr b)
     (right (tuple2 (bytes-expr b) (bytes-type)))]
    [(ps:cast-expr t e)
     (case (type-infer/expression e env)
       [(left v) (left v)]
       [(right (tuple2 e _))
        (right (tuple2 e t))])]
    [(ps:array-index-expr a i)
     (case (type-infer/expression a env)
       [(left v) (left v)]
       [(right (tuple2 a pa-ty))
        (case (pointer-type->element-type pa-ty)
          [(nothing)
           (left (bytes-append
                   (varargs list
                     #"Expected Pointer Type, got: "
                     (print-sexp (type->sexp pa-ty)))))]
          [(just a-ty)
           (case (array-type->element-type a-ty)
             [(nothing)
              (left (bytes-append
                      (varargs list
                        #"Expected Array Type, got: "
                        (print-sexp (type->sexp a-ty)))))]
             [(just elem-ty)
              (case (type-check/expression i (u64-type) env)
                [(left v) (left v)]
                [(right i)
                 (case (type->sized-type elem-ty env)
                   [(left v) (left v)]
                   [(right sized-ty)
                    (right (tuple2 (array-index-expr a sized-ty i) (pointer-type elem-ty)))])])])])])]
    [(ps:struct-field-expr e f)
     (case (type-infer/expression e env)
       [(left v) (left v)]
       [(right (tuple2 p p-ty))
        (case (pointer-type->element-type p-ty)
          [(nothing)
           (left (bytes-append
                   (varargs list
                     #"Expected Pointer Type, got: "
                     (print-sexp (type->sexp p-ty)))))]
          [(just s-ty)
           (case (dict-ref (environment-struct-infos env) s-ty)
             [(nothing)
              (left (bytes-append
                      (varargs list
                        #"Expected Struct Type, got: "
                        (print-sexp (type->sexp s-ty)))))]
             [(just (struct-info (struct-destruction-info fields) _))
              (case (dict-ref fields f)
                [(nothing)
                 (left #"No matching struct field")]
                [(just field)
                 (match-define (struct-field _ f-ty) field)
                 (right (tuple2 (struct-field-expr p field) (pointer-type f-ty)))])])])])]
    [(ps:var-expr v)
     (case (dict-ref (environment-var-types env) v)
       [(nothing)
        (left (bytes-append (varargs list #"Unbound variable: " v)))]
       [(just ty)
        (right (tuple2 (var-expr v) ty))])]
    [(ps:unary-op-expr op e)
     (case (type-check/expression e (boolean-type) env)
       [(left v) (left v)]
       [(right e)
        (right (tuple2 (unary-op-expr op e) (boolean-type)))])]
    [(ps:bin-op-expr (numeric-bin-op op) l r)
     (case (type-check/expression l (u64-type) env)
       [(left v) (left v)]
       [(right l)
        (case (type-check/expression r (u64-type) env)
          [(left v) (left v)]
          [(right r)
           (right (tuple2 (bin-op-expr (numeric-bin-op op) l r) (u64-type)))])])]
    [(ps:bin-op-expr (comparison-bin-op op) l r)
     (case (type-check/expression l (u64-type) env)
       [(left v) (left v)]
       [(right l)
        (case (type-check/expression r (u64-type) env)
          [(left v) (left v)]
          [(right r)
           (right (tuple2 (bin-op-expr (comparison-bin-op op) l r) (boolean-type)))])])]
    [(ps:bin-op-expr (logical-bin-op op) l r)
     (case (type-check/expression l (boolean-type) env)
       [(left v) (left v)]
       [(right l)
        (case (type-check/expression r (boolean-type) env)
          [(left v) (left v)]
          [(right r)
           (right (tuple2 (bin-op-expr (logical-bin-op op) l r) (boolean-type)))])])]
    [(ps:deref-expr e)
     (case (type-infer/expression e env)
       [(left v) (left v)]
       [(right (tuple2 e e-ty))
        (case (pointer-type->element-type e-ty)
          [(nothing)
           (left (bytes-append
                   (varargs list
                     #"Expected Pointer Type, got: "
                     (print-sexp (type->sexp e-ty)))))]
          [(just elem-ty)
           (right (tuple2 (deref-expr e elem-ty) elem-ty))])])]
    [(ps:call-expr f args)
     (case (type-infer/expression f env)
       [(left v) (left v)]
       [(right (tuple2 f f-type))
        (case f-type
          [(fun-type (empty) arg-types return-type)
           (case (zip args arg-types)
             [(nothing)
              (left #"Function must be called with right number of arguments.")]
             [(just arg-tuples)
              (case (extract-rights (map (lambda ([arg-ty : (Tuple2 ps:Expression Type)])
                                           (match-define (tuple2 arg ty) arg-ty)
                                           (type-check/expression arg ty env)) arg-tuples))
                [(left v) (left v)]
                [(right args)
                 (right (tuple2 (call-expr f args) return-type))])])]
          [(fun-type _ _ _)
           (left #"Cannot call polymorphic function")]
          [_
           (left #"Cannot call non function")])])]))

(define (environment-add-local [env : Environment] [v : Bytes] [ty : Type])
  : Environment
  (match-define (environment return-type vars struct-infos) env)
  (environment return-type (dict-set vars v ty) struct-infos))

(define (type->sized-type [ty : Type] [env : Environment])
  : (Either Bytes SizedType)
  (case (kind->bytes-size (type->kind ty))
    [(just (lifted-int size)) (right (sized-type ty size))]
    [(nothing)
     (case (dict-ref (environment-struct-infos env) ty)
       [(nothing)
        (left (bytes-append
                (varargs list
                  #"Expected Sized Type, got: "
                  (print-sexp (type->sexp ty)))))]
       [(just (struct-info _ size))
        (right (sized-type ty size))])]))
