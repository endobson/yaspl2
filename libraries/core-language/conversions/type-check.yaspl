#:module (core-language conversions type-check)
#:import {
  (bytes)
  (core-language languages resolved-types-language)
  (either)
  (list)
  (prim)
  (prim-types)
  (set)
  (sexp-printer)
  (tuples)
  (types)
}
(export
  (#:types)
  (#:values type-check)
  (#:patterns))
(types
  (define-type GlobalEnvironment
    (global-environment))
  (define-type Environment
    (environment
      [return-type : Type])))

(define (type-check [mod : Module]) : (Either Bytes Module)
  (match-define (module name imports functions) mod)

  (match-define function-names
    (set-add-all (make-set bytes-cmp) (map function-definition-name functions)))

  (if (not (= (set-count function-names) (length functions)))
      (left #"Duplicate function name")
      (case (map/failure/env type-check/function functions (global-environment))
        [(left v) (left v)]
        [(right functions)
         (right (module name imports functions))])))



(define (type-check/function [f : FunctionDefinition] [genv : GlobalEnvironment])
  : (Either Bytes FunctionDefinition)
  (match-define (function-definition name parameters return-type body) f)

  (match-define env (environment return-type))

  (case (type-check/statements body env)
    [(left v) (left v)]
    [(right body)
     (right (function-definition name parameters return-type body))]))


(define (type-check/statements [ss : (List Statement)] [env : Environment])
  : (Either Bytes (List Statement))
  (case ss
    [(empty) (right (empty))]
    [(cons s ss)
     (case (type-check/statement s env)
       [(left v) (left v)]
       [(right (tuple2 s env))
        (case (type-check/statements ss env)
          [(left v) (left v)]
          [(right ss)
           (right (cons s ss))])])]))

(define (type-check/statement [s : Statement] [env : Environment])
  : (Either Bytes (Tuple2 Statement Environment))
  (case s
    [(return-statement e)
     (case (type-check/expression e (environment-return-type env) env)
       [(left v) (left v)]
       [(right e)
        (right (tuple2 (return-statement e) env))])]
    [_
     ;; TODO handle other statements
     (right (tuple2 s env))]))

(define (type-check/expression [e : Expression] [expected-type : Type] [env : Environment])
  : (Either Bytes Expression)
  (case (type-infer/expression e env)
    [(left v) (left v)]
    [(right (tuple2 e actual-type))
     (if (type=? actual-type expected-type)
         (right e)
         (left
           (bytes-append
             (varargs list
               #"Types don't match:\nGot: "
               (print-sexp (type->sexp actual-type))
               #"\nExpected: "
               (print-sexp (type->sexp expected-type))))))]))

(define (type-infer/expression [e : Expression] [env : Environment])
  : (Either Bytes (Tuple2 Expression Type))
  (case e
    [(int-expr _)
     (right (tuple2 e (u64-type)))]
    [(bytes-expr _)
     (right (tuple2 e (bytes-type)))]
    [_
     ;; TODO handle other expressions
     (right (tuple2 e (u64-type)))]))
