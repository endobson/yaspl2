#:module (core-language conversions resolve-vars)
#:import {
  (bytes)
  (core-language languages resolved-vars-language)
  {(core-language languages type-checked-language)
    {#:types
      [Expression tc:Expression]
      [FunctionDefinition tc:FunctionDefinition]
      [Import tc:Import]
      [Module tc:Module]
      [Parameter tc:Parameter]
      [Statement tc:Statement]
    }
    {#:values
      [parameter-type tc:parameter-type]
    }
    {#:patterns
      [array-index-expr tc:array-index-expr]
      [assignment-statement tc:assignment-statement]
      [bin-op-expr tc:bin-op-expr]
      [bytes-expr tc:bytes-expr]
      [call-expr tc:call-expr]
      [cast-expr tc:cast-expr]
      [define-local-variable-statement tc:define-local-variable-statement]
      [deref-expr tc:deref-expr]
      [effect-statement tc:effect-statement]
      [function-definition tc:function-definition]
      [if-statement tc:if-statement]
      [import-external tc:import-external]
      [int-expr tc:int-expr]
      [module tc:module]
      [parameter tc:parameter]
      [pointer-assignment-statement tc:pointer-assignment-statement]
      [return-statement tc:return-statement]
      [struct-field-expr tc:struct-field-expr]
      [var-expr tc:var-expr]
      [while-statement tc:while-statement]
    }
  }
  (dict)
  (list)
  (maybe)
  (module-name)
  (prim)
  (top-level-name)
  (tuples)
  (types)
  (yaspl var)
}
(export
  (#:types)
  (#:values resolve-vars)
  (#:patterns))
(types
  (define-type NamedFunction
    (named-function
      [func-name : TopLevelName]
      [closure-name : TopLevelName]
      [params : (List tc:Parameter)]
      [return-type : Type]
      [body : (List tc:Statement)]))


  (define-type Environment
    (environment
      [local-variables : (Dict Bytes Var)]
      [global-variables : (Dict Bytes Global)]
      [module-name : ModName]))

  (define-type State
    (state [counter : VarNumber]))
  (define-type Global
    (global/top-level [v : TopLevelName])
    (global/external [v : Bytes])))

(define (resolve-vars [mod : tc:Module]) : Module
  (match-define (tc:module mod-name imports functions) mod)

  (match-define named-functions : (Dict Bytes NamedFunction)
    (dict-add-all
      (make-dict bytes-cmp)
      (map
        (lambda ([f : tc:FunctionDefinition])
          (match-define (tc:function-definition name params return-type statements) f)
          (tuple2
            name
            (named-function
              (top-level-name mod-name name)
              (top-level-name
                mod-name
                (bytes-append (varargs list name #"_closure")))
              params
              return-type
              statements)))
        functions)))

  (match-define imported-globals : (Dict Bytes Global)
    (dict-value-map imports
      (lambda ([i : tc:Import])
        (match-define (tc:import-external ext _) i)
        (global/external ext))))
  (match-define defined-globals : (Dict Bytes Global)
    (dict-value-map
      named-functions
      (lambda ([f : NamedFunction])
        (match-define (named-function _ closure _ _ _) f)
        (global/top-level closure))))
  (match-define globals (merge-dicts imported-globals defined-globals))

  (match-define initial-env
    (environment
      (make-dict bytes-cmp)
      globals
      mod-name))

  (match-define functions
    (dict-map
      named-functions
      (lambda ([_ : Bytes] [f : NamedFunction])
        (resolve-vars/function f initial-env))))

  (match-define exports : (Dict Bytes Export)
    (dict-value-map
      named-functions
      (lambda ([f : NamedFunction])
        (match-define (named-function _ closure params return-type _) f)
        (export closure (fun-type (empty) (map tc:parameter-type params) return-type)))))

  (module mod-name exports functions))

(define (resolve-vars/function [f : NamedFunction] [env : Environment])
  : FunctionDefinition
  (match-define (named-function func-name closure-name params _return-type statements) f)

  (match-define state (state (initial-var-number)))
  (match-define (tuple3 params env state)
    (resolve-vars/parameters params env state))
  (match-define (tuple3 statements _env _state)
    (resolve-vars/statements statements env state))

  (function-definition func-name closure-name params statements))

(define (resolve-vars/parameters
          [params : (List tc:Parameter)]
          [env : Environment]
          [state : State])
  : (Tuple3 (List Parameter) Environment State)
  (map/env/state resolve-vars/parameter params env state))

(define (resolve-vars/parameter
          [param : tc:Parameter]
          [env : Environment]
          [state : State])
  : (Tuple3 Parameter Environment State)
  (match-define (tc:parameter name type) param)
  (match-define (tuple3 var env state) (environment-add-local env name state))
  (tuple3 (parameter var type) env state))

(define (resolve-vars/statements
          [ss : (List tc:Statement)]
          [env : Environment]
          [state : State])
  : (Tuple3 (List Statement) Environment State)
  (map/env/state resolve-vars/statement ss env state))

(define (resolve-vars/statement
          [s : tc:Statement]
          [env : Environment]
          [state : State])
  : (Tuple3 Statement Environment State)
  (case s
    [(tc:define-local-variable-statement v t e)
     (match-define e (resolve-vars/expression e env))
     (match-define (tuple3 v env state) (environment-add-local env v state))
     (tuple3 (define-local-variable-statement v t e) env state)]
    [(tc:return-statement e)
     (match-define e (resolve-vars/expression e env))
     (tuple3 (return-statement e) env state)]
    [(tc:effect-statement e)
     (match-define e (resolve-vars/expression e env))
     (tuple3 (effect-statement e) env state)]
    [(tc:assignment-statement v e)
     (match-define v (environment-ref/local env v))
     (match-define e (resolve-vars/expression e env))
     (tuple3 (assignment-statement v e) env state)]
    [(tc:pointer-assignment-statement p e)
     (match-define p (resolve-vars/expression p env))
     (match-define e (resolve-vars/expression e env))
     (tuple3 (pointer-assignment-statement p e) env state)]
    [(tc:while-statement e body)
     (match-define e (resolve-vars/expression e env))
     (match-define (tuple3 body _ state) (resolve-vars/statements body env state))
     (tuple3 (while-statement e body) env state)]
    [(tc:if-statement c t f)
     (match-define c (resolve-vars/expression c env))
     (match-define (tuple3 t _ state) (resolve-vars/statements t env state))
     (match-define (tuple3 f _ state) (resolve-vars/statements f env state))
     (tuple3 (if-statement c t f) env state)]))


(define (resolve-vars/expressions
          [es : (List tc:Expression)]
          [env : Environment])
  : (List Expression)
  (map (lambda ([e : tc:Expression]) (resolve-vars/expression e env)) es))

(define (resolve-vars/expression
          [e : tc:Expression]
          [env : Environment])
  : Expression
  (case e
    [(tc:var-expr v)
     (resolve-var v env)]
    ;; Recur structually
    [(tc:int-expr v)
     (int-expr v)]
    [(tc:bytes-expr v)
     (bytes-expr v)]
    [(tc:deref-expr e ty)
     (deref-expr
       (resolve-vars/expression e env)
       ty)]
    [(tc:array-index-expr e t i)
     (array-index-expr
       (resolve-vars/expression e env)
       t
       (resolve-vars/expression i env))]
    [(tc:struct-field-expr e f)
     (struct-field-expr
       (resolve-vars/expression e env)
       f)]
    [(tc:bin-op-expr op l r)
     (bin-op-expr
       op
       (resolve-vars/expression l env)
       (resolve-vars/expression r env))]
    [(tc:cast-expr t e)
     (cast-expr
       t
       (resolve-vars/expression e env))]
    [(tc:call-expr f args)
     (call-expr
       (resolve-vars/expression f env)
       (resolve-vars/expressions args env))]))

(define (resolve-var [v : Bytes] [env : Environment]) : Expression
  (match-define (environment locals globals _) env)
  (case (dict-ref locals v)
    [(just v) (local-var-expr v)]
    [(nothing)
     (case (dict-ref globals v)
       [(just (global/top-level v)) (global-var-expr v)]
       [(just (global/external v)) (external-var-expr v)]
       [(nothing) (panic #"Unbound variable")])]))

(define (get-next-index [acc : State]) : (Tuple2 VarNumber State)
  (case acc
    [(state counter)
     (tuple2 counter (state (next-var-number counter)))]))

(define (environment-add-local [env : Environment] [local : Bytes] [state : State])
  : (Tuple3 Var Environment State)
  (match-define (environment locals globals name) env)
  (match-define (tuple2 var-num state) (get-next-index state))
  (match-define v (var local var-num))
  (tuple3
    v
    (environment (dict-set locals local v) globals name)
    state))

(define (environment-ref/local [env : Environment] [name : Bytes]) : Var
  (match-define (environment locals _ _) env)
  (case (dict-ref locals name)
    [(nothing) (panic #"Not a local")]
    [(just v) v]))




(define [A B] (map/env/state
                [f : (A Environment State -> (Tuple3 B Environment State))]
                [l : (List A)]
                [env : Environment]
                [state : State])
  : (Tuple3 (List B) Environment State)
  (case l
    [(empty) (tuple3 (empty) env state)]
    [(cons a l)
     (match-define (tuple3 b env state) (f a env state))
     (match-define (tuple3 bs env state) (map/env/state f l env state))
     (tuple3 (cons b bs) env state)]))
