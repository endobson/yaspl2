#:module (core-language source-language)
#:import {
  (list)
  (module-name)
  (prim)
}
(export
  (#:types Module Definition Parameter Statement Expression
           PreType)
  (#:values module function-definition parameter
            var-pre-type
            return-statement if-statement
            var-expr
            parameter-name)
  (#:patterns module function-definition parameter
              return-statement if-statement
              var-expr))
(types
  (define-type Module
    (module [name : ModName]
            [definitions : (List Definition)]))

  (define-type Definition
    (function-definition
      [name : Bytes]
      [parameters : (List Parameter)]
      [statements : (List Statement)]))

  (define-type PreType
    (var-pre-type [var : Bytes]))

  (define-type Parameter
    (parameter [name : Bytes] [type : PreType]))

  (define-type Statement
    (return-statement [e : Expression])
    (if-statement
      [c : Expression]
      [t : (List Statement)]
      [f : (List Statement)]))

  (define-type BinOp
    (op/less-than))

  (define-type Expression
    (var-expr [var : Bytes])
    ;(bin-op-expr [op : BinOp] [l : Expression] [r : Expression])
    ))
