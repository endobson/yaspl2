#:module (core-language source-language)
#:import {
  (list)
  (module-name)
  (prim)
  (yaspl math-operations)
}
(export
  (#:types Module Definition Parameter Statement Expression
           StructField PreType)
  (#:values module external-definition function-definition
            struct-definition struct-field parameter
            var-pre-type array-pre-type pointer-pre-type
            return-statement if-statement while-statement
            define-local-variable-statement assignment-statement
            pointer-assignment-statement effect-statement
            var-expr int-expr bytes-expr bin-op-expr cast-expr
            deref-expr array-index-expr call-expr
            parameter-name parameter-type)
  (#:patterns module function-definition
              external-definition struct-definition
              parameter
              var-pre-type array-pre-type pointer-pre-type
              return-statement if-statement while-statement
              define-local-variable-statement assignment-statement
              pointer-assignment-statement effect-statement
              var-expr int-expr bytes-expr bin-op-expr cast-expr
              deref-expr array-index-expr call-expr))
(types
  (define-type Module
    (module [name : ModName]
            [definitions : (List Definition)]))

  (define-type Definition
    (function-definition
      [name : Bytes]
      [parameters : (List Parameter)]
      [statements : (List Statement)])
    (external-definition
      [name : Bytes])
    (struct-definition
      [name : Bytes]
      [fields : (List StructField)]))

  (define-type PreType
    (var-pre-type [var : Bytes])
    (array-pre-type [t : PreType])
    (pointer-pre-type [t : PreType]))

  (define-type StructField
    (struct-field [name : Bytes] [type : PreType]))

  (define-type Parameter
    (parameter [name : Bytes] [type : PreType]))

  (define-type Statement
    (return-statement [e : Expression])
    (define-local-variable-statement [v : Bytes] [type : PreType] [e : Expression])
    (assignment-statement [v : Bytes] [e : Expression])
    (pointer-assignment-statement [p : Expression] [e : Expression])
    (effect-statement [e : Expression])
    (while-statement [e : Expression] [body : (List Statement)])
    (if-statement
      [c : Expression]
      [t : (List Statement)]
      [f : (List Statement)]))

  (define-type Expression
    (var-expr [var : Bytes])
    (int-expr [v : Int])
    (bytes-expr [v : Bytes])
    (deref-expr [e : Expression])
    (array-index-expr [e : Expression] [index : Expression])
    (bin-op-expr [op : BinOp] [l : Expression] [r : Expression])
    (cast-expr [t : PreType] [e : Expression])
    (call-expr [f : Expression] [args : (List Expression)])
    ))
