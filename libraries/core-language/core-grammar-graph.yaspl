#:module (core-language core-grammar-graph)
#:import {
  (bytes)
  (core-language core-parser)
  (core-language lr-parser)
  (data lifted-primitives)
  (dict)
  (directed-graph)
  (either)
  (graphviz)
  (io)
  (join-list)
  (list)
  (maybe)
  (numbers)
  (prim)
  (set)
}
(export
  (#:values main))
(types)

(define (make-graph) : (Graph LiftedInt VertexData EdgeData)
  (match-define (parser actions goto _ _ _) : (Parser CoreNonTerm CoreTerm Form)
    (case (make-module-parser)
      [(left v) (panic v)]
      [(right p) p]))
  (match-define g : (Graph LiftedInt VertexData EdgeData)
    (empty-graph lifted-int-cmp))

  (match-define g
    (dict-fold
      actions
      (lambda ([(state-id s) : StateId]
               [actions : (Dict (LiftedTerm CoreTerm) (Action CoreNonTerm))]
               [g : (Graph LiftedInt VertexData EdgeData)])
        (graph-add-vertex-if-absent
          g (lifted-int s)
          (vertex-data
            (bytes-append
              (jl->list
                (varargs
                  append-jl*
                  (single-jl #"State: ")
                  (single-jl (integer->decimal-bytes s))
                  (single-jl #"\n")
                  (concat-jl
                    (dict-map
                      actions
                      (lambda ([t : (LiftedTerm CoreTerm)] [a : (Action CoreNonTerm)])
                        : (JoinList Bytes)
                        (case a
                          [(reduce nt i num)
                           (varargs join-list
                             (case t
                              [(lifted-term t) (core-term->bytes t)]
                              [(end-of-terminals) #"END"])
                             #" "
                             (core-non-term->bytes nt)
                             #" "
                             (integer->decimal-bytes i)
                             #" "
                             (integer->decimal-bytes num)
                             #"\n")]
                          [_ (empty-jl)]))))
                  ))))))
      g))

  (match-define g
    (dict-fold
      actions
      (lambda ([(state-id s) : StateId]
               [actions : (Dict (LiftedTerm CoreTerm) (Action CoreNonTerm))]
               [g : (Graph LiftedInt VertexData EdgeData)])
        (dict-fold
          actions
          (lambda ([term : (LiftedTerm CoreTerm)] [action : (Action CoreNonTerm)]
                   [g : (Graph LiftedInt VertexData EdgeData)])
            : (Graph LiftedInt VertexData EdgeData)
            (case action
              [(shift (state-id s2))
               (match-define e
                 (edge-data (case term
                              [(lifted-term t) (just (core-term->bytes t))]
                              [(end-of-terminals) (just #"END")])
                            #"solid"))
               (case (graph-add-edge g (lifted-int s) (lifted-int s2) e)
                 [(nothing) (panic #"Bad edge")]
                 [(just g) g])]
              [_
               g]))
          g))
      g))

  (match-define g
    (dict-fold
      goto
      (lambda ([(state-id s) : StateId]
               [next : (Dict CoreNonTerm StateId)]
               [g : (Graph LiftedInt VertexData EdgeData)])
        (dict-fold
          next
          (lambda ([non-term : CoreNonTerm] [(state-id s2) : StateId]
                   [g : (Graph LiftedInt VertexData EdgeData)])
            : (Graph LiftedInt VertexData EdgeData)
            (match-define e
              (edge-data (just (core-non-term->bytes non-term))
                         #"dashed"))
            (case (graph-add-edge g (lifted-int s) (lifted-int s2) e)
              [(nothing) (panic #"Bad edge")]
              [(just g) g]))
          g))
      g))

  g)

(define (index->label [(lifted-int v) : LiftedInt]) : Bytes
  (integer->decimal-bytes v))

(define (write-tables [g : (Grammar CoreNonTerm CoreTerm Form)] [stderr : OutputPort]) : Void
  (match-define (grammar grammar-start input-rules non-term-cmp term-cmp) g)
  (match-define rules (number-input-production-rules input-rules))

  (match-define rules-dict (production-rules-dict rules non-term-cmp))
  (match-define item-sets (canonical-item-sets grammar-start rules-dict non-term-cmp
                                               term-cmp))

  (match-define empty-table (build-empty-table rules-dict non-term-cmp))
  (match-define first-table (build-first-table rules-dict empty-table non-term-cmp
                                               term-cmp))

  (begin
    (for-each
      (lambda ([nt : CoreNonTerm])
        (write-line (core-non-term->bytes nt) stderr))
      (set->list empty-table))
    (newline stderr)

    (let ([_ (dict-map
               first-table
               (lambda ([nt : CoreNonTerm] [terms : (Set CoreTerm)]) : LiftedVoid
                 (begin
                   (write-line (core-non-term->bytes nt) stderr)
                   (for-each
                     (lambda ([nt : CoreTerm])
                       (write-line (core-term->bytes nt) stderr))
                     (set->list terms))
                   (lifted-void))))])
      (void))

    (void)))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (begin
    ;(write-tables (make-module-grammar) stderr)
    (write-all-bytes (directed-graph->graphviz (make-graph) index->label) stdout)
    0))
