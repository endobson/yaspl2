#:module (core-language languages lifted-values-language)
#:import {
  {(core-language languages resolved-vars-language)
    {#:types
      Export
      Parameter
      PreType
    }
    {#:values
      export
      parameter
      parameter-name
    }
    {#:patterns
      array-pre-type
      export
      parameter
      pointer-pre-type
      var-pre-type
    }
  }
  (dict)
  (list)
  (module-name)
  (prim)
  (top-level-name)
  (yaspl math-operations)
  (yaspl var)
}
(export
  (#:types Module FunctionDefinition ConstantDefinition
           Parameter Statement Expression
           Export PreType)
  (#:values module function-definition parameter
            return-statement define-local-variable-statement assignment-statement
            pointer-assignment-statement while-statement if-statement
            local-var-expr global-var-expr external-var-expr int-expr deref-expr array-index-expr
            bin-op-expr cast-expr call-expr
            parameter-name export closure-constant bytes-constant)
  (#:patterns
    module function-definition parameter
    return-statement define-local-variable-statement assignment-statement pointer-assignment-statement
    while-statement if-statement
    local-var-expr global-var-expr external-var-expr int-expr deref-expr array-index-expr bin-op-expr
    cast-expr call-expr
    var-pre-type pointer-pre-type array-pre-type
    export bytes-constant closure-constant))
(types
  (define-type Module
    (module
      [name : ModName]
      [exports : (Dict Bytes Export)]
      [constants : (List ConstantDefinition)]
      [functions : (List FunctionDefinition)]))

  (define-type ConstantDefinition
    (closure-constant
      [name : TopLevelName]
      [function-name : TopLevelName])
    (bytes-constant
      [name : TopLevelName]
      [value : Bytes]))

  (define-type FunctionDefinition
    (function-definition
      [function-name : TopLevelName]
      [params : (List Parameter)]
      [statements : (List Statement)]))

  (define-type Statement
    (return-statement [e : Expression])
    (define-local-variable-statement [v : Var] [type : PreType] [e : Expression])
    (assignment-statement [v : Var] [e : Expression])
    (pointer-assignment-statement [p : Expression] [e : Expression])
    (while-statement [e : Expression] [body : (List Statement)])
    (if-statement
      [c : Expression]
      [t : (List Statement)]
      [f : (List Statement)]))

  (define-type Expression
    (local-var-expr [var : Var])
    (global-var-expr [var : TopLevelName])
    (external-var-expr [var : Bytes])
    (int-expr [v : Int])
    (deref-expr [e : Expression])
    (array-index-expr [e : Expression] [index : Expression])
    (bin-op-expr [op : BinOp] [l : Expression] [r : Expression])
    (cast-expr [t : PreType] [e : Expression])
    (call-expr [f : Expression] [args : (List Expression)])))
