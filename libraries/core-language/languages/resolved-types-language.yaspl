#:module (core-language languages resolved-types-language)
#:import {
  (data lifted-primitives)
  (dict)
  (list)
  (maybe)
  (module-name)
  (prim)
  (top-level-name)
  (types)
  (yaspl math-operations)
}
(export
  (#:types Module FunctionDefinition Parameter Statement Expression
           Import StructDefinition StructField SpaceType GlobalDefinition
           Export)
  (#:values module function-definition parameter struct-definition struct-field
            global-definition export-value export-type
            raw-space-type fixed-array-space-type
            return-statement if-statement while-statement
            define-local-variable-statement assignment-statement
            pointer-assignment-statement effect-statement
            var-expr int-expr unary-op-expr bin-op-expr cast-expr
            deref-expr array-index-expr struct-field-expr call-expr bytes-expr
            parameter-name parameter-type import-external import-value
            function-definition-name)
  (#:patterns module function-definition import-external import-value
              parameter struct-definition struct-field
              global-definition export-value export-type
              raw-space-type fixed-array-space-type
              return-statement if-statement while-statement
              define-local-variable-statement assignment-statement
              pointer-assignment-statement effect-statement
              var-expr int-expr unary-op-expr bin-op-expr cast-expr bytes-expr
              deref-expr array-index-expr struct-field-expr call-expr))
(types
  (define-type Module
    (module
      [name : ModName]
      [imports : (Dict Bytes Import)]
      [exports : (List Export)]
      [structs : (List StructDefinition)]
      [globals : (List GlobalDefinition)]
      [function : (List FunctionDefinition)]))

  (define-type Import
    (import-external [name : Bytes] [type : Type])
    (import-value [name : TopLevelName] [type : Type]))

  (define-type Export
    (export-value [name : Bytes])
    (export-type [name : Bytes] [type : Type]))


  (define-type StructDefinition
    (struct-definition
      [type : Type]
      [fields : (List StructField)]))

  (define-type StructField
    (struct-field
      [name : Bytes]
      [type : SpaceType]))

  (define-type SpaceType
    (raw-space-type [t : Type])
    (fixed-array-space-type [t : Type] [length : Int]))

  (define-type GlobalDefinition
    (global-definition
      [name : Bytes]
      [type : SpaceType]
      [alignment : (Maybe LiftedInt)]))

  (define-type FunctionDefinition
    (function-definition
      [name : Bytes]
      [parameters : (List Parameter)]
      [return-type : Type]
      [statements : (List Statement)]))

  (define-type Parameter
    (parameter [name : Bytes] [type : Type]))

  (define-type Statement
    (return-statement [e : Expression])
    (define-local-variable-statement [v : Bytes] [type : Type] [e : Expression])
    (assignment-statement [v : Bytes] [e : Expression])
    (pointer-assignment-statement [p : Expression] [e : Expression])
    (effect-statement [e : Expression])
    (while-statement [e : Expression] [body : (List Statement)])
    (if-statement
      [c : Expression]
      [t : (List Statement)]
      [f : (List Statement)]))

  (define-type Expression
    (var-expr [var : Bytes])
    (int-expr [v : Int])
    (bytes-expr [v : Bytes])
    (deref-expr [e : Expression])
    (array-index-expr [e : Expression] [index : Expression])
    (struct-field-expr [e : Expression] [name : Bytes])
    (unary-op-expr [op : LogicalUnaryOp] [e : Expression])
    (bin-op-expr [op : BinOp] [l : Expression] [r : Expression])
    (cast-expr [t : Type] [e : Expression])
    (call-expr [f : Expression] [args : (List Expression)])))
