#:module (core-language languages type-checked-language)
#:import {
  {(core-language languages processed-structs-language)
    {#:types
      Export
      GlobalInfo
      Import
      Parameter
    }
    {#:values
      parameter-name
      parameter-type
    }
    {#:patterns
      export-value
      global-info
      import-external
      import-value
      parameter
    }
  }
  (core-language sized-types)
  (core-language struct-info)
  (dict)
  (list)
  (module-name)
  (prim)
  (types)
  (yaspl math-operations)
}
(export
  (#:types Module FunctionDefinition Parameter Statement Expression
           Import GlobalInfo Export)
  (#:values module function-definition
            return-statement if-statement while-statement
            define-local-variable-statement assignment-statement
            pointer-assignment-statement effect-statement
            var-expr int-expr unary-op-expr bin-op-expr cast-expr
            deref-expr array-index-expr struct-field-expr call-expr bytes-expr
            parameter-name parameter-type
            function-definition-name)
  (#:patterns module function-definition import-external import-value
              parameter global-info export-value
              return-statement if-statement while-statement
              define-local-variable-statement assignment-statement
              pointer-assignment-statement effect-statement
              var-expr int-expr unary-op-expr bin-op-expr cast-expr bytes-expr
              deref-expr array-index-expr struct-field-expr call-expr))
(types
  (define-type Module
    (module
      [name : ModName]
      [imports : (Dict Bytes Import)]
      [exports : (List Export)]
      [globals : (Dict Bytes GlobalInfo)]
      [function : (List FunctionDefinition)]))

  (define-type FunctionDefinition
    (function-definition
      [name : Bytes]
      [parameters : (List Parameter)]
      [return-type : Type]
      [statements : (List Statement)]))

  (define-type Statement
    (return-statement [e : Expression])
    (define-local-variable-statement [v : Bytes] [type : Type] [e : Expression])
    (assignment-statement [v : Bytes] [e : Expression])
    (pointer-assignment-statement [p : Expression] [elem-type : Type] [e : Expression])
    (effect-statement [e : Expression])
    (while-statement [e : Expression] [body : (List Statement)])
    (if-statement
      [c : Expression]
      [t : (List Statement)]
      [f : (List Statement)]))

  (define-type Expression
    (var-expr [var : Bytes])
    (int-expr [v : Int])
    (bytes-expr [v : Bytes])
    (deref-expr [e : Expression] [elem-type : Type])
    (array-index-expr [e : Expression] [elem-type : SizedType] [index : Expression])
    (struct-field-expr [e : Expression] [field : StructField])
    (unary-op-expr [op : LogicalUnaryOp] [e : Expression])
    (bin-op-expr [op : BinOp] [l : Expression] [r : Expression])
    (cast-expr [t : Type] [e : Expression])
    (call-expr [f : Expression] [args : (List Expression)])))
