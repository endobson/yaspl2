#:module (core-language sized-types)
#:import {
  (data lifted-primitives)
  (maybe)
  (prim)
  (types)
}
(export
  (#:types SizedType)
  (#:values sized-type kind->bytes-size
            sized-type->type sized-type->bytes-size)
  (#:patterns ))
(types
  (define-type SizedType
    (sized-type [t : Type] [size : Int])))


(define (sized-type->bytes-size [t : SizedType]) : Int
  (case t
    [(sized-type _ s) s]))

(define (sized-type->type [t : SizedType]) : Type
  (case t
    [(sized-type t _) t]))

(define (kind->bytes-size [k : Kind]) : (Maybe LiftedInt)
  (case k
    [(star-kind) (just (lifted-int 8))]
    [(prim-kind s) (just (lifted-int (type-size->num-bytes s)))]
    [(constraint-kind) (nothing)]
    [(memory-kind) (nothing)]
    [(fun-kind _ _) (nothing)]))

(define (type-size->num-bytes [t : TypeSize]) : Int
  (case t
    [(type-size8) 1]
    [(type-size16) 2]
    [(type-size32) 4]
    [(type-size64) 8]))
