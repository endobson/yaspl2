#:module (core-language lr-parser)
#:import {
  (bytes)
  {(core-language lexer)
    {#:types
      [Lexer l:Lexer]
      [Token l:Token]
    }
    {#:values
      [run-lexer l:run-lexer]
      [token->debug l:token->debug]
    }
    {#:patterns
      [bad-input l:bad-input]
      [end-of-input l:end-of-input]
      [lex-result l:lex-result]
    }
  }
  (data lifted-primitives)
  (data ordering)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (numbers)
  {(prim)
    {#:types
      Boolean
      Bytes
      Int
    }
    {#:values
      +
      -
      =
      panic
    }
  }
  (set)
  (tuples)
  (unique-dict)
}
(export
  (#:types Parser Item StateId Action LiftedTerm Symbol
           InputProductionRule ProductionRule Grammar)
  (#:values run-parser lex-all

   closure
   production-rules-dict
   number-input-production-rules
   input-production-rule
   symbol/term
   symbol/non-term
   item
   start-symbol
   lifted-non-term
   item-set
   item-cmp

   canonical-item-sets
   build-parser
   parser-action
   state-id-v
   build-empty-table
   build-first-table
   build-follow-table
   grammar)
  (#:patterns
   lifted-term end-of-terminals
   accept reduce shift
   state-id

   parser
   grammar
   ))
(types
  (define-type (ParserState Token Form)
    (parser-state
      [stack : (List StateId)]
      [form : (List Form)]
      [input : (List Token)]))

  (define-type (Grammar NonTerm Term Form)
    (grammar
      [start-symbol : NonTerm]
      [rules : (List (InputProductionRule NonTerm Term Form))]
      [non-term-cmp : (NonTerm NonTerm -> Ordering)]
      [term-cmp : (Term Term -> Ordering)]))

  (define-type (Parser NonTerm Term Form)
    (parser
      [action : (Dict StateId (Dict (LiftedTerm Term) (Action NonTerm)))]
      [goto : (Dict StateId (Dict NonTerm StateId))]
      [semantic-action : (Dict LiftedInt ((List Form) -> (Either Bytes Form)))]
      [token->form : (l:Token -> Form)]
      [token->terminal : (l:Token -> (Either Bytes Term))]))
  (define-type (Action NonTerm)
    (shift [new-state : StateId])
    (reduce [non-term : NonTerm] [index : Int] [num-symbols : Int])
    (accept))
  (define-type StateId
    (state-id [v : Int]))
  (define-type (LiftedTerm Term)
    (end-of-terminals)
    (lifted-term [t : Term]))
  (define-type (LiftedNonTerm NonTerm)
    (start-symbol)
    (lifted-non-term [n : NonTerm]))

  (define-type (InputProductionRule NonTerm Term Form)
    (input-production-rule
      [non-term : NonTerm]
      [entries : (List (Symbol NonTerm Term))]
      [semantic-action : ((List Form) -> (Either Bytes Form))]))

  (define-type (ProductionRule NonTerm Term Form)
    (production-rule
      [non-term : NonTerm]
      [rule-number : Int]
      [entries : (List (Symbol NonTerm Term))]
      [semantic-action : ((List Form) -> (Either Bytes Form))]))

  (define-type (ProductionRHS NonTerm Term)
    (production-rhs
      [rule-number : Int]
      [entries : (List (Symbol NonTerm Term))]))

  (define-type (Item NonTerm Term)
    (item
      [non-term : (LiftedNonTerm NonTerm)]
      [rule : Int]
      [left-entries : (List (Symbol NonTerm Term))]
      [right-entries : (List (Symbol NonTerm Term))]))
  ;; This only contains the kernel items
  (define-type (ItemSet NonTerm Term)
    (item-set [items : (Set (Item NonTerm Term))]))

  (define-type (Symbol NonTerm Term)
    (symbol/non-term [nt : NonTerm])
    (symbol/term [t : Term])))


(define (state-id-cmp [a : StateId] [b : StateId]) : Ordering
  (match-define (state-id a-v) a)
  (match-define (state-id b-v) b)
  (int-cmp a-v b-v))

(define [NonTerm Term] (item-set-cmp
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                         [term-cmp : (Term Term -> Ordering)])
  : ((ItemSet NonTerm Term) (ItemSet NonTerm Term) -> Ordering)
  (lambda ([a : (ItemSet NonTerm Term)] [b : (ItemSet NonTerm Term)]) : Ordering
    (match-define (item-set as) a)
    (match-define (item-set bs) b)
    ((list-cmp (item-cmp non-term-cmp term-cmp))
     (set->list as) (set->list bs))))

(define [Term] (lifted-term-cmp [term-cmp : (Term Term -> Ordering)])
  : ((LiftedTerm Term) (LiftedTerm Term) -> Ordering)
  (lambda ([a : (LiftedTerm Term)] [b : (LiftedTerm Term)]) : Ordering
    (case (tuple2 a b)
      [(tuple2 (end-of-terminals) (end-of-terminals)) (equal-to)]
      [(tuple2 (lifted-term _) (end-of-terminals)) (less-than)]
      [(tuple2 (end-of-terminals) (lifted-term _)) (greater-than)]
      [(tuple2 (lifted-term a) (lifted-term b)) (term-cmp a b)])))

(define [NonTerm] (lifted-non-term-cmp [non-term-cmp : (NonTerm NonTerm -> Ordering)])
  : ((LiftedNonTerm NonTerm) (LiftedNonTerm NonTerm) -> Ordering)
  (lambda ([a : (LiftedNonTerm NonTerm)] [b : (LiftedNonTerm NonTerm)]) : Ordering
    (case (tuple2 a b)
      [(tuple2 (start-symbol) (start-symbol)) (equal-to)]
      [(tuple2 (lifted-non-term _) (start-symbol)) (greater-than)]
      [(tuple2 (start-symbol) (lifted-non-term _)) (less-than)]
      [(tuple2 (lifted-non-term a) (lifted-non-term b)) (non-term-cmp a b)])))

(define [NonTerm Term] (symbol-cmp [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                                   [term-cmp : (Term Term -> Ordering)])
  : ((Symbol NonTerm Term) (Symbol NonTerm Term) -> Ordering)
  (lambda ([v1 : (Symbol NonTerm Term)] [v2 : (Symbol NonTerm Term)])
    (case (tuple2 v1 v2)
      [(tuple2 (symbol/non-term _) (symbol/term _))
       (less-than)]
      [(tuple2 (symbol/term _) (symbol/non-term _))
       (greater-than)]
      [(tuple2 (symbol/non-term nt1) (symbol/non-term nt2))
       (non-term-cmp nt1 nt2)]
      [(tuple2 (symbol/term t1) (symbol/term t2))
       (term-cmp t1 t2)])))

(define [NonTerm] (action-cmp [non-term-cmp : (NonTerm NonTerm -> Ordering)])
  : ((Action NonTerm) (Action NonTerm) -> Ordering)
  (lambda ([a1 : (Action NonTerm)] [a2 : (Action NonTerm)])
    (case (tuple2 a1 a2)
      [(tuple2 (shift (state-id s1)) (shift (state-id s2)))
       (int-cmp s1 s2)]
      [(tuple2 (shift _) (reduce _ _ _))
       (less-than)]
      [(tuple2 (shift _) (accept))
       (less-than)]
      [(tuple2 (reduce _ _ _) (shift _))
       (greater-than)]
      [(tuple2 (reduce nt1 rule1 _num-symbols1)
               (reduce nt2 rule2 _num-symbols2))
       (case (non-term-cmp nt1 nt2)
         [(equal-to)
          ;; Can ignore number of symbol since it is determined by rule number
          (int-cmp rule1 rule2)]
         [v v])]
      [(tuple2 (reduce _ _ _) (accept))
       (less-than)]
      [(tuple2 (accept) (shift _))
       (greater-than)]
      [(tuple2 (accept) (reduce _ _ _))
       (greater-than)]
      [(tuple2 (accept) (accept))
       (equal-to)])))


(define [NonTerm Term] (item-cmp [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                                 [term-cmp : (Term Term -> Ordering)])
  : ((Item NonTerm Term) (Item NonTerm Term) -> Ordering)
  (lambda ([a : (Item NonTerm Term)] [b : (Item NonTerm Term)]) : Ordering
    (match-define (item nt-a rule-a l-a r-a) a)
    (match-define (item nt-b rule-b l-b r-b) b)
    (case ((lifted-non-term-cmp non-term-cmp) nt-a nt-b)
      [(equal-to)
       (case (int-cmp rule-a rule-b)
        [(equal-to)
         (match-define entries-cmp (list-cmp (symbol-cmp non-term-cmp term-cmp)))
         (case (entries-cmp l-a l-b)
           [(equal-to)
            (entries-cmp r-a r-b)]
           [v v])]
        [v v])]
      [v v])))

;(define [NonTerm Term] (kernel-item? [item : (Item NonTerm Term)]) : Boolean
;  (case item
;    [(item _ _ (cons _ _) _) #t]
;    [(item (start-symbol) _ (empty) _) #t]
;    [_ #f]))

(define [NonTerm Term Form]
  (number-input-production-rules [rules : (List (InputProductionRule NonTerm Term Form))])
  : (List (ProductionRule NonTerm Term Form))
  (map/indexed
    (lambda ([rule : (InputProductionRule NonTerm Term Form)]
             [i : Int])
      (match-define (input-production-rule nt entries action) rule)
      (production-rule nt i entries action))
    rules))

(define [NonTerm Term Form]
  (production-rules-dict
    [rules : (List (ProductionRule NonTerm Term Form))]
    [non-term-cmp : (NonTerm NonTerm -> Ordering)])
  : (Dict NonTerm (List (ProductionRHS NonTerm Term)))
  (foldl
    (lambda ([pr : (ProductionRule NonTerm Term Form)]
             [acc : (Dict NonTerm (List (ProductionRHS NonTerm Term)))])
      : (Dict NonTerm (List (ProductionRHS NonTerm Term)))
      (match-define (production-rule nt rule symbols _) pr)
      (dict-update
        acc
        nt
        (lambda ([rhss : (List (ProductionRHS NonTerm Term))])
          (cons (production-rhs rule symbols) rhss))
        (empty)))
    rules
    (ann (Dict NonTerm (List (ProductionRHS NonTerm Term)))
      (make-dict non-term-cmp))))

(define [NonTerm Term] (build-empty-table
                         [rules : (Dict NonTerm (List (ProductionRHS NonTerm Term)))]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)])
  : (Set NonTerm)
  ;; Drop all the rules that have a terminal in them as they cannot be empty
  (match-define filtered-rules
    (dict-value-map rules
      (lambda ([rhss : (List (ProductionRHS NonTerm Term))])
        (filter-map
          (lambda ([rhs : (ProductionRHS NonTerm Term)]) : (Maybe (List NonTerm))
            (case (partition-symbols (production-rhs-entries rhs))
              [(tuple2 nonterms (empty))
               (just nonterms)]
              [_ (nothing)]))
          rhss))))

  (build-empty-table* (make-set non-term-cmp) filtered-rules non-term-cmp))


(define [NonTerm Term] (partition-symbols [symbols : (List (Symbol NonTerm Term))])
  : (Tuple2 (List NonTerm) (List Term))
  (partition-symbols* symbols (empty) (empty)))

(define [NonTerm Term] (partition-symbols* [symbols : (List (Symbol NonTerm Term))]
                                           [non-terms : (List NonTerm)] [terms : (List Term)])
  : (Tuple2 (List NonTerm) (List Term))
  (case symbols
    [(empty) (tuple2 (reverse non-terms) (reverse terms))]
    [(cons (symbol/non-term non-term) symbols)
     (partition-symbols* symbols (cons non-term non-terms) terms)]
    [(cons (symbol/term term) symbols)
     (partition-symbols* symbols non-terms (cons term terms))]))


(define [NonTerm Term] (build-empty-table*
                         [current-table : (Set NonTerm)]
                         [rules : (Dict NonTerm (List (List NonTerm)))]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)])
  : (Set NonTerm)
  (match-define new-entries
    (dict-fold
      rules
      (lambda ([nt : NonTerm] [rhss : (List (List NonTerm))] [acc : (Set NonTerm)])
        (cond
          [(set-member? current-table nt)
           acc]
          [(ormap
             (lambda ([rhs : (List NonTerm)])
               (andmap (lambda ([rhs-nt : NonTerm]) (set-member? current-table rhs-nt)) rhs))
             rhss)
           (set-add acc nt)]
          [else
           acc]))
      (make-set non-term-cmp)))
  (if (set-empty? new-entries)
      current-table
      (build-empty-table* (set-union current-table new-entries) rules non-term-cmp)))

(define [NonTerm Term] (build-first-table
                         [rules : (Dict NonTerm (List (ProductionRHS NonTerm Term)))]
                         [empty-table : (Set NonTerm)]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                         [term-cmp : (Term Term -> Ordering)])
  : (Dict NonTerm (Set Term))
  (match-define initial-table
    (dict-value-map rules
      (lambda ([rhss : (List (ProductionRHS NonTerm Term))])
        (set-add-all
          (make-set term-cmp)
          (filter-map
            (lambda ([rhs : (ProductionRHS NonTerm Term)])
              (initial-terminal (production-rhs-entries rhs) empty-table))
            rhss)))))

  ;; Convert the rules to the set of relevant non terminals which can contribute to the
  ;; first value for the the non terminal.
  (match-define filtered-rules
    (dict-value-map rules
      (lambda ([rhss : (List (ProductionRHS NonTerm Term))])
        (set->list
          (set-union*
            (make-set non-term-cmp)
            (map
              (lambda ([rhs : (ProductionRHS NonTerm Term)])
                (first-relevant-non-terminals (production-rhs-entries rhs) empty-table
                                              non-term-cmp))
              rhss))))))

  (build-first-table* initial-table filtered-rules term-cmp))

(define [NonTerm Term] (initial-terminal [rhs : (List (Symbol NonTerm Term))]
                                         [empty-table : (Set NonTerm)]) : (Maybe Term)
  (case rhs
    [(empty) (nothing)]
    [(cons (symbol/term t) _) (just t)]
    [(cons (symbol/non-term nt) rest-rhs)
     (if (set-member? empty-table nt)
         (initial-terminal rest-rhs empty-table)
         (nothing))]))

(define [NonTerm Term] (first-relevant-non-terminals
                         [rhs : (List (Symbol NonTerm Term))]
                         [empty-table : (Set NonTerm)]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)]) : (Set NonTerm)
  (case rhs
    [(empty) (make-set non-term-cmp)]
    [(cons (symbol/term _) _) (make-set non-term-cmp)]
    [(cons (symbol/non-term nt) rest-rhs)
     (set-add
       (if (set-member? empty-table nt)
           (first-relevant-non-terminals rest-rhs empty-table non-term-cmp)
           (make-set non-term-cmp))
       nt)]))

(define [NonTerm Term] (build-first-table*
                        [current-table : (Dict NonTerm (Set Term))]
                        [rules : (Dict NonTerm (List NonTerm))]
                        [term-cmp : (Term Term -> Ordering)])
 : (Dict NonTerm (Set Term))
  (match-define all-updates
    (dict-filter-map
      rules
      (lambda ([nt : NonTerm] [others : (List NonTerm)]) : (Maybe (Set Term))
        (match-define new-elems
          (set-union*
            (make-set term-cmp)
            (map (lambda ([other-nt : NonTerm])
                   (dict-ref/panic current-table other-nt))
                 others)))
        (match-define delta
          (set-difference new-elems (dict-ref/panic current-table nt)))
        (if (set-empty? delta)
            (nothing)
            (just new-elems)))))
  (if (dict-empty? all-updates)
      current-table
      (build-first-table*
        (dict-entry-map
          current-table
          (lambda ([nt : NonTerm] [old-elems : (Set Term)])
            (case (dict-ref all-updates nt)
              [(just new-elems) (set-union new-elems old-elems)]
              [(nothing) old-elems])))
        rules
        term-cmp)))

(define [NonTerm Term] (build-follow-table
                         [initial-symbol : NonTerm]
                         [rules : (Dict NonTerm (List (ProductionRHS NonTerm Term)))]
                         [empty-table : (Set NonTerm)]
                         [first-table : (Dict NonTerm (Set Term))]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                         [term-cmp : (Term Term -> Ordering)])
  : (Dict NonTerm (Set (LiftedTerm Term)))
  (match-define initial-table
    (dict-value-map
      rules
      (lambda ([_rhss : (List (ProductionRHS NonTerm Term))])
        (make-set (lifted-term-cmp term-cmp)))))
  (match-define initial-table : (Dict NonTerm (Set (LiftedTerm Term)))
    (dict-set
      initial-table
      initial-symbol
      (set-add
        (make-set (lifted-term-cmp term-cmp))
        (end-of-terminals))))
  (match-define initial-table
    (dict-fold
      rules
      (lambda ([_nt : NonTerm]
               [rhss : (List (ProductionRHS NonTerm Term))]
               [acc : (Dict NonTerm (Set (LiftedTerm Term)))])
        (foldl
          (lambda ([rhs : (ProductionRHS NonTerm Term)]
                   [acc : (Dict NonTerm (Set (LiftedTerm Term)))])
            (add-initial-follows (production-rhs-entries rhs) empty-table first-table term-cmp acc))
          rhss
          acc))
      initial-table))

  ;; Convert the rules to the set of relevant non terminals which can contribute to the
  ;; follow value for the the non terminal.
  (match-define non-terminal-map
    (dict-value-map
      rules
      (lambda ([_rhss : (List (ProductionRHS NonTerm Term))])
        (make-set non-term-cmp))))

  (match-define non-terminal-map
    (dict-fold
      rules
      (lambda ([nt : NonTerm]
               [rhss : (List (ProductionRHS NonTerm Term))]
               [acc : (Dict NonTerm (Set NonTerm))])
        (foldl
          (lambda ([rhs : (ProductionRHS NonTerm Term)]
                   [acc : (Dict NonTerm (Set NonTerm))])
            (add-non-term-follows nt (production-rhs-entries rhs) empty-table first-table acc))
          rhss
          acc))
      non-terminal-map))
  (match-define non-terminal-map
    (dict-value-map non-terminal-map
      (lambda ([s : (Set NonTerm)]) (set->list s))))

  (build-follow-table* initial-table non-terminal-map))

(define [NonTerm Term] (build-follow-table*
                         [current-table : (Dict NonTerm (Set (LiftedTerm Term)))]
                         [non-terminal-map : (Dict NonTerm (List NonTerm))])
  : (Dict NonTerm (Set (LiftedTerm Term)))
  (match-define all-updates
    (dict-filter-map
      non-terminal-map
      (lambda ([nt : NonTerm] [others : (List NonTerm)])
        : (Maybe (Set (LiftedTerm Term)))
        (match-define new-elems
          (set-union*
            (dict-ref/panic current-table nt)
            (map (lambda ([other-nt : NonTerm])
                   (dict-ref/panic current-table other-nt))
                 others)))
        (match-define delta
          (set-difference new-elems (dict-ref/panic current-table nt)))
        (if (set-empty? delta)
            (nothing)
            (just new-elems)))))
  (if (dict-empty? all-updates)
      current-table
      (build-follow-table*
        (dict-entry-map
          current-table
          (lambda ([nt : NonTerm] [old-elems : (Set (LiftedTerm Term))])
            (case (dict-ref all-updates nt)
              [(just new-elems) new-elems]
              [(nothing) old-elems])))
        non-terminal-map)))


(define [NonTerm Term] (add-initial-follows
                         [rhs : (List (Symbol NonTerm Term))]
                         [empty-table : (Set NonTerm)]
                         [first-table : (Dict NonTerm (Set Term))]
                         [term-cmp : (Term Term -> Ordering)]
                         [acc : (Dict NonTerm (Set (LiftedTerm Term)))])
  : (Dict NonTerm (Set (LiftedTerm Term)))
  (case rhs
    [(empty) acc]
    [(cons (symbol/term _) rhs)
     (add-initial-follows rhs empty-table first-table term-cmp acc)]
    [(cons (symbol/non-term nt) rhs)
     (add-initial-follows
       rhs empty-table first-table term-cmp
       (dict-update-existing
         acc
         nt
         (lambda ([acc-set : (Set (LiftedTerm Term))])
           (set-add-all acc-set
             (map (lambda ([t : Term]) (lifted-term t))
                  (set->list (first/string rhs empty-table first-table term-cmp)))))))]))

(define [NonTerm Term] (first/string
                         [str : (List (Symbol NonTerm Term))]
                         [empty-table : (Set NonTerm)]
                         [first-table : (Dict NonTerm (Set Term))]
                         [term-cmp : (Term Term -> Ordering)])
  : (Set Term)
  (case str
    [(empty) (make-set term-cmp)]
    [(cons (symbol/term t) _) (set-add (make-set term-cmp) t)]
    [(cons (symbol/non-term nt) str)
     (set-union
       (if (set-member? empty-table nt)
           (first/string str empty-table first-table term-cmp)
           (make-set term-cmp))
       (dict-ref/panic first-table nt))]))

(define [NonTerm Term] (add-non-term-follows
                         [nt : NonTerm]
                         [rhs : (List (Symbol NonTerm Term))]
                         [empty-table : (Set NonTerm)]
                         [first-table : (Dict NonTerm (Set Term))]
                         [acc : (Dict NonTerm (Set NonTerm))])
  : (Dict NonTerm (Set NonTerm))
  (case rhs
    [(empty) acc]
    [(cons (symbol/term _) rhs)
     (add-non-term-follows nt rhs empty-table first-table acc)]
    [(cons (symbol/non-term other-nt) rhs)
     (match-define acc
       (if (empty/string rhs empty-table)
           (dict-update-existing
             acc
             other-nt
             (lambda ([nt-set : (Set NonTerm)])
               (set-add nt-set nt)))
           acc))
     (add-non-term-follows nt rhs empty-table first-table acc)]))

(define [NonTerm Term] (empty/string
                         [str : (List (Symbol NonTerm Term))]
                         [empty-table : (Set NonTerm)])
  : Boolean
  (case str
    [(empty) #t]
    [(cons (symbol/term _t) _str) #f]
    [(cons (symbol/non-term nt) str)
     (if (set-member? empty-table nt)
         (empty/string str empty-table)
         #f)]))

(define [NonTerm Term] (closure
                         [is : (ItemSet NonTerm Term)]
                         [rules : (Dict NonTerm (List (ProductionRHS NonTerm Term)))]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                         [term-cmp : (Term Term -> Ordering)])
  : (Set (Item NonTerm Term))
  (match-define (item-set items) is)

  (closure* (set->list items)
            (make-set (item-cmp non-term-cmp term-cmp))
            rules))

(define [NonTerm Term] (closure*
                         [items : (List (Item NonTerm Term))]
                         [acc : (Set (Item NonTerm Term))]
                         [rules : (Dict NonTerm (List (ProductionRHS NonTerm Term)))])
  : (Set (Item NonTerm Term))
  (case items
    [(empty) acc]
    [(cons i items)
     (if (set-member? acc i)
         (closure* items acc rules)
         (closure*
           (case i
             [(item _ _ _ (cons (symbol/non-term other-nt) _))
              (append
                (map
                  (lambda ([rhs : (ProductionRHS NonTerm Term)])
                    : (Item NonTerm Term)
                    (match-define (production-rhs rule entries) rhs)
                    (item (lifted-non-term other-nt) rule (empty) entries))
                  (dict-ref/panic rules other-nt))
                items)]
             [_ items])
           (set-add acc i)
           rules))]))

(define [NonTerm Term] (goto [items : (Set (Item NonTerm Term))]
                             [symbol : (Symbol NonTerm Term)]
                             [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                             [term-cmp : (Term Term -> Ordering)])
  : (Maybe (ItemSet NonTerm Term))
  (match-define new-items
    (filter-map
      (lambda ([i : (Item NonTerm Term)]) : (Maybe (Item NonTerm Term))
        (case i
          [(item nt rule lhs (cons other-symbol rhs))
           (case ((symbol-cmp non-term-cmp term-cmp) symbol other-symbol)
             [(equal-to)
              (just (item nt rule (cons other-symbol lhs) rhs))]
             [_ (nothing)])]
          [_ (nothing)]))
      (set->list items)))
  (case new-items
    [(empty) (nothing)]
    [_
     (just
       (item-set
         (set-add-all
           (make-set (item-cmp non-term-cmp term-cmp))
           new-items)))]))

(define [NonTerm Term] (canonical-item-sets
                         [start : NonTerm]
                         [rules : (Dict NonTerm (List (ProductionRHS NonTerm Term)))]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                         [term-cmp : (Term Term -> Ordering)])
  : (UniqueDict (ItemSet NonTerm Term) StateId)
  (match-define init-item : (Item NonTerm Term)
    (item (start-symbol) 0 (empty) (varargs list (symbol/non-term start))))

  (match-define terms
    (set->list
      (set-add-all
        (make-set term-cmp)
        (append*
          (map
            (lambda ([rhs : (ProductionRHS NonTerm Term)])
              (filter-map
                (lambda ([s : (Symbol NonTerm Term)]) : (Maybe Term)
                  (case s
                    [(symbol/non-term _) (nothing)]
                    [(symbol/term t) (just t)]))
                (production-rhs-entries rhs)))
            (append* (dict-values rules)))))))



  (canonical-item-sets*
    (varargs list (item-set (set-add (make-set (item-cmp non-term-cmp term-cmp))
                                     init-item)))
    (make-unique-dict (item-set-cmp non-term-cmp term-cmp) state-id-cmp)
    0
    (append
      (map
        (lambda ([nt : NonTerm]) : (Symbol NonTerm Term) (symbol/non-term nt))
        (set->list (dict-keys rules)))
      (map
        (lambda ([t : Term]) : (Symbol NonTerm Term) (symbol/term t))
        terms))
    rules
    non-term-cmp
    term-cmp))

(define [NonTerm Term] (canonical-item-sets*
                         [unprocessed-item-sets : (List (ItemSet NonTerm Term))]
                         [item-sets : (UniqueDict (ItemSet NonTerm Term) StateId)]
                         [next-state-id : Int]
                         [symbols : (List (Symbol NonTerm Term))]
                         [rules : (Dict NonTerm (List (ProductionRHS NonTerm Term)))]
                         [non-term-cmp : (NonTerm NonTerm -> Ordering)]
                         [term-cmp : (Term Term -> Ordering)])
  : (UniqueDict (ItemSet NonTerm Term) StateId)
  (case unprocessed-item-sets
    [(empty) item-sets]
    [(cons is unprocessed-item-sets)
     (case (unique-dict-ref item-sets is)
       [(just _)
        (canonical-item-sets* unprocessed-item-sets item-sets next-state-id symbols rules
                              non-term-cmp term-cmp)]
       [(nothing)
         (match-define full-items (closure is rules non-term-cmp term-cmp))
         (match-define next-sets
           (filter-map
             (lambda ([symbol : (Symbol NonTerm Term)])
               (goto full-items symbol non-term-cmp term-cmp ))
             symbols))
         (canonical-item-sets*
           (append next-sets unprocessed-item-sets)
           (unique-dict-add item-sets is (state-id next-state-id))
           (+ 1 next-state-id)
           symbols
           rules
           non-term-cmp
           term-cmp)])]))

(define [NonTerm Term Form]
  (build-semantic-action-table
    [rules : (List (ProductionRule NonTerm Term Form))])
  : (Dict LiftedInt ((List Form) -> (Either Bytes Form)))
  (dict-add-all
    (make-dict lifted-int-cmp)
    (map
      (lambda ([rule : (ProductionRule NonTerm Term Form)])
        (match-define (production-rule _nt rule-id _ f) rule)
        (tuple2 (lifted-int rule-id) f))
      rules)))

(define [NonTerm Term Form]
  (build-parser
    [grammar : (Grammar NonTerm Term Form)]
    [token->form : (l:Token -> Form)]
    [token->terminal : (l:Token -> (Either Bytes Term))])
  : (Either Bytes (Parser NonTerm Term Form))
  (match-define (grammar grammar-start input-rules non-term-cmp term-cmp) grammar)
  (match-define rules (number-input-production-rules input-rules))



  (match-define rules-dict (production-rules-dict rules non-term-cmp))
  (match-define item-sets (canonical-item-sets grammar-start rules-dict non-term-cmp
                                               term-cmp))

  (match-define empty-table (build-empty-table rules-dict non-term-cmp))
  (match-define first-table (build-first-table rules-dict empty-table non-term-cmp
                                               term-cmp))
  (match-define follow-table
    (build-follow-table grammar-start rules-dict empty-table first-table non-term-cmp
                        term-cmp))
  (match-define semantic-action-table (build-semantic-action-table rules))

  (match-define action-map-entries
    (unique-dict-map
      item-sets
      (lambda ([is : (ItemSet NonTerm Term)]
               [s : StateId])
        : (Either Bytes (Tuple2 StateId (Dict (LiftedTerm Term) (Action NonTerm))))
        (match-define full-set (closure is rules-dict non-term-cmp term-cmp))

        (match-define action-tuples
          (append*
            (map
              (lambda ([item : (Item NonTerm Term)])
                : (List (Tuple2 (LiftedTerm Term) (Action NonTerm)))
                (case item
                  [(item _ _ _ (cons (symbol/term term) _))
                   (case (goto full-set (ann (Symbol NonTerm Term) (symbol/term term))
                                        non-term-cmp term-cmp)
                     [(nothing) (panic #"Bad goto")]
                     [(just next-is)
                      (case (unique-dict-ref item-sets next-is)
                        [(nothing) (panic #"Bad item set")]
                        [(just next-state)
                         (varargs list (tuple2 (lifted-term term) (shift next-state)))])])]
                  [(item _ _ _ (cons (symbol/non-term _) _))
                   (empty)]
                  [(item (start-symbol) _ _ (empty))
                   (varargs list (tuple2 (end-of-terminals) (accept)))]
                  [(item (lifted-non-term nt) rule lhs (empty))
                   (map
                     (lambda ([term : (LiftedTerm Term)])
                       : (Tuple2 (LiftedTerm Term) (Action NonTerm))
                       (tuple2 term (reduce nt rule (length lhs))))
                     (set->list (dict-ref/panic follow-table nt)))]))
              (set->list full-set))))


        (match-define action-dict
          (foldl
            (lambda ([at : (Tuple2 (LiftedTerm Term) (Action NonTerm))]
                     [acc : (Either Bytes (Dict (LiftedTerm Term) (Action NonTerm)))])
              : (Either Bytes (Dict (LiftedTerm Term) (Action NonTerm)))
              (case acc
                [(left v) (left v)]
                [(right dict)
                 (match-define (tuple2 term action) at)
                 (case (dict-ref dict term)
                   [(nothing) (right (dict-add dict term action))]
                   [(just existing-action)
                    (case ((action-cmp non-term-cmp) action existing-action)
                      [(equal-to) acc]
                      [_
                       (left #"action conflict")])])]))
            action-tuples
            (ann
              (Either Bytes (Dict (LiftedTerm Term) (Action NonTerm)))
              (right (make-dict (lifted-term-cmp term-cmp))))))
        (case action-dict
          [(left v) (left v)]
          [(right dict)
           (right (tuple2 s dict))]))))


  (match-define non-terminals (set->list (dict-keys rules-dict)))

  (match-define goto-table : (Dict StateId (Dict NonTerm StateId))
    (dict-add-all
      (make-dict state-id-cmp)
      (unique-dict-map
        item-sets
        (lambda ([is : (ItemSet NonTerm Term)]
                 [s : StateId]) : (Tuple2 StateId (Dict NonTerm StateId))
          (match-define full-items (closure is rules-dict non-term-cmp term-cmp))
          (tuple2
            s
            (dict-add-all
              (make-dict non-term-cmp)
              (filter-map
                (lambda ([nt : NonTerm]) : (Maybe (Tuple2 NonTerm StateId))
                  (case (goto full-items (ann (Symbol NonTerm Term) (symbol/non-term nt))
                              non-term-cmp term-cmp)
                    [(nothing) (nothing)]
                    [(just next-state)
                     (case (unique-dict-ref item-sets next-state)
                       [(nothing) (panic #"Bad item set")]
                       [(just next-s)
                        (just (tuple2 nt next-s))])]))
                non-terminals)))))))

  (case (extract-rights action-map-entries)
    [(left v) (left v)]
    [(right action-map-entries)
     (match-define action-map : (Dict StateId (Dict (LiftedTerm Term) (Action NonTerm)))
       (dict-add-all (make-dict state-id-cmp) action-map-entries))

     (right (parser action-map goto-table semantic-action-table token->form token->terminal))]))

(define [NonTerm Term Form]
  (run-parser
    [parser : (Parser NonTerm Term Form)]
    [lexer : (l:Lexer l:Token)])
  : (Either Bytes Form)
  (case (lex-all lexer)
    [(left v) (left v)]
    [(right tokens)
     (match-define initial-state : (ParserState l:Token Form)
       (parser-state (varargs list (state-id 0)) (empty) tokens))
     (run-parser* initial-state parser)]))

(define [NonTerm Term Form]
  (run-parser*
    [state : (ParserState l:Token Form)]
    [parser : (Parser NonTerm Term Form)])
  : (Either Bytes Form)
  (case (step-parser-state state parser)
    [(left v) (left v)]
    [(right (left next-state))
     (run-parser* next-state parser)]
    [(right (right tree))
     (right tree)]))

(define [NonTerm Term Form]
  (step-parser-state
    [s : (ParserState l:Token Form)]
    [p : (Parser NonTerm Term Form)])
  : (Either Bytes (Either (ParserState l:Token Form) Form))
  (match-define (parser actions goto semantic-actions token->form token->terminal) p)
  (match-define (parser-state state-stack form-stack tokens) s)
  (match-define current-state : StateId
    (case state-stack
      [(cons s _) s]
      [(empty) (panic #"Cannot have empty state stack")]))
  (case (ann (Either Bytes (LiftedTerm Term))
             (case tokens
               [(empty) (right (end-of-terminals))]
               [(cons t _)
                (case (token->terminal t)
                  [(left v) (left v)]
                  [(right t) (right (lifted-term t))])]))
    [(left v) (left v)]
    [(right term-type)
     (case (dict-ref actions current-state)
       [(nothing) (left #"Found state with no actions")]
       [(just state-actions)
        (case (dict-ref state-actions term-type)
          [(nothing)
           (left (bytes-append (varargs list
             #"In state "
             (integer->decimal-bytes (state-id-v current-state))
             #", no action for token: "
             (case tokens
               [(empty) #"<END>"]
               [(cons token _) (l:token->debug token)]))))]
          [(just (shift next-state))
           (case tokens
             [(empty) (left #"Cannot shift when at end of terminals.")]
             [(cons token tokens)
              (right
                (left
                  (parser-state
                    (cons next-state state-stack)
                    (cons (token->form token) form-stack)
                    tokens)))])]
          [(just (accept))
           (case form-stack
             [(empty) (left #"Cannot have empty form stack at accept")]
             [(cons _ (cons _ _)) (left #"Cannot have long form stack at accept")]
             [(cons form (empty))
              (right (right form))])]
          [(just (reduce non-term rule num-symbols))
           (match-define (tuple2 sub-trees shortened-form-stack) (pop-n num-symbols form-stack))
           (match-define shortened-state-stack (drop num-symbols state-stack))
           (match-define top-state : StateId
             (case shortened-state-stack
               [(cons s _) s]
               [(empty) (panic #"Cannot have empty state stack")]))
           (case (dict-ref goto top-state)
             [(nothing) (left #"Found state with no goto")]
             [(just state-goto)
              (case (dict-ref state-goto non-term)
                [(nothing) (left #"No goto found for non-term")]
                [(just next-state)
                 (case (dict-ref semantic-actions (lifted-int rule))
                   [(nothing) (left #"No semantic action found")]
                   [(just semantic-action)
                    (case (semantic-action sub-trees)
                      [(left v)
                       (left (bytes-append (varargs list #"Bad semantic action: " v)))]
                      [(right new-form)
                       (right
                         (left
                           (parser-state
                             (cons next-state shortened-state-stack)
                             (cons new-form shortened-form-stack)
                             tokens)))])])])])])])]))


(define (lex-all [lexer : (l:Lexer l:Token)]) : (Either Bytes (List l:Token))
  (lex-all* lexer (empty)))

(define (lex-all* [lexer : (l:Lexer l:Token)] [acc : (List l:Token)])
  : (Either Bytes (List l:Token))
  (case (l:run-lexer lexer)
    [(l:end-of-input _) (right (reverse acc))]
    [(l:bad-input msg src)
     (left (bytes-append
             (varargs list
               (source-span->start-location-bytes src)
               #": " msg)))]
    [(l:lex-result (source-span-annotated t _) lexer) (lex-all* lexer (cons t acc))]))

;; Like split-at, but reverses the taken elements
(define [A] (pop-n [num : Int] [l : (List A)]) : (Tuple2 (List A) (List A))
  (pop-n* num l (empty)))

(define [A] (pop-n* [num : Int] [l : (List A)] [acc : (List A)]) : (Tuple2 (List A) (List A))
  (if (= num 0)
      (tuple2 acc l)
      (case l
        [(empty) (panic #"Cannot pop from empty list")]
        [(cons e l) (pop-n* (- num 1) l (cons e acc))])))
