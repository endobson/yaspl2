#:module (core-language source-to-register)
#:import {
  (core-language conversions lift-values)
  (core-language conversions lower-to-register)
  (core-language conversions resolve-imports)
  (core-language conversions resolve-vars)
  (core-language conversions type-check)
  (core-language source-language)
  (either)
  (prim)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects)
}
(export
  (#:types)
  (#:values compile-module)
  (#:patterns))
(types)

(define (compile-module [mod : Module]) : (Either Bytes CompiledModule)
  (match-define resolved-imports (resolve-imports mod))
  (case (type-check resolved-imports)
    [(left v) (left v)]
    [(right type-checked)
     (match-define resolved-vars (resolve-vars type-checked))
     (match-define lifted (lift-values resolved-vars))
     (match-define tlos (module-to-top-level-objects lifted))
     (match-define tlos (optimize-tlos tlos))
     (match-define sig (module->module-signature lifted))
     (right (compiled-module tlos sig))]))
