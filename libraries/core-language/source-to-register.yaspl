#:module (core-language source-to-register)
#:import {
  (bytes)
  (core-language source-language)
  (dict)
  (list)
  (module-signature)
  (prim)
  (prim-types)
  (top-level-name)
  (tuples)
  {(yaspl intermediate-to-register)
    {#:values
      mangle-top-level-name
    }
  }
  (yaspl top-level-objects)
}
(export
  (#:types)
  (#:values
     module-to-top-level-objects
     module->module-signature)
  (#:patterns))
(types)


(define (module-to-top-level-objects [mod : Module]) : (List TopLevelObject)
  (match-define (module mod-name definitions) mod)
  (map
    (lambda ([def : Definition]) : TopLevelObject
      (match-define (function-definition name _params _statements) def)
      (bytes-tlo
        (mangle-top-level-name (top-level-name mod-name name))
        #"core-function"))
    definitions))

(define (module->module-signature [mod : Module]) : ModuleSignature
  (match-define (module mod-name definitions) mod)
  (match-define values : (Dict Bytes ValueSignature)
    (dict-add-all
      (make-dict bytes-cmp)
      (map
        (lambda ([def : Definition])
          (match-define (function-definition name _params _statetments) def)
          (tuple2
            name
            (value-signature
              (bytes-type)
              (top-level-name mod-name name))))
        definitions)))


  (module-signature
    mod-name
    values
    (make-dict bytes-cmp) ;; Patterns
    (make-dict bytes-cmp) ;; Types
    (make-dict bytes-cmp) ;; Static Bindings
    (make-dict top-level-name-cmp) ;; Static Info
    ))
