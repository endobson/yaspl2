#:module (core-language source-to-register)
#:import {
  (core-language conversions lift-values)
  (core-language conversions lower-to-register)
  (core-language conversions process-structs)
  (core-language conversions resolve-imports)
  (core-language conversions resolve-types)
  (core-language conversions resolve-vars)
  (core-language conversions type-check)
  (core-language languages source-language)
  (either)
  (list)
  (module-signature)
  (prim)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects)
}
(export
  (#:types)
  (#:values compile-module)
  (#:patterns))
(types)

(define (compile-module [mod : Module] [sigs : (List ModuleSignature)]) : (Either Bytes CompiledModule)
  (case (resolve-imports mod sigs)
    [(left v) (left v)]
    [(right resolved-imports)
     (case (resolve-types resolved-imports)
       [(left v) (left v)]
       [(right resolved-types)
        (case (process-structs resolved-types)
          [(left v) (left v)]
          [(right processed-structs)
           (case (type-check processed-structs)
             [(left v) (left v)]
             [(right type-checked)
              (match-define resolved-vars (resolve-vars type-checked))
              (match-define lifted (lift-values resolved-vars))
              (match-define tlos (module-to-top-level-objects lifted))
              (match-define tlos (optimize-tlos tlos))
              (match-define sig (module->module-signature lifted))
              (right (compiled-module tlos sig))])])])]))
