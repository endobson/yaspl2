#:module (core-language compiler)
#:import {
  (bytes)
  (core-language core-parser)
  (core-language lexer)
  (core-language lr-parser)
  (core-language source-to-register)
  (either)
  (io)
  (list)
  (machine-code-writer)
  (maybe)
  (prim)
  (system-abi)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [abi : SystemAbi]
      [output-object-file : Bytes]
      [output-signature-file : Bytes]
      [module-file : Bytes])))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable specified???")]
    [(cons _ (empty))
     (left #"No abi supplied.")]
    [(cons _ (cons _ (empty)))
     (left #"No output object file name supplied.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No output signature file name supplied.")]
    [(cons _ (cons _ (cons _ (cons _ (empty)))))
     (left #"No module file name supplied.")]
    [(cons _ (cons _ (cons _ (cons _ (cons _ (cons _ _))))))
     (left #"Too many arguments supplied.")]
    [(cons _ (cons abi
                   (cons output-object-file
                         (cons output-signature-file
                               (cons module-file (empty))))))
     (case (parse-system-abi abi)
       [(nothing) (left (bytes-append (varargs list #"Unknown abi:" abi)))]
       [(just abi)
        (right (args abi output-object-file output-signature-file module-file))])]))


(define (run [input : (List Bytes)]) : (Maybe Bytes)
  (case (parse-args input)
    [(left v) (just v)]
    [(right (args abi output-object-file output-signature-file module-file))
     (match-define input-contents (sourced-bytes-from-file module-file))
     (match-define lexer (make-core-lexer input-contents))
     (case (make-module-parser)
       [(left v) (just v)]
       [(right parser)
        (case (lex-all lexer)
          [(left v) (just v)]
          [(right _)
           (case (run-parser parser lexer)
             [(left v) (just v)]
             [(right (form/module m))
              (match-define tlos (module-to-top-level-objects m))
              (match-define sig (module->module-signature m))
              (match-define tlos (optimize-tlos tlos))
              (begin
                (write-compiled-module (compiled-module tlos sig) abi output-object-file
                                       output-signature-file)
                (nothing))]
             [(right _)
              (just #"Parser didn't produce a module form")])])])]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (run (args->list args))
    [(just v)
     (begin
       (write-all-bytes v stderr)
       (newline stderr)
       1)]
    [(nothing)
     0]))
