#:module (core-language lr-parser-test)
#:import {
  (core-language lexer)
  (core-language lr-parser)
  (data lifted-primitives)
  (data source-location)
  (either)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (parses [input : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (match-define lexer (make-core-lexer (sourced-bytes (unnamed-source) input)))
    (case (run-parser lexer)
      [(left v) (just (failure v))]
      [(right _) (nothing)])))


(define (fails-parse [input : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (match-define lexer (make-core-lexer (sourced-bytes (unnamed-source) input)))
    (case (run-parser lexer)
      [(left v) (nothing)]
      [(right _) (just (failure #"Expected failed parse but parsing suceeded"))])))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"id" (parses #"x"))
      (test-case #"plus" (parses #"x+y"))
      (test-case #"plus-times" (parses #"x*y+z"))
      (test-case #"extra plus" (fails-parse #"x+"))
      )))

