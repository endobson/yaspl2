#:module (core-language lr-parser-test)
#:import {
  (bytes)
  (core-language lexer)
  (core-language lr-parser)
  (data lifted-primitives)
  (data ordering)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (numbers)
  (prim)
  (tuples)
  (yunit)
}
(export
  (#:values main))
(types
  (define-type TestNonTerm
    (non-term/E)
    (non-term/F)
    (non-term/T)
    (non-term/Type)
    (non-term/Statement)
    (non-term/Statements))
  (define-type TestTerm
    (term/punctuation [p : Punctuation])
    (term/language-keyword [v : Bytes])
    (term/id)
    (term/number))

  (define-type BinOp
    (op/plus)
    (op/minus)
    (op/times)
    (op/divide))

  (define-type Statement
    (local-variable-statement [t : Type] [v : Bytes] [e : Expr])
    (assignment-statement [v : Bytes] [e : Expr])
    (while-statement [c : Expr] [ss : (List Statement)]))
  (define-type Type
    (var-type [v : Bytes]))
  (define-type Expr
    (bin-op-expr [op : BinOp] [l : Expr] [r : Expr])
    (var-expr [var : Bytes])
    (int-expr [v : Int]))

  (define-type Form
    (form/statement [s : Statement])
    (form/statements [ss : (List Statement)])
    (form/expr [e : Expr])
    (form/type [t : Type])
    (form/token [t : Token])))

(define (test-term-cmp [l : TestTerm] [r : TestTerm]) : Ordering
  (case (tuple2 l r)
    [(tuple2 (term/punctuation l) (term/punctuation r))
     (punctuation-cmp l r)]
    [(tuple2 (term/punctuation _) _)
     (less-than)]
    [(tuple2 _ (term/punctuation _))
     (greater-than)]
    [(tuple2 (term/language-keyword l) (term/language-keyword r))
     (bytes-cmp l r)]
    [(tuple2 (term/language-keyword _) _)
     (less-than)]
    [(tuple2 _ (term/language-keyword _))
     (greater-than)]
    [(tuple2 (term/id) (term/id))
     (equal-to)]
    [(tuple2 (term/id) _)
     (less-than)]
    [(tuple2 _ (term/id))
     (greater-than)]
    [(tuple2 (term/number) (term/number))
     (equal-to)]))

(define (test-non-term-cmp [a : TestNonTerm] [b : TestNonTerm]) : Ordering
  (match-define convert
    (lambda ([v : TestNonTerm])
      (case v
        [(non-term/E) 0]
        [(non-term/F) 1]
        [(non-term/T) 2]
        [(non-term/Type) 3]
        [(non-term/Statement) 4]
        [(non-term/Statements) 5])))
  (int-cmp (convert a) (convert b)))


(define (token->terminal [token : Token]) : (Either Bytes TestTerm)
  (case token
    [(punctuation-token p) (right (term/punctuation p))]
    [(symbol-token _) (right (term/id))]
    [(decimal-number-token _) (right (term/number))]
    [_ (left #"Bad token type")]))

(define (test-production-rules) : (List (ProductionRule TestNonTerm TestTerm Form))
  (match-define E* (non-term/E))
  (match-define F* (non-term/F))
  (match-define T* (non-term/T))
  (match-define Type* (non-term/Type))
  (match-define S* (non-term/Statement))
  (match-define Ss* (non-term/Statements))

  (match-define symbol/term
    (lambda ([x : TestTerm]) : (Symbol TestNonTerm TestTerm)
      (symbol/term x)))
  (match-define symbol/non-term
    (lambda ([x : TestNonTerm]) : (Symbol TestNonTerm TestTerm)
      (symbol/non-term x)))

  (match-define E (symbol/non-term (non-term/E)))
  (match-define F (symbol/non-term (non-term/F)))
  (match-define T (symbol/non-term (non-term/T)))
  (match-define Type (symbol/non-term (non-term/Type)))
  (match-define S (symbol/non-term (non-term/Statement)))
  (match-define Ss (symbol/non-term (non-term/Statements)))
  (match-define + (symbol/term (term/punctuation (punct/plus))))
  (match-define - (symbol/term (term/punctuation (punct/minus))))
  (match-define * (symbol/term (term/punctuation (punct/multiplication))))
  (match-define / (symbol/term (term/punctuation (punct/division))))
  (match-define paren-< (symbol/term (term/punctuation (punct/left-paren))))
  (match-define >-paren (symbol/term (term/punctuation (punct/right-paren))))
  (match-define brace-< (symbol/term (term/punctuation (punct/left-brace))))
  (match-define >-brace (symbol/term (term/punctuation (punct/right-brace))))
  (match-define := (symbol/term (term/punctuation (punct/assignment))))
  (match-define !  (symbol/term (term/punctuation (punct/bang))))
  (match-define while (symbol/term (term/language-keyword #"while")))
  (match-define id (symbol/term (term/id)))
  (match-define num (symbol/term (term/number)))

  (match-define bin-op*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons (form/expr l) (cons (form/token t) (cons (form/expr r) (empty))))
         (match-define op : BinOp
           (case t
             [(punctuation-token (punct/plus)) (op/plus)]
             [(punctuation-token (punct/minus)) (op/minus)]
             [(punctuation-token (punct/division)) (op/divide)]
             [(punctuation-token (punct/multiplication)) (op/times)]
             [_ (panic #"Bad bin op token")]))
         (form/expr (bin-op-expr op l r))]
        [_ (panic #"Bad forms for bin-op")])))

  (match-define identity*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons f (empty))
         f]
        [_ (panic #"Bad forms for identity")])))

  (match-define parens*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons _lparen (cons f (cons _rparen (empty))))
         f]
        [_ (panic #"Bad forms for parens")])))

  (match-define var*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons (form/token (symbol-token v)) (empty))
         (form/expr (var-expr v))]
        [_ (panic #"Bad forms for identifier")])))

  (match-define num*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons (form/token (decimal-number-token v)) (empty))
         (case (decimal-bytes->integer v)
           [(nothing) (panic #"Bad decimal number token")]
           [(just (lifted-int v)) (form/expr (int-expr v))])]
        [_ (panic #"Bad forms for identifier")])))

  (match-define assign*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons (form/token (symbol-token v)) (cons _:= (cons (form/expr e) (cons _! (empty)))))
         (form/statement (assignment-statement v e))]
        [_ (panic #"Bad forms for identifier")])))

  (match-define local-variable*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons (form/type ty)
               (cons (form/token (symbol-token v))
                     (cons _:= (cons (form/expr e) (cons _! (empty))))))
         (form/statement (local-variable-statement ty v e))]
        [_ (panic #"Bad forms for identifier")])))


  (match-define while*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons _while (cons _< (cons (form/expr e) (cons _>
          (cons _< (cons (form/statements ss) (cons _> (empty))))))))
         (form/statement (while-statement e ss))]
        [_ (panic #"Bad forms for while statement")])))


  (match-define statements*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(empty)
         (form/statements (empty))]
        [(cons (form/statement s) (cons (form/statements ss) (empty)))
         (form/statements (cons s ss))]
        [_ (panic #"Bad forms for statements")])))

  (match-define var-type*
    (lambda ([forms : (List Form)]) : Form
      (case forms
        [(cons (form/token (symbol-token v)) (empty))
         (form/type (var-type v))]
        [_ (panic #"Bad forms for variable type")])))

  (varargs list
    (production-rule E* 1 (varargs list E + T) bin-op*)
    (production-rule E* 2 (varargs list E - T) bin-op*)
    (production-rule E* 3 (varargs list T) identity*)
    (production-rule T* 4 (varargs list T * F) bin-op*)
    (production-rule T* 5 (varargs list T / F) bin-op*)
    (production-rule T* 6 (varargs list F) identity*)
    (production-rule F* 7 (varargs list paren-< E >-paren) parens*)
    (production-rule F* 8 (varargs list id) var*)
    (production-rule F* 9 (varargs list num) num*)
    (production-rule S* 10 (varargs list id := E !) assign*)
    (production-rule S* 11 (varargs list Type id := E !) local-variable*)
    (production-rule S* 12 (varargs list while paren-< E >-paren brace-< Ss >-brace) while*)
    (production-rule Ss* 13 (empty) statements*)
    (production-rule Ss* 14 (varargs list S Ss) statements*)
    (production-rule Type* 15 (varargs list id) var-type*)

  ))

(define (eval-statements [ss : (List Statement)] [env : (Dict Bytes LiftedInt)])
  : (Either Bytes (Dict Bytes LiftedInt))
  (case ss
    [(empty) (right env)]
    [(cons s ss)
     (case (eval-statement s env)
       [(left v) (left v)]
       [(right env)
        (eval-statements ss env)])]))

(define (eval-statement [s : Statement] [env : (Dict Bytes LiftedInt)])
  : (Either Bytes (Dict Bytes LiftedInt))
  (case s
    [(local-variable-statement _ id e)
     (case (eval-expr e env)
       [(left v) (left v)]
       [(right v)
        (case (dict-maybe-add env id v)
          [(nothing) (left #"Variable already defined")]
          [(just env) (right env)])])]
    [(assignment-statement id e)
     (case (eval-expr e env)
       [(left v) (left v)]
       [(right v)
        (case (dict-maybe-replace env id v)
          [(nothing) (left #"Variable not already defined")]
          [(just env) (right env)])])]
    [(while-statement _e _ss)
     (left #"While not implemented")]))


(define (eval-expr [expr : Expr] [env : (Dict Bytes LiftedInt)]) : (Either Bytes LiftedInt)
  (case expr
    [(var-expr v)
     (case (dict-ref env v)
       [(nothing) (left #"Unbound variable")]
       [(just v) (right v)])]
    [(int-expr v) (right (lifted-int v))]
    [(bin-op-expr op l r)
     (case (eval-expr l env)
       [(left v) (left v)]
       [(right (lifted-int l))
        (case (eval-expr r env)
          [(left v) (left v)]
          [(right (lifted-int r))
           (case op
             [(op/plus) (right (lifted-int (+ l r)))]
             [(op/minus) (right (lifted-int (- l r)))]
             [(op/times) (right (lifted-int (* l r)))]
             [(op/divide) (right (lifted-int (quotient l r)))])])])]))

(define (make-test-expr-parser) : (Either Bytes (Parser TestNonTerm TestTerm Form))
  (build-parser (grammar (non-term/E)
                         (test-production-rules)
                         test-non-term-cmp test-term-cmp)
                form/token
                token->terminal))

(define (make-test-statements-parser) : (Either Bytes (Parser TestNonTerm TestTerm Form))
  (build-parser (grammar (non-term/Statements)
                         (test-production-rules)
                         test-non-term-cmp test-term-cmp)
                form/token
                token->terminal))


(define (parses [input : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (match-define lexer (make-core-lexer (sourced-bytes (unnamed-source) input)))
    (case (make-test-expr-parser)
      [(left v) (just (failure v))]
      [(right parser)
       (case (run-parser parser lexer)
        [(left v) (just (failure v))]
        [(right _) (nothing)])])))


(define (evals [input : Bytes] [expected-val : Int]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (match-define lexer (make-core-lexer (sourced-bytes (unnamed-source) input)))
    (case (make-test-expr-parser)
      [(left v) (just (failure v))]
      [(right parser)
       (case (run-parser parser lexer)
        [(left v) (just (failure v))]
        [(right (form/expr e))
         (match-define env : (Dict Bytes LiftedInt) (make-dict bytes-cmp))
         (case (eval-expr e env)
           [(left v) (just (failure v))]
           [(right (lifted-int actual-val))
            (expect-equal/int actual-val expected-val)])]
        [(right _)
         (just (failure #"Expected expression"))])])))

(define (statements-evals
          [statements-input : Bytes]
          [expr-input : Bytes]
          [expected-val : Int]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (match-define statements-lexer (make-core-lexer (sourced-bytes (unnamed-source) statements-input)))
    (match-define expr-lexer (make-core-lexer (sourced-bytes (unnamed-source) expr-input)))
    (case (make-test-statements-parser)
      [(left v) (just (failure v))]
      [(right statement-parser)
       (case (make-test-expr-parser)
         [(left v) (just (failure v))]
         [(right expr-parser)
          (case (run-parser statement-parser statements-lexer)
           [(left v) (just (failure v))]
           [(right (form/statements ss))
            (case (run-parser expr-parser expr-lexer)
              [(left v) (just (failure v))]
              [(right (form/expr e))
               (match-define env : (Dict Bytes LiftedInt) (make-dict bytes-cmp))
               (case (eval-statements ss env)
                 [(left v) (just (failure v))]
                 [(right env)
                  (case (eval-expr e env)
                    [(left v) (just (failure v))]
                    [(right (lifted-int actual-val))
                     (expect-equal/int actual-val expected-val)])])]
              [(right _)
               (just (failure #"Expected expression"))])]
           [(right _)
            (just (failure #"Expected expression"))])])])))




(define (fails-parse [input : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (match-define lexer (make-core-lexer (sourced-bytes (unnamed-source) input)))
    (case (make-test-expr-parser)
      [(left v) (just (failure v))]
      [(right parser)
       (case (run-parser parser lexer)
         [(left _v) (nothing)]
         [(right _) (just (failure #"Expected failed parse but parsing suceeded"))])])))

;(define (print-test-case) : (Maybe FailedAssertion)
;  (case (make-test-expr-parser)
;    [(left v) (just (failure v))]
;    [(right parser)
;     (match-define action-map (parser-action parser))
;     (match-define output : (List Bytes)
;       (interleave
;         (dict-map
;           action-map
;           (lambda ([s : StateId] [d : (Dict (LiftedTerm TestTerm) (Action TestNonTerm))])
;             (bytes-append
;               (varargs list
;                 (integer->decimal-bytes (state-id-v s))
;                 #": "
;                 (bytes-append
;                   (interleave
;                     (dict-map
;                       d
;                       (lambda ([t : (LiftedTerm TestTerm)]
;                                [act : (Action TestNonTerm)])
;                         (bytes-append
;                           (varargs list
;                             (print-lifted-term t)
;                             (case act
;                               [(accept) #":<accept>"]
;                               [(reduce _ _ _) #":<reduce>"]
;                               [(shift (state-id s))
;                                (bytes-append
;                                  (varargs list
;                                    #":<s " (integer->decimal-bytes s) #">"))])))))
;                     #" "))
;                 ))))
;         #"\n"))
;     (just (failure (bytes-append (cons #"\n" output))))]))


;(define (print-first-test-case) : (Maybe FailedAssertion)
;  (match-define rules (test-production-rules))
;  (match-define rules-dict (production-rules-dict rules test-non-term-cmp))
;  (match-define empty-table (build-empty-table rules-dict test-non-term-cmp))
;  (match-define first-table (build-first-table rules-dict empty-table test-non-term-cmp
;                                               test-term-cmp))
;
;
;  (match-define output
;    (dict-map
;      first-table
;      (lambda ([v : TestNonTerm] [s : (Set TestTerm)])
;        (bytes-append
;          (varargs list
;            (print-non-term v)
;            #": "
;            (bytes-append (interleave (map print-term (set->list s)) #" "))
;            #"\n")))))
;
;  (just (failure (bytes-append (cons #"\n" output)))))


;(define (print-follow-test-case) : (Maybe FailedAssertion)
;  (match-define rules (test-production-rules))
;  (match-define rules-dict (production-rules-dict rules test-non-term-cmp))
;  (match-define empty-table (build-empty-table rules-dict test-non-term-cmp))
;  (match-define first-table (build-first-table rules-dict empty-table test-non-term-cmp test-term-cmp))
;  (match-define follow-table (build-follow-table (non-term/E)
;                                                 rules-dict empty-table first-table test-non-term-cmp
;                                                 test-term-cmp))
;
;
;  (match-define output
;    (dict-map
;      follow-table
;      (lambda ([v : TestNonTerm] [s : (Set (LiftedTerm TestTerm))])
;        (bytes-append
;          (varargs list
;            (print-non-term v)
;            #": "
;            (bytes-append (interleave (map print-lifted-term (set->list s)) #" "))
;            #"\n")))))
;
;  (just (failure (bytes-append (cons #"\n" output)))))


;(define (print-non-term [nt : TestNonTerm]) : Bytes
;  (case nt
;    [(non-term/E) #"E"]
;    [(non-term/F) #"F"]
;    [(non-term/T) #"T"]
;    [(non-term/Type) #"Ty"]
;    [(non-term/Statement) #"S"]
;    [(non-term/Statements) #"Ss"]))

;(define (print-lifted-term [t : (LiftedTerm TestTerm)]) : Bytes
;  (case t
;    [(end-of-terminals) #"$"]
;    [(lifted-term t) (print-term t)]))
;
;(define (print-term [t : TestTerm]) : Bytes
;  (case t
;    [(term/plus) #"+"]
;    [(term/minus) #"-"]
;    [(term/times) #"*"]
;    [(term/divide) #"/"]
;    [(term/left-paren) #"("]
;    [(term/right-paren) #")"]
;    [(term/bang) #"!"]
;    [(term/assignment) #":="]
;    [(term/id) #"id"]
;    [(term/number) #"num"]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"id" (parses #"x"))
      (test-case #"number" (parses #"1"))
      (test-case #"plus" (parses #"x+y"))
      (test-case #"plus-minus" (parses #"x+y - z+x"))
      (test-case #"plus-times" (parses #"x*y+z"))
      (test-case #"parens" (parses #"(x+y)*z"))
      (test-case #"extra plus" (fails-parse #"x+"))
      (test-case #"unbalanced parens 1" (fails-parse #"(x+y"))
      (test-case #"unbalanced parens 2" (fails-parse #"(x+y))"))
      (test-case #"eval number" (evals #"123" 123))
      (test-case #"eval plus" (evals #"2+5" 7))
      (test-case #"eval times" (evals #"2*5" 10))
      (test-case #"eval minus" (evals #"5-2" 3))
      (test-case #"eval divide" (evals #"6/2" 3))
      (test-case #"eval order 1" (evals #"1+2*3" 7))
      (test-case #"eval order 2" (evals #"(1+2)*3" 9))
      (test-case #"eval order 3" (evals #"1+4*3/2-5" 2))
      (test-case #"eval statement 1" (statements-evals #"" #"3" 3))
      (test-case #"eval statement 2" (statements-evals #"int x:=1!" #"x" 1))
      (test-case #"eval statement 3" (statements-evals #"int x:=2! int y:=x!" #"y" 2))
      (test-case #"eval statement 3" (statements-evals #"int x:=2! x:=x+x!" #"x" 4))
      )))
