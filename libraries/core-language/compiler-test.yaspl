#:module (core-language core-parser-test)
#:import {
  (core-language core-parser)
  (core-language lexer)
  (core-language lr-parser)
  (core-language source-to-register)
  (data source-location)
  (either)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (compile-mod-string [input : Bytes]) : (Maybe Bytes)
  (case (make-module-parser)
    [(left v) (just v)]
    [(right parser)
     (case (run-parser parser (make-core-lexer (sourced-bytes (unnamed-source) input)))
       [(left v) (just v)]
       [(right (form/module mod))
        (case (compile-module mod (empty))
          [(left v) (just v)]
          [(right _) (nothing)])]
       [(right _)
        (just #"Bad module form")])]))

(define (test-case1) : (Maybe FailedAssertion)
  ((expect-equal (eq/maybe (eq/bytes)))
   (compile-mod-string
     #"#:module (foo) #:define_function U64 f() {} #:define_function U64 f() {}")
   (just #"Duplicate function name")))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"Duplicate function names" test-case1)
      )))
