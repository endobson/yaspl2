#:module (core_language examples fill_stack)

#:define_function
fun_none() { }

#:define_function
fun_only(U64 arg) {
  return arg;
}

#:define_function
fun_first(U64 arg_a, U64 arg_b) {
  return arg_a;
}

#:define_function
fun_i(U64 arg) {
  return arg;
}


// #:define_function
// int64 yprim_fill_stack_inner(int64[]* out_array_raw, int64[]* out_metadata_raw,
//                              undet_ptr initial_base_pointer) {
//   int64 arr_size := out_array_raw->[1];
//   undet_ptr last_base_pointer := initial_base_pointer;
//   undet_ptr next_base_pointer := initial_base_pointer;
//   while (next_base_pointer != nullptr) {
//     last_base_pointer := next_base_pointer;
//     next_base_pointer := *next_base_pointer;
//   }
//   int64 stack_size := 1 + (as<int64>(last_base_pointer) - as<int64>(initial_base_pointer)) / 8;
//
//   int64 index := 0;
//   while (index < arr_size && index < stack_size) {
//     out-array-raw->&[index+2] <- initial_base_pointer[index];
//     index := index + 1;
//   }
//   out_metadata_raw->&[2] <- as<int64>(inital_base_pointer);
//   return index;
// }
