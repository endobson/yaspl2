#:module (core_language examples fill_stack)

#:define_function
fun_none() { }

#:define_function
fun_only(U64 arg) {
  return arg;
}

#:define_function
fun_first(U64 arg_a, U64 arg_b) {
  return arg_a;
}

#:define_function
fun_greater(U64 arg1, U64 arg2) {
  if (arg1 > arg2) {
    return arg1;
  } else {
    return arg2;
  }
}

#:define_function
fun_greater_local(U64 arg1, U64 arg2) {
  U64 max := arg1;
  if (arg2 > arg1) {
    max := arg2;
  }
  return max;
}

#:define_function
fun_if(U64 arg1, U64 arg2) {
  if (arg1 < arg2) {
    return arg2;
  }
}

#:define_function
fun_else(U64 arg1, U64 arg2) {
  if (arg1) {
    return arg2;
  } else {
    return arg1;
  }
}

#:define_function
fun_elseif1(U64 arg1, U64 arg2) {
  if (arg1) {
    return arg2;
  } else if (arg2) {
    return arg2;
  }
}

#:define_function
fun_elseif2(U64 arg1, U64 arg2) {
  if (arg1) {
    return arg2;
  } else if (arg1) {
    return arg1;
  } else if (arg1) {
    return arg1;
  } else {
    return arg1;
  }
}

#:define_function
fun_untag(U64 tagged_descriptor) {
  return as<U64>((0 - 8) & tagged_descriptor);
}

#:define_function
fun_triangle(U64 v) {
  U64 sum := 0;
  while (v != 0) {
    sum := sum + v;
    v := v - 1;
  }
  return sum;
}

#:define_function
yprim_fill_stack_inner(U64[]* out_array_raw, U64[]* out_metadata_raw,
                       U64 initial_base_pointer) {
   int64 arr_size := out_array_raw->[1];
   U64 last_base_pointer := initial_base_pointer;
   U64 next_base_pointer := initial_base_pointer;
   while (next_base_pointer != 0) {
     last_base_pointer := next_base_pointer;
     next_base_pointer := *next_base_pointer;
   }
   int64 stack_size := 1 + (as<int64>(last_base_pointer) - as<int64>(initial_base_pointer)) / 8;
   int64 index := 0;
   while ((index < arr_size) && (index < stack_size)) {
//     out-array-raw->&[index+2] <- initial_base_pointer[index];
     index := index + 1;
   }
//   out_metadata_raw->&[2] <- as<int64>(inital_base_pointer);
   return index;
}
