#:module (core-language examples fill-stack-test)
#:import {
  (core_language examples fill_stack)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (test-case1) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_only (u64 7)))
         (u64->s64 (fun_first (u64 7) (u64 8))))
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case2) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater (u64 7) (u64 8))) 8)
      (nothing)
      (just (failure #"Values don't match"))))
(define (test-case3) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater (u64 8) (u64 7))) 8)
      (nothing)
      (just (failure #"Values don't match"))))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"test-case1" test-case1)
      (test-case #"test-case2" test-case2)
      (test-case #"test-case3" test-case3)
      )))
