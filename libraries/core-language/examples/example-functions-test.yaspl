#:module (core-language examples fill-stack-test)
#:import {
  (core_language examples example_functions)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (test-case1) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_only (u64 7)))
         (u64->s64 (fun_first (u64 7) (u64 8))))
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case2) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater (u64 7) (u64 8))) 8)
      (nothing)
      (just (failure #"Values don't match"))))
(define (test-case3) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater (u64 8) (u64 7))) 8)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case4) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater_local (u64 7) (u64 8))) 8)
      (nothing)
      (just (failure #"Values don't match"))))
(define (test-case5) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater_local (u64 8) (u64 7))) 8)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case6) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_triangle (u64 10))) 55)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case7) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_bytes_size #"hello")) 5)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case8) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_fact (u64 5))) 120)
      (nothing)
      (just (failure #"Values don't match"))))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"test-case1" test-case1)
      (test-case #"test-case2" test-case2)
      (test-case #"test-case3" test-case3)
      (test-case #"test-case4" test-case4)
      (test-case #"test-case5" test-case5)
      (test-case #"test-case6" test-case6)
      (test-case #"test-case7" test-case7)
      (test-case #"test-case8" test-case8)
      )))
