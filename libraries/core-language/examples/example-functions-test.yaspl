#:module (core-language examples example-functions-test)
#:import {
  (bytes)
  (core_language examples example_functions)
  (list)
  (maybe)
  (prim)
  (yunit)
}
(export
  (#:values main))
(types)

(define (test-case1) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_only (u64 7)))
         (u64->s64 (fun_first (u64 7) (u64 8))))
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case2) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater (u64 7) (u64 8))) 8)
      (nothing)
      (just (failure #"Values don't match"))))
(define (test-case3) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater (u64 8) (u64 7))) 8)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case4) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater_local (u64 7) (u64 8))) 8)
      (nothing)
      (just (failure #"Values don't match"))))
(define (test-case5) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_greater_local (u64 8) (u64 7))) 8)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case6) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_triangle (u64 10))) 55)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case7) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_bytes_size #"hello")) 5)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case8) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_fact (u64 5))) 120)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case9) : (Maybe FailedAssertion)
  (if (= (u64->s64 (fun_bytes_const (u64 5))) 73)
      (nothing)
      (just (failure #"Values don't match"))))

(define (test-case10) : (Maybe FailedAssertion)
  (expect-equal/int
    (u64->s64 (fun_bytes_const2))
    99))

(define (test-case11) : (Maybe FailedAssertion)
  (match-define b (make-bytes/fill 10 (u8 #x41)))
  (begin
    (bytes-set! b 0 (u8 #x30))
    (bytes-set! b 1 (u8 #x31))
    (bytes-set! b 2 (u8 #x32))
    (bytes-set! b 3 (u8 #x33))
    (bytes-set! b 4 (u8 #x34))
    (bytes-set! b 5 (u8 #x35))
    (bytes-set! b 6 (u8 #x36))
    (bytes-set! b 7 (u8 #x37))
    (bytes-set! b 8 (u8 #x38))
    (bytes-set! b 9 (u8 #x39))
    (case (fun_mutate_bytes b)
      [_
       (expect-equal/bytes
         b
         #"\x31\x31\x32\x33\x34\x35\x36\x37\x38\x39")])))

(define (test-case12) : (Maybe FailedAssertion)
  (expect-equal/int
    (u64->s64 (fun_use_posn))
    100))

(define (test-case13) : (Maybe FailedAssertion)
  (match-define b (make-bytes/fill 8 (u8 #x30)))
  (begin
    (case (fun_seq_calls b)
      [_
       (expect-equal/bytes b #"21000000")])))

(define (test-case14) : (Maybe FailedAssertion)
  (expect-equal/int
    (u8->s64 (fun_nested_struct))
    50))


(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"test-case1" test-case1)
      (test-case #"test-case2" test-case2)
      (test-case #"test-case3" test-case3)
      (test-case #"test-case4" test-case4)
      (test-case #"test-case5" test-case5)
      (test-case #"test-case6" test-case6)
      (test-case #"test-case7" test-case7)
      (test-case #"test-case8" test-case8)
      (test-case #"test-case9" test-case9)
      (test-case #"test-case10" test-case10)
      (test-case #"test-case11" test-case11)
      (test-case #"test-case12" test-case12)
      (test-case #"test-case13" test-case13)
      (test-case #"test-case14" test-case14)
      )))
