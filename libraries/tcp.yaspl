#:module (tcp)
#:import {
  (ip)
  (panic)
  (prim)
  (system-abi)
}
(export
  (#:types TcpAddress)
  (#:values tcp-address tcp-socket-bind tcp-socket-accept tcp-socket-set-reuse-address)
  (#:patterns accepted-socket))
(types
  (define-type TcpAddress
    (tcp-address [ip : Ipv4Address] [port : Int]))
  (define-type AcceptedSocket
    (accepted-socket [s : Socket] [addr : TcpAddress])))

(define (make-sock-addr [address : TcpAddress]) : Bytes
  (let ([bytes (make-bytes 16)])
    (case address
      [(tcp-address ip-addr port)
       (begin
         (case (current-system-abi)
           [(osx-abi)
            ;; OSX is an 1-byte length, followed by a 1-byte family
            (begin
              (bytes-set! bytes 0 (u8 0))
              (bytes-set! bytes 1 (u8 2)))] ;; Family: AF_INET
           [(linux-abi)
            (begin
              (bytes-set! bytes 0 (u8 2)) ;; Family: AF_INET
              (bytes-set! bytes 1 (u8 0)))]
           [(yasplos-abi)
            (panic/void #"No support for networking.")])
         ;; Port split over two bytes
         (bytes-set! bytes 2 (u8 (quotient port 256)))
         (bytes-set! bytes 3 (u8 (remainder port 256)))
         ;; IP addr = 0.0.0.0
         (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
         (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
         (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
         (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
         ;; ZERO
         (bytes-set! bytes  8 (u8 0))
         (bytes-set! bytes  9 (u8 0))
         (bytes-set! bytes 10 (u8 0))
         (bytes-set! bytes 11 (u8 0))
         (bytes-set! bytes 12 (u8 0))
         (bytes-set! bytes 13 (u8 0))
         (bytes-set! bytes 14 (u8 0))
         (bytes-set! bytes 15 (u8 0))
         bytes)])))

(define (tcp-socket-bind [sock : Socket] [address : TcpAddress]) : Void
  (let ([sock-addr (make-sock-addr address)])
    (bind sock sock-addr (bytes-length sock-addr))))

(define (tcp-socket-set-reuse-address [sock : Socket] [v : Boolean]) : Void
  (match-define abi (current-system-abi))
  (match-define reuse-addr
    (case abi
      [(osx-abi) 4]
      [(linux-abi) 2]
      [(yasplos-abi) (panic/int #"No networking support")]))
  (match-define socket-layer
    (case abi
      [(osx-abi) 65535]
      [(linux-abi) 1]
      [(yasplos-abi) (panic/int #"No networking support")]))
  (let ([buf (make-bytes 4)])
    (begin
      (bytes-set! buf 0 (u8 (if v 255 0)))
      (setsockopt sock socket-layer reuse-addr buf (bytes-length buf)))))

(define (tcp-socket-accept [sock : Socket]) : AcceptedSocket
  (let ([sock-addr (make-bytes 16)])
    (let ([len-buf (make-bytes 4)])
      (begin
        (bytes-set! len-buf 0 (u8 (bytes-length sock-addr)))
        (let ([new-sock (accept sock sock-addr len-buf)])
          (let ([ip (ipv4-address
                      (bytes-ref sock-addr 4)
                      (bytes-ref sock-addr 5)
                      (bytes-ref sock-addr 6)
                      (bytes-ref sock-addr 7))])
            (let ([port (+ (* 256 (u8->s64 (bytes-ref sock-addr 2))) (u8->s64 (bytes-ref sock-addr 3)))])
              (accepted-socket new-sock (tcp-address ip port)))))))))
