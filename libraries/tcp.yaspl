(module tcp
  (import
    (ip
      #:types (Ipv4Address)
      #:values (ipv4-address
                ipv4-address-octet1 ipv4-address-octet2 ipv4-address-octet3 ipv4-address-octet4)
      #:patterns ())
    (prim
      #:types (Bytes Void Socket Boolean Int)
      #:values (bind accept setsockopt make-bytes bytes-set! quotient
                remainder bytes-length + * bytes-ref u8)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns ()))
  (export
    #:types (TcpAddress)
    #:values (tcp-address tcp-socket-bind tcp-socket-accept tcp-socket-set-reuse-address)
    #:patterns ())
  (types
    (define-type TcpAddress
      (tcp-address [ip : Ipv4Address] [port : Int])))

  (define (make-sock-addr [address : TcpAddress]) : Bytes
    (let ([bytes (make-bytes 16)])
      (case address
        [(tcp-address ip-addr port)
         (begin
           (bytes-set! bytes 0 (u8 0))
           (bytes-set! bytes 1 (u8 2)) ;; Family: AF_INET
           ;; Port 1026
           (bytes-set! bytes 2 (u8 (quotient port 256)))
           (bytes-set! bytes 3 (u8 (remainder port 256)))
           ;; IP addr = 0.0.0.0
           (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
           (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
           (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
           (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
           ;; ZERO
           (bytes-set! bytes  8 (u8 0))
           (bytes-set! bytes  9 (u8 0))
           (bytes-set! bytes 10 (u8 0))
           (bytes-set! bytes 11 (u8 0))
           (bytes-set! bytes 12 (u8 0))
           (bytes-set! bytes 13 (u8 0))
           (bytes-set! bytes 14 (u8 0))
           (bytes-set! bytes 15 (u8 0))
           bytes)])))

  (define (tcp-socket-bind [sock : Socket] [address : TcpAddress]) : Void
    (let ([sock-addr (make-sock-addr address)])
      (bind sock sock-addr (bytes-length sock-addr))))

  (define (tcp-socket-set-reuse-address [sock : Socket] [v : Boolean]) : Void
    (let ([buf (make-bytes 4)])
      (let ([reuse-addr 4])
        (let ([socket-layer 65535])
          (begin
            (bytes-set! buf 0 (u8 (if v 255 0)))
            (setsockopt sock socket-layer reuse-addr buf (bytes-length buf)))))))

  (define (tcp-socket-accept [sock : Socket]) : (Tuple2 Socket TcpAddress)
    (let ([sock-addr (make-bytes 16)])
      (let ([len-buf (make-bytes 4)])
        (begin
          (bytes-set! len-buf 0 (u8 (bytes-length sock-addr)))
          (let ([new-sock (accept sock sock-addr len-buf)])
            (let ([ip (ipv4-address
                        (u8 (bytes-ref sock-addr 4))
                        (u8 (bytes-ref sock-addr 5))
                        (u8 (bytes-ref sock-addr 6))
                        (u8 (bytes-ref sock-addr 7)))])
              (let ([port (+ (* 256 (bytes-ref sock-addr 2)) (bytes-ref sock-addr 3))])
                (tuple2 new-sock (tcp-address ip port))))))))))
