#:module (free-variables)
#:import {
  (bytes)
  (dict)
  (list)
  (maybe)
  (prim)
  (set)
  (yaspl languages source-language)
}
(export
  (#:types)
  (#:values free-variables/module free-types/module free-patterns/module free-statics/module
            free-variables/function-definition free-types/function-definition
            free-patterns/function-definition free-statics/function-definition
            free-types/type-definitions
            free-variables-by-function-definition)
  (#:patterns))
(types)

(define (free-variables-by-function-definition [mod : Module]) : (Dict Bytes (Set Bytes))
  (match-define (module _ _ _ (definitions _ _ _ functions _)) mod)
  (foldl
    (lambda ([def : FunctionDefinition] [acc : (Dict Bytes (Set Bytes))])
      (dict-add
        acc
        (function-definition-name* def)
        (set-add-all
          (make-set bytes-cmp)
          (map identifier-name (free-variables/function-definition def (make-set bytes-cmp) (empty))))))
    functions
    (ann (Dict Bytes (Set Bytes)) (make-dict bytes-cmp))))

(define (free-variables/module [mod : Module]) : (List Identifier)
  (match-define env (make-set bytes-cmp))
  (match-define (module _ _ _ (definitions _ _ instances functions _)) mod)
  (free-variables/instances instances env
    (free-variables/function-definitions functions env (empty))))

(define (free-variables/function-definition
          [def : FunctionDefinition]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (match-define (function-definition _ _ _ args _ body) def)
  (free-variables/block body (add-function-args-bindings args env) acc))


(define (free-variables/function-definitions
          [defs : (List FunctionDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (free-variables/function-definitions
       defs env (free-variables/function-definition def env acc))]))

(define (free-variables/instances
          [defs : (List TypeClassInstance)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons (type-class-instance _class _type methods) defs)
     (free-variables/instances defs env
       (free-variables/instance-methods methods env acc))]))

(define (free-variables/instance-methods
          [methods : (List TypeClassInstanceMethod)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case methods
    [(empty) acc]
    [(cons (type-class-instance-method _name impl) methods)
     (match-define (identifier v _) impl)
     (free-variables/instance-methods
       methods env
       (if (set-member? env v)
           acc
           (cons impl acc)))]))



(define (free-variables/block [block : Block] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (match-define (block defs body) block)
  (free-variables/block* defs body env acc))

(define (free-variables/block*
          [defs : (List BlockDefinition)]
          [final-expr : Expression]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) (free-variables/expr final-expr env acc)]
    [(cons (match-def pattern _ expr) defs)
     (free-variables/block*
       defs final-expr
       (add-pattern-bindings pattern env)
       (free-variables/expr expr env acc))]))

(define (free-variables/expr [expr : Expression] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case expr
    [(int-literal _ _) acc]
    [(bytes-literal _ _) acc]
    [(boolean-literal _ _) acc]
    [(annotated-expr _ expr _)
     (free-variables/expr expr env acc)]
    [(if-expr c t f _)
     (free-variables/list (cons c (cons t (cons f (empty)))) env acc)]
    [(cond-expr clauses final _)
     (free-variables/cond-clauses clauses env (free-variables/block final env acc))]
    [(begin-expr es e _)
     (free-variables/list (cons e es) env acc)]
    [(app-expr _ op args _)
     (free-variables/list (cons op args) env acc)]
    [(varargs-app-expr _ _ args _)
     (free-variables/list args env acc)]
    [(let-expr (identifier name _) expr body _)
     (free-variables/block body (set-add env name) (free-variables/expr expr env acc))]
    [(case-expr expr clauses _)
     (free-variables/case-clauses clauses env (free-variables/expr expr env acc))]
    [(lambda-expr args _ body _)
     (free-variables/block body (add-function-args-bindings args env) acc)]
    [(var-expr id)
     (match-define (identifier v _) id)
     (if (set-member? env v)
         acc
         (cons id acc))]))

(define (free-variables/list
          [exprs : (List Expression)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case exprs
    [(empty) acc]
    [(cons expr exprs)
     (free-variables/list exprs env (free-variables/expr expr env acc))]))

(define (free-variables/case-clauses
          [clauses : (List CaseClause)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case clauses
    [(empty) acc]
    [(cons (case-clause pattern body) clauses)
     (free-variables/case-clauses
       clauses env (free-variables/block body (add-pattern-bindings pattern env) acc))]))

(define (free-variables/cond-clauses
          [clauses : (List CondClause)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case clauses
    [(empty) acc]
    [(cons (cond-clause test body _) clauses)
     (free-variables/cond-clauses
       clauses env (free-variables/expr test env (free-variables/block body env acc)))]))

(define (add-function-args-bindings [args : (List FunctionArg)] [env : (Set Bytes)])
  : (Set Bytes)
  (case args
    [(empty) env]
    [(cons (function-arg pattern _type) args)
     (add-function-args-bindings args
       (add-pattern-bindings pattern env))]))

(define (add-pattern-bindings [p : Pattern] [env : (Set Bytes)]) : (Set Bytes)
  (case p
    [(bytes-pattern _ _) env]
    [(int-pattern _ _) env]
    [(ignore-pattern _) env]
    [(variable-pattern (identifier v _)) (set-add env v)]
    [(abstraction-pattern _ pats _) (add-pattern-bindings/list pats env)]))

(define (add-pattern-bindings/list [ps : (List Pattern)] [env : (Set Bytes)]) : (Set Bytes)
  (case ps
    [(empty) env]
    [(cons p ps) (add-pattern-bindings/list ps (add-pattern-bindings p env))]))

(define (free-types/module [mod : Module])
  : (List Identifier)
  (match-define env (make-set bytes-cmp))
  (match-define (module _ _ _ (definitions types type-classes instances functions _)) mod)
  (free-types/type-class-definitions type-classes env
    (free-types/type-class-instances instances env
      (free-types/type-definitions types env
        (free-types/function-definitions functions env (empty))))))

(define (free-types/function-definitions
          [defs : (List FunctionDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (free-types/function-definitions defs env
       (free-types/function-definition def env acc))]))

(define (free-types/function-definition
          [def : FunctionDefinition]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (match-define (function-definition _ type-vars constraints args result-type body) def)
  (match-define env (set-add-all env type-vars))
  (free-types/block body env
    (free-types/types constraints env
      (free-types/types (map function-arg-pre-type args) env
        (free-types/type result-type env acc)))))

(define (free-types/type-definitions
          [defs : (List TypeDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons (type-definition _name vars variants) defs)
     (free-types/type-definitions defs env
        (free-types/variants variants
                             (set-add-all
                               env
                               (case vars
                                 [(nothing) (empty)]
                                 [(just v) v]))
                             acc))]))


(define (free-types/variants
          [variants : (List VariantDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case variants
    [(empty) acc]
    [(cons (variant-definition _name fields) variants)
     (free-types/variants variants env
       (free-types/types
         (map variant-field-type fields) env acc))]))

(define (free-types/type-class-definitions
          [defs : (List TypeClassDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons (type-class-definition _name (identifier var _) methods) defs)
     (free-types/type-class-definitions defs env
       (free-types/type-class-methods
         methods
         (set-add env var)
         acc))]))

(define (free-types/type-class-methods
          [methods : (List TypeClassMethod)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case methods
    [(empty) acc]
    [(cons (type-class-method _name type) methods)
     (free-types/type-class-methods methods env
       (free-types/type type env acc))]))

(define (free-types/type-class-instances
          [defs : (List TypeClassInstance)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons (type-class-instance _name type-name _methods) defs)
     (match-define (identifier type-var _) type-name)
     (free-types/type-class-instances
       defs env
       (if (set-member? env type-var)
           acc
           (cons type-name acc)))]))


(define (free-types/expr [expr : Expression] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case expr
    [(int-literal _ _) acc]
    [(bytes-literal _ _) acc]
    [(boolean-literal _ _) acc]
    [(var-expr _) acc]
    [(if-expr c t f _)
     (free-types/exprs (cons c (cons t (cons f (empty)))) env acc)]
    [(cond-expr clauses final _)
     (free-types/exprs (map cond-clause-test clauses) env
                       (free-types/blocks (map cond-clause-body clauses) env
                                          (free-types/block final env acc)))]
    [(begin-expr es e _)
     (free-types/exprs (cons e es) env acc)]
    [(app-expr _ op args _)
     (free-types/exprs (cons op args) env acc)]
    [(varargs-app-expr _ _ args _)
     (free-types/exprs args env acc)]
    [(let-expr _name expr body _)
     (free-types/block body env (free-types/expr expr env acc))]
    [(case-expr expr clauses _)
     (free-types/blocks (map case-clause-body clauses) env
       (free-types/expr expr env acc))]
    [(annotated-expr type expr _)
     (free-types/type type env (free-types/expr expr env acc))]
    [(lambda-expr args return body _)
     (free-types/types
       (case return
         [(nothing) (map function-arg-pre-type args)]
         [(just return-ty) (cons return-ty (map function-arg-pre-type args))])
       env
       (free-types/block body env acc))]))

(define (free-types/exprs [exprs : (List Expression)] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case exprs
    [(empty) acc]
    [(cons expr exprs)
     (free-types/exprs exprs env (free-types/expr expr env acc))]))

(define (free-types/blocks [blocks : (List Block)] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case blocks
    [(empty) acc]
    [(cons block blocks)
     (free-types/blocks blocks env
       (free-types/block block env acc))]))

(define (free-types/block [b : Block] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case b
    [(block defs expr)
     (free-types/expr expr env
       (free-types/block-definitions defs env acc))]))

(define (free-types/block-definitions [defs : (List BlockDefinition)] [env : (Set Bytes)]
                                      [acc : (List Identifier)])
  : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons (match-def _pattern type expr) defs)
     (free-types/block-definitions defs env
       (free-types/expr expr env
         (case type
           [(nothing) acc]
           [(just t) (free-types/type t env acc)])))]))

(define (free-types/types [types : (List PreType)] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case types
    [(empty) acc]
    [(cons type types)
     (free-types/types types env (free-types/type type env acc))]))

(define (free-types/type [type : PreType] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case type
    [(var-pre-type id)
     (match-define (identifier v _) id)
     (if (set-member? env v)
         acc
         (cons id acc))]
    [(fun-pre-type type-vars args result _)
     (let ([env (set-add-all env type-vars)])
       (free-types/types args env
          (free-types/type result env acc)))]
    [(type-app-pre-type id args _)
     (match-define (identifier constructor _) id)
     (let ([acc (free-types/types args env acc)])
       (if (set-member? env constructor)
           acc
           (cons id acc)))]))

(define (free-patterns/module [mod : Module]) : (List Identifier)
  (match-define env (make-set bytes-cmp))
  (match-define (module _ _ _ (definitions _ _ _ functions _)) mod)
  (free-patterns/function-definitions functions env (empty)))

(define (free-patterns/function-definitions
          [defs : (List FunctionDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (free-patterns/function-definitions defs env
       (free-patterns/function-definition def env acc))]))


(define (free-patterns/function-definition
          [def : FunctionDefinition]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (match-define (function-definition _ _ _ args _ body) def)
  (free-patterns/function-args args env
    (free-patterns/block body env acc)))

(define (free-patterns/function-args
          [args : (List FunctionArg)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case args
    [(empty) acc]
    [(cons (function-arg pattern _type) args)
     (free-patterns/function-args args env
       (free-patterns/pattern pattern env acc))]))

(define (free-patterns [expr : Expression] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case expr
    [(int-literal _ _) acc]
    [(bytes-literal _ _) acc]
    [(boolean-literal _ _) acc]
    [(var-expr _) acc]
    [(if-expr c t f _)
     (free-patterns/list (cons c (cons t (cons f (empty)))) env acc)]
    [(cond-expr clauses final _)
     (free-patterns/cond-clauses clauses env (free-patterns/block final env acc))]
    [(begin-expr es e _)
     (free-patterns/list (cons e es) env acc)]
    [(app-expr _ op args _)
     (free-patterns/list (cons op args) env acc)]
    [(varargs-app-expr _ _ args _)
     (free-patterns/list args env acc)]
    [(let-expr _name expr body _)
     (free-patterns/block body env (free-patterns expr env acc))]
    [(case-expr expr clauses _)
     (free-patterns/case-clauses clauses env (free-patterns expr env acc))]
    [(annotated-expr _ expr _)
     (free-patterns expr env acc)]
    [(lambda-expr _ _ body _)
     (free-patterns/block body env acc)]))

(define (free-patterns/block [b : Block] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case b
    [(block defs expr)
     (free-patterns expr env
       (free-patterns/block-definitions defs env acc))]))

(define (free-patterns/block-definitions
          [defs : (List BlockDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)])
  : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons (match-def pattern _type expr) defs)
     (free-patterns/block-definitions defs env
       (free-patterns expr env
         (free-patterns/pattern pattern env acc)))]))

(define (free-patterns/list
          [exprs : (List Expression)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case exprs
    [(empty) acc]
    [(cons expr exprs)
     (free-patterns/list exprs env (free-patterns expr env acc))]))

(define (free-patterns/case-clauses
          [clauses : (List CaseClause)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case clauses
    [(empty) acc]
    [(cons (case-clause pattern body) clauses)
     (free-patterns/case-clauses clauses env
       (free-patterns/block body env
         (free-patterns/pattern pattern env acc)))]))

(define (free-patterns/cond-clauses
          [clauses : (List CondClause)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case clauses
    [(empty) acc]
    [(cons (cond-clause test body _) clauses)
     (free-patterns/cond-clauses clauses env
       (free-patterns test env
         (free-patterns/block body env acc)))]))

(define (free-patterns/pattern [p : Pattern] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case p
    [(bytes-pattern _ _) acc]
    [(int-pattern _ _) acc]
    [(ignore-pattern _) acc]
    [(variable-pattern _) acc]
    [(abstraction-pattern id pats _)
     (match-define (identifier name _) id)
     (let ([acc (free-patterns/patterns pats env acc)])
       (if (set-member? env name)
           acc
           (cons id acc)))]))

(define (free-patterns/patterns [ps : (List Pattern)] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case ps
    [(empty) acc]
    [(cons p ps) (free-patterns/patterns ps env (free-patterns/pattern p env acc))]))

(define (free-statics/module [mod : Module]) : (List Identifier)
  (match-define env (make-set bytes-cmp))
  (match-define (module _ _ _ (definitions _ _ _ functions _)) mod)
  (free-statics/function-definitions functions env (empty)))

(define (free-statics/function-definition
          [def : FunctionDefinition]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (match-define (function-definition _ _ _ _ _ body) def)
  (free-statics/block body env acc))


(define (free-statics/function-definitions
          [defs : (List FunctionDefinition)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (free-statics/function-definitions
       defs env (free-statics/function-definition def env acc))]))

(define (free-statics/block [block : Block] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (match-define (block defs body) block)
  (free-statics/block* defs body env acc))

(define (free-statics/block*
          [defs : (List BlockDefinition)]
          [final-expr : Expression]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case defs
    [(empty) (free-statics/expr final-expr env acc)]
    [(cons (match-def _ _ expr) defs)
     (free-statics/block* defs final-expr env
       (free-statics/expr expr env acc))]))

(define (free-statics/expr [expr : Expression] [env : (Set Bytes)] [acc : (List Identifier)])
  : (List Identifier)
  (case expr
    [(varargs-app-expr _ id args _)
     (match-define (identifier op _) id)
     (free-statics/list args env
       (if (set-member? env op)
           acc
           (cons id acc)))]
    ;; Recur
    [(var-expr _) acc]
    [(int-literal _ _) acc]
    [(bytes-literal _ _) acc]
    [(boolean-literal _ _) acc]
    [(annotated-expr _ expr _)
     (free-statics/expr expr env acc)]
    [(if-expr c t f _)
     (free-statics/list (cons c (cons t (cons f (empty)))) env acc)]
    [(cond-expr clauses final _)
     (free-statics/cond-clauses clauses env (free-statics/block final env acc))]
    [(begin-expr es e _)
     (free-statics/list (cons e es) env acc)]
    [(app-expr _ op args _)
     (free-statics/list (cons op args) env acc)]
    [(let-expr _ expr body _)
     (free-statics/block body env (free-statics/expr expr env acc))]
    [(case-expr expr clauses _)
     (free-statics/case-clauses clauses env (free-statics/expr expr env acc))]
    [(lambda-expr _ _ body _)
     (free-statics/block body env acc)]))

(define (free-statics/list
          [exprs : (List Expression)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case exprs
    [(empty) acc]
    [(cons expr exprs)
     (free-statics/list exprs env (free-statics/expr expr env acc))]))

(define (free-statics/case-clauses
          [clauses : (List CaseClause)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case clauses
    [(empty) acc]
    [(cons (case-clause _ body) clauses)
     (free-statics/case-clauses clauses env (free-statics/block body env acc))]))

(define (free-statics/cond-clauses
          [clauses : (List CondClause)]
          [env : (Set Bytes)]
          [acc : (List Identifier)]) : (List Identifier)
  (case clauses
    [(empty) acc]
    [(cons (cond-clause test body _) clauses)
     (free-statics/cond-clauses clauses env
                                (free-statics/expr test env
                                                   (free-statics/block body env acc)))]))
