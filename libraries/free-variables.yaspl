(module free-variables
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values ()
      #:patterns (tuple2))
    (list
      #:types (List)
      #:values (cons empty map)
      #:patterns (cons empty))
    (bytes bytes=?)
    (set
      #:types (Set)
      #:values (set-add set-member? set-add-all make-set)
      #:patterns ())
    (source-language
      #:types (Expression CaseClause Pattern PreType BlockDefinition Block FunctionDefinition
               Module)
      #:values (module-definitions)
      #:patterns (int-literal bytes-literal boolean-literal var-expr if-expr begin-expr app-expr
                  varargs-app-expr let-expr case-expr case-clause bytes-pattern int-pattern
                  lambda-expr variable-pattern ignore-pattern abstraction-pattern match-def block
                  function-definition)))
  (export
    #:types ()
    #:values (free-variables/expr free-variables/module)
    #:patterns ())
  (types)

  (define (free-variables/module [mod : Module] [env : (Set Bytes)]) : (Set Bytes)
    (free-variables/definitions (module-definitions mod) env (make-set bytes=?)))

  (define (free-variables/definitions
            [defs : (List FunctionDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (function-definition _ _ args body) defs)
       (let ([fun-env (set-add-all env args)])
         (free-variables/definitions defs env (free-variables/block body fun-env acc)))]))

  (define (free-variables/block [block : Block] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (match-define (block defs body) block)
    (free-variables/block* defs body env acc))

  (define (free-variables/block*
            [defs : (List BlockDefinition)]
            [final-expr : Expression]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) (free-variables/expr final-expr env acc)]
      [(cons (match-def pattern expr) defs)
       (free-variables/block*
         defs final-expr
         (add-pattern-bindings pattern env)
         (free-variables/expr expr env acc))]))

  (define (free-variables/expr [expr : Expression] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case expr
      [(int-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(if-expr c t f)
       (free-variables/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-variables/list (cons e es) env acc)]
      [(app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-variables/expr body (set-add env name) (free-variables/expr expr env acc))]
      [(case-expr expr clauses)
       (free-variables/clauses clauses env (free-variables/expr expr env acc))]
      [(lambda-expr args+tys _ body)
       (free-variables/expr body (set-add-all env (map extract-arg args+tys)) acc)]
      [(var-expr v)
       (if (set-member? env v)
           acc
           (set-add acc v))]))

  (define (free-variables/list
            [exprs : (List Expression)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-variables/list exprs env (free-variables/expr expr env acc))]))

  (define (free-variables/clauses
            [exprs : (List CaseClause)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern body) clauses)
       (free-variables/clauses clauses env (free-variables/block body (add-pattern-bindings pattern env) acc))]))

  (define (add-pattern-bindings [p : Pattern] [env : (Set Bytes)]) : (Set Bytes)
    (case p
      [(bytes-pattern _) env]
      [(int-pattern _) env]
      [(ignore-pattern) env]
      [(variable-pattern v) (set-add env v)]
      [(abstraction-pattern _ pats) (add-pattern-bindings/list pats env)]))

  (define (add-pattern-bindings/list [ps : (List Pattern)] [env : (Set Bytes)]) : (Set Bytes)
    (case ps
      [(empty) env]
      [(cons p ps) (add-pattern-bindings/list ps (add-pattern-bindings p env))]))

  (define (extract-arg [arg+ty : (Tuple2 Bytes PreType)]) : Bytes
    (case arg+ty
      [(tuple2 arg _)
       arg])))
