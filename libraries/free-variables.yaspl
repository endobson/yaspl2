(module free-variables
  (import
    (bytes bytes=?)
    (list
      #:types (List)
      #:values (cons empty map)
      #:patterns (cons empty))
    (maybe
      #:types ()
      #:values ()
      #:patterns (just nothing))
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (set
      #:types (Set)
      #:values (make-set set-add set-add-all set-member?)
      #:patterns ())
    (source-language
      #:types (Block BlockDefinition CaseClause Expression FunctionDefinition Module Pattern PreType
               TypeDefinition VariantDefinition)
      #:values (case-clause-body function-definition-body module-definitions module-types
                variant-field-type)
      #:patterns (abstraction-pattern app-expr begin-expr block boolean-literal bytes-literal
                  bytes-pattern case-clause case-expr fun-pre-type function-definition if-expr
                  ignore-pattern int-literal int-pattern lambda-expr let-expr match-def
                  type-app-pre-type type-definition var-expr var-pre-type varargs-app-expr
                  variable-pattern variant-definition))
    (tuples
      #:types (Tuple2)
      #:values ()
      #:patterns (tuple2)))
  (export
    #:types ()
    #:values (free-variables/expr
              free-variables/module free-types/module free-patterns/module
              free-variables/function-definition free-types/function-definition
              free-types/type-definitions
              free-patterns/function-definition)
    #:patterns ())
  (types)

  (define (free-variables/module [mod : Module] [env : (Set Bytes)]) : (Set Bytes)
    (free-variables/function-definitions (module-definitions mod) env (make-set bytes=?)))

  (define (free-variables/function-definition
            [def : FunctionDefinition]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (match-define (function-definition _ _ args body) def)
    (free-variables/block body (set-add-all env args) acc))

  (define (free-variables/function-definitions
            [defs : (List FunctionDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons def defs)
       (free-variables/function-definitions
         defs env (free-variables/function-definition def env acc))]))

  (define (free-variables/block [block : Block] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (match-define (block defs body) block)
    (free-variables/block* defs body env acc))

  (define (free-variables/block*
            [defs : (List BlockDefinition)]
            [final-expr : Expression]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) (free-variables/expr final-expr env acc)]
      [(cons (match-def pattern expr) defs)
       (free-variables/block*
         defs final-expr
         (add-pattern-bindings pattern env)
         (free-variables/expr expr env acc))]))

  (define (free-variables/expr [expr : Expression] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case expr
      [(int-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(if-expr c t f)
       (free-variables/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-variables/list (cons e es) env acc)]
      [(app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-variables/expr body (set-add env name) (free-variables/expr expr env acc))]
      [(case-expr expr clauses)
       (free-variables/clauses clauses env (free-variables/expr expr env acc))]
      [(lambda-expr args+tys _ body)
       (free-variables/expr body (set-add-all env (map extract-arg args+tys)) acc)]
      [(var-expr v)
       (if (set-member? env v)
           acc
           (set-add acc v))]))

  (define (free-variables/list
            [exprs : (List Expression)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-variables/list exprs env (free-variables/expr expr env acc))]))

  (define (free-variables/clauses
            [exprs : (List CaseClause)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern body) clauses)
       (free-variables/clauses clauses env (free-variables/block body (add-pattern-bindings pattern env) acc))]))

  (define (add-pattern-bindings [p : Pattern] [env : (Set Bytes)]) : (Set Bytes)
    (case p
      [(bytes-pattern _) env]
      [(int-pattern _) env]
      [(ignore-pattern) env]
      [(variable-pattern v) (set-add env v)]
      [(abstraction-pattern _ pats) (add-pattern-bindings/list pats env)]))

  (define (add-pattern-bindings/list [ps : (List Pattern)] [env : (Set Bytes)]) : (Set Bytes)
    (case ps
      [(empty) env]
      [(cons p ps) (add-pattern-bindings/list ps (add-pattern-bindings p env))]))

  (define (extract-arg [arg+ty : (Tuple2 Bytes PreType)]) : Bytes
    (case arg+ty
      [(tuple2 arg _)
       arg]))

  (define (free-types/module [mod : Module] [env : (Set Bytes)])
    : (Set Bytes)
    (free-types/type-definitions (module-types mod) env
      (free-types/function-definitions (module-definitions mod) env (make-set bytes=?))))

  (define (free-types/function-definitions
            [defs : (List FunctionDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons def defs)
       (free-types/function-definitions defs env
         (free-types/function-definition def env acc))]))

  (define (free-types/function-definition
            [def : FunctionDefinition]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (match-define (function-definition _ type _ body) def)
    (free-types/block body (set-add-all env (type-type-vars type))
      (free-types/type type env acc)))

  (define (free-types/type-definitions
            [defs : (List TypeDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (type-definition name vars variants) defs)
       (free-types/type-definitions defs env
          (free-types/variants variants
                               (set-add-all
                                 env
                                 (case vars
                                   [(nothing) (empty)]
                                   [(just v) v]))
                               acc))]))

  (define (free-types/variants
            [variants : (List VariantDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case variants
      [(empty) acc]
      [(cons (variant-definition name fields) variants)
       (free-types/variants variants env
         (free-types/types
           (map variant-field-type fields) env acc))]))

  (define (free-types/expr [expr : Expression] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case expr
      [(int-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(var-expr _) acc]
      [(if-expr c t f)
       (free-types/exprs (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-types/exprs (cons e es) env acc)]
      [(app-expr op args)
       (free-types/exprs (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-types/exprs (cons op args) env acc)]
      [(let-expr name expr body)
       (free-types/exprs (cons body (cons expr (empty))) env acc)]
      [(case-expr expr clauses)
       (free-types/blocks (map case-clause-body clauses) env
         (free-types/expr expr env acc))]
      [(lambda-expr args+tys return body)
       (free-types/types
         (case return
           [(nothing) (map extract-ty args+tys)]
           [(just return-ty) (cons return-ty (map extract-ty args+tys))])
         env
         (free-types/expr body env acc))]))

  (define (free-types/exprs [exprs : (List Expression)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-types/exprs exprs env (free-types/expr expr env acc))]))

  (define (free-types/blocks [blocks : (List Block)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case blocks
      [(empty) acc]
      [(cons block blocks)
       (free-types/blocks blocks env
         (free-types/block block env acc))]))

  (define (free-types/block [b : Block] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case b
      [(block defs expr)
       (free-types/expr expr env
         (free-types/block-definitions defs env acc))]))

  (define (free-types/block-definitions [defs : (List BlockDefinition)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (match-def pattern expr) defs)
       (free-types/block-definitions defs env
         (free-types/expr expr env acc))]))

  (define (free-types/types [types : (List PreType)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case types
      [(empty) acc]
      [(cons type types)
       (free-types/types types env (free-types/type type env acc))]))

  (define (free-types/type [type : PreType] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case type
      [(var-pre-type v)
       (if (set-member? env v)
             acc
             (set-add acc v))]
      [(fun-pre-type type-vars args result)
       (let ([env (set-add-all env type-vars)])
         (free-types/types args env
            (free-types/type result env acc)))]
      [(type-app-pre-type constructor args)
       (let ([acc (free-types/types args env acc)])
         (if (set-member? env constructor)
             acc
             (set-add acc constructor)))]))

  (define (type-type-vars [type : PreType]) : (List Bytes)
    (case type
      [(fun-pre-type type-vars _ _) type-vars]
      [_ (empty)]))

  (define (extract-ty [arg+ty : (Tuple2 Bytes PreType)]) : PreType
    (case arg+ty
      [(tuple2 _ ty)
       ty]))

  (define (free-patterns/module [mod : Module] [env : (Set Bytes)]) : (Set Bytes)
    (free-patterns/function-definitions (module-definitions mod) env (make-set bytes=?)))

  (define (free-patterns/function-definitions
            [defs : (List FunctionDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons def defs)
       (free-patterns/function-definitions defs env
         (free-patterns/function-definition def env acc))]))

  (define (free-patterns/function-definition
            [def : FunctionDefinition]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
     (free-patterns/block (function-definition-body def) env acc))

  (define (free-patterns [expr : Expression] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case expr
      [(int-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(var-expr _) acc]
      [(if-expr c t f)
       (free-patterns/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-patterns/list (cons e es) env acc)]
      [(app-expr op args)
       (free-patterns/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-patterns/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-patterns/list (cons body (cons expr (empty))) env acc)]
      [(case-expr expr clauses)
       (free-patterns/clauses clauses env (free-patterns expr env acc))]
      [(lambda-expr _ _ body)
       (free-patterns body env acc)]))

  (define (free-patterns/block [b : Block] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case b
      [(block defs expr)
       (free-patterns expr env
         (free-patterns/block-definitions defs env acc))]))

  (define (free-patterns/block-definitions
            [defs : (List BlockDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)])
    : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (match-def pattern expr) defs)
       (free-patterns/block-definitions defs env
         (free-patterns expr env
           (free-patterns/pattern pattern env acc)))]))

  (define (free-patterns/list
            [exprs : (List Expression)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-patterns/list exprs env (free-patterns expr env acc))]))

  (define (free-patterns/clauses
            [exprs : (List CaseClause)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern body) clauses)
       (free-patterns/clauses clauses env
         (free-patterns/block body env
           (free-patterns/pattern pattern env acc)))]))

  (define (free-patterns/pattern [p : Pattern] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case p
      [(bytes-pattern _) acc]
      [(int-pattern _) acc]
      [(ignore-pattern) acc]
      [(variable-pattern _) acc]
      [(abstraction-pattern name pats)
       (let ([acc (free-patterns/patterns pats env acc)])
         (if (set-member? env name)
             acc
             (set-add acc name)))]))

  (define (free-patterns/patterns [ps : (List Pattern)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case ps
      [(empty) acc]
      [(cons p ps) (free-patterns/patterns ps env (free-patterns/pattern p env acc))])))
