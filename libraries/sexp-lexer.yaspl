#:module (sexp-lexer)
#:import {
  (byte-escapes)
  (bytes)
  (data source-location)
  (either)
  (lexer)
  (list)
  (numbers)
  (prim)
}
(export
  (#:types Lexeme Result Lexer)
  (#:values make-sexp-lexer run-lexer)
  (#:patterns end-of-input bad-input lex-result
              symbol-lexeme decimal-number-lexeme hexadecimal-number-lexeme
              left-paren-lexeme right-paren-lexeme
              left-brace-lexeme right-brace-lexeme
              left-bracket-lexeme right-bracket-lexeme comment-lexeme
              bytes-lexeme boolean-lexeme
              keyword-lexeme))
(types
  (define-type Lexeme
    (left-paren-lexeme)
    (right-paren-lexeme)
    (left-bracket-lexeme)
    (right-bracket-lexeme)
    (left-brace-lexeme)
    (right-brace-lexeme)
    (comment-lexeme)
    (symbol-lexeme [v : Bytes])
    (boolean-lexeme [v : Boolean])
    (bytes-lexeme [v : Bytes])
    (keyword-lexeme [v : Bytes])
    (decimal-number-lexeme [v : Bytes])
    (hexadecimal-number-lexeme [v : Bytes])))


(define (lexeme* [ctx : LexerContext] [start : Int] [end : Int] [l : Lexeme])
  : (InnerResult Lexeme)
  (lex-result/inner
    (source-span-annotated l (lexer-context-get-span ctx start end))
    end))

(define (symbol-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end 
    (symbol-lexeme (subbytes (lexer-context-bytes ctx) start end))))

(define (comment-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end (comment-lexeme)))

;; Boolean lexemes are always two characters
(define (boolean-lexeme* [ctx : LexerContext] [v : Boolean] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx (- end 2) end (boolean-lexeme v)))

;; Need to adjust for #: at begining
(define (keyword-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx (- start 2) end 
    (keyword-lexeme (subbytes (lexer-context-bytes ctx) start end))))

;; Need to adjust for #" at begining.
(define (bytes-lexeme* [ctx : LexerContext] [v : Bytes] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx (- start 2) end (bytes-lexeme v)))

(define (decimal-number-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end 
    (decimal-number-lexeme (subbytes (lexer-context-bytes ctx) start end))))

;; Need to adjust for #x at the begining
(define (hexadecimal-number-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx (- start 2) end 
    (hexadecimal-number-lexeme (subbytes (lexer-context-bytes ctx) start end))))

(define (left-paren-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end (left-paren-lexeme)))

(define (right-paren-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end (right-paren-lexeme)))

(define (left-bracket-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end (left-bracket-lexeme)))

(define (right-bracket-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end (right-bracket-lexeme)))

(define (left-brace-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end (left-brace-lexeme)))

(define (right-brace-lexeme* [ctx : LexerContext] [start : Int] [end : Int])
  : (InnerResult Lexeme)
  (lexeme* ctx start end (right-brace-lexeme)))

;; Symbol ok values
;; (set-ok! 33)
;; (set-ok! 36 38)
;; (set-ok! 42 43)
;; (set-ok! 45 47)
;; ;(set-ok! 48 57) ;; Only for continue bytes
;; (set-ok! 58)
;; (set-ok! 60 90)
;; (set-ok! 94 95)
;; (set-ok! 97 122)
;; (set-ok! 126)

;; Make this saner
(define (symbol-start-byte? [v : U8]) : Boolean
  (let ([valid #"                                 X  XXX   XX XXX          X XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   XX XXXXXXXXXXXXXXXXXXXXXXXXXX   X "])
    (let ([index (u8->s64 v)])
      (and (<= index 127)
           (= (u8->s64 (bytes-ref valid index)) 88)))))

;; Make this saner
(define (symbol-continue-byte? [v : U8]) : Boolean
  (let ([valid #"                                 X  XXX   XX XXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   XX XXXXXXXXXXXXXXXXXXXXXXXXXX   X "])
    (let ([index (u8->s64 v)])
      (and (<= index 127)
           (= (u8->s64 (bytes-ref valid index)) 88)))))

(define (keyword-continue-byte? [v : U8]) : Boolean
  (or (math-symbol? v)
      (letter? v)))

(define (bytes-continue-byte? [v : U8]) : Boolean
  (let ([int (u8->s64 v)])
    (and (and (<= 32 int) (< int 127))
         (not (double-quote? v)))))

(define (decimal-start-byte? [v : U8]) : Boolean
  (digit? v))
(define (decimal-continue-byte? [v : U8]) : Boolean
  (digit? v))

(define (hexadecimal-byte? [v : U8]) : Boolean
  (or (digit? v)
      (let ([v (u8->s64 v)])
        (or (and (<= 65 v) (<= v 70))
            (and (<= 97 v) (<= v 102))))))

(define (math-symbol? [v : U8]) : Boolean
  (let ([v (u8->s64 v)])
    (or (= v 42)
        (or (= v 43)
            (or (= v 45)
                (= v 47))))))

(define (letter? [v : U8]) : Boolean
  (let ([v (u8->s64 v)])
    (or (and (<= 97 v) (< v 123))
        (and (<= 65 v) (< v 91)))))

(define (newline? [v : U8]) : Boolean
  (= (u8->s64 v) 10))

(define (space? [v : U8]) : Boolean
  (= (u8->s64 v) 32))

(define (double-quote? [v : U8]) : Boolean
  (= (u8->s64 v) 34))

(define (hash? [v : U8]) : Boolean
  (= (u8->s64 v) 35))

(define (colon? [v : U8]) : Boolean
  (= (u8->s64 v) 58))

(define (semi-colon? [v : U8]) : Boolean
  (= (u8->s64 v) 59))

(define (back-slash? [v : U8]) : Boolean
  (= (u8->s64 v) 92))

(define (lex-symbol [ctx : LexerContext] [start : Int] [cur : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (symbol-lexeme* ctx start cur)
      (if (symbol-continue-byte? (bytes-ref bytes cur))
          (lex-symbol ctx start (+ 1 cur))
          (symbol-lexeme* ctx start cur))))

(define (lex-after-hash [ctx : LexerContext] [pos : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) pos)
      (bad-input/inner #"Input ended with hash" (lexer-context-get-span ctx (- pos 1) pos))
      (let ([byte (bytes-ref bytes pos)])
        (let ([next-pos (+ 1 pos)])
          (if (colon? byte)
              (lex-keyword ctx next-pos next-pos)
              (if (double-quote? byte)
                  (lex-bytes ctx next-pos next-pos)
                  (if (= (u8->s64 byte) 116)
                      (boolean-lexeme* ctx #t next-pos)
                      (if (= (u8->s64 byte) 102)
                          (boolean-lexeme* ctx #f next-pos)
                          (if (= (u8->s64 byte) 120)
                              (lex-hexadecimal ctx next-pos next-pos)
                              (bad-input/inner
                                #"Unsupported character after hash"
                                (lexer-context-get-span ctx (- pos 1) next-pos)))))))))))

(define (lex-keyword [ctx : LexerContext] [start : Int] [cur : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (keyword-lexeme* ctx start cur)
      (if (keyword-continue-byte? (bytes-ref bytes cur))
          (lex-keyword ctx start (+ 1 cur))
          (keyword-lexeme* ctx start cur))))

(define (lex-bytes [ctx : LexerContext] [start : Int] [cur : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (bad-input/inner #"Input ended in the middle of bytes literal"
                       (lexer-context-get-span ctx (- start 2) cur))
      (let ([byte (bytes-ref bytes cur)])
        (if (back-slash? byte)
            (let ([cur (+ 1 cur)])
              (let ([byte (bytes-ref bytes cur)])
                (if (= (bytes-length bytes) cur)
                    (bad-input/inner #"Input ended with backslash"
                                     (lexer-context-get-span ctx (- start 2) cur))
                    (if (or (or (double-quote? byte)
                                (back-slash? byte))
                            (or (= (u8->s64 byte) 110) ;; n
                                (or (= (u8->s64 byte) 114) ;; r
                                    (= (u8->s64 byte) 120)))) ;; x
                        (lex-bytes ctx start (+ 1 cur))
                        (bad-input/inner #"Unknown character after backslash"
                                         (lexer-context-get-span ctx (- cur 1) (+ cur 1)))))))
            (if (bytes-continue-byte? byte)
                (lex-bytes ctx start (+ 1 cur))
                (if (double-quote? byte)
                    (case (unescape-bytes (subbytes bytes start cur))
                      [(left _) (bad-input/inner #"Bytes literal couldn't be unescaped"
                                                 (lexer-context-get-span ctx (- start 2) (+ cur 1)))]
                      [(right v)
                       (bytes-lexeme* ctx v start (+ 1 cur))])
                    (bad-input/inner
                      (bytes-append (varargs list #"Unsupported character in bytes literal: #x"
                                                  (integer->hex-bytes (u8->s64 byte))))
                      (lexer-context-get-span ctx cur (+ cur 1)))))))))

(define (lex-decimal [ctx : LexerContext] [start : Int] [cur : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (decimal-number-lexeme* ctx start cur)
      (if (decimal-continue-byte? (bytes-ref bytes cur))
          (lex-decimal ctx start (+ 1 cur))
          (decimal-number-lexeme* ctx start cur))))

(define (lex-hexadecimal [ctx : LexerContext] [start : Int] [cur : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) cur)
      (hexadecimal-number-lexeme* ctx start cur)
      (if (hexadecimal-byte? (bytes-ref bytes cur))
          (lex-hexadecimal ctx start (+ 1 cur))
          (hexadecimal-number-lexeme* ctx start cur))))

(define (lex-line-comment [ctx : LexerContext] [start : Int] [pos : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= (bytes-length bytes) pos)
      (comment-lexeme* ctx start pos)
      (if (newline? (bytes-ref bytes pos))
          (comment-lexeme* ctx start pos)
          (lex-line-comment ctx start (+ 1 pos)))))


(define (make-sexp-lexer [sbytes : SourcedBytes]) : (Lexer Lexeme)
  (make-lexer sbytes sexp-lexer/impl))

(define (sexp-lexer/impl [ctx : LexerContext] [pos : Int]) : (InnerResult Lexeme)
  (match-define bytes (lexer-context-bytes ctx))
  (if (= pos (bytes-length bytes))
      (end-of-input/inner (lexer-context-get-span ctx pos pos))
      (let ([byte/u8 (bytes-ref bytes pos)])
        (let ([next-pos (+ pos 1)])
          (let ([byte (u8->s64 byte/u8)])
            (if (= byte 40)
                (left-paren-lexeme* ctx pos next-pos)
                (if (= byte 41)
                    (right-paren-lexeme* ctx pos next-pos)
                    (if (= byte 91)
                        (left-bracket-lexeme* ctx pos next-pos)
                        (if (= byte 93)
                            (right-bracket-lexeme* ctx pos next-pos)
                            (if (= byte 123)
                                (left-brace-lexeme* ctx pos next-pos)
                                (if (= byte 125)
                                    (right-brace-lexeme* ctx pos next-pos)
                                    (if (or (newline? byte/u8) (space? byte/u8))
                                        (sexp-lexer/impl ctx next-pos)
                                        (if (symbol-start-byte? byte/u8)
                                            (lex-symbol ctx pos next-pos)
                                            (if (decimal-start-byte? byte/u8)
                                                (lex-decimal ctx pos next-pos)
                                                (if (hash? byte/u8)
                                                    (lex-after-hash ctx next-pos)
                                                    (if (semi-colon? byte/u8)
                                                        (lex-line-comment ctx pos next-pos)
                                                        (if (double-quote? byte/u8)
                                                            (bad-input/inner
                                                              #"String literals not supported"
                                                              (lexer-context-get-span
                                                                ctx pos next-pos))
                                                            (bad-input/inner
                                                              (bytes-append
                                                                (varargs list
                                                                  #"Unsupported character at start "
                                                                  #"of lexeme: #x"
                                                                  (integer->hex-bytes byte)))
                                                               (lexer-context-get-span
                                                                 ctx pos next-pos)))))))))))))))))))
