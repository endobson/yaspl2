(module intermediate-to-static-module-signature
  (import
    (prim
      #:types (Bytes)
      #:values (panic)
      #:patterns ())
    (maybe
      #:types ()
      #:values ()
      #:patterns (nothing))
    (list
      #:types (List)
      #:values ()
      #:patterns (empty cons))
    (types
      #:types (Type)
      #:values (abstract-type)
      #:patterns ())
    (bytes bytes=? )
    (dict
      #:types (Dict)
      #:values (make-dict dict-ref dict-add)
      #:patterns ())
    (intermediate-language
      #:types (Module)
      #:values ()
      #:patterns (module))
    (source-language
      #:types (Imports TypeDefinition Exports)
      #:values ()
      #:patterns (type-definition)))
  (export
    #:types (StaticModuleSignature)
    #:values (module->static-module-signature)
    #:patterns ())
  (types
    (define-type StaticModuleSignature
      (static-module-signature
        [name Bytes]
        [type-bindings (Dict Bytes Type)]
        [value-types (Dict Bytes Type)])))


  (define (module->static-module-signature
            [mod : Module]
            [sigs : (List StaticModuleSignature)]) : StaticModuleSignature
    (case mod
      [(module name _ _ _ _ _ _)
       (static-module-signature
         name
         (module-type-environment mod sigs)
         (make-dict bytes=?))]))

  (define (lookup-signature [name : Bytes] [sigs : (List StaticModuleSignature)])
    : StaticModuleSignature
    (case sigs
      [(empty) (panic #"No such signature")]
      [(cons sig sigs)
       (case sig
         [(static-module-signature n _ _)
          (if (bytes=? n name)
              sig
              (lookup-signature name sigs))])]))

  (define (module-type-environment [mod : Module] [sigs : (List StaticModuleSignature)])
    : (Dict Bytes Type)
    (case mod
      [(module name _ _ types _ _ _)
       (add-type-definitions name types (make-dict bytes=?))]))

  (define (add-type-definitions [mod-name : Bytes] [types : (List TypeDefinition)] [env : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case types
      [(empty) env]
      [(cons (type-definition name (nothing) _) types)
       (add-type-definitions
         mod-name
         types
         (dict-add env name (abstract-type mod-name name)))]
      [(cons _ types)
       ;; TODO support polymorphic types
       (add-type-definitions mod-name types env)])))
