(module intermediate-to-static-module-signature
  (import
    (prim
      #:types (Bytes)
      #:values ()
      #:patterns ())
    (list
      #:types (List)
      #:values ()
      #:patterns ())
    (types
      #:types (Type)
      #:values ()
      #:patterns ())
    (bytes bytes=? )
    (dict
      #:types (Dict)
      #:values (make-dict dict-ref dict-add)
      #:patterns ())
    (intermediate-language
      #:types (Module)
      #:values ()
      #:patterns (module))
    )
  (export
    #:types (StaticModuleSignature)
    #:values (module->static-module-signature)
    #:patterns ())
  (types
    (define-type StaticModuleSignature
      (static-module-signature
        [name Bytes]
        [type-bindings (Dict Bytes Type)]
        [value-types (Dict Bytes Type)])))


  (define (module->static-module-signature
            [mod : Module]
            [sigs : (List StaticModuleSignature)]) : StaticModuleSignature
    (case mod
      [(module name _ _ _ _ _ _)
       (static-module-signature
         name
         (make-dict bytes=?)
         (make-dict bytes=?))])))
