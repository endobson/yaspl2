(module intermediate-to-static-module-signature
  (import
    (prim
      #:types (Bytes)
      #:values (panic)
      #:patterns ())
    (bytes bytes-append)
    (maybe
      #:types ()
      #:values ()
      #:patterns (nothing just))
    (list
      #:types (List)
      #:values (empty map list)
      #:patterns (empty cons))
    (types
      #:types (Type)
      #:values (star-kind type-constructor abstract-type)
      #:patterns ())
    (bytes bytes=? )
    (dict
      #:types (Dict)
      #:values (make-dict dict-ref dict-add)
      #:patterns ())
    (intermediate-language
      #:types (Module)
      #:values ()
      #:patterns (module))
    (source-language
      #:types (Imports TypeDefinition Import)
      #:values ()
      #:patterns (type-definition import imports)))
  (export
    #:types (StaticModuleSignature)
    #:values (make-type-environment static-module-signature module->static-module-signature)
    #:patterns ())
  (types
    (define-type StaticModuleSignature
      (static-module-signature
        [name Bytes]
        [type-bindings (Dict Bytes Type)]
        [value-types (Dict Bytes Type)])))


  (define (module->static-module-signature
            [mod : Module]
            [sigs : (List StaticModuleSignature)]) : StaticModuleSignature
    (case mod
      [(module name _ _ _ _ _ _)
       (static-module-signature
         name
         (module-type-environment mod sigs)
         (make-dict bytes=?))]))

  (define (lookup-signature [name : Bytes] [sigs : (List StaticModuleSignature)])
    : StaticModuleSignature
    (case sigs
      [(empty) (panic #"No such signature")]
      [(cons sig sigs)
       (case sig
         [(static-module-signature n _ _)
          (if (bytes=? n name)
              sig
              (lookup-signature name sigs))])]))

  (define (module-type-environment [mod : Module] [sigs : (List StaticModuleSignature)])
    : (Dict Bytes Type)
    (case mod
      [(module name importss _ types _ _ _)
       (make-type-environment name importss types sigs)]))

  (define (make-type-environment
            [name : Bytes]
            [importss : (List Imports)]
            [types : (List TypeDefinition)]
            [sigs : (List StaticModuleSignature)])
    : (Dict Bytes Type)
    (add-imported-types/importss importss sigs
      (add-type-definitions name types (make-dict bytes=?))))

  (define (add-type-definitions [mod-name : Bytes] [types : (List TypeDefinition)] [env : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case types
      [(empty) env]
      [(cons (type-definition name (nothing) _) types)
       (add-type-definitions
         mod-name
         types
         (dict-add env name (abstract-type mod-name name (empty))))]
      [(cons (type-definition name (just syms) _) types)
       (add-type-definitions
         mod-name
         types
         (dict-add env name
            (type-constructor mod-name name (map (lambda ([v : Bytes]) (star-kind)) syms))))]))

  (define (add-imported-types/importss
            [importss : (List Imports)]
            [sigs : (List StaticModuleSignature)]
            [env : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case importss
      [(empty) env]
      [(cons (imports module-name types _ _) importss)
       (add-imported-types/importss
         importss
         sigs
         (add-imported-types module-name types
           (static-module-signature-type-bindings (lookup-signature module-name sigs)) env))]))

  (define (add-imported-types
            [module-name : Bytes]
            [types : (List Import)]
            [external-types : (Dict Bytes Type)]
            [env : (Dict Bytes Type)])
    : (Dict Bytes Type)
    (case types
      [(empty) env]
      [(cons (import external-name local-name) types)
       (add-imported-types
         module-name
         types
         external-types
         (dict-add env local-name
            (case (dict-ref external-types external-name)
              [(nothing) (panic (bytes-append (varargs list #"No type " external-name #" exported by "
                                                       module-name)))]
              [(just type) type])))])))
