(module bytes-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Void Byte Boolean)
      #:values ()
      #:patterns ())
    (bytes starts-with? ends-with?)
    (list list)
    (boolean not)
    (yunit
      #:types () 
      #:values (yunit/main test-case)
      #:patterns ())
    )
  (export)
  (types)

  (define (test-starts-with-abc-ab) : Boolean
    (starts-with? #"abc" #"ab"))

  (define (test-starts-with-abc-abc) : Boolean
    (starts-with? #"abc" #"abc"))

  (define (test-starts-with-abc-bc) : Boolean
    (not (starts-with? #"abc" #"bc")))

  (define (test-starts-with-a-abc) : Boolean
    (not (starts-with? #"a" #"abc")))

  (define (test-starts-with-c-abc) : Boolean
    (not (starts-with? #"c" #"abc")))

  (define (test-ends-with-abc-ab) : Boolean
    (not (ends-with? #"abc" #"ab")))

  (define (test-ends-with-abc-abc) : Boolean
    (ends-with? #"abc" #"abc"))

  (define (test-ends-with-abc-bc) : Boolean
    (ends-with? #"abc" #"bc"))

  (define (test-ends-with-a-abc) : Boolean
    (not (ends-with? #"a" #"abc")))

  (define (test-ends-with-c-abc) : Boolean
    (not (ends-with? #"c" #"abc")))



  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (yunit/main stderr
      (varargs list
        (test-case #"starts-with abc ab"  test-starts-with-abc-ab)
        (test-case #"starts-with abc abc" test-starts-with-abc-abc)
        (test-case #"starts-with abc bc"  test-starts-with-abc-bc)
        (test-case #"starts-with a abc"   test-starts-with-a-abc)
        (test-case #"starts-with c abc"   test-starts-with-c-abc)
        (test-case #"ends-with abc ab"    test-ends-with-abc-ab)
        (test-case #"ends-with abc abc"   test-ends-with-abc-abc)
        (test-case #"ends-with abc bc"    test-ends-with-abc-bc)
        (test-case #"ends-with a abc"     test-ends-with-a-abc)
        (test-case #"ends-with c abc"     test-ends-with-c-abc)
        ))))
