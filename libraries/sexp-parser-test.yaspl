#:module (sexp-parser-test)
#:import {
  (bytes)
  (data source-location)
  (either)
  (list)
  (prim)
  (sexp-parser)
  (yunit)
}
(export)
(types)


(define (good-sexp [bytes : Bytes]) : (-> Boolean)
  (lambda ()
    (case (parse-single-sexp (sourced-bytes (unnamed-source) bytes))
      [(left _) #f]
      [(right _) #t])))

(define (bad-sexp [bytes : Bytes] [expected-error-message : Bytes]) : (-> Boolean)
  (lambda ()
    (case (parse-single-sexp (sourced-bytes (unnamed-source) bytes))
      [(right _) #f]
      [(left message)
       (bytes=? message expected-error-message)])))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"1" (good-sexp #"(()())"))
      (test-case #"2" (good-sexp #"( ( ()(( )  )\n )( ))"))
      (test-case #"3" (good-sexp #"+"))
      (test-case #"4" (good-sexp #"(+ (+))"))
      (test-case #"5" (good-sexp #"2"))
      (test-case #"6" (good-sexp #"23"))
      (test-case #"7" (good-sexp #"456"))
      (test-case #"8" (good-sexp #"(+ 2 3)"))
      (test-case #"9" (good-sexp #"#:foo"))
      (test-case #"10" (good-sexp #"#\"foo\""))
      (test-case #"11" (good-sexp #";.&\na"))
      (test-case #"12" (good-sexp #"(a;.&\na)"))
      (test-case #"13" (good-sexp #"#t"))
      (test-case #"14" (good-sexp #"(#t)"))
      (test-case #"15" (good-sexp #"()"))
      (test-case #"16" (good-sexp #"[]"))
      (test-case #"17" (good-sexp #"[[]()]"))

      (test-case #"b1" (bad-sexp #"" #"End of input"))
      (test-case #"b2" (bad-sexp #"(" #"Unexpected end of input."))
      (test-case #"b3" (bad-sexp #")" #"Unexpected )."))
      (test-case #"b4" (bad-sexp #"(()" #"Unexpected end of input."))
      (test-case #"b5" (bad-sexp #"[)" #"Unexpected )."))
      (test-case #"b6" (bad-sexp #"(]" #"Unexpected ].")))))
