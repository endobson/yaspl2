(module sexp-parser-test
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Void)
      #:values (void =)
      #:patterns ())
    (bytes bytes=?)
    (boolean not)
    (yunit
      #:types () 
      #:values (yunit/main test-case)
      #:patterns ())
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (sexp-parser
      #:types ()
      #:values (parse-sexp)
      #:patterns ())
    (list
      #:types (List)
      #:values (list cons empty reverse length)
      #:patterns ()))
  (export)
  (types)


  (define (good-sexp [bytes : Bytes]) : (-> Boolean)
    (lambda ()
      (case (parse-sexp bytes)
        [(left _) #f]
        [(right _) #t])))

  (define (bad-sexp [bytes : Bytes] [expected-error-message : Bytes]) : (-> Boolean)
    (lambda ()
      (case (parse-sexp bytes)
        [(right _) #f]
        [(left message)
         (bytes=? message expected-error-message)])))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (yunit/main stderr
      (varargs list
        (test-case #"" (good-sexp #"(()())"))
        (test-case #"" (good-sexp #"( ( ()(( )  )\n )( ))"))
        (test-case #"" (good-sexp #"+"))
        (test-case #"" (good-sexp #"(+ (+))"))
        (test-case #"" (good-sexp #"2"))
        (test-case #"" (good-sexp #"23"))
        (test-case #"" (good-sexp #"456"))
        (test-case #"" (good-sexp #"(+ 2 3)"))
        (test-case #"" (good-sexp #"#:foo"))
        (test-case #"" (good-sexp #"#\"foo\""))
        (test-case #"" (good-sexp #";.&\na"))
        (test-case #"" (good-sexp #"(a;.&\na)"))
        (test-case #"" (good-sexp #"#t"))
        (test-case #"" (good-sexp #"(#t)"))
        (test-case #"" (good-sexp #"()"))
        (test-case #"" (good-sexp #"[]"))
        (test-case #"" (good-sexp #"[[]()]"))

        (test-case #"a" (bad-sexp #"" #"End of input"))
        (test-case #"b" (bad-sexp #"(" #"Unexpected end of input."))
        (test-case #"c" (bad-sexp #")" #"Unexpected )."))
        (test-case #"d" (bad-sexp #"(()" #"Unexpected end of input."))
        (test-case #"e" (bad-sexp #"[)" #"Unexpected )."))
        (test-case #"f" (bad-sexp #"(]" #"Unexpected ]."))))))
