(module library-compiler-main
  (import
    (prim
      #:types (Bytes InputPort OutputPort Array Int)
      #:values (< array-length array-ref)
      #:patterns ())
    (io write-line)
    (list
      #:types (List)
      #:values (reverse)
      #:patterns (empty cons))
    (dict
      #:types (Dict)
      #:values (dict-add)
      #:patterns ())
    (stack-machine
      #:types (TopLevelObject)
      #:values ()
      #:patterns (trivial-closure-tlo))
    (x86-64-stack-machine convert-objects)
    (mach-o-writer2 write-mach-o-library/fragments)
    (compiler compile-main-module parse-module-files)
    (either
      #:types ()
      #:values ()
      #:patterns (left right)))
  (export)
  (types)

  (define (add-known-functions [tlos : (List TopLevelObject)]
                               [dict : (Dict Bytes Bytes)]) : (Dict Bytes Bytes)
    (case tlos
      [(empty) dict]
      [(cons (trivial-closure-tlo name fun-name) tlos)
       (add-known-functions tlos (dict-add dict name fun-name))]
      [(cons _ tlos)
       (add-known-functions tlos dict)]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (case (parse-module-files 2 args)
          [(left v)
           (begin
             (write-line v stderr)
             1)]
          [(right modules)
           (case (reverse modules)
             [(cons main-module other-modules)
              (case (compile-main-module main-module (reverse other-modules))
                [(left v)
                 (begin
                   (write-line v stderr)
                   1)]
                [(right objects)
                 (case (write-mach-o-library/fragments (array-ref args 1) (convert-objects objects))
                   [(left v)
                    (begin
                      (write-line v stderr)
                      1)]
                   [(right _)
                    0])])])]))))
