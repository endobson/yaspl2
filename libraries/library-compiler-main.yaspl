(module library-compiler-main
  (import
    (prim
      #:types (Bytes InputPort OutputPort Array Int)
      #:values ()
      #:patterns ())
    (io write-line call-with-output-file write-all-bytes read-all-bytes
        call-with-input-file)
    (list
      #:types (List)
      #:values (array->list cons empty)
      #:patterns (empty cons))
    (x86-64-stack-machine convert-objects)
    (mach-o-writer2 write-mach-o-library/fragments)
    (module-signature
      #:types (ModuleSignature)
      #:values ()
      #:patterns ())
    (compiler compile-main-module parse-module-file)
    (module-signature-serialization deserialize-module-signature serialize-module-signature)
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export)
  (types)


  ;; Splits the even and odd elements into two separate lists
  (define (split-inputs [l : (List Bytes)]) : (Tuple2 (List Bytes) (List Bytes))
    (case l
      [(empty) (tuple2 (empty) (empty))]
      [(cons e1 (cons e2 l))
       (case (split-inputs l)
         [(tuple2 l1 l2)
          (tuple2 (cons e1 l1) (cons e2 l2))])]))

  (define (parse-signature-files [files : (List Bytes)]) : (Either Bytes (List ModuleSignature))
    (case files
      [(empty) (right (empty))]
      [(cons name files)
       (case (deserialize-module-signature (call-with-input-file name read-all-bytes))
         [(left v) (left v)]
         [(right sig)
          (case (parse-signature-files files)
            [(left v) (left v)]
            [(right sigs) (right (cons sig sigs))])])]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (case (array->list args)
      [(empty)
       (begin
         (write-line #"No executable specified???" stderr)
         1)]
      [(cons _ (empty))
       (begin
         (write-line #"No output object file name supplied." stderr)
         1)]
      [(cons _ (cons _ (empty)))
       (begin
         (write-line #"No output signature file name supplied." stderr)
         1)]
      [(cons _ (cons output-object-file (cons output-signature-file module-files)))
       (case module-files
         [(cons main-module-file sig-files)
          (case (parse-module-file main-module-file)
            [(left v)
             (begin
               (write-line v stderr)
               1)]
            [(right main-module)
             (case (parse-signature-files sig-files)
               [(left v)
                (begin
                  (write-line v stderr)
                  1)]
               [(right signatures)
                (case (compile-main-module main-module signatures)
                  [(left v)
                   (begin
                     (write-line v stderr)
                     1)]
                  [(right (tuple2 objects sig))
                   (case (write-mach-o-library/fragments output-object-file (convert-objects objects))
                     [(left v)
                      (begin
                        (write-line v stderr)
                        1)]
                     [(right _)
                      (begin
                        (call-with-output-file output-signature-file
                          (lambda ([output-port : OutputPort])
                            (write-all-bytes (serialize-module-signature sig) output-port)))
                        0)])])])])])])))
