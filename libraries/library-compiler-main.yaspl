#:module (library-compiler-main)
#:import {
  (bytes)
  (compiler)
  (either)
  (io)
  (list)
  (machine-code-writer)
  (maybe)
  {(module-signature-serialization)
    {#:values
      serialize-module-signature
    }
  }
  (prim)
  (system-abi)
  (tuples)
  (yaspl frontend errors)
  (yaspl parser)
  {(yaspl top-level-objects-to-x86-64)
    {#:values
      convert-objects
    }
  }
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [abi : SystemAbi]
      [output-object-file : Bytes]
      [output-signature-file : Bytes]
      [module-file : Bytes]
      [sig-files : (List Bytes)])))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable specified???")]
    [(cons _ (empty))
     (left #"No abi supplied.")]
    [(cons _ (cons _ (empty)))
     (left #"No output object file name supplied.")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No output signature file name supplied.")]
    [(cons _ (cons _ (cons _ (cons _ (empty)))))
     (left #"No module file name supplied.")]
    [(cons _ (cons abi
                   (cons output-object-file
                         (cons output-signature-file
                               (cons module-file sig-files)))))
     (case (parse-system-abi abi)
       [(nothing) (left (bytes-append (varargs list #"Unknown abi:" abi)))]
       [(just abi)
        (right (args abi output-object-file output-signature-file module-file
                     sig-files))])]))

(define (run [input : (List Bytes)]) : (Maybe Bytes)
  (case (parse-args input)
    [(left v) (just v)]
    [(right (args abi output-object-file output-signature-file module-file sig-files))
     (case (parse-module-file module-file)
       [(left v) (just (parser-error->bytes v))]
       [(right main-module)
        (case (parse-signature-files sig-files)
          [(left v) (just v)]
          [(right signatures)
           (case (compile-main-module main-module signatures)
             [(left v) (just (module-compilation-error->bytes v))]
             [(right (tuple2 objects sig))
              (begin
                (write-library-object-file (convert-objects objects) abi output-object-file)
                (call-with-output-file/void output-signature-file
                  (lambda ([output-port : OutputPort])
                    (write-all-bytes (serialize-module-signature sig) output-port)))
                (nothing))])])])]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (run (args->list args))
    [(just v)
     (begin
       (write-all-bytes v stderr)
       1)]
    [(nothing)
     0]))
