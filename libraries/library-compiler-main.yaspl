#:module (library-compiler-main)
#:import {
  (assembler)
  {(compiler)
    {#:values
      compile-main-module
      parse-module-file
    }
  }
  (either)
  (io)
  (list)
  {(mach-o-writer)
    {#:values
      write-mach-o-library
    }
  }
  {(module-signature)
    {#:types
      ModuleSignature
    }
  }
  {(module-signature-serialization)
    {#:values
      deserialize-module-signature
      serialize-module-signature
    }
  }
  (prim)
  (tuples)
  {(yaspl top-level-objects-to-x86-64)
    {#:values
      convert-objects
    }
  }
}
(export)
(types)

(define (parse-signature-files [files : (List Bytes)]) : (Either Bytes (List ModuleSignature))
  (case files
    [(empty) (right (empty))]
    [(cons name files)
     (case (deserialize-module-signature (call-with-input-file name read-all-bytes))
       [(left v) (left v)]
       [(right sig)
        (case (parse-signature-files files)
          [(left v) (left v)]
          [(right sigs) (right (cons sig sigs))])])]))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No output object file name supplied." stderr)
       1)]
    [(cons _ (cons _ (empty)))
     (begin
       (write-line #"No output signature file name supplied." stderr)
       1)]
    [(cons _ (cons _ (cons _ (empty))))
     (begin
       (write-line #"No main-moudle file name supplied." stderr)
       1)]
    [(cons _ (cons output-object-file (cons output-signature-file (cons main-module-file sig-files))))
     (case (parse-module-file main-module-file)
       [(left v)
        (begin
          (write-line v stderr)
          1)]
       [(right main-module)
        (case (parse-signature-files sig-files)
          [(left v)
           (begin
             (write-line v stderr)
             1)]
          [(right signatures)
           (case (compile-main-module main-module signatures)
             [(left v)
              (begin
                (write-line v stderr)
                1)]
             [(right (tuple2 objects sig))
              (match-define (tuple2 text-section const-section)
                (assemble-text-segment (convert-objects objects)))
              (case (write-mach-o-library text-section const-section output-object-file)
                [(left v)
                 (begin
                   (write-line v stderr)
                   1)]
                [(right _)
                 (begin
                   (call-with-output-file output-signature-file
                     (lambda ([output-port : OutputPort])
                       (write-all-bytes (serialize-module-signature sig) output-port)))
                   0)])])])])]))
