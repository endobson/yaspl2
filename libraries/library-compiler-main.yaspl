(module library-compiler-main
  (import
    (prim
      #:types (Bytes InputPort OutputPort Array Int)
      #:values (< array-length array-ref void)
      #:patterns ())
    (io write-line call-with-output-file)
    (list
      #:types (List)
      #:values (reverse array->list)
      #:patterns (empty cons))
    (dict
      #:types (Dict)
      #:values (dict-add)
      #:patterns ())
    (stack-machine
      #:types (TopLevelObject)
      #:values ()
      #:patterns (trivial-closure-tlo))
    (x86-64-stack-machine convert-objects)
    (mach-o-writer2 write-mach-o-library/fragments)
    (compiler compile-main-module parse-module-files)
    (either
      #:types ()
      #:values ()
      #:patterns (left right)))
  (export)
  (types)

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
    (case (array->list args)
      [(empty)
       (begin
         (write-line #"No executable specified???" stderr)
         1)]
      [(cons _ (empty))
       (begin
         (write-line #"No output object file name supplied." stderr)
         1)]
      [(cons _ (cons _ (empty)))
       (begin
         (write-line #"No output signature file name supplied." stderr)
         1)]
      [(cons _ (cons output-object-file (cons output-signature-file module-files)))
       (case (parse-module-files module-files)
         [(left v)
          (begin
            (write-line v stderr)
            1)]
         [(right modules)
          (case (reverse modules)
            [(cons main-module other-modules)
             (case (compile-main-module main-module (reverse other-modules))
               [(left v)
                (begin
                  (write-line v stderr)
                  1)]
               [(right objects)
                (case (write-mach-o-library/fragments output-object-file (convert-objects objects))
                  [(left v)
                   (begin
                     (write-line v stderr)
                     1)]
                  [(right _)
                   (begin
                     (call-with-output-file output-signature-file
                                            (lambda ([output-port : OutputPort]) (void)))
                     0)])])])])])))
