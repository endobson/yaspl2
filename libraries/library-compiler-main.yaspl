#:module (library-compiler-main)
#:import {
  (assembler)
  (compiler)
  (either)
  (io)
  (list)
  {(mach-o-writer)
    {#:values
      write-mach-o-library
    }
  }
  {(module-signature-serialization)
    {#:values
      serialize-module-signature
    }
  }
  (prim)
  (tuples)
  {(yaspl top-level-objects-to-x86-64)
    {#:values
      convert-objects
    }
  }
  (yaspl x86-64-assembly)
}
(export)
(types)

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No output object file name supplied." stderr)
       1)]
    [(cons _ (cons _ (empty)))
     (begin
       (write-line #"No output signature file name supplied." stderr)
       1)]
    [(cons _ (cons _ (cons _ (empty))))
     (begin
       (write-line #"No main-moudle file name supplied." stderr)
       1)]
    [(cons _ (cons output-object-file (cons output-signature-file (cons main-module-file sig-files))))
     (case (parse-module-file main-module-file)
       [(left v)
        (begin
          (write-line v stderr)
          1)]
       [(right main-module)
        (case (parse-signature-files sig-files)
          [(left v)
           (begin
             (write-line v stderr)
             1)]
          [(right signatures)
           (case (compile-main-module main-module signatures)
             [(left v)
              (begin
                (write-line v stderr)
                1)]
             [(right (tuple2 objects sig))
              (match-define (assembly-fragments text-fragments const-fragments)
                (convert-objects objects))
              (match-define text-section (assemble-text-section text-fragments))
              (match-define const-section (assemble-const-section const-fragments))
              (begin
                (write-mach-o-library text-section const-section output-object-file)
                (call-with-output-file/void output-signature-file
                  (lambda ([output-port : OutputPort])
                    (write-all-bytes (serialize-module-signature sig) output-port)))
                0)])])])]))
