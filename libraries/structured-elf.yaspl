#:module (structured-elf)
#:import {
  (aligned-bytes)
  (either)
  (formats elf)
  (list)
  (prim)
  (structured-native-code)
}
(export
  (#:types ElfRelocationKind)
  (#:values
     elf-pc32-relocation
     abstract-relocation->elf-relocation
     parse-elf parsed-elf-text-section)
  (#:patterns elf-pc32-relocation))
(types
  (define-type ParsedElf
    (parsed-elf
      [text-section : (ProgramSection ElfRelocationKind)]))
  (define-type ElfRelocationKind
    (elf-pc32-relocation)))

(define (abstract-relocation->elf-relocation [r : AbstractRelocationKind])
  : ElfRelocationKind
  (case r
    [(branch-relocation) (elf-pc32-relocation)]
    [(call-relocation) (elf-pc32-relocation)]
    [(load-relocation) (elf-pc32-relocation)]
    [(address-relocation) (elf-pc32-relocation)]))

(define (parse-elf [elf : ElfFile]) : (Either Bytes ParsedElf)
  (case (elf-file->text-contents elf)
    [(left v) (left v)]
    [(right text-contents)
     (right
       (parsed-elf
         (program-section
           (aligned-bytes text-contents 1)
           (empty)
           (empty)
           (empty))))]))
