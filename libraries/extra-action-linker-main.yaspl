(module extra-action-linker-main
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Void Byte S64 Boolean U8)
      #:values (array-length < array-ref bytes-length + * - panic quotient)
      #:patterns ())
    (bytes bytes-append ends-with?)
    (set make-set set->list set-add-all)
    (maybe
      #:types (Maybe)
      #:values ()
      #:patterns (just nothing))
    (list
      #:types (List)
      #:values (cons map filter sort)
      #:patterns (cons empty))
    (either
      #:types ()
      #:values ()
      #:patterns (right left))
    (mach-o
      #:types (MachOLoadCommand MachOFile SymbolTable Section64 SymbolTableEntry
               RelocationEntry)
      #:values (read-mach-o symbol-table-entry)
      #:patterns (mach-o-header lc-segment64 lc-symtab lc-version-min-macosx
                  lc-data-in-code symbol-table load-segment64 section64
                  symbol-table-entry relocation-entry))
    (mach-o-writer2 write-mach-o-executable)
    (linker
      #:types (ParsedMachO RelocationMarker)
      #:values (parsed-mach-o-const-section parsed-mach-o-text-section
                apply-text-relocations apply-const-relocations get-relocation-markers
                symbol-table-entry-name< get-offset-symbols symbol-table-entry-name=? parse-mach-o)
      #:patterns (parsed-mach-o relocation-marker))
    (io write-line read-all-bytes call-with-input-file )
    (extra-action-parser
      #:types ()
      #:values (proto-parser parse-extra-action-info)
      #:patterns (extra-action-info spawn-info)))
  (export)
  (types)

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (< (array-length args) 3)
        (begin
          (write-line #"Too few arguments" stderr)
          1)
        (let ([bytes (call-with-input-file (array-ref args 1) read-all-bytes)])
          (let ([output-file-name (array-ref args 2)])
            (let ([limit (bytes-length bytes)])
              (case (parse-extra-action-info (proto-parser bytes 0 limit))
                [(left msg)
                 (begin
                   (write-line msg stderr)
                   1)]
                [(right info)
                 (case info
                   [(extra-action-info owner id mnemonic (spawn-info arguments input-files output-files))
                    (case mnemonic
                      [#"YasplLink"
                       (let ([mach-o-files
                              (map
                                (lambda ([input-path : Bytes])
                                  (call-with-input-file input-path
                                    (lambda ([input-file : InputPort])
                                      (case (read-mach-o input-file)
                                        [(right mach-o-file)
                                         mach-o-file]
                                        [(left msg)
                                         (panic msg)]))))
                                (filter
                                  (lambda ([input-path : Bytes])
                                    (ends-with? input-path #".o"))
                                  input-files))])
                         (let ([parsed-mach-o-files (map parse-mach-o mach-o-files)])
                           (let ([text-section
                                   (bytes-append (map parsed-mach-o-text-section parsed-mach-o-files))])
                             (let ([const-section
                                     (bytes-append (map parsed-mach-o-const-section parsed-mach-o-files))])
                               (let ([rounded-text-segment-length
                                      (let ([text-segment-length
                                             (+ (bytes-length text-section)
                                                (bytes-length const-section))])
                                        (* #x1000 (+ (quotient (+ text-segment-length #x330) #x1000) 1)))])
                                 (let ([symbol-table-entries
                                        (sort
                                          (set->list
                                            (set-add-all
                                              ;; TODO make sure that the right definition is kept
                                              (make-set symbol-table-entry-name=?)
                                              (cons (symbol-table-entry #"__mh_execute_header" 3 1 #x10
                                                                        #x100000000)
                                                    (get-offset-symbols parsed-mach-o-files
                                                                        (+ #x100000000
                                                                           (- rounded-text-segment-length
                                                                              (+ (bytes-length
                                                                                   text-section)
                                                                                 (bytes-length
                                                                                   const-section))))
                                                                        (+ #x100000000
                                                                           (- rounded-text-segment-length
                                                                              (bytes-length
                                                                                 const-section)))))))
                                          symbol-table-entry-name<)])
                                   (let ([relocation-markers
                                          (get-relocation-markers parsed-mach-o-files 0 0)])
                                     (begin
                                       (apply-const-relocations
                                         relocation-markers
                                         symbol-table-entries
                                         const-section)
                                       (apply-text-relocations
                                         relocation-markers
                                         symbol-table-entries
                                         text-section
                                         (+ #x100000000
                                            (- rounded-text-segment-length
                                               (+ (bytes-length
                                                    text-section)
                                                  (bytes-length
                                                    const-section)))))
                                       (case (write-mach-o-executable
                                               symbol-table-entries
                                               text-section const-section
                                               output-file-name)
                                         [(left v)
                                          (begin
                                            (write-line v stderr)
                                            1)]
                                         [(right _)
                                          0])))))))))]
                      [x
                        (begin
                          (write-line x stderr)
                          1)])])])))))))
