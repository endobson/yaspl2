(module mach
  (import
    (prim
      #:types (Bytes OutputPort Byte)
      #:values (make-bytes bytes-length bytes-ref
                mach-task-self mach-thread-self mach-reply-port mach-msg mach-port-mod-refs
                thread-bootstrap-address
                - + * = panic)
      #:patterns ())
    (io write-line)
    (list
      #:types (List)
      #:values (cons empty)
      #:patterns (cons empty))
    (bytes bytes-ref/quad-le bytes-set!/quad-le bytes-set!/octo-le)
    (numbers integer->hex-bytes))
  (export spawn)
  (types
    (define-type MachMessageHeader
      (mach-message-header
        [options Byte]
        [size Byte]
        [remote-port Byte]
        [reply-port Byte]
        [voucher-port Byte]
        [message-id Byte]))
    (define-type MachMessageDescriptor
      (mach-port-descriptor
        [name Byte]
        [disposition Byte]))
    (define-type X86ThreadState64
      (x86-thread-state-64
        [rax Byte]
        [rbx Byte]
        [rcx Byte]
        [rdx Byte]
        [rdi Byte]
        [rsi Byte]
        [rbp Byte]
        [rsp Byte]
        [r8 Byte]
        [r9 Byte]
        [r10 Byte]
        [r11 Byte]
        [r12 Byte]
        [r13 Byte]
        [r14 Byte]
        [r15 Byte]
        [rip Byte])))


  (define (write-mach-message-header [hdr : MachMessageHeader] [bytes : Bytes]) : Void
    (case hdr
      [(mach-message-header options size remote-port local-port voucher-port message-id)
       (begin
         (bytes-set!/quad-le bytes 0 options)
         (bytes-set!/quad-le bytes 4 size)
         (bytes-set!/quad-le bytes 8 remote-port)
         (bytes-set!/quad-le bytes 12 local-port)
         (bytes-set!/quad-le bytes 16 voucher-port)
         (bytes-set!/quad-le bytes 20 message-id))]))

  (define (parse-mach-message-header [bytes : Bytes]) : MachMessageHeader
    (mach-message-header
      (bytes-ref/quad-le bytes 0)
      (bytes-ref/quad-le bytes 4)
      (bytes-ref/quad-le bytes 8)
      (bytes-ref/quad-le bytes 12)
      (bytes-ref/quad-le bytes 16)
      (bytes-ref/quad-le bytes 20)))
  (define (debug-mach-message-header [hdr : MachMessageHeader] [out : OutputPort]) : Void
    (case hdr
      [(mach-message-header options size remote-port local-port voucher-port message-id)
       (begin
         (write-line (integer->hex-bytes options) out)
         (write-line (integer->hex-bytes size) out)
         (write-line (integer->hex-bytes remote-port) out)
         (write-line (integer->hex-bytes local-port) out)
         (write-line (integer->hex-bytes voucher-port) out)
         (write-line (integer->hex-bytes message-id) out))]))

  (define (parse-mach-message-body [bytes : Bytes]) : (List MachMessageDescriptor)
    (parse-mach-message-body/loop bytes 28 (bytes-ref/quad-le bytes 24)))

  (define (parse-mach-message-body/loop [bytes : Bytes] [offset : Byte] [num-descriptors : Byte])
    : (List MachMessageDescriptor)
    (if (= 0 num-descriptors)
        (empty)
        (cons
          (let ([descriptor-type (bytes-ref bytes (+ offset 11))])
            (if (= descriptor-type 0)
                (mach-port-descriptor
                  (bytes-ref/quad-le bytes offset)
                  (bytes-ref bytes (+ offset 10)))
                (panic #"Bad MachMessageDescriptor")))
          (parse-mach-message-body/loop bytes (+ offset 12) (- num-descriptors 1)))))


  (define (write-x86-thread-state-64 [state : X86ThreadState64] [bytes : Bytes]) : Void
    (case state
      [(x86-thread-state-64 rax rbx rcx rdx rdi rsi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 rip)
       (begin
         ;; Set NDR record
         (bytes-set!/octo-le bytes 24 (ndr-record))
         ;; Set the state type (x86_THREAD_STATE64 = 4)
         (bytes-set!/quad-le bytes 32 4)
         ;; Set the size of the state (x86_THREAD_STATE64_COUNT = 42, 21 64bit registers)
         (bytes-set!/quad-le bytes 36 42)
         ;; Set the registers
         (bytes-set!/octo-le bytes 40 rax)
         (bytes-set!/octo-le bytes 48 rbx)
         (bytes-set!/octo-le bytes 56 rcx)
         (bytes-set!/octo-le bytes 64 rdx)
         (bytes-set!/octo-le bytes 72 rdi)
         (bytes-set!/octo-le bytes 80 rsi)
         (bytes-set!/octo-le bytes 88 rbp)
         (bytes-set!/octo-le bytes 96 rsp)
         (bytes-set!/octo-le bytes 104 r8)
         (bytes-set!/octo-le bytes 112 r9)
         (bytes-set!/octo-le bytes 120 r10)
         (bytes-set!/octo-le bytes 128 r11)
         (bytes-set!/octo-le bytes 136 r12)
         (bytes-set!/octo-le bytes 144 r13)
         (bytes-set!/octo-le bytes 152 r14)
         (bytes-set!/octo-le bytes 160 r15)
         (bytes-set!/octo-le bytes 168 rip))]))

  (define (ndr-record) : Byte
    #x100000000)


  (define (mach-msg/send-recv [bytes : Bytes] [send-size : Byte] [reply-port : Port]) : Void
    (mach-msg reply-port bytes 3 send-size (bytes-length bytes) 0 0))

  (define (mach-unref-reply-port [reply-port : Byte]) : Void
    (let ([task-port (mach-task-self)])
      (mach-port-mod-refs task-port reply-port 1 (- 0 1))))

  (define (terminate-thread [thread : MachThreadPort]) : Void
    (let ([buffer (make-bytes 44)])
      (let ([reply-port (mach-reply-port)])
        (begin
          (write-mach-message-header
            (mach-message-header
              #x1511
              0
              thread
              reply-port
              0
              #xE10)
            buffer)
          (mach-msg/send-recv buffer 24 reply-port)
          (mach-unref-reply-port reply-port)))))

  (define (suspend-thread [thread : MachThreadPort]) : Void
    (let ([buffer (make-bytes 44)])
      (let ([reply-port (mach-reply-port)])
        (begin
          (write-mach-message-header
            (mach-message-header
              #x1513
              0
              thread
              reply-port
              0
              #xE15)
            buffer)
          (mach-msg/send-recv buffer 24 reply-port)
          (mach-unref-reply-port reply-port)))))

  (define (resume-thread [thread : MachThreadPort]) : Void
    (let ([buffer (make-bytes 44)])
      (let ([reply-port (mach-reply-port)])
        (begin
          (write-mach-message-header
            (mach-message-header
              #x1513
              0
              thread
              reply-port
              0
              #xE16)
            buffer)
          (mach-msg/send-recv buffer 24 reply-port)
          (mach-unref-reply-port reply-port)))))

  (define (thread-start [func : (-> Void)]) : (-> Void)
    (lambda ()
      (begin
        (func)
        (terminate-thread (mach-thread-self)))))

  (define (create-thread) : MachThreadPort
    (let ([buffer (make-bytes 48)])
      (begin
        (let ([task-port (mach-task-self)])
          (let ([reply-port (mach-reply-port)])
            (begin
              (write-mach-message-header
                (mach-message-header
                  #x1513
                  0
                  task-port
                  reply-port
                  0
                  #xD53)
                buffer)
              (mach-msg/send-recv buffer 24 reply-port)
              (mach-unref-reply-port reply-port))))
        (case (parse-mach-message-body buffer)
          [(cons (mach-port-descriptor port-name _) (empty))
           port-name]
          [_ (panic #"Bad MachMessageBody")]))))

  (define (thread-set-function! [thread : MachThreadPort] [fun : (-> Void)]) : Void
    (let ([buffer (make-bytes 208)])
      (let ([reply-port (mach-reply-port)])
        (begin
          (write-mach-message-header
            (mach-message-header
              #x1513
              0
              thread
              reply-port
              0
              #xE14)
            buffer)

          (write-x86-thread-state-64 
            (x86-thread-state-64
              (thread-start fun)
              0
              0
              0
              0
              0
              (make-bytes #x100000)
              (+ (make-bytes #x10000) #x10000)
              0
              0
              0
              0
              0
              0
              0
              0
              thread-bootstrap-address)
            buffer)

          (mach-msg/send-recv buffer 208 reply-port)
          (mach-unref-reply-port reply-port)))))

  (define (spawn [fun : (-> Void)]) : Void
    (let ([thread (create-thread)])
      (begin
        (thread-set-function! thread fun)
        (resume-thread thread)))))

