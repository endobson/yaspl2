#:module (mach)
#:import {
  (bytes)
  (list)
  (panic)
  (prim)
}
(export
  (#:types)
  (#:values spawn)
  (#:patterns))
(types
  (define-type MachMessageHeader
    (mach-message-header
      [options : U32]
      [size : U32]
      [remote-port : MachPort]
      [reply-port : MachPort]
      [voucher-port : MachPort]
      [message-id : S32]))
  (define-type MachMessageDescriptor
    (mach-port-descriptor
      [name : MachPort]
      [disposition : U8]))
  (define-type X86ThreadState64
    (x86-thread-state-64
      [rax : S64]
      [rbx : S64]
      [rcx : S64]
      [rdx : S64]
      [rdi : S64]
      [rsi : S64]
      [rbp : S64]
      [rsp : S64]
      [r8 : S64]
      [r9 : S64]
      [r10 : S64]
      [r11 : S64]
      [r12 : S64]
      [r13 : S64]
      [r14 : S64]
      [r15 : S64]
      [rip : S64])))


(define (write-mach-message-header [hdr : MachMessageHeader] [bytes : Bytes]) : Void
  (case hdr
    [(mach-message-header options size remote-port local-port voucher-port message-id)
     (begin
       (bytes-set!/quad-le bytes 0 options)
       (bytes-set!/quad-le bytes 4 size)
       (bytes-set!/quad-le bytes 8 (mach-port->u32 remote-port))
       (bytes-set!/quad-le bytes 12 (mach-port->u32 local-port))
       (bytes-set!/quad-le bytes 16 (mach-port->u32 voucher-port))
       ;; TODO make this work for s32 as well
       (bytes-set!/quad-le bytes 20 (u32 (s32->s64 message-id))))]))

(define (parse-mach-message-body [bytes : Bytes]) : (List MachMessageDescriptor)
  (parse-mach-message-body/loop bytes 28 (bytes-ref/quad-le bytes 24)))

(define (parse-mach-message-body/loop [bytes : Bytes] [offset : Int] [num-descriptors : Int])
  : (List MachMessageDescriptor)
  (if (= 0 num-descriptors)
      (empty)
      (cons
        (let ([descriptor-type (u8->s64 (bytes-ref bytes (+ offset 11)))])
          (if (= descriptor-type 0)
              (mach-port-descriptor
                (u32->mach-port (u32 (bytes-ref/quad-le bytes offset)))
                (bytes-ref bytes (+ offset 10)))
              (panic #"Bad MachMessageDescriptor")))
        (parse-mach-message-body/loop bytes (+ offset 12) (- num-descriptors 1)))))

(define (write-default-x86-thread-state-64 [bytes : Bytes]) : Void
  (begin
    ;; Set NDR record
    (bytes-set!/u64-le bytes 24 (u64 #x100000000))
    ;; Set the state type (x86_THREAD_STATE64 = 4)
    (bytes-set!/quad-le bytes 32 (u32 4))
    ;; Set the size of the state (x86_THREAD_STATE64_COUNT = 42, 21 64bit registers)
    (bytes-set!/quad-le bytes 36 (u32 42))
    ;; Set the all registers to 0
    (bytes-set!/u64-le bytes 40 (u64 0))
    (bytes-set!/u64-le bytes 48 (u64 0))
    (bytes-set!/u64-le bytes 56 (u64 0))
    (bytes-set!/u64-le bytes 64 (u64 0))
    (bytes-set!/u64-le bytes 72 (u64 0))
    (bytes-set!/u64-le bytes 80 (u64 0))
    (bytes-set!/u64-le bytes 88 (u64 0))
    (bytes-set!/u64-le bytes 96 (u64 0))
    (bytes-set!/u64-le bytes 104 (u64 0))
    (bytes-set!/u64-le bytes 112 (u64 0))
    (bytes-set!/u64-le bytes 120 (u64 0))
    (bytes-set!/u64-le bytes 128 (u64 0))
    (bytes-set!/u64-le bytes 136 (u64 0))
    (bytes-set!/u64-le bytes 144 (u64 0))
    (bytes-set!/u64-le bytes 152 (u64 0))
    (bytes-set!/u64-le bytes 160 (u64 0))
    (bytes-set!/u64-le bytes 168 (u64 0))))


(define (mach-msg/send-recv [bytes : Bytes] [send-size : Int] [reply-port : MachPort]) : Void
  (mach-msg bytes 3 send-size (bytes-length bytes) reply-port 0 0))

(define (mach-unref-reply-port [reply-port : MachPort]) : Void
  (let ([task-port (mach-task-self)])
    (mach-port-mod-refs task-port reply-port 1 (- 0 1))))

(define (terminate-thread [thread : MachPort]) : Void
  (let ([buffer (make-bytes 44)])
    (let ([reply-port (mach-reply-port)])
      (begin
        (write-mach-message-header
          (mach-message-header
            (u32 #x1511)
            (u32 0)
            thread
            reply-port
            (u32->mach-port (u32 0))
            (s32 #xE10))
          buffer)
        (mach-msg/send-recv buffer 24 reply-port)
        (mach-unref-reply-port reply-port)))))

(define (resume-thread [thread : MachPort]) : Void
  (let ([buffer (make-bytes 44)])
    (let ([reply-port (mach-reply-port)])
      (begin
        (write-mach-message-header
          (mach-message-header
            (u32 #x1513)
            (u32 0)
            thread
            reply-port
            (u32->mach-port (u32 0))
            (s32 #xE16))
          buffer)
        (mach-msg/send-recv buffer 24 reply-port)
        (mach-unref-reply-port reply-port)))))

(define (thread-start [func : (-> Void)]) : (-> Void)
  (lambda ()
    (begin
      (func)
      (terminate-thread (mach-thread-self)))))

(define (mach-start-thread [buffer : Bytes] [f : (-> Void)] [reply : MachPort]) : Void
  (panic/void #"Start thread was deleted to avoid gc issues"))

(define (create-thread) : MachPort
  (let ([buffer (make-bytes 48)])
    (begin
      (let ([task-port (mach-task-self)])
        (let ([reply-port (mach-reply-port)])
          (begin
            (write-mach-message-header
              (mach-message-header
                (u32 #x1513)
                (u32 0)
                task-port
                reply-port
                (u32->mach-port (u32 0))
                (s32 #xD53))
              buffer)
            (mach-msg/send-recv buffer 24 reply-port)
            (mach-unref-reply-port reply-port))))
      (case (parse-mach-message-body buffer)
        [(cons (mach-port-descriptor port-name _) (empty))
         port-name]
        [_ (begin (panic/void #"Bad MachMessageBody") (mach-task-self))]))))

(define (thread-set-function! [thread : MachPort] [fun : (-> Void)]) : Void
  (let ([buffer (make-bytes 208)])
    (let ([reply-port (mach-reply-port)])
      (begin
        (write-mach-message-header
          (mach-message-header
            (u32 #x1513)
            (u32 0)
            thread
            reply-port
            (u32->mach-port (u32 0))
            (s32 #xE14))
          buffer)

        ;; UNSAFE
        ;; These function turn GC pointers into ints
        ;; TODO move within the core.
        (write-default-x86-thread-state-64 buffer)
        (mach-start-thread buffer (thread-start fun) reply-port)
        (mach-unref-reply-port reply-port)))))

(define (spawn [fun : (-> Void)]) : Void
  (let ([thread (create-thread)])
    (begin
      (thread-set-function! thread fun)
      (resume-thread thread))))
