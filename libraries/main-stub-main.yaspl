#:module (main-stub-main)
#:import {
  (data source-location)
  (either)
  (io)
  (list)
  (machine-code)
  (machine-code-writer)
  (maybe)
  (module-name)
  (prim)
  (prim-implementation)
  (sexp-parser)
  (top-level-name)
  (x86-64-runtime)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects-to-x86-64)
  (yaspl x86-64-assembly)
}
(export
  (#:types)
  (#:values main)
  (#:patterns))
(types
  (define-type Args
    (args
      [output-format : MachineCodeOutputFormat]
      [output-file : Bytes]
      [module-name-file : Bytes])))

(define (append-fragments [f1 : AssemblyFragments] [f2 : AssemblyFragments]) : AssemblyFragments
  (match-define (assembly-fragments text1 const1) f1)
  (match-define (assembly-fragments text2 const2) f2)
  (assembly-fragments (append text1 text2) (append const1 const2)))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable specified???")]
    [(cons _ (empty))
     (left #"No output format supplied")]
    [(cons _ (cons _ (empty)))
     (left #"No output file name supplied")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No module name supplied")]
    [(cons _ (cons _ (cons _ (cons _ (cons _ _)))))
     (left #"Too many arguments.")]
    [(cons _ (cons output-format-bytes (cons output-file (cons module-name-file (empty)))))
     (case (parse-machine-code-output-format output-format-bytes)
       [(nothing) (left #"Unknown output format")]
       [(just output-format)
        (right (args output-format output-file module-name-file))])]))

(define (run [input : (List Bytes)]) : (Maybe Bytes)
  (case (parse-args input)
    [(left v) (just v)]
    [(right (args output-format output-file module-name-file))
     (case (parse-single-sexp (sourced-bytes (unnamed-source) module-name-file))
       [(left _) (just #"Unparseable module name sexp")]
       [(right v)
        (case (sexp->mod-name v)
          [(nothing) (just #"Unparseable module name")]
          [(just mod-name)
           (match-define fragments
             (append-fragments
               (yaspl-runtime (top-level-name mod-name #"main_closure")
                              (machine-code-output-format-abi output-format))
               (convert-objects (optimize-tlos (prim-implementation)))))
           (begin
             (write-library-machine-code fragments output-format output-file)
             (nothing))])])]))


(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (run (array->list args))
    [(just v)
     (begin
       (write-line v stderr)
       1)]
    [(nothing)
     0]))
