#:module (main-stub-main)
#:import {
  (bytes)
  (dict)
  (either)
  (io)
  (list)
  (machine-code)
  (machine-code-writer)
  (maybe)
  (module-signature)
  (module-signature-serialization)
  (prim)
  (prim-implementation)
  (prim-types)
  (types)
  (x86-64-runtime)
  (yaspl top-level-object-optimizer)
  (yaspl top-level-objects-to-x86-64)
  (yaspl x86-64-assembly)
}
(export
  (#:values main))
(types
  (define-type Args
    (args
      [output-format : MachineCodeOutputFormat]
      [output-file : Bytes]
      [module-sig-file : Bytes])))

(define (append-fragments [f1 : AssemblyFragments] [f2 : AssemblyFragments]) : AssemblyFragments
  (match-define (assembly-fragments text1 const1) f1)
  (match-define (assembly-fragments text2 const2) f2)
  (assembly-fragments (append text1 text2) (append const1 const2)))

(define (parse-args [input : (List Bytes)]) : (Either Bytes Args)
  (case input
    [(empty)
     (left #"No executable specified???")]
    [(cons _ (empty))
     (left #"No output format supplied")]
    [(cons _ (cons _ (empty)))
     (left #"No output file name supplied")]
    [(cons _ (cons _ (cons _ (empty))))
     (left #"No module name supplied")]
    [(cons _ (cons _ (cons _ (cons _ (cons _ _)))))
     (left #"Too many arguments.")]
    [(cons _ (cons output-format-bytes (cons output-file (cons module-sig-file (empty)))))
     (case (parse-machine-code-output-format output-format-bytes)
       [(nothing) (left #"Unknown output format")]
       [(just output-format)
        (right (args output-format output-file module-sig-file))])]))

(define (main-type) : Type
  (fun-type (empty)
            (varargs list (bytes-type) (file-descriptor-type)
                          (file-descriptor-type) (file-descriptor-type))
            (int-type)))

(define (run [input : (List Bytes)]) : (Maybe Bytes)
  (case (parse-args input)
    [(left v) (just v)]
    [(right (args output-format output-file module-sig-file))
     (case (deserialize-module-signature (sourced-bytes-from-file module-sig-file))
       [(left v) (just v)]
       [(right (module-signature _ values _ _ _ _))
        (case (dict-ref values #"main")
          [(nothing)
           (just #"No main function exported")]
          [(just (value-signature type name))
           (if (type=? type (main-type))
               (let ([fragments
                       (append-fragments
                         (yaspl-runtime name (machine-code-output-format-abi output-format))
                         (convert-objects (optimize-tlos (prim-implementation))))])
                 (begin
                   (write-library-machine-code fragments output-format output-file)
                   (nothing)))
               (just #"Main function has wrong type"))])])]))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (run (args->list args))
    [(just v)
     (begin
       (write-all-bytes v stderr)
       1)]
    [(nothing)
     0]))
