(module validator
  (import
    (prim
      #:types (Bytes Boolean Void)
      #:values (panic void make-bytes bytes-set! bytes-length +)
      #:patterns ())
    (maybe
      #:types (Maybe)
      #:values (nothing just)
      #:patterns (nothing just))
    (bytes bytes=? bytes-append bytes-copy!)
    (dict
      #:types (Dict)
      #:values (dict-set dict-ref make-dict dict-keys)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty list map)
      #:patterns (cons empty))
    (source-language
      #:types (Module Expression CaseClause Pattern FunctionDefinition TypeDefinition
                      VariantDefinition VariantField Imports Import)
      #:values (module-definitions)
      #:patterns (byte-literal bytes-literal boolean-literal var-expr if-expr begin-expr app-expr
                  varargs-app-expr let-expr case-expr case-clause bytes-pattern byte-pattern
                  variable-pattern ignore-pattern abstraction-pattern function-definition
                  module imports import variant-definition variant-field type-definition))
    (source-to-stack
      #:types (ModuleSignature)
      #:values ()
      #:patterns ()))
  (export validate-module)
  (types)

  (define (validate-module [mod : Module] [sig : (List ModuleSignature)]) : (Maybe Bytes)
    (let ([free (free-variables/definitions
                  (module-definitions mod) (module-environment mod) (make-dict bytes=?))])
      (case (dict-keys free)
        [(empty) (nothing)]
        [keys (just (bytes-append (map add-newline (cons #"Unbound variables:" (map indent keys)))))])))

  (define (add-newline [bytes : Bytes]) : Bytes
    (let ([length (bytes-length bytes)])
      (let ([new-bytes (make-bytes (+ 1 length))])
        (begin
          (bytes-copy! bytes 0 length new-bytes 0)
          (bytes-set! new-bytes length 10)
          new-bytes))))

  (define (indent [bytes : Bytes]) : Bytes
    (let ([length (bytes-length bytes)])
      (let ([new-bytes (make-bytes (+ 2 length))])
        (begin
          (bytes-copy! bytes 0 length new-bytes 2)
          (bytes-set! new-bytes 0 32)
          (bytes-set! new-bytes 1 32)
          new-bytes))))


  (define (module-environment [mod : Module]) : (Dict Bytes Void)
    (case mod
      [(module _ imports _ types definitions)
       (add-importss-bindings imports
         (add-types-bindings types
           (add-definitions-bindings definitions
             (make-dict bytes=?))))]))

  (define (add-definitions-bindings [defs : (List FunctionDefinition)] [env : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case defs
      [(empty) env]
      [(cons (function-definition name _ _ _) defs)
       (add-definitions-bindings defs (dict-set env name (void)))]))

  (define (add-types-bindings [types : (List TypeDefinition)] [env : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case types
      [(empty) env]
      [(cons (type-definition name _ variants) types)
       (add-types-bindings types (add-variants-bindings variants env))]))

  (define (add-variants-bindings [variants : (List VariantDefinition)] [env : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case variants
      [(empty) env]
      [(cons (variant-definition name fields) variants)
       (add-variants-bindings variants (add-variant-field-bindings name fields (dict-set env name (void))))]))

  (define (add-variant-field-bindings [variant : Bytes] [fields : (List VariantField)] [env : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case fields
      [(empty) env]
      [(cons (variant-field name _) fields)
       (let ([acc-name (bytes-append (varargs list variant #"-" name))])
         (add-variant-field-bindings variant fields (dict-set env acc-name (void))))]))

  (define (add-importss-bindings [importss : (List Imports)] [env : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case importss
      [(empty) env]
      [(cons (imports _ _ values _) importss)
       (add-importss-bindings importss (add-imports-bindings values env))]))

  (define (add-imports-bindings [imports : (List Import)] [env : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case imports
      [(empty) env]
      [(cons (import _ name) imports)
       (add-imports-bindings imports (dict-set env name (void)))]))

  (define (free-variables/definitions
            [defs : (List FunctionDefinition)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case defs
      [(empty) acc]
      [(cons (function-definition _ _ args body) defs)
       (let ([fun-env (add-arg-bindings args env)])
         (free-variables/definitions defs env (free-variables body fun-env acc)))]))

  (define (add-arg-bindings [args : (List Bytes)] [env : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case args
      [(empty) env]
      [(cons arg args) (add-arg-bindings args (dict-set env arg (void)))]))


  (define (free-variables [expr : Expression] [env : (Dict Bytes Void)] [acc : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case expr
      [(byte-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(if-expr c t f)
       (free-variables/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-variables/list (cons e es) env acc)]
      [(app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-variables body (dict-set env name (void)) (free-variables expr env acc))]
      [(case-expr expr clauses)
       (free-variables/clauses clauses env (free-variables expr env acc))]
      [(var-expr v)
       (case (dict-ref env v)
         [(just _) acc]
         [(nothing) (dict-set acc v (void))])]))

  (define (free-variables/list
            [exprs : (List Expression)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-variables/list exprs env (free-variables expr env acc))]))

  (define (free-variables/clauses
            [exprs : (List CaseClause)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern expr) clauses)
       (free-variables/clauses clauses env (free-variables expr (add-pattern-bindings pattern env) acc))]))

  (define (add-pattern-bindings [p : Pattern] [env : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case p
      [(bytes-pattern _) env]
      [(byte-pattern _) env]
      [(ignore-pattern) env]
      [(variable-pattern v) (dict-set env v (void))]
      [(abstraction-pattern _ pats) (add-pattern-bindings/list pats env)]))

  (define (add-pattern-bindings/list [ps : (List Pattern)] [env : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case ps
      [(empty) env]
      [(cons p ps) (add-pattern-bindings/list ps (add-pattern-bindings p env))])))
