(module validator
  (import
    (prim
      #:types (Bytes)
      #:values (make-bytes bytes-set! bytes-length + > u8)
      #:patterns ())
    (tuples
      #:types (Tuple2 Tuple3)
      #:values (tuple3)
      #:patterns (tuple2 tuple3))
    (maybe
      #:types (Maybe)
      #:values (nothing just)
      #:patterns (nothing just))
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (bytes bytes=? bytes-append bytes-copy!)
    (multi-set
      #:types (MultiSet)
      #:values (make-multi-set multi-set-add multi-set-keys multi-set-count multi-set-add-all)
      #:patterns ())
    (set
      #:types (Set)
      #:values (make-set set->list set-add set-add-all set-member? set-remove-all)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty list map append)
      #:patterns (cons empty))
    (source-language
      #:types (Module Expression CaseClause Pattern FunctionDefinition TypeDefinition
                      VariantDefinition VariantField Imports Import PreType)
      #:values (module-definitions module-name module-types variant-field-type case-clause-expr
                module-exports exports-patterns exports-types exports-values
                export-local-name export-exported-name)
      #:patterns (int-literal bytes-literal boolean-literal var-expr if-expr begin-expr app-expr
                  varargs-app-expr let-expr case-expr case-clause bytes-pattern int-pattern
                  lambda-expr
                  variable-pattern ignore-pattern abstraction-pattern function-definition
                  module imports import variant-definition variant-field type-definition
                  var-pre-type fun-pre-type type-app-pre-type))
    (module-signature
      #:types (ModuleSignature)
      #:values ()
      #:patterns (module-signature)))
  (export
    #:types ()
    #:values (validate-module
              free-types/module free-variables/definitions free-patterns/definitions
              module-imported-environment module-imported-pattern-environment
              module-imported-type-environment)
    #:patterns ())
  (types)

  (define (validate-module [mod : Module] [sigs : (List ModuleSignature)]) : (Maybe Bytes)
    (case (validate-module/duplicate-bindings mod)
      [(left v) (just v)]
      [(right (tuple3 type-env env pat-env))
       (run-checks
         (varargs list
           ;; Check for free bindings
           (lambda () (validate-module/free-variables mod env))
           (lambda () (validate-module/free-patterns mod pat-env))
           (lambda () (validate-module/free-types mod type-env))
           ;; Check for undefined exported bindings
           (lambda () (validate-module/exported-variables mod env))
           (lambda () (validate-module/exported-patterns mod pat-env))
           (lambda () (validate-module/exported-types mod type-env))
           ;; Check for duplicate exported bindings
           (lambda () (validate-module/duplicate-exported-variables mod))
           (lambda () (validate-module/duplicate-exported-patterns mod))
           (lambda () (validate-module/duplicate-exported-types mod))

           (lambda () (validate-module/unique-name mod sigs))))]))

  (define (run-checks [checks : (List (-> (Maybe Bytes)))]) : (Maybe Bytes)
    (case checks
      [(empty) (nothing)]
      [(cons f checks)
       (case (f)
         [(just v) (just v)]
         [(nothing) (run-checks checks)])]))


  ;; Checks to make sure that there are no duplicate bindings.
  ;; If there are returns (left <error-message>), otherwise returns
  ;; (right (tuple3 <types> <values> <patterns>))
  (define (validate-module/duplicate-bindings [mod : Module])
    : (Either Bytes (Tuple3 (Set Bytes) (Set Bytes) (Set Bytes)))
    (let ([env (module-environment mod)])
      (let ([warn-duplicates
              (lambda ([kind : Bytes] [imports : (List Bytes)])
                (let ([first-line
                        (bytes-append
                           (varargs list #"Duplicate " kind #" bindings in module " (module-name mod) #":"))])
                  (bytes-append (map add-newline (cons first-line (map indent imports))))))])
        (case (find-duplicates env)
          [(empty)
           (let ([pattern-env (module-pattern-environment mod)])
             (case (find-duplicates pattern-env)
               [(empty)
                (let ([type-env (module-type-environment mod)])
                  (case (find-duplicates type-env)
                    [(empty) (right (tuple3 (multi-set->set type-env)
                                            (multi-set->set env)
                                            (multi-set->set pattern-env)))]
                    [imports (left (warn-duplicates #"type" imports))]))]
               [imports (left (warn-duplicates #"pattern" imports))]))]
          [imports (left (warn-duplicates #"value" imports))]))))

  (define (validate-module/unique-name [mod : Module] [sigs : (List ModuleSignature)]) : (Maybe Bytes)
    (case sigs
      [(empty) (nothing)]
      [(cons (module-signature name _ _) sigs)
       (if (bytes=? name (module-name mod))
           (just (bytes-append (varargs list #"Module named \"" name #"\" already exists.")))
           (validate-module/unique-name mod sigs))]))



  (define (find-duplicates [ms : (MultiSet Bytes)]) : (List Bytes)
    (find-duplicates/list (multi-set-keys ms) ms))

  (define (find-duplicates/list [l : (List Bytes)] [ms : (MultiSet Bytes)]) : (List Bytes)
    (case l
      [(empty) (empty)]
      [(cons e l)
       (if (> (multi-set-count ms e) 1)
         (cons e (find-duplicates/list l ms))
         (find-duplicates/list l ms))]))

  (define (multi-set->set [ms : (MultiSet Bytes)]) : (Set Bytes)
    (set-add-all (make-set bytes=?) (multi-set-keys ms)))


  (define (warn-undefined-exports [kind : Bytes] [module-name : Bytes] [names : (List Bytes)]) : Bytes
    (bytes-append
       (append
         (varargs list #"Undefined exported " kind #" in module " module-name #":\n")
         (map add-newline (map indent names)))))


  (define (validate-module/exported-variables [mod : Module] [env : (Set Bytes)]) : (Maybe Bytes)
    (case (set->list
            (set-remove-all
              (set-add-all
                (make-set bytes=?)
                (map export-local-name (exports-values (module-exports mod))))
              (set->list env)))
      [(empty) (nothing)]
      [patterns
        (just (warn-undefined-exports #"values" (module-name mod) patterns))]))
  (define (validate-module/exported-patterns [mod : Module] [env : (Set Bytes)]) : (Maybe Bytes)
    (case (set->list
            (set-remove-all
              (set-add-all
                (make-set bytes=?)
                (map export-local-name (exports-patterns (module-exports mod))))
              (set->list env)))
      [(empty) (nothing)]
      [patterns
        (just (warn-undefined-exports #"patterns" (module-name mod) patterns))]))

  (define (validate-module/exported-types [mod : Module] [env : (Set Bytes)]) : (Maybe Bytes)
    (case (set->list
            (set-remove-all
              (set-add-all
                (make-set bytes=?)
                (map export-local-name (exports-types (module-exports mod))))
              (set->list env)))
      [(empty) (nothing)]
      [patterns
        (just (warn-undefined-exports #"types" (module-name mod) patterns))]))


  (define (warn-duplicate-exports [kind : Bytes] [module-name : Bytes] [names : (List Bytes)]) : Bytes
    (bytes-append
       (append
         (varargs list #"Duplicate exported " kind #" in module " module-name #":\n")
         (map add-newline (map indent names)))))


  (define (validate-module/duplicate-exported-variables [mod : Module]) : (Maybe Bytes)
    (case (find-duplicates
            (multi-set-add-all
              (make-multi-set bytes=?)
              (map export-exported-name (exports-values (module-exports mod)))))
      [(empty) (nothing)]
      [duplicates (just (warn-duplicate-exports #"values" (module-name mod) duplicates))]))

  (define (validate-module/duplicate-exported-patterns [mod : Module]) : (Maybe Bytes)
    (case (find-duplicates
            (multi-set-add-all
              (make-multi-set bytes=?)
              (map export-exported-name (exports-patterns (module-exports mod)))))
      [(empty) (nothing)]
      [duplicates (just (warn-duplicate-exports #"patterns" (module-name mod) duplicates))]))

  (define (validate-module/duplicate-exported-types [mod : Module]) : (Maybe Bytes)
    (case (find-duplicates
            (multi-set-add-all
              (make-multi-set bytes=?)
              (map export-exported-name (exports-types (module-exports mod)))))
      [(empty) (nothing)]
      [duplicates (just (warn-duplicate-exports #"types" (module-name mod) duplicates))]))


  (define (validate-module/free-types [mod : Module] [env : (Set Bytes)]) : (Maybe Bytes)
    (let ([free-types (free-types/module mod env (make-set bytes=?))])
      (case (set->list free-types)
        [(empty) (nothing)]
        [keys
          (let ([first-line
                  (bytes-append
                     (varargs list #"Unbound types in module " (module-name mod) #":"))])
            (just (bytes-append (map add-newline (cons first-line (map indent keys))))))])))

  (define (free-types/module [mod : Module] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (free-types/type-definitions (module-types mod) env
      (free-types/definitions (module-definitions mod) env acc)))

  (define (validate-module/free-variables [mod : Module] [env : (Set Bytes)]) : (Maybe Bytes)
    (let ([free (free-variables/definitions (module-definitions mod) env (make-set bytes=?))])
      (case (set->list free)
        [(empty) (nothing)]
        [keys
          (let ([first-line
                  (bytes-append
                     (varargs list #"Unbound variables in module " (module-name mod) #":"))])
            (just (bytes-append (map add-newline (cons first-line (map indent keys))))))])))


  (define (validate-module/free-patterns [mod : Module] [env : (Set Bytes)]) : (Maybe Bytes)
    (let ([free-patterns
            (free-patterns/definitions (module-definitions mod) env (make-set bytes=?))])
      (case (set->list free-patterns)
        [(empty) (nothing)]
        [keys
          (let ([first-line
                  (bytes-append
                     (varargs list #"Unbound patterns in module " (module-name mod) #":"))])
            (just (bytes-append (map add-newline (cons first-line (map indent keys))))))])))

  (define (add-newline [bytes : Bytes]) : Bytes
    (let ([length (bytes-length bytes)])
      (let ([new-bytes (make-bytes (+ 1 length))])
        (begin
          (bytes-copy! bytes 0 length new-bytes 0)
          (bytes-set! new-bytes length (u8 10))
          new-bytes))))

  (define (indent [bytes : Bytes]) : Bytes
    (let ([length (bytes-length bytes)])
      (let ([new-bytes (make-bytes (+ 2 length))])
        (begin
          (bytes-copy! bytes 0 length new-bytes 2)
          (bytes-set! new-bytes 0 (u8 32))
          (bytes-set! new-bytes 1 (u8 32))
          new-bytes))))

  (define (module-type-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ types definitions)
       (add-importss-type-bindings imports
         (add-type-definitions-bindings types
           (make-multi-set bytes=?)))]))

  (define (module-imported-type-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ types definitions)
       (add-importss-type-bindings imports
         (make-multi-set bytes=?))]))

  (define (module-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ types definitions)
       (add-importss-bindings imports
         (add-constructor-bindings/types types
           (add-accessor-bindings/types types
             (add-definitions-bindings definitions
               (make-multi-set bytes=?)))))]))

  (define (module-imported-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ _ _)
       (add-importss-bindings imports
         (make-multi-set bytes=?))]))

  (define (module-pattern-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ types _)
         (add-importss-pattern-bindings imports
           (add-constructor-bindings/types types
             (make-multi-set bytes=?)))]))

  (define (module-imported-pattern-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ _ _)
         (add-importss-pattern-bindings imports
           (make-multi-set bytes=?))]))

  (define (add-definitions-bindings [defs : (List FunctionDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case defs
      [(empty) env]
      [(cons (function-definition name _ _ _) defs)
       (add-definitions-bindings defs (multi-set-add env name))]))

  (define (add-accessor-bindings/types [types : (List TypeDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case types
      [(empty) env]
      [(cons (type-definition name _ variants) types)
       (add-accessor-bindings/types types (add-accessor-bindings/variants variants env))]))

  (define (add-constructor-bindings/types [types : (List TypeDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case types
      [(empty) env]
      [(cons (type-definition name _ variants) types)
       (add-constructor-bindings/types types (add-constructor-bindings/variants variants env))]))


  (define (add-type-definitions-bindings [types : (List TypeDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case types
      [(empty) env]
      [(cons (type-definition name _ _) types)
       (add-type-definitions-bindings types (multi-set-add env name))]))

  (define (add-constructor-bindings/variants [variants : (List VariantDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case variants
      [(empty) env]
      [(cons (variant-definition name _) variants)
       (add-constructor-bindings/variants variants (multi-set-add env name))]))


  (define (add-accessor-bindings/variants [variants : (List VariantDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case variants
      [(empty) env]
      [(cons (variant-definition name fields) variants)
       (add-accessor-bindings/variants variants (add-variant-field-bindings name fields env))]))

  (define (add-variant-field-bindings [variant : Bytes]
                                      [fields : (List VariantField)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case fields
      [(empty) env]
      [(cons (variant-field name _) fields)
       (let ([acc-name (bytes-append (varargs list variant #"-" name))])
         (add-variant-field-bindings variant fields (multi-set-add env acc-name)))]))

  (define (add-importss-type-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case importss
      [(empty) env]
      [(cons (imports _ types _ _) importss)
       (add-importss-type-bindings importss (add-imports-bindings types env))]))

  (define (add-importss-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case importss
      [(empty) env]
      [(cons (imports _ _ values _) importss)
       (add-importss-bindings importss (add-imports-bindings values env))]))

  (define (add-importss-pattern-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case importss
      [(empty) env]
      [(cons (imports _ _ _ patterns) importss)
       (add-importss-pattern-bindings importss (add-imports-bindings patterns env))]))


  (define (add-imports-bindings [imports : (List Import)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case imports
      [(empty) env]
      [(cons (import _ name) imports)
       (add-imports-bindings imports (multi-set-add env name))]))

  (define (free-variables/definitions
            [defs : (List FunctionDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (function-definition _ _ args body) defs)
       (let ([fun-env (add-arg-bindings args env)])
         (free-variables/definitions defs env (free-variables body fun-env acc)))]))

  (define (add-arg-bindings [args : (List Bytes)] [env : (Set Bytes)]) : (Set Bytes)
    (case args
      [(empty) env]
      [(cons arg args) (add-arg-bindings args (set-add env arg))]))


  (define (free-patterns/definitions
            [defs : (List FunctionDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (function-definition _ _ _ body) defs)
       (free-patterns/definitions defs env (free-patterns body env acc))]))

  (define (type-type-vars [type : PreType]) : (List Bytes)
    (case type
      [(fun-pre-type type-vars _ _) type-vars]
      [_ (empty)]))


  (define (free-types/definitions
            [defs : (List FunctionDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (function-definition _ type _ expr) defs)
       (free-types/definitions defs env
         (free-types/expr expr (set-add-all env (type-type-vars type))
           (free-types/type type env acc)))]))


  (define (free-types/type-definitions
            [defs : (List TypeDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case defs
      [(empty) acc]
      [(cons (type-definition name vars variants) defs)
       (free-types/type-definitions defs env
          (free-types/variants variants
                               (set-add-all
                                 env
                                 (case vars
                                   [(nothing) (empty)]
                                   [(just v) v]))
                               acc))]))

  (define (free-types/variants
            [variants : (List VariantDefinition)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case variants
      [(empty) acc]
      [(cons (variant-definition name fields) variants)
       (free-types/variants variants env (free-types/types (map variant-field-type fields) env acc))]))


  (define (extract-arg [arg+ty : (Tuple2 Bytes PreType)]) : Bytes
    (case arg+ty
      [(tuple2 arg _)
       arg]))

  (define (extract-ty [arg+ty : (Tuple2 Bytes PreType)]) : PreType
    (case arg+ty
      [(tuple2 _ ty)
       ty]))


  (define (free-variables [expr : Expression] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case expr
      [(int-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(if-expr c t f)
       (free-variables/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-variables/list (cons e es) env acc)]
      [(app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-variables body (set-add env name) (free-variables expr env acc))]
      [(case-expr expr clauses)
       (free-variables/clauses clauses env (free-variables expr env acc))]
      [(lambda-expr args+tys body)
       (free-variables body (add-arg-bindings (map extract-arg args+tys) env) acc)]
      [(var-expr v)
       (if (set-member? env v)
           acc
           (set-add acc v))]))

  (define (free-variables/list
            [exprs : (List Expression)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-variables/list exprs env (free-variables expr env acc))]))

  (define (free-variables/clauses
            [exprs : (List CaseClause)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern expr) clauses)
       (free-variables/clauses clauses env (free-variables expr (add-pattern-bindings pattern env) acc))]))

  (define (add-pattern-bindings [p : Pattern] [env : (Set Bytes)]) : (Set Bytes)
    (case p
      [(bytes-pattern _) env]
      [(int-pattern _) env]
      [(ignore-pattern) env]
      [(variable-pattern v) (set-add env v)]
      [(abstraction-pattern _ pats) (add-pattern-bindings/list pats env)]))

  (define (add-pattern-bindings/list [ps : (List Pattern)] [env : (Set Bytes)]) : (Set Bytes)
    (case ps
      [(empty) env]
      [(cons p ps) (add-pattern-bindings/list ps (add-pattern-bindings p env))]))

  (define (free-patterns [expr : Expression] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case expr
      [(int-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(var-expr _) acc]
      [(if-expr c t f)
       (free-patterns/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-patterns/list (cons e es) env acc)]
      [(app-expr op args)
       (free-patterns/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-patterns/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-patterns/list (cons body (cons expr (empty))) env acc)]
      [(case-expr expr clauses)
       (free-patterns/clauses clauses env (free-patterns expr env acc))]
      [(lambda-expr _ body)
       (free-patterns body env acc)]))

  (define (free-patterns/list
            [exprs : (List Expression)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-patterns/list exprs env (free-patterns expr env acc))]))

  (define (free-patterns/clauses
            [exprs : (List CaseClause)]
            [env : (Set Bytes)]
            [acc : (Set Bytes)]) : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern expr) clauses)
       (free-patterns/clauses clauses env (free-patterns expr env (free-patterns/pattern pattern env acc)))]))

  (define (free-patterns/pattern [p : Pattern] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case p
      [(bytes-pattern _) acc]
      [(int-pattern _) acc]
      [(ignore-pattern) acc]
      [(variable-pattern _) acc]
      [(abstraction-pattern name pats)
       (let ([acc (free-patterns/patterns pats env acc)])
         (if (set-member? env name)
             acc
             (set-add acc name)))]))

  (define (free-patterns/patterns [ps : (List Pattern)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case ps
      [(empty) acc]
      [(cons p ps) (free-patterns/patterns ps env (free-patterns/pattern p env acc))]))

  (define (free-types/types [types : (List PreType)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case types
      [(empty) acc]
      [(cons type types)
       (free-types/types types env (free-types/type type env acc))]))

  (define (free-types/type [type : PreType] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case type
      [(var-pre-type v)
       (if (set-member? env v)
             acc
             (set-add acc v))]
      [(fun-pre-type type-vars args result)
       (let ([env (set-add-all env type-vars)])
         (free-types/types args env
            (free-types/type result env acc)))]
      [(type-app-pre-type constructor args)
       (let ([acc (free-types/types args env acc)])
         (if (set-member? env constructor)
             acc
             (set-add acc constructor)))]))

  (define (free-types/expr [expr : Expression] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case expr
      [(int-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(var-expr _) acc]
      [(if-expr c t f)
       (free-types/exprs (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-types/exprs (cons e es) env acc)]
      [(app-expr op args)
       (free-types/exprs (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-types/exprs (cons op args) env acc)]
      [(let-expr name expr body)
       (free-types/exprs (cons body (cons expr (empty))) env acc)]
      [(case-expr expr clauses)
       (free-types/exprs (cons expr (map case-clause-expr clauses)) env acc)]
      [(lambda-expr args+tys body)
       (free-types/types
         (map extract-ty args+tys)
         env
         (free-types/expr body env acc))]))


  (define (free-types/exprs [exprs : (List Expression)] [env : (Set Bytes)] [acc : (Set Bytes)])
    : (Set Bytes)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-types/exprs exprs env (free-types/expr expr env acc))])))
