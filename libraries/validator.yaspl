#:module (validator)
#:import {
  (bytes)
  (data indexed-set)
  (data source-location)
  (dict)
  (either)
  (free-variables)
  (join-list)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (resolved-imports-language)
  (set)
  (tuples)
}
(export
  (#:types ModuleErrors)
  (#:values validate-module module-errors->bytes))
(types
  (define-type ModuleErrors
    (module-errors
      [module-name : ModName]
      [error : (List ModuleError)]))
  (define-type ModuleError
    (duplicate-module-bindings
      [types : (List Identifier)]
      [values : (List Identifier)]
      [patterns : (List Identifier)]
      [statics : (List Identifier)])
    (undefined-exports
      [types : (List Identifier)]
      [values : (List Identifier)]
      [patterns : (List Identifier)]
      [statics : (List Identifier)])
    (duplicate-exports
      [types : (List Identifier)]
      [values : (List Identifier)]
      [patterns : (List Identifier)]
      [statics : (List Identifier)])
    (non-unique-name
      [mod-name : (SourceSpanAnnotated ModName)])
    (function-error [name : Bytes] [error : FunctionError]))
  (define-type FunctionError
    (free-variables
      [types : (List Identifier)]
      [values : (List Identifier)]
      [patterns : (List Identifier)]
      [statics : (List Identifier)])
    (duplicate-bindings
      [names : (List Identifier)]))

  (define-type BindingsState
    (bindings-state
      [dupes : (List Identifier)]
      [env : (Set Bytes)])))

(define (validate-module [mod : Module] [sigs : (IndexedSet ModuleSignature ModName)]) : (Maybe ModuleErrors)
  (case (validate-module/duplicate-bindings mod)
    [(left v) (just (module-errors (module-name* mod) (varargs list v)))]
    [(right (tuple2 (tuple2 type-env env) (tuple2 pat-env static-env)))
     (case
       (append*
         (varargs list
           (validate-module/free-variables mod type-env env pat-env static-env)
           (validate-module/undefined-exports mod type-env env pat-env static-env)
           (validate-module/duplicate-exports mod)
           (validate-module/unique-name mod sigs)
           (validate-module/unique-bindings mod)))
       [(empty)
        (nothing)]
       [errors
        (just (module-errors (module-name* mod) errors))])]))

;; Checks to make sure that there are no duplicate bindings.
;; If there are returns (left <error-message>), otherwise returns
;; (right (tuple3 <types> <values> <patterns>))
(define (validate-module/duplicate-bindings [mod : Module])
  : (Either ModuleError (Tuple2 (Tuple2 (Set Bytes) (Set Bytes))
                                (Tuple2 (Set Bytes) (Set Bytes))))
  (match-define (bindings-state value-dupes value-env) (module-value-environment mod))
  (match-define (bindings-state pattern-dupes pattern-env) (module-pattern-environment mod))
  (match-define (bindings-state type-dupes type-env) (module-type-environment mod))
  (match-define (bindings-state static-dupes static-env) (module-static-environment mod))
  (case (tuple2 (tuple2 value-dupes pattern-dupes) (tuple2 type-dupes static-dupes))
    [(tuple2 (tuple2 (empty) (empty)) (tuple2 (empty) (empty)))
     (right (tuple2
              (tuple2 type-env value-env)
              (tuple2 pattern-env static-env)))]
    [_
     (left (duplicate-module-bindings type-dupes value-dupes pattern-dupes static-dupes))]))

(define (validate-module/unique-name [mod : Module] [sigs : (IndexedSet ModuleSignature ModName)])
  : (List ModuleError)
  (match-define name/src (module-name mod))
  (match-define (source-span-annotated name _) name/src)
  (case (indexed-set-ref sigs name)
    [(nothing)
     (empty)]
    [(just _)
     (cons (non-unique-name name/src) (empty))]))

(define (validate-module/undefined-exports
          [mod : Module]
          [type-env : (Set Bytes)]
          [value-env : (Set Bytes)]
          [pattern-env : (Set Bytes)]
          [static-env : (Set Bytes)])
  : (List ModuleError)
  (match-define (module _ _ (exports types values patterns statics) _) mod)
  (match-define check-exports
    (lambda ([exports : (List Export)] [env : (Set Bytes)])
      (filter-map
        (lambda ([e : Export]) : (Maybe Identifier)
          (match-define (export name/src _) e)
          (match-define (identifier name _) name/src)
          (if (set-member? env name)
              (nothing)
              (just name/src)))
        exports)))
  (case (tuple2
          (tuple2
            (check-exports types type-env)
            (check-exports values value-env))
          (tuple2
            (check-exports patterns pattern-env)
            (check-exports statics static-env)))
    [(tuple2 (tuple2 (empty) (empty)) (tuple2 (empty) (empty)))
     (empty)]
    [(tuple2 (tuple2 types values) (tuple2 patterns statics))
     (varargs list (undefined-exports types values patterns statics))]))

(define (validate-module/duplicate-exports [mod : Module])
  : (List ModuleError)
  (match-define (module _ _ (exports types values patterns statics) _) mod)
  (match-define check-exports
    (lambda ([exports : (List Export)])
      (match-define (bindings-state dupes _)
        (add-bindings (map export-exported-name exports)
          (initial-bindings-state (make-set bytes-cmp))))
      dupes))
  (case (tuple2
          (tuple2
            (check-exports types)
            (check-exports values))
          (tuple2
            (check-exports patterns)
            (check-exports statics)))
    [(tuple2 (tuple2 (empty) (empty)) (tuple2 (empty) (empty)))
     (empty)]
    [(tuple2 (tuple2 types values) (tuple2 patterns statics))
     (varargs list (duplicate-exports types values patterns statics))]))

(define (validate-module/free-variables
          [mod : Module]
          [type-env : (Set Bytes)]
          [value-env : (Set Bytes)]
          [pattern-env : (Set Bytes)]
          [static-env : (Set Bytes)]) : (List ModuleError)
  (match-define (module _ _ _ (definitions types _ _ functions _)) mod)
  (let ([validate-function-definition/free-variables
          (lambda ([def : FunctionDefinition]) : (Maybe ModuleError)
            (case (tuple2
                    (tuple2
                      (free-types/function-definition def type-env (empty))
                      (free-variables/function-definition def value-env (empty)))
                    (tuple2
                      (free-patterns/function-definition def pattern-env (empty))
                      (free-statics/function-definition def static-env (empty))))
              [(tuple2 (tuple2 (empty) (empty)) (tuple2 (empty) (empty)))
               (nothing)]
              [(tuple2 (tuple2 types values) (tuple2 patterns statics))
               (just (function-error
                       (function-definition-name* def)
                       (free-variables types values patterns statics)))]))])
    (append
      (let ([free-types (free-types/type-definitions types type-env (empty))])
        (case free-types
          [(empty) (empty)]
          [types
           (varargs list
             (function-error
               #"TypeDefinitions"
               (free-variables types (empty) (empty) (empty))))]))
      (filter-map
        validate-function-definition/free-variables
        functions))))

(define (add-bindings [bindings : (List Identifier)] [state : BindingsState])
  : BindingsState
  (foldl
    (lambda ([name/src : Identifier] [state : BindingsState])
      (match-define (bindings-state dupes env) state)
      (match-define (identifier name _) name/src)
      (if (set-member? env name)
          (bindings-state (cons name/src dupes) env)
          (bindings-state dupes (set-add env name))))
    bindings
    state))

(define (initial-bindings-state [env : (Set Bytes)]) : BindingsState
  (bindings-state (empty) env))

(define (module-type-environment [mod : Module]) : BindingsState
  (case mod
    [(module _ (imports imported-types _ _ _ _) _ (definitions types type-classes _ _ _))
     (add-bindings (map type-class-definition-name type-classes)
       (add-bindings (map type-definition-name types)
         (initial-bindings-state
           (dict-keys imported-types))))]))

(define (module-value-environment [mod : Module]) : BindingsState
  (case mod
    [(module _ (imports _ imported-values _ _ _) _ (definitions types type-classes _ definitions _))
     (add-bindings (type-classes->method-names type-classes)
       (add-bindings (types->constructor-names types)
         (add-bindings (types->accessor-names types)
           (add-bindings (map function-definition-name definitions)
             (initial-bindings-state
               (dict-keys imported-values))))))]))

(define (module-pattern-environment [mod : Module]) : BindingsState
  (case mod
    [(module _ (imports _ _ imported-patterns _ _) _ (definitions types _ _ _ _))
     (add-bindings (types->constructor-names types)
       (initial-bindings-state
         (dict-keys imported-patterns)))]))

(define (module-static-environment [mod : Module]) : BindingsState
  (case mod
    [(module _ (imports _ _ _ imported-statics _) _ (definitions _ _ _ _ statics))
     (match-define static-definition-name
       (lambda ([s : StaticDefinition])
         (case s
           [(varargs-definition name _ _ _ _ _)
            name])))
     (add-bindings (map static-definition-name statics)
       (initial-bindings-state
         (dict-keys imported-statics)))]))

(define (types->accessor-names [types : (List TypeDefinition)]) : (List Identifier)
  (append*
    (map
      (lambda ([type : TypeDefinition]) : (List Identifier)
        (case type
          [(type-definition _ _ variants)
           (case variants
             [(cons (variant-definition (identifier name _) fields) (empty))
              (map
                (lambda ([field : VariantField])
                  (match-define
                    (variant-field (identifier field-name field-src) _)
                    field)
                  (identifier
                    (bytes-append (varargs list name #"-" field-name))
                    field-src))
                fields)]
             [_ (empty)])]))
      types)))

(define (types->constructor-names [types : (List TypeDefinition)]) : (List Identifier)
  (append*
    (map
      (lambda ([type : TypeDefinition])
        (case type
          [(type-definition _ _ variants)
           (map variant-definition-name variants)]))
      types)))

(define (type-classes->method-names [types : (List TypeClassDefinition)]) : (List Identifier)
  (append*
    (map
      (lambda ([class : TypeClassDefinition])
        (match-define (type-class-definition _ _ methods) class)
        (map (lambda ([method : TypeClassMethod])
               (match-define (type-class-method name _) method)
               name)
             methods))
      types)))


(define (validate-module/unique-bindings [mod : Module]) : (List ModuleError)
  (match-define (module _ _ _ (definitions _ _ _ functions _)) mod)
  (filter-map
    check-unique-bindings/function-definition
    functions))

(define (check-unique-bindings/function-definition [def : FunctionDefinition]) : (Maybe ModuleError)
  (case def
    [(function-definition (identifier name _) _ _ fun-args _ body)
     (case (check-unique-bindings/args (function-args-bindings fun-args))
       [(just args)
        (just (function-error name (duplicate-bindings args)))]
       [(nothing)
        (case (check-unique-bindings/block body)
          [(just args) (just (function-error name (duplicate-bindings args)))]
          [(nothing) (nothing)])])]))

(define (check-unique-bindings/args [args : (List Identifier)]) : (Maybe (List Identifier))
  (case
    (foldl
      (lambda ([id : Identifier] [acc : (Tuple2 (Set Bytes) (List Identifier))])
        (match-define (tuple2 names dupes) acc)
        (match-define (identifier name _) id)
        (if (set-member? names name)
            (tuple2 names (cons id dupes))
            (tuple2 (set-add names name) dupes)))
      args
      (ann (Tuple2 (Set Bytes) (List Identifier)) (tuple2 (make-set bytes-cmp) (empty))))
    [(tuple2 _ (empty))
     (nothing)]
    [(tuple2 _ dupes)
     (just dupes)]))

(define (check-unique-bindings/block [b : Block]) : (Maybe (List Identifier))
  (case b
    [(block defs expr)
     (case (check-unique-bindings/block-definitions defs)
       [(just v) (just v)]
       [(nothing) (check-unique-bindings/expr expr)])]))

(define (check-unique-bindings/block-definitions [defs : (List BlockDefinition)])
  : (Maybe (List Identifier))
  (find/maybe
    (lambda ([def : BlockDefinition])
      (case def
        [(match-def pattern _type expr)
         (case (check-unique-bindings/args (pattern-bindings pattern))
           [(just v) (just v)]
           [(nothing)
            (check-unique-bindings/expr expr)])]))
    defs))

(define (check-unique-bindings/expr [expr : Expression]) : (Maybe (List Identifier))
  (case expr
    [(int-literal _ _) (nothing)]
    [(bytes-literal _ _) (nothing)]
    [(boolean-literal _ _) (nothing)]
    [(var-expr _) (nothing)]
    [(annotated-expr _ expr _)
     (check-unique-bindings/expr expr)]
    [(if-expr c t f _)
     (check-unique-bindings/exprs (varargs list c t f))]
    [(cond-expr clauses final _)
     (case (check-unique-bindings/block final)
       [(just v) (just v)]
       [(nothing)
        (check-unique-bindings/cond-clauses clauses)])]
    [(begin-expr exprs expr _)
     (check-unique-bindings/exprs (cons expr exprs))]
    [(app-expr _ op args _)
     (check-unique-bindings/exprs (cons op args))]
    [(varargs-app-expr _ _ args _)
     (check-unique-bindings/exprs args)]
    [(let-expr _name expr body _)
     (case (check-unique-bindings/expr expr)
       [(just v) (just v)]
       [(nothing)
        (check-unique-bindings/block body)])]
    [(lambda-expr fun-args _return-type body _)
     (case (check-unique-bindings/args (function-args-bindings fun-args))
       [(just v) (just v)]
       [(nothing)
        (check-unique-bindings/block body)])]
    [(case-expr expr clauses _)
     (case (check-unique-bindings/expr expr)
       [(just v) (just v)]
       [(nothing)
        (check-unique-bindings/case-clauses clauses)])]))

(define (check-unique-bindings/exprs [exprs : (List Expression)]) : (Maybe (List Identifier))
  (find/maybe check-unique-bindings/expr exprs))

(define (check-unique-bindings/case-clauses [clauses : (List CaseClause)]) : (Maybe (List Identifier))
  (find/maybe
    (lambda ([clause : CaseClause])
      (case clause
        [(case-clause pattern body)
         (case (check-unique-bindings/args (pattern-bindings pattern))
           [(just v) (just v)]
           [(nothing)
            (check-unique-bindings/block body)])]))
    clauses))

(define (check-unique-bindings/cond-clauses [clauses : (List CondClause)]) : (Maybe (List Identifier))
  (find/maybe
    (lambda ([clause : CondClause])
      (case clause
        [(cond-clause test body _)
         (case (check-unique-bindings/expr test)
           [(just v) (just v)]
           [(nothing)
            (check-unique-bindings/block body)])]))
    clauses))

(define (function-args-bindings [args : (List FunctionArg)]) : (List Identifier)
  (foldl
    (lambda ([arg : FunctionArg] [acc : (List Identifier)])
      (match-define (function-arg pattern _type) arg)
      (pattern-bindings* pattern acc))
    args
    (ann (List Identifier) (empty))))


(define (pattern-bindings [p : Pattern]) : (List Identifier)
  (pattern-bindings* p (empty)))
(define (pattern-bindings* [p : Pattern] [acc : (List Identifier)]) : (List Identifier)
  (case p
    [(bytes-pattern _ _) acc]
    [(int-pattern _ _) acc]
    [(ignore-pattern _) acc]
    [(variable-pattern v) (cons v acc)]
    [(abstraction-pattern _ pats _)
     (foldl pattern-bindings* pats acc)]))

(define (module-errors->bytes [me : ModuleErrors]) : Bytes
  (case me
    [(module-errors mod-name errors)
     (bytes-append
       (jl->list
         (append-jl
           (varargs join-list
             #"Errors validating module: "  (mod-name->bytes mod-name) #"\n\n")
           (concat-map-jl/list module-error->bytes errors))))]))

(define (module-error->bytes [error : ModuleError]) : (JoinList Bytes)
  (case error
    [(duplicate-module-bindings types values patterns statics)
     (match-define warn-duplicates
       (lambda ([kind : Bytes] [bindings : (List Identifier)]) : (JoinList Bytes)
         (concat-map-jl/list
           (lambda ([id : Identifier])
             (match-define (identifier name src) id)
             (varargs join-list
               (source-span->start-location-bytes src)
               #": Duplicate " kind #" binding: " name #"\n"))
           bindings)))
     (varargs append-jl*
       (warn-duplicates #"type" types)
       (warn-duplicates #"value" values)
       (warn-duplicates #"pattern" patterns)
       (warn-duplicates #"static" statics))]
    [(non-unique-name (source-span-annotated mod-name src))
     (varargs join-list
       (source-span->start-location-bytes src)
       #": Module \"" (mod-name->bytes mod-name) #"\" already exists.")]
    [(undefined-exports types values patterns statics)
     (match-define warn-undefined-exports
       (lambda ([kind : Bytes] [bindings : (List Identifier)]) : (JoinList Bytes)
         (concat-map-jl/list
           (lambda ([id : Identifier])
             (match-define (identifier name src) id)
             (varargs join-list
               (source-span->start-location-bytes src)
               #": " kind #" export of " name #" is unbound\n"))
           bindings)))
     (varargs append-jl*
       (warn-undefined-exports #"Type" types)
       (warn-undefined-exports #"Value" values)
       (warn-undefined-exports #"Pattern" patterns)
       (warn-undefined-exports #"Static" statics))]
    [(duplicate-exports types values patterns statics)
     (match-define warn-duplicate-exports
       (lambda ([kind : Bytes] [bindings : (List Identifier)]) : (JoinList Bytes)
         (concat-map-jl/list
           (lambda ([id : Identifier])
             (match-define (identifier name src) id)
             (varargs join-list
               (source-span->start-location-bytes src)
               #": Duplicate " kind #" export of " name #"\n"))
           bindings)))
     (varargs append-jl*
       (warn-duplicate-exports #"Type" types)
       (warn-duplicate-exports #"Value" values)
       (warn-duplicate-exports #"Pattern" patterns)
       (warn-duplicate-exports #"Static" statics))]
    [(function-error _ (free-variables types values patterns statics))
     (match-define warn-free-variables
       (lambda ([kind : Bytes] [bindings : (List Identifier)]) : (JoinList Bytes)
         (concat-map-jl/list
           (lambda ([id : Identifier])
             (match-define (identifier name src) id)
             (varargs join-list
               (source-span->start-location-bytes src)
               #": " name  #" is unbound as a " kind #"\n"))
           bindings)))
     (varargs append-jl*
       (warn-free-variables #"type" types)
       (warn-free-variables #"value" values)
       (warn-free-variables #"pattern" patterns)
       (warn-free-variables #"static" statics))]
    [(function-error _ (duplicate-bindings dupes))
     (concat-map-jl/list
       (lambda ([id : Identifier])
         (match-define (identifier name src) id)
         (varargs join-list
           (source-span->start-location-bytes src)
           #": Duplicate binding of " name #"\n"))
       dupes)]))
