(module validator
  (import
    (prim
      #:types (Bytes Boolean Void)
      #:values (panic void make-bytes bytes-set! bytes-length + >)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (maybe
      #:types (Maybe)
      #:values (nothing just)
      #:patterns (nothing just))
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right))
    (bytes bytes=? bytes-append bytes-copy!)
    (dict
      #:types (Dict)
      #:values (dict-set dict-add dict-ref make-dict dict-keys)
      #:patterns ())
    (multi-set
      #:types (MultiSet)
      #:values (make-multi-set multi-set-add multi-set-keys multi-set-count)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty list map)
      #:patterns (cons empty))
    (source-language
      #:types (Module Expression CaseClause Pattern FunctionDefinition TypeDefinition
                      VariantDefinition VariantField Imports Import PreType)
      #:values (module-definitions module-name)
      #:patterns (byte-literal bytes-literal boolean-literal var-expr if-expr begin-expr app-expr
                  varargs-app-expr let-expr case-expr case-clause bytes-pattern byte-pattern
                  lambda-expr
                  variable-pattern ignore-pattern abstraction-pattern function-definition
                  module imports import variant-definition variant-field type-definition))
    (intermediate-to-module-signature
      #:types (ModuleSignature)
      #:values ()
      #:patterns ()))
  (export
    #:types ()
    #:values (validate-module)
    #:patterns ())
  (types)

  (define (validate-module [mod : Module] [sig : (List ModuleSignature)]) : (Maybe Bytes)
    (case (validate-module/duplicate-imports mod)
      [(left v) (just v)]
      [(right (tuple2 env pat-env))
       (case (validate-module/free-variables mod env)
         [(just v) (just v)]
         [(nothing)
          (validate-module/free-patterns mod pat-env)])]))


  (define (validate-module/duplicate-imports [mod : Module])
    : (Either Bytes (Tuple2 (Dict Bytes Void) (Dict Bytes Void)))
    (let ([env (module-environment mod)])
      (case (find-duplicates env)
        [(empty)
         (let ([pattern-env (module-pattern-environment mod)])
           (case (find-duplicates pattern-env)
             [(empty)
              (right (tuple2 (multi-set->void-dict env) (multi-set->void-dict pattern-env)))]
             [imports
              (let ([first-line
                      (bytes-append
                         (varargs list #"Duplicate pattern imports in module " (module-name mod) #":"))])
                (left (bytes-append (map add-newline (cons first-line (map indent imports))))))]))]
        [imports
         (let ([first-line
                 (bytes-append
                    (varargs list #"Duplicate imports in module " (module-name mod) #":"))])
           (left (bytes-append (map add-newline (cons first-line (map indent imports))))))])))


  (define (find-duplicates [ms : (MultiSet Bytes)]) : (List Bytes)
    (find-duplicates/list (multi-set-keys ms) ms))

  (define (find-duplicates/list [l : (List Bytes)] [ms : (MultiSet Bytes)]) : (List Bytes)
    (case l
      [(empty) (empty)]
      [(cons e l)
       (if (> (multi-set-count ms e) 1)
         (cons e (find-duplicates/list l ms))
         (find-duplicates/list l ms))]))

  (define (multi-set->void-dict [ms : (MultiSet Bytes)]) : (Dict Bytes Void)
    (list->void-dict (multi-set-keys ms) (make-dict bytes=?)))

  (define (list->void-dict [l : (List Bytes)] [d : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case l
      [(empty) d]
      [(cons e l)
       (list->void-dict l (dict-set d e (void)))]))



  (define (validate-module/free-variables [mod : Module] [env : (Dict Bytes Void)]) : (Maybe Bytes)
    (let ([free (free-variables/definitions (module-definitions mod) env (make-dict bytes=?))])
      (case (dict-keys free)
        [(empty) (nothing)]
        [keys
          (let ([first-line
                  (bytes-append
                     (varargs list #"Unbound variables in module " (module-name mod) #":"))])
            (just (bytes-append (map add-newline (cons first-line (map indent keys))))))])))


  (define (validate-module/free-patterns [mod : Module] [env : (Dict Bytes Void)]) : (Maybe Bytes)
    (let ([free-patterns
            (free-patterns/definitions (module-definitions mod) env (make-dict bytes=?))])
      (case (dict-keys free-patterns)
        [(empty) (nothing)]
        [keys
          (let ([first-line
                  (bytes-append
                     (varargs list #"Unbound patterns in module " (module-name mod) #":"))])
            (just (bytes-append (map add-newline (cons first-line (map indent keys))))))])))

  (define (add-newline [bytes : Bytes]) : Bytes
    (let ([length (bytes-length bytes)])
      (let ([new-bytes (make-bytes (+ 1 length))])
        (begin
          (bytes-copy! bytes 0 length new-bytes 0)
          (bytes-set! new-bytes length 10)
          new-bytes))))

  (define (indent [bytes : Bytes]) : Bytes
    (let ([length (bytes-length bytes)])
      (let ([new-bytes (make-bytes (+ 2 length))])
        (begin
          (bytes-copy! bytes 0 length new-bytes 2)
          (bytes-set! new-bytes 0 32)
          (bytes-set! new-bytes 1 32)
          new-bytes))))


  (define (module-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ types definitions)
       (add-importss-bindings imports
         (add-constructor-bindings/types types
           (add-accessor-bindings/types types
             (add-definitions-bindings definitions
               (make-multi-set bytes=?)))))]))

  (define (module-pattern-environment [mod : Module]) : (MultiSet Bytes)
    (case mod
      [(module _ imports _ types definitions)
         (add-importss-pattern-bindings imports
           (add-constructor-bindings/types types
             (make-multi-set bytes=?)))]))

  (define (add-definitions-bindings [defs : (List FunctionDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case defs
      [(empty) env]
      [(cons (function-definition name _ _ _) defs)
       (add-definitions-bindings defs (multi-set-add env name))]))

  (define (add-accessor-bindings/types [types : (List TypeDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case types
      [(empty) env]
      [(cons (type-definition name _ variants) types)
       (add-accessor-bindings/types types (add-accessor-bindings/variants variants env))]))

  (define (add-constructor-bindings/types [types : (List TypeDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case types
      [(empty) env]
      [(cons (type-definition name _ variants) types)
       (add-constructor-bindings/types types (add-constructor-bindings/variants variants env))]))

  (define (add-constructor-bindings/variants [variants : (List VariantDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case variants
      [(empty) env]
      [(cons (variant-definition name _) variants)
       (add-constructor-bindings/variants variants (multi-set-add env name))]))


  (define (add-accessor-bindings/variants [variants : (List VariantDefinition)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case variants
      [(empty) env]
      [(cons (variant-definition name fields) variants)
       (add-accessor-bindings/variants variants (add-variant-field-bindings name fields env))]))

  (define (add-variant-field-bindings [variant : Bytes]
                                      [fields : (List VariantField)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case fields
      [(empty) env]
      [(cons (variant-field name _) fields)
       (let ([acc-name (bytes-append (varargs list variant #"-" name))])
         (add-variant-field-bindings variant fields (multi-set-add env acc-name)))]))

  (define (add-importss-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case importss
      [(empty) env]
      [(cons (imports _ _ values _) importss)
       (add-importss-bindings importss (add-imports-bindings values env))]))

  (define (add-importss-pattern-bindings [importss : (List Imports)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case importss
      [(empty) env]
      [(cons (imports _ _ _ patterns) importss)
       (add-importss-pattern-bindings importss (add-imports-bindings patterns env))]))


  (define (add-imports-bindings [imports : (List Import)] [env : (MultiSet Bytes)])
    : (MultiSet Bytes)
    (case imports
      [(empty) env]
      [(cons (import _ name) imports)
       (add-imports-bindings imports (multi-set-add env name))]))

  (define (free-variables/definitions
            [defs : (List FunctionDefinition)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case defs
      [(empty) acc]
      [(cons (function-definition _ _ args body) defs)
       (let ([fun-env (add-arg-bindings args env)])
         (free-variables/definitions defs env (free-variables body fun-env acc)))]))

  (define (add-arg-bindings [args : (List Bytes)] [env : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case args
      [(empty) env]
      [(cons arg args) (add-arg-bindings args (dict-set env arg (void)))]))


  (define (free-patterns/definitions
            [defs : (List FunctionDefinition)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case defs
      [(empty) acc]
      [(cons (function-definition _ _ _ body) defs)
       (free-patterns/definitions defs env (free-patterns body env acc))]))


  (define (extract-arg [arg+ty : (Tuple2 Bytes PreType)]) : Bytes
    (case arg+ty
      [(tuple2 arg _)
       arg]))

  (define (free-variables [expr : Expression] [env : (Dict Bytes Void)] [acc : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case expr
      [(byte-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(if-expr c t f)
       (free-variables/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-variables/list (cons e es) env acc)]
      [(app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-variables/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-variables body (dict-set env name (void)) (free-variables expr env acc))]
      [(case-expr expr clauses)
       (free-variables/clauses clauses env (free-variables expr env acc))]
      [(lambda-expr args+tys body)
       (free-variables body (add-arg-bindings (map extract-arg args+tys) env) acc)]
      [(var-expr v)
       (case (dict-ref env v)
         [(just _) acc]
         [(nothing) (dict-set acc v (void))])]))

  (define (free-variables/list
            [exprs : (List Expression)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-variables/list exprs env (free-variables expr env acc))]))

  (define (free-variables/clauses
            [exprs : (List CaseClause)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern expr) clauses)
       (free-variables/clauses clauses env (free-variables expr (add-pattern-bindings pattern env) acc))]))

  (define (add-pattern-bindings [p : Pattern] [env : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case p
      [(bytes-pattern _) env]
      [(byte-pattern _) env]
      [(ignore-pattern) env]
      [(variable-pattern v) (dict-set env v (void))]
      [(abstraction-pattern _ pats) (add-pattern-bindings/list pats env)]))

  (define (add-pattern-bindings/list [ps : (List Pattern)] [env : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case ps
      [(empty) env]
      [(cons p ps) (add-pattern-bindings/list ps (add-pattern-bindings p env))]))

  (define (free-patterns [expr : Expression] [env : (Dict Bytes Void)] [acc : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case expr
      [(byte-literal _) acc]
      [(bytes-literal _) acc]
      [(boolean-literal _) acc]
      [(var-expr _) acc]
      [(if-expr c t f)
       (free-patterns/list (cons c (cons t (cons f (empty)))) env acc)]
      [(begin-expr e es)
       (free-patterns/list (cons e es) env acc)]
      [(app-expr op args)
       (free-patterns/list (cons op args) env acc)]
      [(varargs-app-expr op args)
       (free-patterns/list (cons op args) env acc)]
      [(let-expr name expr body)
       (free-patterns/list (cons body (cons expr (empty))) env acc)]
      [(case-expr expr clauses)
       (free-patterns/clauses clauses env (free-patterns expr env acc))]
      [(lambda-expr _ body)
       (free-patterns body env acc)]))

  (define (free-patterns/list
            [exprs : (List Expression)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case exprs
      [(empty) acc]
      [(cons expr exprs)
       (free-patterns/list exprs env (free-patterns expr env acc))]))

  (define (free-patterns/clauses
            [exprs : (List CaseClause)]
            [env : (Dict Bytes Void)]
            [acc : (Dict Bytes Void)]) : (Dict Bytes Void)
    (case exprs
      [(empty) acc]
      [(cons (case-clause pattern expr) clauses)
       (free-patterns/clauses clauses env (free-patterns expr env (free-patterns/pattern pattern env acc)))]))

  (define (free-patterns/pattern [p : Pattern] [env : (Dict Bytes Void)] [acc : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case p
      [(bytes-pattern _) acc]
      [(byte-pattern _) acc]
      [(ignore-pattern) acc]
      [(variable-pattern _) acc]
      [(abstraction-pattern name pats)
       (let ([acc (free-patterns/patterns pats env acc)])
         (case (dict-ref env name)
           [(just _) acc]
           [(nothing) (dict-set acc name (void))]))]))

  (define (free-patterns/patterns [ps : (List Pattern)] [env : (Dict Bytes Void)] [acc : (Dict Bytes Void)])
    : (Dict Bytes Void)
    (case ps
      [(empty) acc]
      [(cons p ps) (free-patterns/patterns ps env (free-patterns/pattern p env acc))])))
