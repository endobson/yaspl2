(module thread-example
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Byte)
      #:values (make-bytes bytes-set! bytes-length quotient
                mach-task-self mach-thread-self mach-reply-port mach-msg mach-port-mod-refs
                - + * bytes-ref = panic)
      #:patterns ())
    (io write-line read-all-bytes)
    (list
      #:types (List)
      #:values (cons empty)
      #:patterns (cons empty))
    (bytes bytes-ref/quad-le bytes-set!/quad-le bytes-set!/octo-le)
    (numbers integer->hex-bytes))
  (export)
  (types
    (define-type MachMessageHeader
      (mach-message-header
        [options Byte]
        [size Byte]
        [remote-port Byte]
        [reply-port Byte]
        [voucher-port Byte]
        [message-id Byte]))
    (define-type MachMessageDescriptor
      (mach-port-descriptor
        [name Byte]
        [disposition Byte])))


  (define (write-mach-message-header [hdr : MachMessageHeader] [bytes : Bytes]) : Void
    (case hdr
      [(mach-message-header options size remote-port local-port voucher-port message-id)
       (begin
         (bytes-set!/quad-le bytes 0 options)
         (bytes-set!/quad-le bytes 4 size)
         (bytes-set!/quad-le bytes 8 remote-port)
         (bytes-set!/quad-le bytes 12 local-port)
         (bytes-set!/quad-le bytes 16 voucher-port)
         (bytes-set!/quad-le bytes 20 message-id))]))

  (define (parse-mach-message-header [bytes : Bytes]) : MachMessageHeader
    (mach-message-header
      (bytes-ref/quad-le bytes 0)
      (bytes-ref/quad-le bytes 4)
      (bytes-ref/quad-le bytes 8)
      (bytes-ref/quad-le bytes 12)
      (bytes-ref/quad-le bytes 16)
      (bytes-ref/quad-le bytes 20)))
  (define (debug-mach-message-header [hdr : MachMessageHeader] [out : OutputPort]) : Void
    (case hdr
      [(mach-message-header options size remote-port local-port voucher-port message-id)
       (begin
         (write-line (integer->hex-bytes options) out)
         (write-line (integer->hex-bytes size) out)
         (write-line (integer->hex-bytes remote-port) out)
         (write-line (integer->hex-bytes local-port) out)
         (write-line (integer->hex-bytes voucher-port) out)
         (write-line (integer->hex-bytes message-id) out))]))

  (define (parse-mach-message-body [bytes : Bytes]) : (List MachMessageDescriptor)
    (parse-mach-message-body/loop bytes 28 (bytes-ref/quad-le bytes 24)))

  (define (parse-mach-message-body/loop [bytes : Bytes] [offset : Byte] [num-descriptors : Byte])
    : (List MachMessageDescriptor)
    (if (= 0 num-descriptors)
        (empty)
        (cons
          (let ([descriptor-type (bytes-ref bytes (+ offset 11))])
            (if (= descriptor-type 0)
                (mach-port-descriptor
                  (bytes-ref/quad-le bytes offset)
                  (bytes-ref bytes (+ offset 10)))
                (panic #"Bad MachMessageDescriptor")))
          (parse-mach-message-body/loop bytes (+ offset 12) (- num-descriptors 1)))))

  (define (ndr-record) : Byte
    #x100000000)


  (define (mach-msg/send-recv [bytes : Bytes] [send-size : Byte] [reply-port : Port]) : Void
    (mach-msg reply-port bytes 3 send-size (bytes-length bytes) 0 0))

  (define (mach-unref-reply-port [reply-port : Byte]) : Void
    (let ([task-port (mach-task-self)])
      (mach-port-mod-refs task-port reply-port 1 (- 0 1))))

  (define (terminate-thread [thread : MachThreadPort]) : Void
    (let ([buffer (make-bytes 24)])
      (let ([reply-port (mach-reply-port)])
        (begin
          (write-mach-message-header
            (mach-message-header
              #x1511
              0
              thread
              reply-port
              0
              #xE10)
            buffer)
          (mach-msg/send-recv buffer 24 reply-port)
          (mach-unref-reply-port reply-port)))))

  (define (suspend-thread [thread : MachThreadPort]) : Void
    (let ([buffer (make-bytes 24)])
      (let ([reply-port (mach-reply-port)])
        (begin
          (write-mach-message-header
            (mach-message-header
              #x1513
              0
              thread
              reply-port
              0
              #xE15)
            buffer)
          (mach-msg/send-recv buffer 24 reply-port)
          (mach-unref-reply-port reply-port)))))

  (define (resume-thread [thread : MachThreadPort]) : Void
    (let ([buffer (make-bytes 24)])
      (let ([reply-port (mach-reply-port)])
        (begin
          (write-mach-message-header
            (mach-message-header
              #x1513
              0
              thread
              reply-port
              0
              #xE16)
            buffer)
          (mach-msg/send-recv buffer 24 reply-port)
          (mach-unref-reply-port reply-port)))))


  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (begin
      (let ([buffer (make-bytes 48)])
        (begin
          (let ([request-port (mach-task-self)])
            (let ([reply-port (mach-reply-port)])
              (begin
                (write-mach-message-header
                  (mach-message-header
                    #x1513
                    0
                    request-port
                    reply-port
                    0
                    #xD53)
                  buffer)

                (mach-msg/send-recv buffer 24 reply-port)
                (mach-unref-reply-port reply-port ))))
          (debug-mach-message-header (parse-mach-message-header buffer) stdout)
          (case (parse-mach-message-body buffer)
            [(cons (mach-port-descriptor port-name disposition) (empty))
             (begin
               (write-line (integer->hex-bytes port-name) stdout)
               (write-line (integer->hex-bytes disposition) stdout))]
            [_ (panic #"Bad MachMessageBody")])

          (write-line #"Starting to write thread state" stdout)
          (let ([thread-port (bytes-ref/quad-le buffer 28)])
            (let ([buffer2 (make-bytes 208)])
              (let ([reply-port (mach-reply-port)])
                (begin
                  (write-mach-message-header
                    (mach-message-header
                      #x1513
                      0
                      thread-port
                      reply-port
                      0
                      #xE14)
                    buffer2)


                  ;; Set NDR record
                  (bytes-set!/octo-le buffer2 24 (ndr-record))
                  ;; Set the state type (x86_THREAD_STATE64 = 4)
                  (bytes-set!/quad-le buffer2 32 4)
                  ;; Set the size of the state (x86_THREAD_STATE64_COUNT = 42, 21 64bit registers)
                  (bytes-set!/quad-le buffer2 36 42)
                  ;; Set up the thread state buffer here
                  ;; 168-175: rip
                  (let ([crash-buffer (make-bytes 16)])
                    (let ([crash (+ crash-buffer 8)])
                      (begin
                        (bytes-set! crash-buffer 0 #x90)
                        (bytes-set! crash-buffer 1 #x90)
                        (bytes-set! crash-buffer 2 #x90)
                        (bytes-set! crash-buffer 3 #x90)
                        (bytes-set! crash-buffer 4 #xB8)
                        (bytes-set! crash-buffer 5 #x01)
                        (bytes-set! crash-buffer 6 #x00)
                        (bytes-set! crash-buffer 7 #x00)
                        (bytes-set! crash-buffer 8 #x02)
                        (bytes-set! crash-buffer 9 #xBF)
                        (bytes-set! crash-buffer 10 #x0D)
                        (bytes-set! crash-buffer 11 #x00)
                        (bytes-set! crash-buffer 12 #x00)
                        (bytes-set! crash-buffer 13 #x00)
                        (bytes-set! crash-buffer 14 #x0F)
                        (bytes-set! crash-buffer 15 #x05)

                        (bytes-set!/octo-le buffer2 168 crash))))

                  (bytes-set!/octo-le buffer2 40 #x0EADBEEF)

                  (mach-msg/send-recv buffer2 208 reply-port)

                  (mach-unref-reply-port reply-port)

                  (debug-mach-message-header (parse-mach-message-header buffer2) stdout)))))


          (write-line #"Starting to get thread state" stdout)
          (let ([thread-port (bytes-ref/quad-le buffer 28)])
            (let ([buffer2 (make-bytes 216)])
              (let ([reply-port (mach-reply-port)])
                (begin
                  (write-mach-message-header
                    (mach-message-header
                      #x1513
                      0
                      thread-port
                      reply-port
                      0
                      #xE13)
                    buffer2)

                  ;; Set NDR record
                  (bytes-set!/octo-le buffer2 24 (ndr-record))
                  ;; Set the state type (x86_THREAD_STATE64 = 4)
                  (bytes-set!/quad-le buffer2 32 4)
                  ;; Set the size of the state (x86_THREAD_STATE64_COUNT = 42, 21 64bit registers)
                  (bytes-set!/quad-le buffer2 36 42)

                  (mach-msg/send-recv buffer2 40 reply-port)
                  (mach-unref-reply-port reply-port )
                  (debug-mach-message-header (parse-mach-message-header buffer2) stdout)

                  (write-line #"Unknown data" stdout)
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 24)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 28)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 32)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 36)) stdout) ;; Number of fields
                  (write-line #"Registers" stdout)
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 40)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 44)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 48)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 52)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 56)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 60)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 64)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 68)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 72)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 76)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 80)) stdout) ;; message-id
                  (write-line (integer->hex-bytes (bytes-ref/quad-le buffer2 84)) stdout) ;; message-id

                  ))))

          ;(write-line #"Starting up thread" stdout)
          ;(resume-thread (bytes-ref/quad-le buffer 28))

          ;(write-line #"Suspending the current thread" stdout)
          ;(suspend-thread (mach-thread-self))

          ;(write-line #"Terminating the current thread" stdout)
          ;(terminate-thread (mach-thread-self))

          ))
      (read-all-bytes stdin)
      0)))
