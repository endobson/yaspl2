(module thread-example
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort Byte)
      #:values (make-bytes bytes-set! quotient
                mach-task-self mach-reply-port mach-msg mach-port-mod-refs
                remainder - + * bytes-ref )
      #:patterns ())
    (io write-line)
    (numbers integer->hex-bytes))
  (export)
  (types)

  (define (bytes-ref/quad-le [bytes : Bytes] [offset : offset]) : Byte
    (+ (bytes-ref bytes (+ offset 0))
       (* 256
          (+ (bytes-ref bytes (+ offset 1))
              (* 256
                 (+ (bytes-ref bytes (+ offset 2))
                    (* 256
                       (bytes-ref bytes (+ offset 3)))))))))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (begin
      (let ([buffer (make-bytes 48)])
        (begin
          (let ([request-port (mach-task-self)])
            (let ([reply-port (mach-reply-port)])
              (begin
                ;; Set options to 0x1513
                (bytes-set! buffer 0 19)
                (bytes-set! buffer 1 21)
                (bytes-set! buffer 2 0)
                (bytes-set! buffer 3 0)
                ;; Set size to 0x0
                (bytes-set! buffer 4 0)
                (bytes-set! buffer 5 0)
                (bytes-set! buffer 6 0)
                (bytes-set! buffer 7 0)
                ;; Set remote port
                (bytes-set! buffer 8 (remainder request-port 256))
                (bytes-set! buffer 9 (remainder (quotient request-port 256) 256))
                (bytes-set! buffer 10 (remainder (quotient request-port 65536) 256))
                (bytes-set! buffer 11 (remainder (quotient request-port 16777216) 256))
                ;; Set reply port
                (bytes-set! buffer 12 (remainder reply-port 256))
                (bytes-set! buffer 13 (remainder (quotient reply-port 256) 256))
                (bytes-set! buffer 14 (remainder (quotient reply-port 65536) 256))
                (bytes-set! buffer 15 (remainder (quotient reply-port 16777216) 256))
                ;; Set voucher port to MACH_PORT_NULL
                (bytes-set! buffer 16 0)
                (bytes-set! buffer 17 0)
                (bytes-set! buffer 18 0)
                (bytes-set! buffer 19 0)
                ;; Set message-id to 0xD53
                (bytes-set! buffer 20 83)
                (bytes-set! buffer 21 13)
                (bytes-set! buffer 22 0)
                (bytes-set! buffer 23 0)

                (write-line (integer->hex-bytes request-port) stdout)
                (write-line (integer->hex-bytes reply-port) stdout)
                (mach-msg reply-port buffer 3 24 48 0 0)
                (mach-port-mod-refs request-port reply-port 1 (- 0 1)))))
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 0)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 4)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 8)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 12)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 16)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 20)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 24)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 28)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 32)) stdout)
          (write-line (integer->hex-bytes (bytes-ref/quad-le buffer 36)) stdout)
          (write-line (integer->hex-bytes (bytes-ref buffer 38)) stdout)
          (write-line (integer->hex-bytes (bytes-ref buffer 39)) stdout)))
      0)))
