#:module (intermediate-to-stack)
#:import {
  (bytes)
  (intermediate-language)
  (list)
  (module-name)
  (prim)
  (stack-machine)
  (yaspl module-environment)
  (yaspl top-level-objects)
}
(export
  #:types ()
  #:values (compile-type-definitions)
  #:patterns ())
(types)

(define (compile-type-definitions [mod : Module]) : (List TopLevelObject)
  (compile-type-definitions/list (module-name mod) (module-types mod) (empty)))

(define (compile-type-definitions/list
          [mod-name : ModName]
          [defs : (List TypeDefinition)]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (compile-type-definitions/list
       mod-name
       defs
       (compile-type-definition mod-name def acc))]))

(define (compile-type-definition
          [mod-name : ModName]
          [def : TypeDefinition]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case def
    [(type-definition name _ _ _ (cons variant (empty)))
     (compile-variant-definition mod-name name variant #t acc)]
    [(type-definition name _ _ _ variants)
     (compile-type-definition/variants mod-name name variants acc)]))

(define (compile-type-definition/variants
          [mod-name : ModName]
          [type-name : Bytes]
          [variants : (List VariantDefinition)]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case variants
    [(empty) acc]
    [(cons variant variants)
     (compile-type-definition/variants
       mod-name
       type-name
       variants
       (compile-variant-definition mod-name type-name variant #f acc))]))

(define (compile-variant-definition
          [mod-name : ModName]
          [type-name : Bytes]
          [def : VariantDefinition]
          [generate-accessors : Boolean]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case def
    [(variant-definition name variant-tag fields)
     (let ([mangled-name
            (mangle-name (bytes-append (varargs list (mangled-mod-name mod-name) #"_" type-name #"_" name)))])
       (append
         (case fields
           [(empty)
            (match-define const-name (bytes-append (varargs list mangled-name #"_const")))
            (varargs list
              (trivial-variant-tlo const-name variant-tag)
              (stack-function-tlo
                (stack-function
                  mangled-name
                  (length fields)
                  (cons
                    (stack-basic-block
                      (cons (load-global-cmd const-name) (empty))
                      (return 0))
                    (empty)))))]
           [_
            (varargs list
              (stack-function-tlo
                (stack-function
                  mangled-name
                  (length fields)
                  (cons
                    (stack-basic-block
                      (add-reversed-args
                        0
                        (length fields)
                        (cons
                          (alloc-variant-cmd variant-tag (length fields))
                          (empty)))
                      (return (length fields)))
                    (empty)))))])
         (cons
           (trivial-closure-tlo
             (bytes-append (varargs list mangled-name #"_closure"))
             mangled-name)
           (if generate-accessors
               (compile-variant-definition/accessors
                 mod-name
                 type-name
                 name
                 variant-tag
                 0
                 fields
                 acc)
               acc))))]))

(define (compile-variant-definition/accessors
          [mod-name : ModName]
          [type-name : Bytes]
          [variant-name : Bytes]
          [variant-tag : Int]
          [field-index : Int]
          [fields : (List VariantField)]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case fields
    [(empty) acc]
    [(cons (variant-field name _) fields)
     (compile-variant-definition/accessors
       mod-name
       type-name
       variant-name
       variant-tag
       (+ field-index 1)
       fields
       (let ([mangled-name
              (mangle-name
                (bytes-append (varargs list (mangled-mod-name mod-name) #"_" type-name #"_" variant-name #"_" name)))])
         (cons
           (stack-function-tlo
             (stack-function
               mangled-name
               1
               (cons
                 (stack-basic-block
                   (add-reversed-args 0 1 (cons (variant-ref-cmd variant-tag field-index) (empty)))
                   (return 1))
                 (empty))))
           (cons
             (trivial-closure-tlo
               (bytes-append (varargs list mangled-name #"_closure"))
               mangled-name)
             acc))))]))

(define (add-reversed-args [arg-number : Int] [args : Int] [cmds : (List StackCmd)]) : (List StackCmd)
  (if (= arg-number args)
      cmds
      (add-reversed-args
        (+ arg-number 1)
        args
        (cons (dup-cmd (- (* 2 args) (* 2 (+ arg-number 1)))) cmds))))
