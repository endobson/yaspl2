#:module (intermediate-to-stack)
#:import {
  (bytes)
  (dict)
  (intermediate-language)
  (join-list)
  (list)
  (maybe)
  (module-name)
  (prim)
  (stack-machine)
  (tuples)
  (yaspl module-environment)
  (yaspl top-level-objects)
}
(export
  #:types ()
  #:values (module-to-top-level-objects
            compile-type-definitions compile-closures compile-byte-constants)
  #:patterns ())
(types
  (define-type Environment
    (environment
      [value-bindings : (Dict Bytes VarReference)]
      [module-env : ModuleEnvironment]))
  (define-type VarReference
    (local-var)
    (free-var [offset : Int])) )

(define (module-to-top-level-objects [mod : Module] [env : ModuleEnvironment]) : (List TopLevelObject)
  (append
    (compile-type-definitions mod)
    (append
      (compile-function-definitions mod env)
      (append
        (compile-closures mod)
        (compile-byte-constants mod)))))

(define (environment-value-ref [env : Environment] [name : Bytes]) : (Maybe VarReference)
  (dict-ref (environment-value-bindings env) name))
(define (environment-global-ref [env : Environment] [name : Bytes]) : (Maybe Bytes)
  (module-environment-global-ref (environment-module-env env) name))
(define (environment-value-set [env : Environment] [name : Bytes] [val : VarReference])
  : Environment
  (case env
    [(environment vals mod)
     (environment (dict-set vals name val) mod)]))
(define (environment-tag-ref [env : Environment] [name : Bytes]) : (Maybe Int)
  (module-environment-tag-ref (environment-module-env env) name))

(define (add-all-locals [env : Environment] [names : (List Bytes)])
  : Environment
  (case names
    [(empty) env]
    [(cons name names) (add-all-locals (environment-value-set env name (local-var)) names)]))

(define (add-all-free-vars [env : Environment] [names : (List Bytes)] [index : Int])
  : Environment
  (case names
    [(empty) env]
    [(cons name names)
     (add-all-free-vars (environment-value-set env name (free-var index)) names (+ 1 index))]))


(define (compile-type-definitions [mod : Module]) : (List TopLevelObject)
  (compile-type-definitions/list (module-name mod) (module-types mod) (empty)))

(define (compile-type-definitions/list
          [mod-name : ModName]
          [defs : (List TypeDefinition)]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (compile-type-definitions/list
       mod-name
       defs
       (compile-type-definition mod-name def acc))]))

(define (compile-type-definition
          [mod-name : ModName]
          [def : TypeDefinition]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case def
    [(type-definition name _ _ _ (cons variant (empty)))
     (compile-variant-definition mod-name name variant #t acc)]
    [(type-definition name _ _ _ variants)
     (compile-type-definition/variants mod-name name variants acc)]))

(define (compile-type-definition/variants
          [mod-name : ModName]
          [type-name : Bytes]
          [variants : (List VariantDefinition)]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case variants
    [(empty) acc]
    [(cons variant variants)
     (compile-type-definition/variants
       mod-name
       type-name
       variants
       (compile-variant-definition mod-name type-name variant #f acc))]))

(define (compile-variant-definition
          [mod-name : ModName]
          [type-name : Bytes]
          [def : VariantDefinition]
          [generate-accessors : Boolean]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case def
    [(variant-definition name variant-tag fields)
     (let ([mangled-name
            (mangle-name (bytes-append (varargs list (mangled-mod-name mod-name) #"_" type-name #"_" name)))])
       (cons
         (stack-function-tlo
           (stack-function
             mangled-name
             (length fields)
             (cons
               (stack-basic-block
                 (add-reversed-args
                   0
                   (length fields)
                   (cons
                     (alloc-variant-cmd variant-tag (length fields))
                     (empty)))
                 (return (length fields)))
               (empty))))
         (cons
           (trivial-closure-tlo
             (bytes-append (varargs list mangled-name #"_closure"))
             mangled-name)
           (if generate-accessors
               (compile-variant-definition/accessors
                 mod-name
                 type-name
                 name
                 variant-tag
                 0
                 fields
                 acc)
               acc))))]))

(define (compile-variant-definition/accessors
          [mod-name : ModName]
          [type-name : Bytes]
          [variant-name : Bytes]
          [variant-tag : Int]
          [field-index : Int]
          [fields : (List VariantField)]
          [acc : (List TopLevelObject)]) : (List TopLevelObject)
  (case fields
    [(empty) acc]
    [(cons (variant-field name _) fields)
     (compile-variant-definition/accessors
       mod-name
       type-name
       variant-name
       variant-tag
       (+ field-index 1)
       fields
       (let ([mangled-name
              (mangle-name
                (bytes-append (varargs list (mangled-mod-name mod-name) #"_" type-name #"_" variant-name #"_" name)))])
         (cons
           (stack-function-tlo
             (stack-function
               mangled-name
               1
               (cons
                 (stack-basic-block
                   (add-reversed-args 0 1 (cons (variant-ref-cmd variant-tag field-index) (empty)))
                   (return 1))
                 (empty))))
           (cons
             (trivial-closure-tlo
               (bytes-append (varargs list mangled-name #"_closure"))
               mangled-name)
             acc))))]))

(define (add-reversed-args [arg-number : Int] [args : Int] [cmds : (List StackCmd)]) : (List StackCmd)
  (if (= arg-number args)
      cmds
      (add-reversed-args
        (+ arg-number 1)
        args
        (cons (dup-cmd (- (* 2 args) (* 2 (+ arg-number 1)))) cmds))))


(define (compile-byte-constants [mod : Module]) : (List TopLevelObject)
  (map (let ([mod-name (module-name mod)])
         (lambda ([b : BytesConstant])
            (case b
              [(bytes-constant name value)
               (bytes-tlo
                 (mangle-name (bytes-append (varargs list (mangled-mod-name mod-name) #"_" name)))
                 value)])))
       (module-bytes mod)))

(define (compile-closures [mod : Module]) : (List TopLevelObject)
  (compile-closures/list (module-name mod) (module-closures mod)))

(define (compile-closures/list
          [mod-name : ModName]
          [pairs : (List ClosureConstant)])
  : (List TopLevelObject)
  (case pairs
    [(empty) (empty)]
    [(cons (closure-constant name fun-name) pairs)
     (cons
       (trivial-closure-tlo
         (mangle-name (bytes-append (varargs list (mangled-mod-name mod-name) #"_" name)))
         (mangle-name (bytes-append (varargs list (mangled-mod-name mod-name) #"_" fun-name))))
       (compile-closures/list mod-name pairs))]))

(define (compile-function-definitions [mod : Module] [env : ModuleEnvironment]) : (List TopLevelObject)
  (compile-function-definitions/list (module-name mod) (module-definitions mod) env))

(define (compile-function-definitions/list
          [mod-name : ModName]
          [funs : (List FunctionDefinition)]
          [env : ModuleEnvironment]) : (List TopLevelObject)
  (case funs
    [(empty) (empty)]
    [(cons fun funs)
     (cons (compile-function-definition mod-name fun env)
           (compile-function-definitions/list mod-name funs env))]))

(define (compile-function-definition
          [mod-name : ModName]
          [fun : FunctionDefinition]
          [env : ModuleEnvironment]) : TopLevelObject
  (case fun
    [(function-definition name pre-type arg-names free-vars body)
     (stack-function-tlo
       (stack-function
         (mangle-name (bytes-append (varargs list (mangled-mod-name mod-name) #"_" name)))
         (length arg-names)
         ;; TODO validate the genstate has one temporary left in it, the return addr, and then the
         ;; variables.
         (case (compile-expression
                 body
                 (add-all-free-vars (add-all-locals (environment (make-dict bytes-cmp) env) arg-names) free-vars 0)
                 (gen-state (initial-variables arg-names) (empty-jl) 0 (empty-jl)))
           [(gen-state _ cmds label blocks)
            (jl->list
              (snoc-jl
                blocks
                (stack-basic-block (jl->list cmds) (return (length arg-names)))))])))]))

(define (compile-expressions
          [exprs : (List Expression)]
          [env : Environment]
          [state : GenState]) : GenState
  (case exprs
    [(empty) state]
    [(cons expr exprs)
     (compile-expressions exprs env
       (compile-expression expr env state))]))

(define (compile-expression
          [expr : Expression]
          [env : Environment]
          [state : GenState]) : GenState
  (case expr
    [(int-literal v) (add-int-literal v state)]
    [(boolean-literal v) (add-boolean-literal v state)]
    [(let-expr name expr body)
     (unscope-variable name
       (compile-expression
         body
         (environment-value-set env name (local-var))
         (name-temporary name
           (compile-expression expr env state))))]
    [(prim-numeric-bin-op op left right)
     (add-bin-numeric-cmd op
       (compile-expression right env
         (compile-expression left env state)))]
    [(prim-comparison-bin-op op left right)
     (add-bin-comparison-cmd op
       (compile-expression right env
         (compile-expression left env state)))]
    [(var-expr v)
     (case (environment-value-ref env v)
       [(just (local-var)) (variable-ref v state)]
       [(just (free-var offset))
        (load-free-var offset state)]
       [(nothing)
        (case (environment-global-ref env v)
          [(just sym)
           (load-global sym state)]
          [(nothing)
           (panic (bytes-append (cons #"Unbound variable: " (cons v (empty)))))])])]
    ;; TODO compile the expressions in the right order
    [(create-closure-expr name args)
     (case (environment-global-ref env name)
       [(just symbol)
        (create-closure symbol (length args)
          (compile-expressions (reverse args) env state))]
       [(nothing) (panic #"Unbound closure name")])]
    ;; TODO make effects of op go before arguments
    [(call-closure-expr op args)
     (call-function (length args)
       (compile-expression op env
         (compile-expressions args env state)))]
    ;; TODO compile the expressions in the right order
    [(array-expr args)
     (make-varargs-array (length args)
       (compile-expressions (reverse args) env state))]
    [(make-array-expr size val)
     (add-make-array-cmd
       (compile-expression val env
         (compile-expression size env state)))]
    [(array-length-expr arr)
     (add-array-length-cmd
       (compile-expression arr env state))]
    [(array-ref-expr array offset)
     (add-array-ref-cmd
       (compile-expression offset env
         (compile-expression array env state)))]
    [(array-set!-expr array offset val)
     (add-array-set!-cmd
       (compile-expression val env
         (compile-expression offset env
           (compile-expression array env state))))]
    [(if-expr c t f)
     (case (compile-expression c env state)
       [(gen-state stack cmds-c label-c-end blocks)
        (let ([stack-split (remove-temporaries 1 stack)])
          (let ([label-t-begin (+ label-c-end 1)])
            (case (compile-expression t env
                    (gen-state stack-split (empty-jl) label-t-begin (empty-jl)))
              [(gen-state stack-t cmds-t label-t-end blocks-t)
               (let ([label-f-begin (+ label-t-end 1)])
                 (case (compile-expression f env
                         (gen-state stack-split (empty-jl) label-f-begin (empty-jl)))
                   [(gen-state stack-f cmds-f label-f-end blocks-f)
                    (let ([new-label (+ label-f-end 1)])
                      (begin
                        ; (assert-stack-equal? stack-f stack-t)
                        ; (assert-stack-equal? stack-f (tmp-slot stack-split))
                        (gen-state
                          (tmp-slot stack-split)
                          (empty-jl)
                          new-label
                          (append-jl
                            (snoc-jl
                              blocks
                              (stack-basic-block (jl->list cmds-c) (boolean-jmp label-t-begin label-f-begin)))
                            (append-jl
                              (snoc-jl
                                blocks-t
                                (stack-basic-block (jl->list cmds-t) (uncond-jmp new-label)))
                              (snoc-jl
                                blocks-f
                                (stack-basic-block (jl->list cmds-f) (uncond-jmp new-label))))))))]))])))])]
    [(begin-expr exprs expr)
     (compile-expression expr env (compile-begin-exprs exprs env state))]
    [(case-expr expr clauses)
     (let ([state (compile-expression expr env state)])
       (compile-case-clauses clauses env state))]))

;; This should take a stack of A :: Rest to B :: Rest.
;; Where A is the type being cased on and B is the return type
(define (compile-case-clauses
          [clauses : (List CaseClause)]
          [env : Environment]
          [state : GenState]) : GenState
  (case clauses
    [(empty)
     (case state
       [(gen-state stack cmds label blocks)
        (gen-state
          (tmp-slot (remove-temporaries 1 stack))
          (empty-jl)
          (+ 1 label)
          (snoc-jl
            blocks
            (stack-basic-block
              (jl->list cmds)
              (variant-switch (no-catch-all-case)))))])]
    [(cons clause clauses)
     (compile-case-clause clause clauses env state)]))

(define (compile-case-clause
          [clause : CaseClause]
          [clauses : (List CaseClause)]
          [env : Environment]
          [state : GenState]) : GenState
  (case clause
    [(case-clause pattern expr)
     (case (compile-pattern/match pattern env (dup-temporary state))
       [(gen-state match-stack match-cmds match-end-label match-blocks)
        (let ([stack-split (remove-temporaries 1 match-stack)])
          (let ([extract-start-label (+ 1 match-end-label)])
            (case (compile-pattern/extract pattern expr env
                    (gen-state stack-split
                               (empty-jl)
                               extract-start-label
                               (empty-jl)))
              [(gen-state extract-stack extract-cmds extract-end-label extract-blocks)
               (let ([other-start-label (+ 1 extract-end-label)])
                 (case (compile-case-clauses clauses env
                         (gen-state stack-split
                                    (empty-jl)
                                    other-start-label
                                    (empty-jl)))
                   [(gen-state other-stack other-cmds other-end-label other-blocks)
                    (let ([join-label (+ other-end-label 1)])
                      (begin
                        ; (assert-stack-equal? other-stack extract-stack)
                        ; (assert-stack-equal? extract-stack stack-split)
                        (gen-state
                          stack-split
                          (empty-jl)
                          join-label
                          (append-jl
                            (snoc-jl
                              match-blocks
                              (stack-basic-block
                                (jl->list match-cmds)
                                (boolean-jmp extract-start-label other-start-label)))
                            (append-jl
                              (snoc-jl
                                extract-blocks
                                (stack-basic-block
                                  (jl->list extract-cmds)
                                  (uncond-jmp join-label)))
                              (snoc-jl
                                other-blocks
                                (stack-basic-block
                                  (jl->list other-cmds)
                                  (uncond-jmp join-label))))))))]))])))])]))

;; Takes a stack of the form A :: Rest and turns it into the state Boolean :: Rest
;; where the top of the stack is true if the value matched the pattern.
(define (compile-pattern/match
          [pattern : Pattern]
          [env : Environment]
          [state : GenState]) : GenState
  (case pattern
    [(ignore-pattern) (add-boolean-literal #t (ignore-value state))]
    [(variable-pattern _) (add-boolean-literal #t (ignore-value state))]
    [(abstraction-pattern name patterns)
     (case (environment-tag-ref env name)
       [(nothing)
        (panic #"Unbound abstraction pattern")]
       [(just tag)
        (case state
          [(gen-state stack cmds old-label blocks)
           (let ([non-matching-label (+ 1 old-label)])
             (let ([matching-label (+ 1 non-matching-label)])
               (case (compile-variant-patterns/match tag 0 patterns env
                       (gen-state stack (empty-jl) matching-label (empty-jl)))
                 [(gen-state matching-stack matching-cmds matching-end-label matching-blocks)
                  (let ([join-label (+ 1 matching-end-label)])
                    (begin
                      ; (assert-stack-equal? matching-stack stack)
                      (gen-state
                        (tmp-slot (remove-temporaries 1 stack))
                        (empty-jl)
                        join-label
                        (append-jl
                          (snoc-jl
                            (snoc-jl
                              blocks
                              (stack-basic-block
                                (jl->list cmds)
                                (variant-switch
                                  (variant-case tag matching-label
                                    (catch-all-case non-matching-label)))))
                            (stack-basic-block
                              (cons (pop-cmd) (cons (boolean-lit-cmd #f) (empty)))
                              (uncond-jmp join-label)))
                          (snoc-jl
                            matching-blocks
                            (stack-basic-block
                              (jl->list matching-cmds)
                              (uncond-jmp join-label)))))))])))])])]
    [(bytes-pattern const-name)
     (case (environment-global-ref env const-name)
       [(just n)
        (add-bytes-cmp (load-global n state))]
       [(nothing) (panic #"Bad bytes pattern")])]
    [(int-pattern lit)
     (add-int-cmp (add-int-literal lit state))]))

;; Takes a stack of the form A :: Rest and turns it into the state Boolean :: Rest
;; where the top of the stack is true if the value matched all the patterns
(define (compile-variant-patterns/match
          [tag : Int]
          [field : Int]
          [patterns : (List Pattern)]
          [env : Environment]
          [state : GenState]) : GenState
  (case patterns
    [(empty) (add-boolean-literal #t (ignore-value state))]
    [(cons pattern patterns)
     (let ([state (variant-ref tag field (dup-temporary state))])
       (case (compile-pattern/match pattern env state)
         [(gen-state stack cmds label blocks)
          (let ([non-matching-label (+ label 1)])
            (let ([matching-label (+ non-matching-label 1)])
              (case (compile-variant-patterns/match tag (+ field 1) patterns env
                      (gen-state (remove-temporaries 1 stack) (empty-jl) matching-label (empty-jl)))
                [(gen-state matching-stack matching-cmds matching-end-label matching-blocks)
                 (let ([join-label (+ matching-end-label 1)])
                   (begin
                     ; (assert-stack-equal? matching-stack (remove-temporaries 1 stack))
                     (gen-state
                       matching-stack
                       (empty-jl)
                       join-label
                       (append-jl
                         (snoc-jl
                           (snoc-jl
                             blocks
                             (stack-basic-block
                               (jl->list cmds)
                               (boolean-jmp matching-label non-matching-label)))
                           (stack-basic-block
                             (cons (pop-cmd) (cons (boolean-lit-cmd #f) (empty)))
                             (uncond-jmp join-label)))
                         (snoc-jl
                           matching-blocks
                           (stack-basic-block
                             (jl->list matching-cmds)
                             (uncond-jmp join-label)))))))])))]))]))

;; Takes a stack of the form A :: Rest and sets it up with some variables
;; on top of Rest before evaluating expr, and then cleans up all those variables.
(define (compile-pattern/extract
          [pattern : Pattern]
          [expr : Expression]
          [env : Environment]
          [state : GenState]) : GenState
  (let ([extractions (compute-extractions (cons (tuple2 pattern (empty)) (empty)) env (empty))])
    (cleanup-extractions/state
      (reverse extractions)
      (compile-expression
        expr
        (run-extractions/env extractions env)
        (run-extractions/state extractions state)))))

(define (run-extractions/state
          [extractions : (List (Tuple2 Bytes (List (Tuple2 Int Int))))]
          [state : GenState]) : GenState
  (case extractions
    [(empty) (ignore-value state)]
    [(cons (tuple2 name path) extractions)
     (run-extractions/state
       extractions
       (swap-var
         (name-temporary name
           (extract-path (reverse path) (dup-temporary state)))))]))

(define (cleanup-extractions/state
          [extractions : (List (Tuple2 Bytes (List (Tuple2 Int Int))))]
          [state : GenState]) : GenState
  (case extractions
    [(empty) state]
    [(cons (tuple2 name _) extractions)
     (cleanup-extractions/state
       extractions
       (unscope-variable name state))]))

(define (extract-path [path : (List (Tuple2 Int Int))] [state : GenState]) : GenState
  (case path
    [(empty) state]
    [(cons (tuple2 tag field) path)
     (extract-path
       path
       (variant-ref tag field state))]))

(define (swap-var [state : GenState]) : GenState
  (case state
    [(gen-state stack cmds label blocks)
     (case stack
       [(var-slot v (tmp-slot stack))
        (gen-state
          (tmp-slot (var-slot v stack))
          (snoc-jl cmds (swap-cmd))
          label
          blocks)]
       [_ (panic #"swap-var: Not a valid state")])]))

(define (run-extractions/env
          [extractions : (List (Tuple2 Bytes (List (Tuple2 Int Int))))]
          [env : Environment]) : Environment
  (case extractions
    [(empty) env]
    [(cons (tuple2 name _) extractions)
     (run-extractions/env
       extractions
       (environment-value-set env name (local-var)))]))

(define (compute-extractions
          [patterns : (List (Tuple2 Pattern (List (Tuple2 Int Int))))]
          [env : Environment]
          [acc-extractions : (List (Tuple2 Bytes (List (Tuple2 Int Int))))])
  : (List (Tuple2 Bytes (List (Tuple2 Int Int))))
  (case patterns
    [(empty) acc-extractions]
    [(cons (tuple2 pattern path) patterns)
     (case pattern
       [(ignore-pattern) (compute-extractions patterns env acc-extractions)]
       [(bytes-pattern _) (compute-extractions patterns env acc-extractions)]
       [(int-pattern _) (compute-extractions patterns env acc-extractions)]
       [(variable-pattern v)
        (compute-extractions patterns env (cons (tuple2 v path) acc-extractions))]
       [(abstraction-pattern name inner-patterns)
        (case (environment-tag-ref env name)
          [(nothing) (panic #"Unbound abstraction pattern")]
          [(just tag)
            (compute-extractions
              (compute-extraction-paths inner-patterns path tag 0 patterns)
              env
              acc-extractions)])])]))

(define (compute-extraction-paths
          [patterns : (List Pattern)]
          [path : (List (Tuple2 Int Int))]
          [tag : Int]
          [field : Int]
          [acc : (List (Tuple2 Pattern (List (Tuple2 Int Int))))])
  : (List (Tuple2 Pattern (List (Tuple2 Int Int))))
  (case patterns
    [(empty) acc]
    [(cons pattern patterns)
     (compute-extraction-paths
       patterns
       path
       tag
       (+ field 1)
       (cons (tuple2 pattern (cons (tuple2 tag field) path)) acc))]))


(define (compile-begin-exprs
          [exprs : (List Expression)]
          [env : Environment]
          [state : GenState]) : GenState
  (case exprs
    [(empty) state]
    [(cons expr exprs)
     (compile-begin-exprs exprs env (ignore-value (compile-expression expr env state)))]))
