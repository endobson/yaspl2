#:module (intermediate-to-stack)
#:import {
  (bytes)
  (intermediate-language)
  (join-list)
  (list)
  (module-name)
  (prim)
  (stack-machine)
  (yaspl module-environment)
  (yaspl top-level-objects)
}
(export
  #:types ()
  #:values (compile-variant-definition/accessors)
  #:patterns ())
(types)

(define (compile-variant-definition/accessors
          [mod-name : ModName]
          [type-name : Bytes]
          [variant : VariantDefinition])
  : (JoinList TopLevelObject)
  (case variant
    [(variant-definition variant-name variant-tag fields)
     (compile-variant-definition/accessors*
       mod-name
       type-name
       variant-name
       variant-tag
       0
       fields)]))

(define (compile-variant-definition/accessors*
          [mod-name : ModName]
          [type-name : Bytes]
          [variant-name : Bytes]
          [variant-tag : Int]
          [field-index : Int]
          [fields : (List VariantField)])
  : (JoinList TopLevelObject)
  (case fields
    [(empty) (empty-jl)]
    [(cons (variant-field field-name _) fields)
     (append-jl
       (compile-variant-definition-accessor
         mod-name
         type-name
         variant-name
         field-name
         variant-tag
         field-index)
       (compile-variant-definition/accessors*
         mod-name
         type-name
         variant-name
         variant-tag
         (+ field-index 1)
         fields))]))

(define (compile-variant-definition-accessor
          [mod-name : ModName]
          [type-name : Bytes]
          [variant-name : Bytes]
          [field-name : Bytes]
          [variant-tag : Int]
          [field-index : Int]) : (JoinList TopLevelObject)
  (let ([mangled-name
         (mangle-name
           (bytes-append (varargs list (mangled-mod-name mod-name) #"_" type-name #"_" variant-name
                                  #"_" field-name)))])
    (varargs join-list
      (stack-function-tlo
        (stack-function
          mangled-name
          1
          (cons
            (stack-basic-block
              (add-reversed-args 0 1 (cons (variant-ref-cmd variant-tag field-index) (empty)))
              (return 1))
            (empty))))
      (trivial-closure-tlo
        (bytes-append (varargs list mangled-name #"_closure"))
        mangled-name))))

(define (add-reversed-args [arg-number : Int] [args : Int] [cmds : (List StackCmd)]) : (List StackCmd)
  (if (= arg-number args)
      cmds
      (add-reversed-args
        (+ arg-number 1)
        args
        (cons (dup-cmd (- (* 2 args) (* 2 (+ arg-number 1)))) cmds))))
