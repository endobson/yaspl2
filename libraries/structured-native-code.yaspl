#:module (structured-native-code)
#:import {
  (aligned-bytes)
  (bytes)
  (list)
  (numbers)
  (prim)
}
(export
  (#:types AbstractRelocationKind Relocation DefinedSymbol ProgramSection)
  (#:values branch-relocation call-relocation load-relocation address-relocation
            relocation relocation-symbol program-section
            defined-symbol defined-symbol-name defined-symbol<
            combine-sections convert-relocations)
  (#:patterns branch-relocation call-relocation load-relocation address-relocation relocation
              defined-symbol program-section))
(types
  (define-type AbstractRelocationKind
    (branch-relocation)
    (call-relocation)
    (load-relocation)
    (address-relocation))

  (define-type (Relocation RelocationKind)
    (relocation [kind : RelocationKind] [offset : Int] [symbol : Bytes]))

  (define-type DefinedSymbol
    (defined-symbol [name : Bytes] [offset : Int]))

  (define-type (ProgramSection RelocationKind)
    (program-section
      [contents : AlignedBytes]
      [relocations : (List (Relocation RelocationKind))]
      [global-symbols : (List DefinedSymbol)]
      [local-symbols : (List DefinedSymbol)])))

(define (K1 K2) (convert-relocations [p : (ProgramSection K1)] [f : (K1 -> K2)])
  : (ProgramSection K2)
  (match-define (program-section contents relocations global-symbols local-symbols) p)
  (match-define new-relocations
    (map (lambda ([r : (Relocation K1)])
           (case r
             [(relocation k offset symbol)
              (relocation (f k) offset symbol)]))
         relocations))
  (program-section contents new-relocations global-symbols local-symbols))

(define (defined-symbol< [x : DefinedSymbol] [y : DefinedSymbol]) : Boolean
  (bytes< (defined-symbol-name x) (defined-symbol-name y)))

(define (RelocationKind) (combine-sections [sections : (List (ProgramSection RelocationKind))])
  : (ProgramSection RelocationKind)
  (section-fold sections (empty) 0 0 (empty) (empty) (empty)))

(define (RelocationKind)
  (section-fold
    [sections : (List (ProgramSection RelocationKind))]
    [reversed-contents : (List Bytes)]
    [current-offset : Int]
    [current-max-alignment : Int]
    [relocations : (List (Relocation RelocationKind))]
    [global-symbols : (List DefinedSymbol)]
    [local-symbols : (List DefinedSymbol)]) : (ProgramSection RelocationKind)
  (case sections
    [(empty)
     (program-section
       (aligned-bytes
         (bytes-append (reverse reversed-contents))
         current-max-alignment)
       relocations
       global-symbols
       local-symbols)]
    [(cons (program-section (aligned-bytes section-content alignment)
                            section-relocations section-global-symbols
                            section-local-symbols)
           sections)
     (match-define aligned-offset (round-up current-offset (logical-shift-left 1 alignment)))
     (match-define reversed-contents
       (if (= aligned-offset current-offset)
           reversed-contents
           (cons (make-bytes (- aligned-offset current-offset)) reversed-contents)))

     (section-fold
       sections
       (cons section-content reversed-contents)
       (+ aligned-offset (bytes-length section-content))
       (max current-max-alignment alignment)
       (append
         (map (lambda ([reloc : (Relocation RelocationKind)])
                (case reloc
                  [(relocation type offset symbol)
                   (relocation type (+ aligned-offset offset) symbol)]))
              section-relocations)
         relocations)
       (append
         (map (lambda ([sym : DefinedSymbol])
                (case sym
                  [(defined-symbol name offset)
                   (defined-symbol name (+ aligned-offset offset))]))
              section-global-symbols)
         global-symbols)
       (append
         (map (lambda ([sym : DefinedSymbol])
                (case sym
                  [(defined-symbol name offset)
                   (defined-symbol name (+ aligned-offset offset))]))
              section-local-symbols)
         local-symbols))]))
