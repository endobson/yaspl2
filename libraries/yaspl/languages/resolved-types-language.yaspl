#:module (yaspl languages resolved-types-language)
#:import {
  (data source-location)
  (dict)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  {(resolved-imports-language)
    {#:types
      Identifier
    }
    {#:values
      identifier
    }
    {#:patterns
      identifier
    }
  }
  (top-level-name)
  (types)
}
(export
  (#:types Module Block BlockDefinition CaseClause CondClause
           Expression FunctionDefinition FunctionArg TypeDefinition
           VariantDefinition VariantField Exports TypeExport Imports Export Pattern
           StaticDefinition Identifier)
  (#:values module module-definitions module-imports module-name case-clause-pattern
            function-definition-name function-arg-pattern function-arg-type
            type-definition-name variant-definition-name variant-field-type
            variant-field-name var-expr int-literal case-expr case-clause bytes-literal boolean-literal
            block app-expr bytes-pattern ignore-pattern pattern-source-span exports
            imports-patterns identifier export type-export varargs-definition type-definition
            variant-definition variant-field function-definition function-arg varargs-app-expr
            let-expr begin-expr cond-expr if-expr annotated-expr lambda-expr cond-clause match-def
            abstraction-pattern variable-pattern int-pattern imports)
  (#:patterns module annotated-expr app-expr type-export exports begin-expr block boolean-literal
              bytes-literal case-clause case-expr cond-clause cond-expr
              function-definition function-arg if-expr int-literal lambda-expr let-expr
              match-def type-definition var-expr varargs-app-expr
              variant-definition variant-field
              imports abstraction-pattern bytes-pattern export ignore-pattern int-pattern
              variable-pattern varargs-definition identifier))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]
            [static-definitions : (List StaticDefinition)]))
  (define-type Imports
    (imports
      [values : (Dict Bytes ValueSignature)]
      [patterns : (Dict Bytes PatternSignature)]
      [static-bindings : (Dict Bytes StaticSignature)]
      [static-info : (Dict TopLevelName TopLevelSignature)]))
  (define-type Exports
    (exports [types : (List TypeExport)]
             [values : (List Export)]
             [patterns : (List Export)]
             [statics : (List Export)]))
  (define-type Export
    (export [local-name : Bytes] [exported-name : Bytes]))
  (define-type TypeExport
    (type-export [exported-name : Bytes] [type : Type]))

  (define-type TypeDefinition
    (type-definition [name : Bytes] [vars : (Maybe (List Bytes))] [variants : (List VariantDefinition)]))

  (define-type VariantDefinition
    (variant-definition [name : Bytes] [fields : (List VariantField)]))
  (define-type VariantField
    (variant-field [name : Bytes] [type : Type]))

  (define-type FunctionDefinition
    (function-definition [name : Bytes]
                         [type-vars : (List Bytes)]
                         [args : (List FunctionArg)]
                         [return-type : Type]
                         [body : Block]))
  (define-type Block
    (block [definitions : (List BlockDefinition)] [expr : Expression]))
  (define-type BlockDefinition
    (match-def [pattern : Pattern] [type : (Maybe Type)] [expr : Expression]))

  (define-type Expression
    (int-literal [v : Int] [source : SourceSpan])
    (bytes-literal [v : Bytes] [source : SourceSpan])
    (boolean-literal [v : Boolean] [source : SourceSpan])
    (var-expr [id : Identifier])
    (annotated-expr [t : Type] [e : Expression] [source : SourceSpan])
    (if-expr [cond : Expression] [true : Expression] [false : Expression] [source : SourceSpan])
    (cond-expr [clauses : (List CondClause)] [final-body : Block] [source : SourceSpan])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression] [source : SourceSpan])
    (app-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)]
              [source : SourceSpan])
    (varargs-app-expr [tail-position : Boolean] [op : Identifier] [args : (List Expression)]
                      [source : SourceSpan])
    (let-expr [name : Bytes] [expr : Expression] [body : Block] [source : SourceSpan])
    (lambda-expr [args : (List FunctionArg)] [type : (Maybe Type)] [body : Block] [source : SourceSpan])
    (case-expr [expr : Expression] [clauses : (List CaseClause)] [source : SourceSpan]))

  (define-type FunctionArg
    (function-arg
      [pattern : Pattern]
      [type : Type]))

  (define-type CaseClause
    (case-clause [pattern : Pattern] [body : Block]))
  (define-type CondClause
    (cond-clause [test : Expression] [body : Block] [source : SourceSpan]))

  (define-type Pattern
    (bytes-pattern [v : Bytes] [source : SourceSpan])
    (int-pattern [v : Int] [source : SourceSpan])
    (variable-pattern [v : Identifier])
    (ignore-pattern [source : SourceSpan])
    (abstraction-pattern [name : Bytes] [patterns : (List Pattern)] [source : SourceSpan]))

  (define-type StaticDefinition
    (varargs-definition [name : Bytes]
                        [type-vars : (List Bytes)]
                        [arg-type : Type]
                        [return-type : Type]
                        [cons-func : Identifier]
                        [empty-func : Identifier])))

(define (pattern-source-span [p : Pattern]) : SourceSpan
  (case p
    [(bytes-pattern _ src) src]
    [(int-pattern _ src) src]
    [(variable-pattern (identifier _ src)) src]
    [(ignore-pattern src) src]
    [(abstraction-pattern _ _ src) src]))
