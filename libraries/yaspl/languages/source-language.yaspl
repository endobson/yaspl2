#:module (yaspl languages source-language)
#:import {
  (data source-location)
  (list)
  (maybe)
  (module-name)
  (prim)
}
(export
  (#:types Module Imports Import Exports Export TypeDefinition VariantDefinition VariantField PreType
           FunctionDefinition FunctionArg Expression CaseClause Pattern Block BlockDefinition
           StaticDefinition Identifier)
  (#:values module-name module-types module-definitions module-statics
            function-definition-name function-arg-pattern function-arg-pre-type
            exports-values type-definition-variants var-pre-type fun-pre-type export variant-field-type
            case-clause-body module-exports exports-patterns exports-types
            export-local-name export-exported-name module-imports import-exported-name
            type-definition-name var-expr app-expr function-definition-body
            variant-definition-name variant-field-name case-clause-pattern boolean-literal
            ignore-pattern int-literal case-clause case-expr bytes-pattern bytes-literal block
            variable-pattern import-local-name partial-imports full-imports import imports-module-name
            pre-type-source-span lambda-expr match-def let-expr exports type-definition
            variant-definition variant-field type-app-pre-type varargs-definition function-definition
            function-arg abstraction-pattern int-pattern module if-expr begin-expr annotated-expr
            varargs-app-expr identifier identifier-name
            import-exported-name* import-local-name* export-local-name* export-exported-name*
            type-definition-name* function-definition-name*)
  (#:patterns int-literal bytes-literal boolean-literal var-expr if-expr begin-expr app-expr
              varargs-app-expr let-expr lambda-expr case-expr annotated-expr case-clause module
              bytes-pattern int-pattern variable-pattern ignore-pattern abstraction-pattern
              function-definition function-arg variant-definition type-definition variant-field export
              exports import partial-imports block match-def identifier
              varargs-definition
              var-pre-type fun-pre-type type-app-pre-type full-imports))
(types
  (define-type Module
    (module [name : ModName]
            [imports : (List Imports)]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]
            [statics : (List StaticDefinition)]))
  (define-type Imports
    (full-imports [module-name : (SourceSpanAnnotated ModName)])
    (partial-imports
      [module-name : (SourceSpanAnnotated ModName)]
      [types : (List Import)]
      [values : (List Import)]
      [patterns : (List Import)]
      [statics : (List Import)]))
  (define-type Import
    (import
      [exported-name : Identifier]
      [local-name : Identifier]))
  (define-type Exports
    (exports [types : (List Export)]
             [values : (List Export)]
             [patterns : (List Export)]
             [statics : (List Export)]))
  (define-type Export
    (export
      [local-name : Identifier]
      [exported-name : Identifier]))
  (define-type TypeDefinition
    (type-definition
      [name : Identifier]
      [vars : (Maybe (List Bytes))]
      [variants : (List VariantDefinition)]))
  (define-type VariantDefinition
    (variant-definition [name : Identifier] [fields : (List VariantField)]))
  (define-type VariantField
    (variant-field [name : Identifier] [type : PreType]))
  (define-type PreType
    (var-pre-type [v : Identifier])
    (fun-pre-type [type-vars : (List Bytes)] [args : (List PreType)] [result : PreType]
                  [source : SourceSpan])
    (type-app-pre-type [constructor : Identifier] [args : (List PreType)] [source : SourceSpan]))
  (define-type FunctionDefinition
    (function-definition
      [name : Identifier]
      [type-vars : (List Bytes)]
      [args : (List FunctionArg)]
      [return-type : PreType]
      [body : Block]))
  (define-type Block
    (block [definitions : (List BlockDefinition)] [expr : Expression]))
  (define-type BlockDefinition
    (match-def [pattern : Pattern] [type : (Maybe PreType)] [expr : Expression]))

  (define-type Expression
    (int-literal [v : Int] [source : SourceSpan])
    (bytes-literal [v : Bytes] [source : SourceSpan])
    (boolean-literal [v : Boolean] [source : SourceSpan])
    (var-expr [id : Identifier])
    (annotated-expr [t : PreType] [e : Expression] [source : SourceSpan])
    (if-expr [cond : Expression] [true : Expression] [false : Expression] [source : SourceSpan])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression] [source : SourceSpan])
    (app-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)]
              [source : SourceSpan])
    (varargs-app-expr [tail-position : Boolean] [op : Identifier] [args : (List Expression)]
                      [source : SourceSpan])
    (let-expr [name : Identifier]
              [expr : Expression] [body : Block] [source : SourceSpan])
    (lambda-expr [args : (List FunctionArg)] [type : (Maybe PreType)] [body : Block]
                 [source : SourceSpan])
    (case-expr [expr : Expression] [clauses : (List CaseClause)] [source : SourceSpan]))

  (define-type FunctionArg
    (function-arg
      [pattern : Pattern]
      [pre-type : PreType]))

  (define-type CaseClause
    (case-clause [pattern : Pattern] [body : Block]))

  (define-type Pattern
    (bytes-pattern [v : Bytes] [source : SourceSpan])
    (int-pattern [v : Int] [source : SourceSpan])
    (variable-pattern [v : Identifier])
    (ignore-pattern [source : SourceSpan])
    (abstraction-pattern [name : Identifier] [patterns : (List Pattern)]
                         [source : SourceSpan]))

  (define-type StaticDefinition
    (varargs-definition [name : Identifier]
                        [type-vars : (List Bytes)]
                        [arg-type : PreType]
                        [return-type : PreType]
                        [cons-func : Identifier]
                        [empty-func : Identifier]))

  (define-type Identifier
    (identifier [name : Bytes] [source : SourceSpan])))

(define (pre-type-source-span [p : PreType]) : SourceSpan
  (case p
    [(var-pre-type (identifier _ source)) source]
    [(fun-pre-type _ _ _ source) source]
    [(type-app-pre-type _ _ source) source]))

(define (imports-module-name [i : Imports]) : ModName
  (case i
    [(partial-imports (source-span-annotated mod-name _) _ _ _ _) mod-name]
    [(full-imports (source-span-annotated mod-name _)) mod-name]))

(define (import-exported-name* [i : Import]) : Bytes
  (match-define (import (identifier name _) _) i)
  name)

(define (import-local-name* [i : Import]) : Bytes
  (match-define (import _ (identifier name _)) i)
  name)

(define (export-local-name* [e : Export]) : Bytes
  (match-define (export (identifier name _) _) e)
  name)

(define (export-exported-name* [e : Export]) : Bytes
  (match-define (export _ (identifier name _)) e)
  name)

(define (type-definition-name* [def : TypeDefinition]) : Bytes
  (match-define (type-definition (identifier name _) _ _) def)
  name)

(define (function-definition-name* [def : FunctionDefinition]) : Bytes
  (match-define (function-definition (identifier name _) _ _ _ _) def)
  name)
