#:module (yaspl languages expanded-datatypes-language)
#:import {
  (dict)
  (list)
  (module-name)
  (module-signature)
  (prim)
  (top-level-name)
  (types)
  (variant-info)
  {(yaspl languages resolved-types-language)
    {#:types
      Block
      BlockDefinition
      CaseClause
      CondClause
      Export
      Expression
      FunctionArg
      FunctionDefinition
      Identifier
      Pattern
      StaticDefinition
      TypeExport
    }
    {#:values
      case-clause-pattern
      function-arg-pattern
      function-arg-type
      function-definition-name
      pattern-source-span
    }
    {#:patterns
      abstraction-pattern
      annotated-expr
      app-expr
      begin-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      cond-clause
      cond-expr
      export
      function-arg
      function-definition
      identifier
      if-expr
      ignore-pattern
      int-literal
      int-pattern
      lambda-expr
      let-expr
      match-def
      type-export
      var-expr
      varargs-app-expr
      varargs-definition
      variable-pattern
    }
  }
}
(export
  (#:types
    Block BlockDefinition CaseClause CondClause DatatypeDefinition Exports Expression FieldDescriptor
    FunctionDefinition FunctionArg Imports Module Pattern StaticDefinition Export TypeExport
    PatternExport Identifier)
  (#:values
   module exports module-definitions module-imports module-name
   module-static-definitions module-patterns
   function-arg-pattern function-arg-type function-definition-name
   field-descriptor-runtime-index
   pattern-source-span case-clause-pattern imports variant-constructor field-descriptor
   variant-accessor pattern-export)
  (#:patterns
    module annotated-expr app-expr type-export export exports begin-expr block boolean-literal
    bytes-literal case-clause case-expr cond-clause cond-expr function-definition function-arg
    if-expr int-literal lambda-expr let-expr
    match-def var-expr varargs-app-expr varargs-definition
    imports abstraction-pattern bytes-pattern ignore-pattern
    int-pattern variable-pattern pattern-export
    variant-constructor variant-accessor identifier))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [definitions : (List FunctionDefinition)]
            [datatype-definitions : (List DatatypeDefinition)]
            [patterns : (Dict Bytes PatternSignature)]
            [static-definitions : (List StaticDefinition)]))

  (define-type DatatypeDefinition
    (variant-constructor
      [variant-name : Bytes]
      [type : Type]
      [star-field-count : Int]
      [i64-field-count : Int]
      [fields : (List FieldDescriptor)]
      [tag : U8])
    (variant-accessor
      [accessor-name : Bytes]
      [type : Type]
      [field-offset : Int]
      [info : VariantDestructionInfo]))

  (define-type FieldDescriptor
    (field-descriptor [name : Bytes] [runtime-index : Int]))

  (define-type Imports
    (imports
      [values : (Dict Bytes ValueSignature)]
      [static-bindings : (Dict Bytes StaticSignature)]
      [static-info : (Dict TopLevelName TopLevelSignature)]))

  (define-type Exports
    (exports [types : (List TypeExport)]
             [values : (List Export)]
             [patterns : (List PatternExport)]
             [statics : (List Export)]))
  (define-type PatternExport
    (pattern-export [exported-name : Bytes] [desc : PatternSignature]))

  (define-type ExpandedDatatype
    (expanded-datatype
      [name : Bytes]
      [mod-name : ModName]
      [vars : (List Bytes)]
      [variants : (List ExpandedVariant)]))
  (define-type ExpandedVariant
    (expanded-variant
      [name : Bytes]
      [tag : U8]
      [fields : (List ExpandedField)]
      [destruction-info : VariantDestructionInfo]))
  (define-type ExpandedField
    (expanded-field
      [name : Bytes]
      [type : Type]
      [source-index : Int]
      [runtime-index : Int])))
