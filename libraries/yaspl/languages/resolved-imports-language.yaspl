#:module (resolved-imports-language)
#:import {
  (data source-location)
  (dict)
  (list)
  (module-name)
  (module-signature)
  (prim)
  (top-level-name)
  (types)
  {(yaspl languages source-language)
    {#:types
      Block
      BlockDefinition
      CaseClause
      CondClause
      Export
      Exports
      Expression
      FunctionArg
      FunctionDefinition
      Identifier
      Pattern
      PreType
      StaticDefinition
      TypeDefinition
      VariantDefinition
      VariantField
    }
    {#:values
      bytes-pattern
      export-exported-name
      export-exported-name*
      export-local-name
      export-local-name*
      function-definition-name
      function-definition-name*
      identifier
      identifier-name
      ignore-pattern
      pre-type-source-span
      type-definition-name
      type-definition-name*
      variant-definition-name
    }
    {#:patterns
      abstraction-pattern
      annotated-expr
      app-expr
      begin-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      cond-clause
      cond-expr
      export
      exports
      fun-pre-type
      function-arg
      function-definition
      identifier
      if-expr
      ignore-pattern
      int-literal
      int-pattern
      lambda-expr
      let-expr
      match-def
      type-app-pre-type
      type-definition
      var-expr
      var-pre-type
      varargs-app-expr
      varargs-definition
      variable-pattern
      variant-definition
      variant-field
    }
  }
}
(export
  (#:types
      Imports Module Block Export Pattern PreType BlockDefinition CaseClause CondClause Exports Expression
      FunctionDefinition FunctionArg TypeDefinition VariantDefinition VariantField StaticDefinition
      Identifier)
  (#:values module module-definitions module-name module-types module-imports
            imports imports-patterns type-definition-name
            bytes-pattern ignore-pattern identifier
            pre-type-source-span
            export-exported-name export-local-name export-exported-name* export-local-name* 
            function-definition-name function-definition-name* variant-definition-name
            type-definition-name* identifier-name module-name*)
  (#:patterns imports module app-expr annotated-expr begin-expr block boolean-literal bytes-literal
              case-clause case-expr cond-clause cond-expr export exports 
              fun-pre-type function-definition function-arg
              if-expr int-literal lambda-expr let-expr match-def type-app-pre-type type-definition
              var-expr var-pre-type varargs-app-expr variant-definition variant-field
              abstraction-pattern bytes-pattern ignore-pattern int-pattern variable-pattern
              varargs-definition identifier))
(types
  (define-type Module
    (module [name : (SourceSpanAnnotated ModName)]
            [imports : Imports]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]
            [statics : (List StaticDefinition)]))
  (define-type Imports
    (imports
      [types : (Dict Bytes Type)]
      [values : (Dict Bytes ValueSignature)]
      [patterns : (Dict Bytes PatternSignature)]
      [statics : (Dict Bytes StaticSignature)]
      [static-info : (Dict TopLevelName TopLevelSignature)])))

(define (module-name* [m : Module]) : ModName
  (match-define (module (source-span-annotated name _) _ _ _ _ _) m)
  name)
