#:module (libraries languages expanded-varargs-language)
#:import {
  (list)
  (maybe)
  (module-name)
  (prim)
  {(resolved-vars-language)
    {#:types
      DatatypeDefinition
      Exports
      FunctionArg
      Imports
      Pattern
      PatternExport
      StaticExport
      TypeExport
      ValueExport
    }
    {#:values
      function-arg-name
      function-arg-type
    }
    {#:patterns
      abstraction-pattern
      bytes-pattern
      exports
      function-arg
      imports
      int-pattern
      pattern-export
      type-export
      value-export
      varargs-export
      variable-pattern
      variant-accessor
      variant-constructor
    }
  }
  (top-level-name)
  (types)
  (yaspl var)
}
(export
  (#:types DatatypeDefinition Exports Expression FunctionDefinition FunctionArg Imports Module
           PatternExport StaticExport TypeExport ValueExport Pattern CaseClause)
  (#:values module function-definition
            lambda-expr let-expr app-expr begin-expr if-expr global-var-expr local-var-expr
            bytes-literal int-literal boolean-literal case-clause case-expr
            function-arg-type function-arg-name)
  (#:patterns app-expr begin-expr boolean-literal bytes-literal exports
              function-definition function-arg global-var-expr if-expr imports int-literal lambda-expr let-expr
              local-var-expr module pattern-export type-export value-export varargs-export
              variant-constructor variant-accessor case-expr case-clause
              variable-pattern int-pattern bytes-pattern abstraction-pattern))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [definitions : (List FunctionDefinition)]
            [datatype-definitions : (List DatatypeDefinition)]))

  (define-type FunctionDefinition
    (function-definition
      [function-name : TopLevelName]
      [closure-name : TopLevelName]
      [type-vars : (List Bytes)]
      [args : (List FunctionArg)]
      [return-type : Type]
      [next-var : VarNumber]
      [body : Expression]))

  (define-type Expression
    (int-literal [v : Int])
    (bytes-literal [v : Bytes])
    (boolean-literal [v : Boolean])
    (local-var-expr [v : Var])
    (global-var-expr [v : TopLevelName])
    (if-expr [cond : Expression] [true : Expression] [false : Expression])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression])
    (app-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)])
    (let-expr [var : Var] [expr : Expression] [body : Expression])
    (lambda-expr [args : (List FunctionArg)] [type : (Maybe Type)] [body : Expression])
    (case-expr [expr : Expression] [clauses : (List CaseClause)]))

  (define-type CaseClause
    (case-clause [pattern : Pattern] [body : Expression])))
