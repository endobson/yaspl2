#:module (libraries languages expanded-patterns-language)
#:import {
  {(libraries languages expanded-varargs-language)
    {#:types
      DatatypeDefinition
      Exports
      FunctionArg
      Imports
      PatternExport
      StaticExport
      TypeExport
      ValueExport
    }
    {#:values
      function-arg-name
      function-arg-type
    }
    {#:patterns
      exports
      function-arg
      imports
      pattern-export
      type-export
      value-export
      varargs-export
      variant-accessor
      variant-constructor
    }
  }
  (list)
  (maybe)
  (module-name)
  (prim)
  (top-level-name)
  (types)
  (variant-info)
  (yaspl var)
}
(export
  (#:types DatatypeDefinition Exports Expression FunctionDefinition FunctionArg Imports Module
           PatternExport StaticExport TypeExport ValueExport
           VariantCaseClause BytesCaseClause IntCaseClause DefaultCaseClause)
  (#:values module-definitions module-imports module-name function-arg-type
            function-arg-name
            module function-definition lambda-expr let-expr app-expr begin-expr
            if-expr global-var-expr local-var-expr boolean-literal
            bytes-literal int-literal halt-expr join-point-expr join-expr
            bytes-case-clause bytes-case-expr
            int-case-clause int-case-expr
            variant-case-clause variant-case-expr
            default-case-clause)
  (#:patterns app-expr begin-expr boolean-literal bytes-literal exports
              function-definition function-arg global-var-expr if-expr imports int-literal lambda-expr let-expr
              local-var-expr module pattern-export type-export value-export varargs-export
              variant-constructor variant-accessor join-point-expr join-expr halt-expr
              variant-case-expr int-case-expr bytes-case-expr int-case-clause variant-case-clause
              bytes-case-clause default-case-clause))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [definitions : (List FunctionDefinition)]
            [datatype-definitions : (List DatatypeDefinition)]))

  (define-type FunctionDefinition
    (function-definition
      [function-name : TopLevelName]
      [closure-name : TopLevelName]
      [type-vars : (List Bytes)]
      [args : (List FunctionArg)]
      [return-type : Type]
      [next-var : VarNumber]
      [body : Expression]))

  (define-type Expression
    (int-literal [v : Int])
    (bytes-literal [v : Bytes])
    (boolean-literal [v : Boolean])
    (local-var-expr [v : Var])
    (global-var-expr [v : TopLevelName])
    (if-expr [cond : Expression] [true : Expression] [false : Expression])
    (begin-expr [exprs : (List Expression)] [last-expr : Expression])
    (app-expr [tail-position : Boolean] [op : Expression] [args : (List Expression)])
    (let-expr [var : Var] [expr : Expression] [body : Expression])
    (lambda-expr [args : (List FunctionArg)] [type : (Maybe Type)] [body : Expression])

    (variant-case-expr
      [expr : Expression]
      [clauses : (List VariantCaseClause)]
      [default : (Maybe DefaultCaseClause)])
    (int-case-expr
      [expr : Expression]
      [clause : IntCaseClause]
      [default : DefaultCaseClause])
    (bytes-case-expr
      [expr : Expression]
      [clause : BytesCaseClause]
      [default : DefaultCaseClause])
    (join-point-expr
      [join-var : Var]
      [ty : Type]
      [join-expr : Expression]
      [body : Expression])
    (join-expr [join-var : Var])
    (halt-expr))

  (define-type DefaultCaseClause
    (default-case-clause [expr : Expression]))
  (define-type VariantCaseClause
    (variant-case-clause
      [info : VariantDestructionInfo]
      [fields : (List Var)]
      [expr : Expression]))
  (define-type IntCaseClause
    (int-case-clause [val : Int] [expr : Expression]))
  (define-type BytesCaseClause
    (bytes-case-clause [val : Bytes] [expr : Expression])))
