#:module (yaspl var)
#:import {
  (bytes)
  (data ordering)
  (list)
  (numbers)
  (prim)
}
(export
  #:types (Var)
  #:values (var var=? var-cmp var->bytes)
  #:patterns (var))
(types
  (define-type Var
    (var [name : Bytes] [counter : Int])))

(define (var=? [v1 : Var] [v2 : Var]) : Boolean
  (match-define (var n1 c1) v1)
  (match-define (var n2 c2) v2)
  (and (bytes=? n1 n2) (= c1 c2)))

(define (var-cmp [v1 : Var] [v2 : Var]) : Ordering
  (match-define (var n1 c1) v1)
  (match-define (var n2 c2) v2)
  (case (bytes-cmp n1 n2)
    [(equal-to) (int-cmp c1 c2)]
    [res res]))

(define (var->bytes [v : Var]) : Bytes
  (match-define (var name counter) v)
  (bytes-append (varargs list name #"_" (integer->decimal-bytes counter))))
