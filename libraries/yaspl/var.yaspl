#:module (yaspl var)
#:import {
  (bytes)
  (data ordering)
  (list)
  (numbers)
  (prim)
}
(export
  (#:types Var VarNumber)
  (#:values var var=? var-cmp var->bytes
            next-var-number var-number-cmp initial-var-number var-number=? var-number->bytes
            var-number)
  (#:patterns var var-number))
(types
  (define-type Var
    (var [name : Bytes] [counter : VarNumber]))
  (define-type VarNumber
    (var-number [v : Int])))

(define (var=? [v1 : Var] [v2 : Var]) : Boolean
  (match-define (var n1 c1) v1)
  (match-define (var n2 c2) v2)
  (and (bytes=? n1 n2) (var-number=? c1 c2)))

(define (var-cmp [v1 : Var] [v2 : Var]) : Ordering
  (match-define (var n1 c1) v1)
  (match-define (var n2 c2) v2)
  (case (bytes-cmp n1 n2)
    [(equal-to) (var-number-cmp c1 c2)]
    [res res]))

(define (var->bytes [v : Var]) : Bytes
  (match-define (var name counter) v)
  (bytes-append (varargs list name #"_" (var-number->bytes counter))))

(define (initial-var-number) : VarNumber
  (var-number 0))

(define (next-var-number [v : VarNumber]) : VarNumber
  (match-define (var-number v) v)
  (var-number (+ 1 v)))

(define (var-number-cmp [v1 : VarNumber] [v2 : VarNumber]) : Ordering
  (int-cmp (var-number-v v1) (var-number-v v2)))

(define (var-number=? [v1 : VarNumber] [v2 : VarNumber]) : Boolean
  (= (var-number-v v1) (var-number-v v2)))

(define (var-number->bytes [v : VarNumber]) : Bytes
  (integer->decimal-bytes (var-number-v v)))
