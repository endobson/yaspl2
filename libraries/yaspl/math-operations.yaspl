#:module (yaspl math-operations)
#:import {
  (prim)
}
(export
  #:types (NumericBinOp ComparisonBinOp LogicalBinOp)
  #:values(numeric-bin-op->bytes comparison-bin-op->bytes logical-bin-op->bytes
           add-op sub-op mult-op quotient-op remainder-op bitwise-and-op bitwise-ior-op
           logical-shift-left-op logical-shift-right-op less-than-op less-than-or-equal-op
           equal-op greater-than-or-equal-op greater-than-op not-equal-op and-op ior-op)
  #:patterns (add-op sub-op mult-op quotient-op remainder-op bitwise-and-op bitwise-ior-op
              logical-shift-left-op logical-shift-right-op less-than-op less-than-or-equal-op
              equal-op greater-than-or-equal-op greater-than-op not-equal-op))
(types
  (define-type NumericBinOp
    (add-op)
    (sub-op)
    (mult-op)
    (quotient-op)
    (remainder-op)
    (bitwise-and-op)
    (bitwise-ior-op)
    (logical-shift-left-op)
    (logical-shift-right-op))
  (define-type ComparisonBinOp
    (less-than-op)
    (less-than-or-equal-op)
    (equal-op)
    (greater-than-or-equal-op)
    (greater-than-op)
    (not-equal-op))
  (define-type LogicalBinOp
    (and-op)
    (ior-op)))

(define (numeric-bin-op->bytes [op : NumericBinOp]) : Bytes
  (case op
    [(add-op) #"+"]
    [(sub-op) #"-"]
    [(mult-op) #"*"]
    [(quotient-op) #"/"]
    [(remainder-op) #"%"]
    [(bitwise-and-op) #"&"]
    [(bitwise-ior-op) #"|"]
    [(logical-shift-left-op) #"<<"]
    [(logical-shift-right-op) #">>>"]))

(define (comparison-bin-op->bytes [op : ComparisonBinOp]) : Bytes
  (case op
    [(less-than-op) #"<"]
    [(less-than-or-equal-op) #"<="]
    [(equal-op) #"="]
    [(not-equal-op) #"!="]
    [(greater-than-or-equal-op) #">="]
    [(greater-than-op) #">"]))

(define (logical-bin-op->bytes [op : LogicalBinOp]) : Bytes
  (case op
    [(and-op) #"&"]
    [(ior-op) #"|"]))
