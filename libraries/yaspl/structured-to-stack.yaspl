#:module (yaspl structured-to-stack)
#:import {
  (block-number)
  (bytes)
  (yaspl var)
  (data indexed-set)
  (data lifted-primitives)
  (dict)
  (list)
  (join-list)
  (maybe)
  (numbers)
  (prim)
  (structured-language)
  {(stack-language)
   {#:types
     [Instruction s:Instruction]
   }
   {#:values
     [int-literal s:int-literal]
     [drop-inst s:drop-inst]
   }
  }
}
(export)
(types
  (define-type Environment
    (environment
      [stack-depth : Int]
      [block-depths : (Dict Var LiftedInt)])))


(define (convert-expr [e : Expression] [env : Environment]) 
  : (JoinList s:Instruction) 
  (case e
    [(int-literal v) (single-jl (s:int-literal v))]
    [(begin-expr exprs last-expr)
     (append-jl
       (concat-map-jl/list
         (lambda ([e : Expression]) 
           (snoc-jl
             (convert-expr e env)
             (s:drop-inst)))
         exprs)
       (convert-expr last-expr env))]
    [(block-expr name body)
     (match-define (environment stack-depth block-depths) env)
     (match-define block-depths (dict-add block-depths name (lifted-int stack-depth)))
     (match-define env (environment stack-depth block-depths))
     (panic #"NYI")
     ]
    [_
     (panic #"NYI")]))
