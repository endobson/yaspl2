#:module (yaspl x86-64-assembly-printer)
#:import {
  (bytes)
  (join-list)
  (list)
  (numbers)
  (prim)
  (set)
  (yaspl x86-64-assembly)
}
(export
  (#:types AssemblyCommand AssemblerDirective)
  (#:values const-fragment->commands text-fragment->commands zero-data-fragment->commands
            assembly-commands->bytes))
(types
  (define-type AssemblyCommand
    (directive-cmd [directive : AssemblerDirective])
    (instruction-cmd [instruction : Instruction]))
  (define-type AssemblerDirective
    (const-data-section-directive)
    (zero-data-section-directive)
    (text-section-directive)
    (alignment-directive [alignment : Int] [fill : U8])
    (global-directive [label : Bytes])
    (label-directive [name : Bytes])
    (quad-directive/label [label : Bytes] [addend : Int])
    (quad-directive/integer [value : Int])
    (ascii-directive [value : Bytes])
    (zero-data-directive [size : Int])))

(define (register8->bytes [reg : Register8]) : Bytes
  (case reg
    [(al) #"%al"]
    [(ah) #"%ah"]
    [(bl) #"%bl"]
    [(bh) #"%bh"]
    [(cl) #"%cl"]
    [(ch) #"%ch"]
    [(dl) #"%dl"]
    [(dh) #"%dh"]
    [(dil) #"%dil"]
    [(sil) #"%sil"]
    [(bpl) #"%bpl"]
    [(spl) #"%spl"]
    [(r8b) #"%r8b"]
    [(r9b) #"%r9b"]
    [(r10b) #"%r10b"]
    [(r11b) #"%r11b"]
    [(r12b) #"%r12b"]
    [(r13b) #"%r13b"]
    [(r14b) #"%r14b"]
    [(r15b) #"%r15b"]))


(define (register16->bytes [reg : Register16]) : Bytes
  (case reg
    [(ax) #"%ax"]
    [(bx) #"%bx"]
    [(cx) #"%cx"]
    [(dx) #"%dx"]
    [(di) #"%di"]
    [(si) #"%si"]
    [(bp) #"%bp"]
    [(sp) #"%sp"]
    [(r8w) #"%r8w"]
    [(r9w) #"%r9w"]
    [(r10w) #"%r10w"]
    [(r11w) #"%r11w"]
    [(r12w) #"%r12w"]
    [(r13w) #"%r13w"]
    [(r14w) #"%r14w"]
    [(r15w) #"%r15w"]))

(define (register32->bytes [reg : Register32]) : Bytes
  (case reg
    [(eax) #"%eax"]
    [(ebx) #"%ebx"]
    [(ecx) #"%ecx"]
    [(edx) #"%edx"]
    [(edi) #"%edi"]
    [(esi) #"%esi"]
    [(ebp) #"%ebp"]
    [(esp) #"%esp"]
    [(r8d) #"%r8d"]
    [(r9d) #"%r9d"]
    [(r10d) #"%r10d"]
    [(r11d) #"%r11d"]
    [(r12d) #"%r12d"]
    [(r13d) #"%r13d"]
    [(r14d) #"%r14d"]
    [(r15d) #"%r15d"]))

(define (register64->bytes [reg : Register64]) : Bytes
  (case reg
    [(rax) #"%rax"]
    [(rbx) #"%rbx"]
    [(rcx) #"%rcx"]
    [(rdx) #"%rdx"]
    [(rdi) #"%rdi"]
    [(rsi) #"%rsi"]
    [(rbp) #"%rbp"]
    [(rsp) #"%rsp"]
    [(r8) #"%r8"]
    [(r9) #"%r9"]
    [(r10) #"%r10"]
    [(r11) #"%r11"]
    [(r12) #"%r12"]
    [(r13) #"%r13"]
    [(r14) #"%r14"]
    [(r15) #"%r15"]))

(define (r64mi->bytes [rmi : Reg64MemImm]) : Bytes
  (case rmi
    [(r64mi-reg r) (register64->bytes r)]
    [(r64mi-mem m) (mem->bytes m)]
    [(r64mi-imm-s32 v)
     (bytes-append (varargs list #"$" (integer->decimal-bytes (s32->s64 v))))]
    [(r64mi-imm-s8 v)
     (bytes-append (varargs list #"$" (integer->decimal-bytes (s8->s64 v))))]))

(define (r64m->bytes [rm : Reg64Mem]) : Bytes
  (case rm
    [(r64m-reg r) (register64->bytes r)]
    [(r64m-mem m) (mem->bytes m)]))

(define (r32m->bytes [rm : Reg32Mem]) : Bytes
  (case rm
    [(r32m-reg r) (register32->bytes r)]
    [(r32m-mem m) (mem->bytes m)]))

(define (r16m->bytes [rm : Reg16Mem]) : Bytes
  (case rm
    [(r16m-reg r) (register16->bytes r)]
    [(r16m-mem m) (mem->bytes m)]))

(define (r8m->bytes [rm : Reg8Mem]) : Bytes
  (case rm
    [(r8m-reg r) (register8->bytes r)]
    [(r8m-mem m) (mem->bytes m)]))

(define (r8mi->bytes [rm : Reg8MemImm]) : Bytes
  (case rm
    [(r8mi-reg r) (register8->bytes r)]
    [(r8mi-mem m) (mem->bytes m)]
    [(r8mi-imm-s8 v)
     (bytes-append (varargs list #"$" (integer->decimal-bytes (s8->s64 v))))]))


(define (mem->bytes [mem : MemoryArgument]) : Bytes
  (case mem
    [(mem-direct reg)
     (bytes-append (varargs list #"(" (register64->bytes reg) #")"))]
    [(mem-sib-direct reg)
     (bytes-append (varargs list #"(" (register64->bytes reg) #")"))]
    [(mem-displaced reg displacement)
     (match-define offset
       (case displacement
         [(displacement-s8 v) (s8->s64 v)]
         [(displacement-s32 v) (s32->s64 v)]))
     (bytes-append (varargs list (integer->decimal-bytes offset)
                            #"(" (register64->bytes reg) #")"))]
    [(mem-sib-displaced reg displacement)
     (match-define offset
       (case displacement
         [(displacement-s8 v) (s8->s64 v)]
         [(displacement-s32 v) (s32->s64 v)]))
     (bytes-append (varargs list (integer->decimal-bytes offset)
                            #"(" (register64->bytes reg) #")"))]
    [(mem-scaled reg scale index displacement)
     (match-define offset
       (case displacement
         [(displacement-s8 v) (s8->s64 v)]
         [(displacement-s32 v) (s32->s64 v)]))
     (bytes-append
       (varargs list
         (integer->decimal-bytes offset)
         #"("
         (register64->bytes reg)
         #", "
         (register64->bytes index)
         #", "
         (integer->decimal-bytes
           (case scale
             [(scale-1) 1]
             [(scale-2) 2]
             [(scale-4) 4]
             [(scale-8) 8]))
         #")"))]))



;; Generates a text version of the assembly commands.
(define (assembly-commands->bytes
          [cmds : (List AssemblyCommand)])
  : (JoinList Bytes)
  (case cmds
    [(empty) (empty-jl)]
    [(cons cmd cmds)
     (append-jl
       (assembly-command->bytes cmd)
       (cons-jl
         #"\n"
         (assembly-commands->bytes cmds)))]))

(define (assembly-command->bytes [cmd : AssemblyCommand]) : (JoinList Bytes)
  (case cmd
    [(directive-cmd directive) (assembler-directive->bytes directive)]
    [(instruction-cmd instruction) (instruction->assembly-bytes instruction)]))

(define (assembler-directive->bytes [dir : AssemblerDirective]) : (JoinList Bytes)
  (case dir
    [(text-section-directive)
     (single-jl #".section __TEXT, __text") ]
    [(const-data-section-directive)
     (single-jl #".section __TEXT, __const") ]
    [(zero-data-section-directive)
     (single-jl #".section __DATA, __common") ]
    [(alignment-directive alignment fill)
     (varargs join-list #".p2align " (integer->decimal-bytes alignment)
              #", 0x" (integer->hex-bytes (u8->s64 fill)))]
    [(global-directive label)
     (varargs join-list #".global \"" label #"\"")]
    [(label-directive name)
     (varargs join-list #"\"" name #"\"" #":")]
    [(quad-directive/label label addend)
     (varargs join-list #".quad \"" label #"\" + " (integer->decimal-bytes addend))]
    [(quad-directive/integer value)
     (varargs join-list #".quad " (integer->decimal-bytes value))]
    [(ascii-directive value)
     (varargs append-jl*
       (single-jl #".ascii \"")
       (escape-bytes value)
       (single-jl #"\""))]
    [(zero-data-directive size)
     (varargs join-list #".zero " (integer->decimal-bytes size))]))

(define (escape-bytes [src : Bytes]) : (JoinList Bytes)
  (concat-jl (bytes-map src (lambda ([v : U8])
                              (varargs join-list
                                #"\\"
                                (integer->triple-octal-bytes v))))))

(define (instruction->assembly-bytes [inst : Instruction]) : (JoinList Bytes)
  (case inst
    [(addq rmi1 rm2)
     (varargs join-list
        #"addq "
        (r64mi->bytes rmi1)
        #", "
        (r64m->bytes rm2))]
    [(andq rmi rm)
     (varargs join-list
        #"andq "
        (r64mi->bytes rmi)
        #", "
        (r64m->bytes rm))]
    [(call label)
     (varargs join-list #"call " label)]
    [(call/indirect rm)
     (varargs join-list #"callq *" (r64m->bytes rm))]
    [(cld)
     (single-jl #"cld")]
    [(cmpq rmi1 rm2)
     (varargs join-list
        #"cmpq "
        (r64mi->bytes rmi1)
        #", "
        (r64m->bytes rm2))]
    [(cmpb r8mi1 r8m2)
     (varargs join-list
        #"cmpb "
        (r8mi->bytes r8mi1)
        #", "
        (r8m->bytes r8m2))]
    [(decq reg)
     (varargs join-list #"decq " (register64->bytes reg))]
    [(idivq reg)
     (varargs join-list #"idivq " (register64->bytes reg))]
    [(imulq reg1 reg2)
     (varargs join-list
        #"imulq "
        (register64->bytes reg1)
        #", "
        (register64->bytes reg2))]
    [(imulq/imm/s8 imm rm reg)
     (varargs join-list
         #"imulq "
         #"$" (integer->decimal-bytes (s8->s64 imm))
         #", "
         (r64m->bytes rm)
         #", "
         (register64->bytes reg))]
    [(imulq/imm/s32 imm rm reg)
     (varargs join-list
         #"imulq "
         #"$" (integer->decimal-bytes (s32->s64 imm))
         #", "
         (r64m->bytes rm)
         #", "
         (register64->bytes reg))]
    [(inb)
     (single-jl #"inb")]
    [(incq reg)
     (varargs join-list #"incq " (register64->bytes reg))]
    [(ind)
     (single-jl #"ind")]
    [(inw)
     (single-jl #"inw")]
    [(jb label)
     (varargs join-list #"jb " label)]
    [(jbe label)
     (varargs join-list #"jbe " label)]
    [(je label)
     (varargs join-list #"je " label)]
    [(jl label)
     (varargs join-list #"jl " label)]
    [(jg label)
     (varargs join-list #"jg " label)]
    [(jle label)
     (varargs join-list #"jle " label)]
    [(jge label)
     (varargs join-list #"jge " label)]
    [(jmp label)
     (varargs join-list #"jmp " label)]
    ;; Don't use a suffix on indirect jumps as displacements aren't currently generated.
    [(jmp/indirect rm)
     (varargs join-list #"jmp *" (r64m->bytes rm))]
    [(jne label)
     (varargs join-list #"jne " label)]
    [(jnz label)
     (varargs join-list #"jnz " label)]
    [(lahf)
     (single-jl #"lahf")]
    [(leaq mem reg)
     (varargs join-list
        #"leaq "
        (mem->bytes mem)
        #", "
        (register64->bytes reg))]
    [(leaq/rip-rel label reg)
     (varargs join-list
        #"leaq "
        label
        #"(%rip),"
        (register64->bytes reg))]
    [(lidt mem)
     (varargs join-list
        #"lidt "
        (mem->bytes mem))]
    [(movb rmi mem)
     (varargs join-list
        #"movb "
        (r8mi->bytes rmi)
        #", "
        (mem->bytes mem))]
    [(movw r mem)
     (varargs join-list
        #"movw "
        (register16->bytes r)
        #", "
        (mem->bytes mem))]
    [(movd r mem)
     (varargs join-list
        #"movw "
        (r32m->bytes r)
        #", "
        (r32m->bytes mem))]
    [(movq rmi1 rm2)
     (varargs join-list
        #"movq "
        (r64mi->bytes rmi1)
        #", "
        (r64m->bytes rm2))]
    [(movq/imm64 imm reg)
     (varargs join-list
        #"movq "
        #"$" (integer->decimal-bytes imm)
        #", "
        (register64->bytes reg))]
    [(movzbq r8m reg)
     (varargs join-list
        #"movzbq "
        (r8m->bytes r8m)
        #", "
        (register64->bytes reg))]
    [(movzwq r16m reg)
     (varargs join-list
        #"movzwq "
        (r16m->bytes r16m)
        #", "
        (register64->bytes reg))]
    [(negq reg)
     (varargs join-list #"negq " (register64->bytes reg))]
    [(nop)
     (single-jl #"nop")]
    [(notq reg)
     (varargs join-list #"notq " (register64->bytes reg))]
    [(orq reg1 reg2)
     (varargs join-list
        #"orq "
        (register64->bytes reg1)
        #", "
        (register64->bytes reg2))]
    [(outb)
     (single-jl #"outb")]
    [(outd)
     (single-jl #"outd")]
    [(outw)
     (single-jl #"outw")]
    [(popq rm)
     (varargs join-list #"popq " (r64m->bytes rm))]
    [(pushq rmi)
     (varargs join-list #"pushq " (r64mi->bytes rmi))]
    [(rep-stosb)
     (single-jl #"rep stosb")]
    [(rep-stosq)
     (single-jl #"rep stosq")]
    [(rep-movsb)
     (single-jl #"rep movsb")]
    [(rep-movsq)
     (single-jl #"rep movsq")]
    [(repe-cmpsb)
     (single-jl #"repe cmpsb")]
    [(repne-scasb)
     (single-jl #"repne scasb")]
    [(repne-scasq)
     (single-jl #"repne scasq")]
    [(ret)
     (single-jl #"ret")]
    [(sete reg)
     (varargs join-list #"sete " (register8->bytes reg))]
    [(setg reg)
     (varargs join-list #"setg " (register8->bytes reg))]
    [(setge reg)
     (varargs join-list #"setge " (register8->bytes reg))]
    [(setl reg)
     (varargs join-list #"setl " (register8->bytes reg))]
    [(setle reg)
     (varargs join-list #"setle " (register8->bytes reg))]
    [(setne reg)
     (varargs join-list #"setne " (register8->bytes reg))]
    [(shlq reg)
     (varargs join-list #"shlq %cl, " (register64->bytes reg))]
    [(shlq/imm v reg)
     (varargs join-list #"shlq $" (integer->decimal-bytes (s8->s64 v)) #", " (register64->bytes reg))]
    [(shrq reg)
     (varargs join-list #"shrq %cl, " (register64->bytes reg))]
    [(shrq/imm v reg)
     (varargs join-list #"shrq $" (integer->decimal-bytes (s8->s64 v)) #", " (register64->bytes reg))]
    [(std)
     (single-jl #"std")]
    [(subq rmi reg)
     (varargs join-list
        #"subq "
        (r64mi->bytes rmi)
        #", "
        (register64->bytes reg))]
    [(syscall)
     (single-jl #"syscall")]
    [(test reg1 reg2)
     (varargs join-list #"test " (register64->bytes reg1) #", " (register64->bytes reg2))]
    [(ud2)
     (single-jl #"ud2")]
    [(xaddq reg1 reg2)
     (varargs join-list
        #"xaddq "
        (register64->bytes reg1)
        #", "
        (register64->bytes reg2))]
    [(xorq rmi reg)
     (varargs join-list
        #"xorq "
        (r64mi->bytes rmi)
        #", "
        (register64->bytes reg))]))


(define (text-fragment->commands [frag : TextFragment]) : (JoinList AssemblyCommand)
  (case frag
    [(function-fragment name parts)
     (cons-jl
       (directive-cmd (text-section-directive))
       (cons-jl
         (directive-cmd (alignment-directive 4 (u8 #xCC)))
         (cons-jl
           (directive-cmd (global-directive name))
           (parts->commands name parts))))]))

(define (const-fragment->commands [frag : ConstFragment]) : (JoinList AssemblyCommand)
  (match-define (const-fragment name align parts) frag)
  (append-jl
    (varargs join-list
      (directive-cmd (const-data-section-directive))
      (directive-cmd (alignment-directive align (u8 #x00)))
      (directive-cmd (global-directive name))
      (directive-cmd (label-directive name)))
    (list->jl
      (map
        (lambda ([frag : ConstFragmentPart]) : AssemblyCommand
          (case frag
            [(address-fragment value addend)
             (directive-cmd (quad-directive/label value addend))]
            [(bytes-fragment value)
             (directive-cmd (ascii-directive value))]))
        parts))))

(define (zero-data-fragment->commands [frag : ZeroDataFragment]) : (JoinList AssemblyCommand)
  (match-define (zero-data-fragment name align size) frag)
  (varargs join-list
    (directive-cmd (zero-data-section-directive))
    (directive-cmd (alignment-directive align (u8 #x00)))
    (directive-cmd (global-directive name))
    (directive-cmd (label-directive name))
    (directive-cmd (zero-data-directive size))))


(define (parts->commands [function-name : Bytes]
                         [parts : (JoinList TextFragmentPart)])
  : (JoinList AssemblyCommand)
  (match-define referenced-labels (set-add (compute-referenced-labels parts) function-name))
  (concat-map-jl
    (lambda ([p : TextFragmentPart]) : (JoinList AssemblyCommand)
      (case p
        [(label-fragment name)
         (if (set-member? referenced-labels name)
             (single-jl (directive-cmd (label-directive name)))
             (empty-jl))]
        [(instruction-fragment inst)
         (single-jl (instruction-cmd inst))]))
    parts))
