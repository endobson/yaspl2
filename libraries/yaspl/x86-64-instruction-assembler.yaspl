#:module (yaspl x86-64-instruction-assembler)
#:import {
  (bytes)
  (join-list)
  (list)
  (maybe)
  (prim)
  (yaspl x86-64-assembly)
}
(export
  #:types (MCCommand)
  #:values (instruction->mc-commands)
  #:patterns (mc-bytes mc-branch-relocation mc-signed-relocation))
(types
  (define-type MCCommand
    (mc-bytes [bytes : Bytes])
    (mc-branch-relocation [symbol : Bytes])
    (mc-signed-relocation [symbol : Bytes])))

(define (mc-bytes* [bytes : Bytes]) : (JoinList MCCommand)
  (single-jl (mc-bytes bytes)))
(define (mc-branch* [op-code : Bytes] [symbol : Bytes]) : (JoinList MCCommand)
  (varargs join-list
    (mc-bytes op-code)
    (mc-branch-relocation symbol)
    (mc-bytes (varargs bytes #x00 #x00 #x00 #x00))))

(define (instruction->mc-commands [inst : Instruction]) : (JoinList MCCommand)
  (case inst
    [(addq (rmi-register reg1) reg2)
     (mc-bytes* (single-byte-op/RM #x01 #t reg1 reg2))]
    [(addq (rmi-imm (imm-s32 imm)) reg)
     (mc-bytes* (single-byte-op/IM #x81 0 #t imm reg))]
    [(addq (rmi-direct-memory reg1) reg2)
     (mc-bytes* (single-byte-op/MR/mem #x03 #t reg1 reg2))]
    [(addq (rmi-displaced-memory reg1 offset) reg2)
     (panic #"addq of displaced-memory not supported")]
    [(addq (rmi-scaled-memory reg1 scale reg2 offset) reg3)
     (mc-bytes* (single-byte-op/MR/scaled-mem #x03 #t reg1 scale reg2 offset reg3))]
    [(andq (rmi-register reg1) reg2)
     (mc-bytes* (single-byte-op/RM #x21 #t reg1 reg2))]
    [(andq (rmi-imm (imm-s32 imm)) reg)
     (mc-bytes* (single-byte-op/IM #x81 4 #t imm reg))]
    [(andq (rmi-direct-memory _) _)
     (panic #"andq of direct memory not yet supported")]
    [(andq (rmi-displaced-memory _ _) _)
     (panic #"andq of displaced memory not yet supported")]
    [(andq (rmi-scaled-memory _ _ _ _) _)
     (panic #"andq of scaled memory not yet supported")]
    [(call label)
     (mc-branch* (varargs bytes #xE8) label)]
    [(call/indirect (rmi-register reg))
     (mc-bytes* (single-byte-op/M #xFF 2 #f reg))]
    [(call/indirect (rmi-direct-memory reg))
     (mc-bytes* (single-byte-op/M/mem #xFF 2 #f reg))]
    [(call/indirect _)
     (panic #"call with non register/direct memory not supported")]
    [(cld) (mc-bytes* (varargs bytes #xFC))]
    [(cmpq (rmi-imm (imm-s32 imm)) (rmi-register reg))
     (mc-bytes* (single-byte-op/IM #x81 7 #t imm reg))]
    [(cmpq (rmi-imm (imm-s32 imm)) (rmi-direct-memory reg))
     (mc-bytes* (single-byte-op/IM/mem #x81 7 #t imm reg))]
    [(cmpq (rmi-imm (imm-s32 imm)) (rmi-displaced-memory reg offset))
     (mc-bytes* (single-byte-op/IM/displaced-mem #x81 7 #t imm reg offset))]
    [(cmpq (rmi-imm (imm-s32 imm)) (rmi-scaled-memory reg1 scale reg2 offset))
     (mc-bytes* (single-byte-op/IM/scaled-mem #x81 7 #t imm reg1 scale reg2 offset))]
    [(cmpq (rmi-register reg1) (rmi-register reg2))
     (mc-bytes* (single-byte-op/MR #x3B #t reg1 reg2))]
    [(cmpq _ (rmi-imm imm))
     (panic #"cmpq with immediate second argument is not allowed")]
    [(cmpq _ _)
     (panic #"cmpq variant not implemented")]
    [(decq reg)
     (mc-bytes* (single-byte-op/M #xFF 1 #t reg))]
    [(idivq reg)
     (mc-bytes* (single-byte-op/M #xF7 7 #t reg))]
    [(imulq reg1 reg2)
     (mc-bytes* (double-byte-op/MR #xAF #t reg1 reg2))]
    [(imulq/imm imm (rmi-register reg1) reg2)
     (mc-bytes* (single-byte-op/IMR #x69 #t imm reg1 reg2))]
    [(imulq/imm imm _ reg2)
     (panic #"imulq/imm with non register first argument not implemnted")]
    [(incq reg)
     (mc-bytes* (single-byte-op/M #xFF 0 #t reg))]
    [(jb label)
     (mc-branch* (varargs bytes #x0F #x82) label)]
    [(je label)
     (mc-branch* (varargs bytes #x0F #x84) label)]
    [(jl label)
     (mc-branch* (varargs bytes #x0F #x8C) label)]
    [(jg label)
     (mc-branch* (varargs bytes #x0F #x8F) label)]
    [(jle label)
     (mc-branch* (varargs bytes #x0F #x8E) label)]
    [(jge label)
     (mc-branch* (varargs bytes #x0F #x8D) label)]
    [(jmp label)
     (mc-branch* (varargs bytes #xE9) label)]
    [(jmp/indirect (rmi-register reg))
     (mc-bytes* (single-byte-op/M #xFF 4 #f reg))]
    [(jmp/indirect (rmi-direct-memory reg))
     (mc-bytes* (single-byte-op/M/mem #xFF 4 #f reg))]
    [(jmp/indirect (rmi-displaced-memory reg offset))
     (panic #"Indirect jump to displaced memory not yet implemented")]
    [(jmp/indirect (rmi-scaled-memory reg1 scale reg2 offset))
     (panic #"Indirect jump to scaled memory not yet implemented")]
    [(jmp/indirect (rmi-imm _))
     (panic #"Indirect jump to immediate not supported")]
    [(jne label)
     (mc-branch* (varargs bytes #x0F #x85) label)]
    [(jnz label)
     (mc-branch* (varargs bytes #x0F #x85) label)]
    [(lahf) (mc-bytes* (varargs bytes #x9F))]
    [(leaq (rmi-direct-memory _) _)
     (panic #"leaq of direct memory not yet supported")]
    [(leaq (rmi-displaced-memory reg1 offset) reg2)
     (mc-bytes* (single-byte-op/MR/displaced-mem #x8D #t reg1 offset reg2))]
    [(leaq (rmi-scaled-memory reg1 scale reg2 offset) reg3)
     (mc-bytes* (single-byte-op/MR/scaled-mem #x8D #t reg1 scale reg2 offset reg3))]
    [(leaq (rmi-register _) _)
     (panic #"leaq of register is non sensical")]
    [(leaq (rmi-imm _) _)
     (panic #"leaq of immediate is non sensical")]
    [(movb (rmi-register reg1) (rmi-scaled-memory reg2 scale reg3 offset))
     (mc-bytes* (single-byte-op/RM/scaled-mem #x88 #f reg1 reg2 scale reg3 offset))]
    [(movb _ (rmi-imm _))
     (panic #"movb to immediate is nonsensical")]
    [(movb _ _)
     (panic #"movb variant is not yet supported")]
    [(movq (rmi-imm (imm-s32 imm)) (rmi-register reg))
     (mc-bytes* (single-byte-op/IM #xC7 0 #t imm reg))]
    [(movq (rmi-imm (imm-s32 imm)) (rmi-direct-memory reg))
     (mc-bytes* (single-byte-op/IM/mem #xC7 0 #t imm reg))]
    [(movq (rmi-imm (imm-s32 imm)) (rmi-displaced-memory reg offset))
     (mc-bytes* (single-byte-op/IM/displaced-mem #xC7 0 #t imm reg offset))]
    [(movq (rmi-register reg1) (rmi-register reg2))
     (mc-bytes* (single-byte-op/MR #x8B #t reg1 reg2))]
    [(movq (rmi-scaled-memory reg1 scale reg2 offset) (rmi-register reg3))
     (mc-bytes* (single-byte-op/MR/scaled-mem #x8B #t reg1 scale reg2 offset reg3))]
    [(movq (rmi-register reg1) (rmi-direct-memory reg2))
     (mc-bytes* (single-byte-op/RM/mem #x89 #t reg1 reg2))]
    [(movq (rmi-register reg1) (rmi-displaced-memory reg2 offset))
     (mc-bytes* (single-byte-op/RM/displaced-mem #x89 #t reg1 reg2 offset))]
    [(movq (rmi-register reg1) (rmi-scaled-memory reg2 scale reg3 offset))
     (mc-bytes* (single-byte-op/RM/scaled-mem #x89 #t reg1 reg2 scale reg3 offset))]
    [(movq (rmi-direct-memory reg1) (rmi-register reg2))
     (mc-bytes* (single-byte-op/MR/mem #x8B #t reg1 reg2))]
    [(movq (rmi-displaced-memory reg1 offset) (rmi-register reg2))
     (mc-bytes* (single-byte-op/MR/displaced-mem #x8B #t reg1 offset reg2))]
    [(movq _ (rmi-imm _))
     (panic #"movq to immediate is nonsensical")]
    [(movq _ _)
     (panic #"movq variant is not yet supported")]
    [(movq/imm imm reg)
     (mc-bytes* (single-byte-op-s64/IO #xB8 #t imm reg))]
    [(movzbq reg1 reg2)
     (mc-bytes* (double-byte-op/MR #xB6 #t reg1 reg2))]
    [(movzbq/mem (rmi-register reg1) _)
     (panic #"movzbq of non 8 bit register is not allowed")]
    [(movzbq/mem (rmi-imm _) _)
     (panic #"movzbq of immediate is not allowed")]
    [(movzbq/mem (rmi-direct-memory _) _)
     (panic #"movzbq of direct memory not yet supported")]
    [(movzbq/mem (rmi-displaced-memory _ _) _)
     (panic #"movzbq of displaced memory not yet supported")]
    [(movzbq/mem (rmi-scaled-memory reg1 scale reg2 offset) reg3)
     (mc-bytes* (double-byte-op/MR/scaled-mem #xB6 #t reg1 scale reg2 offset reg3))]
    [(nop) (mc-bytes* (varargs bytes #x90))]
    [(notq reg)
     (mc-bytes* (single-byte-op/M #xF7 2 #t reg))]
    [(orq reg1 reg2)
     (mc-bytes* (single-byte-op/MR #x0B #t reg1 reg2))]
    ;; pop defaults to 64 bits so we don't need REX.W bit to indicate that
    [(popq (rmi-register reg))
     (mc-bytes* (single-byte-op/O #x58 reg))]
    [(popq (rmi-direct-memory reg))
     (mc-bytes* (single-byte-op/M/mem #x8F 0 #f reg))]
    [(popq (rmi-displaced-memory reg offset))
     (mc-bytes* (single-byte-op/M/displaced-mem #x8F 0 #f reg offset))]
    [(popq (rmi-imm _))
     (panic #"popq of immediate is nonsensical")]
    [(popq (rmi-scaled-memory _ _ _ _))
     (panic #"popq of scaled memory not yet supported")]
    ;; push defaults to 64 bits so we don't need REX.W bit to indicate that
    [(pushq (rmi-register reg))
     (mc-bytes* (single-byte-op/O #x50 reg))]
    [(pushq (rmi-direct-memory reg))
     (mc-bytes* (single-byte-op/M/mem #xFF 6 #f reg))]
    [(pushq (rmi-displaced-memory reg offset))
     (mc-bytes* (single-byte-op/M/displaced-mem #xFF 6 #f reg offset))]
    [(pushq (rmi-scaled-memory reg1 scale reg2 offset))
     (mc-bytes* (single-byte-op/M/scaled-mem #xFF 6 #f reg1 scale reg2 offset))]
    [(pushq (rmi-imm (imm-s32 imm)))
     (mc-bytes* (single-byte-op/I #x68 #f imm))]
    [(rep-movsb) (mc-bytes* (varargs bytes #xF3 #x48 #xA4))]
    [(rep-movsq) (mc-bytes* (varargs bytes #xF3 #x48 #xA5))]
    [(rep-stosb) (mc-bytes* (varargs bytes #xF3 #x48 #xAA))]
    [(rep-stosq) (mc-bytes* (varargs bytes #xF3 #x48 #xAB))]
    [(repe-cmpsb) (mc-bytes* (varargs bytes #xF3 #x48 #xA6))]
    [(repne-scasb) (mc-bytes* (varargs bytes #xF2 #x48 #xAE))]
    [(repne-scasq) (mc-bytes* (varargs bytes #xF2 #x48 #xAF))]
    [(ret) (mc-bytes* (varargs bytes #xC3))]
    [(sete reg)
     (mc-bytes* (double-byte-op/M #x94 0 #f reg))]
    [(setg reg)
     (mc-bytes* (double-byte-op/M #x9F 0 #f reg))]
    [(setge reg)
     (mc-bytes* (double-byte-op/M #x9D 0 #f reg))]
    [(setl reg)
     (mc-bytes* (double-byte-op/M #x9C 0 #f reg))]
    [(setle reg)
     (mc-bytes* (double-byte-op/M #x9E 0 #f reg))]
    [(setne reg)
     (mc-bytes* (double-byte-op/M #x95 0 #f reg))]
    [(shlq reg)
     (mc-bytes* (single-byte-op/M #xD3 4 #t reg))]
    [(shlq/imm v reg)
     (mc-bytes* (single-byte-op/IM/u8 #xC1 4 #t v reg))]
    [(shrq reg)
     (mc-bytes* (single-byte-op/M #xD3 5 #t reg))]
    [(shrq/imm v reg)
     (mc-bytes* (single-byte-op/IM/u8 #xC1 5 #t v reg))]
    [(std) (mc-bytes* (varargs bytes #xFD))]
    [(subq (rmi-register reg1) reg2)
     (mc-bytes* (single-byte-op/RM #x29 #t reg1 reg2))]
    [(subq (rmi-imm (imm-s32 imm)) reg)
     (mc-bytes* (single-byte-op/IM #x81 5 #t imm reg))]
    [(subq (rmi-direct-memory reg1) reg2)
     (mc-bytes* (single-byte-op/MR/mem #x2B #t reg1 reg2))]
    [(subq (rmi-displaced-memory _ _) _)
     (panic #"subq of displaced memory not yet supported")]
    [(subq (rmi-scaled-memory _ _ _ _) _)
     (panic #"subq of scaled memory not yet supported")]
    [(syscall) (mc-bytes* (varargs bytes #x0F #x05))]
    [(test (rmi-register reg1) (rmi-register reg2))
     (mc-bytes* (single-byte-op/RM #x85 #t reg1 reg2))]
    [(test _ _)
     (panic #"test of non registers not yet supported")]
    [(ud2) (mc-bytes* (varargs bytes #x0F #x0B))]
    [(leaq/rip-rel label reg)
     (let ([reg-val (register->byte reg)])
       (varargs join-list
         (mc-bytes (add-maybe-byte
                     (rex-byte #t (>= reg-val 8) #f #f)
                     (varargs bytes
                              #x8D
                              (mod-rm-byte #x00 reg-val #x05))))
         (mc-signed-relocation label)
         (mc-bytes (varargs bytes 0 0 0 0))))]))

;; mod is truncated to two bits, and reg and rm are truncated to three.
(define (mod-rm-byte [mod : Int] [reg : Int] [rm : Int]) : Int
  (bitwise-ior (logical-shift-left (bitwise-and mod #x03) 6)
     (bitwise-ior (logical-shift-left (bitwise-and reg #x07) 3)
                  (bitwise-and rm #x07))))

;; TODO refine types of opcodes to be the right number of bits.
(define (single-byte-op/O [opcode : Int] [reg : Register]) : Bytes
  (let ([reg-val (register->byte reg)])
    (add-maybe-byte
      (rex-byte #f #f #f (>= reg-val 8))
      (varargs bytes
        (bitwise-ior opcode (bitwise-and reg-val #x07))))))

(define (single-byte-op/M [opcode : Int] [op-ext : Int] [rexW : Boolean] [reg : Register]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (varargs bytes
        opcode
        (mod-rm-byte #x03 op-ext rm)))))

(define (single-byte-op/I [opcode : Int] [rexW : Boolean] [imm : S32]) : Bytes
  (add-maybe-byte
    (rex-byte rexW #f #f #f)
    (let ([v (varargs bytes opcode 0 0 0 0)])
      (begin
        (bytes-set!/s32-le v 1 imm)
        v))))

 (define (single-byte-op-s64/IO [opcode : Int] [rexW : Boolean] [imm : EightBytesLe] [reg : Register]) : Bytes
   (let ([reg-val (register->byte reg)])
     (add-maybe-byte
       (rex-byte rexW #f #f (>= reg-val 8))
       (let ([v (varargs bytes
                  (bitwise-ior opcode (bitwise-and reg-val #x07))
                  0 0 0 0 0 0 0 0)])
         (begin
           (bytes-set!/eight-bytes-le v 1 imm)
           v)))))

(define (single-byte-op/M/mem [opcode : Int] [op-ext : Int] [rexW : Boolean] [reg : Register]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (varargs bytes
        opcode
        (mod-rm-byte #x00 op-ext rm)))))

;; Doesn't support rsp or r12. This is because the instruction set doesn't support them.
(define (single-byte-op/M/displaced-mem
          [opcode : Int] [op-ext : Int] [rexW : Boolean] [reg : Register] [displacement : S32]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (let ([v (varargs bytes
                 opcode
                 (mod-rm-byte #x02 op-ext rm)
                 0 0 0 0)])
        (begin
          (bytes-set!/s32-le v 2 displacement)
          v)))))

(define (single-byte-op/M/scaled-mem
          [opcode : Int] [op-ext : Int] [rexW : Boolean]
          [reg1 : Register] [scale : Scale] [reg2 : Register] [displacement : S32]) : Bytes
  (let ([base (register->byte reg1)])
    (let ([index (register->byte reg2)])
      (add-maybe-byte
        (rex-byte rexW #f (>= index 8) (>= base 8))
        (let ([v (varargs bytes
                   opcode
                   (mod-rm-byte #x02 op-ext #x04)
                   (sib-byte scale reg2 reg1)
                   0 0 0 0)])
          (begin
            (bytes-set!/s32-le v 3 displacement)
            v))))))


(define (single-byte-op/IM [opcode : Int] [op-ext : Int] [rexW : Boolean]
                           [val : S32] [reg : Register]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (let ([v (varargs bytes
                 opcode
                 (mod-rm-byte #x03 op-ext rm)
                 0 0 0 0)])
        (begin
          (bytes-set!/s32-le v 2 val)
          v)))))

(define (single-byte-op/IM/u8 [opcode : Int] [op-ext : Int] [rexW : Boolean]
                              [val : U8] [reg : Register]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (varargs bytes
               opcode
               (mod-rm-byte #x03 op-ext rm)
               (u8->s64 val)))))

(define (single-byte-op/IM/mem [opcode : Int] [op-ext : Int] [rexW : Boolean]
                               [val : S32] [reg : Register]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (let ([v (varargs bytes
                 opcode
                 (mod-rm-byte #x00 op-ext rm)
                 0 0 0 0)])
        (begin
          (bytes-set!/s32-le v 2 val)
          v)))))

;; Doesn't support rsp or r12. This is because the instruction set doesn't support them.
(define (single-byte-op/IM/displaced-mem
          [opcode : Int] [op-ext : Int] [rexW : Boolean] [val : S32]
          [reg : Register] [displacement : S32]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (let ([v (varargs bytes
                 opcode
                 (mod-rm-byte #x02 op-ext rm)
                 0 0 0 0 0 0 0 0)])
        (begin
          (bytes-set!/s32-le v 2 displacement)
          (bytes-set!/s32-le v 6 val)
          v)))))

(define (single-byte-op/IM/scaled-mem
          [opcode : Int] [op-ext : Int] [rexW : Boolean] [val : S32]
          [reg1 : Register] [scale : Scale] [reg2 : Register] [displacement : S32]) : Bytes
  (let ([base (register->byte reg1)])
    (let ([index (register->byte reg2)])
      (add-maybe-byte
        (rex-byte rexW #f (>= index 8) (>= base 8))
        (let ([v (varargs bytes
                   opcode
                   (mod-rm-byte #x02 op-ext #x04)
                   (sib-byte scale reg2 reg1)
                   0 0 0 0 0 0 0 0)])
          (begin
            (bytes-set!/s32-le v 3 displacement)
            (bytes-set!/s32-le v 7 val)
            v))))))


(define (single-byte-op/RM [opcode : Int] [rexW : Boolean] [reg1 : Register] [reg2 : Register]) : Bytes
  (let ([reg (register->byte reg1)])
    (let ([rm (register->byte reg2)])
      (add-maybe-byte
        (rex-byte rexW (>= reg 8) #f (>= rm 8))
        (varargs bytes
          opcode
          (mod-rm-byte #x03 reg rm))))))
(define (single-byte-op/MR [opcode : Int] [rexW : Boolean] [reg1 : Register] [reg2 : Register]) : Bytes
  (single-byte-op/RM opcode rexW reg2 reg1))

;; Doesn't support rsp, rbp, r12 or r13. This is because the instruction set doesn't support them.
(define (single-byte-op/RM/mem [opcode : Int] [rexW : Boolean] [reg1 : Register] [reg2 : Register]) : Bytes
  (let ([reg (register->byte reg1)])
    (let ([rm (register->byte reg2)])
      (add-maybe-byte
        (rex-byte rexW (>= reg 8) #f (>= rm 8))
        (varargs bytes
          opcode
          (mod-rm-byte #x00 reg rm))))))
(define (single-byte-op/MR/mem [opcode : Int] [rexW : Boolean] [reg1 : Register] [reg2 : Register]) : Bytes
  (single-byte-op/RM/mem opcode rexW reg2 reg1))

;; Doesn't support rsp or r12. This is because the instruction set doesn't support them.
(define (single-byte-op/RM/displaced-mem
          [opcode : Int] [rexW : Boolean]
          [reg1 : Register]
          [reg2 : Register] [displacement : S32]) : Bytes
  (let ([reg (register->byte reg1)])
    (let ([rm (register->byte reg2)])
      (add-maybe-byte
        (rex-byte rexW (>= reg 8) #f (>= rm 8))
        (let ([v (varargs bytes
                   opcode
                   (mod-rm-byte #x02 reg rm)
                   0 0 0 0)])
          (begin
            (bytes-set!/s32-le v 2 displacement)
            v))))))
(define (single-byte-op/MR/displaced-mem
          [opcode : Int] [rexW : Boolean]
          [reg1 : Register] [displacement : S32]
          [reg2 : Register]) : Bytes
  (single-byte-op/RM/displaced-mem opcode rexW reg2 reg1 displacement))

(define (single-byte-op/RM/scaled-mem
          [opcode : Int] [rexW : Boolean]
          [reg1 : Register]
          [reg2 : Register] [scale : Scale] [reg3 : Register] [displacement : S32]) : Bytes
  (let ([reg (register->byte reg1)])
    (let ([base (register->byte reg2)])
      (let ([index (register->byte reg3)])
        (add-maybe-byte
          (rex-byte rexW (>= reg 8) (>= index 8) (>= base 8))
          (let ([v (varargs bytes
                     opcode
                     (mod-rm-byte #x02 reg #x04)
                     (sib-byte scale reg3 reg2)
                     0 0 0 0)])
            (begin
              (bytes-set!/s32-le v 3 displacement)
              v)))))))
(define (single-byte-op/MR/scaled-mem
          [opcode : Int] [rexW : Boolean]
          [reg1 : Register] [scale : Scale] [reg2 : Register] [displacement : S32]
          [reg3 : Register]) : Bytes
  (single-byte-op/RM/scaled-mem opcode rexW reg3 reg1 scale reg2 displacement))


(define (single-byte-op/IMR [opcode : Int] [rexW : Boolean] [imm : S32]
                            [reg1 : Register] [reg2 : Register]) : Bytes
  (let ([reg (register->byte reg2)])
    (let ([rm (register->byte reg1)])
      (add-maybe-byte
        (rex-byte rexW (>= reg 8) #f (>= rm 8))
        (let ([v (varargs bytes
                   opcode
                   (mod-rm-byte #x03 reg rm)
                   0 0 0 0)])
          (begin
            (bytes-set!/s32-le v 2 imm)
            v))))))

(define (double-byte-op/MR [opcode : Int] [rexW : Boolean] [reg1 : Register] [reg2 : Register]) : Bytes
  (let ([rm (register->byte reg1)])
    (let ([reg (register->byte reg2)])
      (add-maybe-byte
        (rex-byte rexW (>= reg 8) #f (>= rm 8))
        (varargs bytes
          #x0F
          opcode
          (mod-rm-byte #x03 reg rm))))))

(define (double-byte-op/MR/scaled-mem
          [opcode : Int] [rexW : Boolean]
          [reg1 : Register] [scale : Scale] [reg2 : Register] [displacement : S32]
          [reg3 : Register]) : Bytes
  (let ([base (register->byte reg1)])
    (let ([index (register->byte reg2)])
      (let ([reg (register->byte reg3)])
        (add-maybe-byte
          (rex-byte rexW (>= reg 8) (>= index 8) (>= base 8))
          (let ([v (varargs bytes
                     #x0F
                     opcode
                     (mod-rm-byte #x02 reg #x04)
                     (sib-byte scale reg2 reg1)
                     0 0 0 0)])
            (begin
              (bytes-set!/s32-le v 4 displacement)
              v)))))))


(define (double-byte-op/M [opcode : Int] [op-ext : Int] [rexW : Boolean] [reg : Register]) : Bytes
  (let ([rm (register->byte reg)])
    (add-maybe-byte
      (rex-byte rexW #f #f (>= rm 8))
      (varargs bytes
        #x0F
        opcode
        (mod-rm-byte #x03 op-ext rm)))))

;; TODO make this take a U8
(define (add-maybe-byte [mv : (Maybe Int)] [bs : Bytes]) : Bytes
  (case mv
    [(nothing) bs]
    [(just v) (bytes-append (cons (varargs bytes v) (cons bs (empty))))]))


;; TODO make this return a U8
(define (rex-byte [w : Boolean] [r : Boolean] [x : Boolean] [b : Boolean])
  : (Maybe Int)
  (let ([ind (lambda ([v : Boolean]) (if v 1 0))])
    (let ([val (bitwise-ior #x40
                 (bitwise-ior (logical-shift-left (ind w) 3)
                   (bitwise-ior (logical-shift-left (ind r) 2)
                     (bitwise-ior (logical-shift-left (ind x) 1)
                                  (ind b)))))])
      (if (= val #x40)
          (nothing)
          (just val)))))

;; TODO make this return a U8
(define (sib-byte [scale : Scale] [index : Register] [base : Register]) : Int
  (bitwise-ior
    (case scale
      [(scale-1) #x00]
      [(scale-2) #x40]
      [(scale-4) #x80]
      [(scale-8) #xc0])
    (bitwise-ior
      (logical-shift-left (bitwise-and (register->byte index) #x07) 3)
      (bitwise-and (register->byte base) #x07))))

;; TODO make this return a U8
(define (register->byte [reg : Register]) : Int
  (case reg
    ;; 8 Bit registers
    [(al) 0]
    [(ah) 4]
    [(bl) 3]
    [(bh) 7]
    [(cl) 1]
    [(ch) 5]
    [(dl) 2]
    [(dh) 6]
    [(dil) 7]
    [(sil) 6]
    [(bpl) 5]
    [(spl) 4]
    [(r8b) 8]
    [(r9b) 9]
    [(r10b) 10]
    [(r11b) 11]
    [(r12b) 12]
    [(r13b) 13]
    [(r14b) 14]
    [(r15b) 15]
    ;; 16 bit registers
    [(ax) 0]
    [(bx) 3]
    [(cx) 1]
    [(dx) 2]
    [(di) 7]
    [(si) 6]
    [(bp) 5]
    [(sp) 4]
    [(r8w) 8]
    [(r9w) 9]
    [(r10w) 10]
    [(r11w) 11]
    [(r12w) 12]
    [(r13w) 13]
    [(r14w) 14]
    [(r15w) 15]
    ;; 32 bit registers
    [(eax) 0]
    [(ebx) 3]
    [(ecx) 1]
    [(edx) 2]
    [(edi) 7]
    [(esi) 6]
    [(ebp) 5]
    [(esp) 4]
    [(r8d) 8]
    [(r9d) 9]
    [(r10d) 10]
    [(r11d) 11]
    [(r12d) 12]
    [(r13d) 13]
    [(r14d) 14]
    [(r15d) 15]
    ;;64 bit registers
    [(rax) 0]
    [(rbx) 3]
    [(rcx) 1]
    [(rdx) 2]
    [(rdi) 7]
    [(rsi) 6]
    [(rbp) 5]
    [(rsp) 4]
    [(r8) 8]
    [(r9) 9]
    [(r10) 10]
    [(r11) 11]
    [(r12) 12]
    [(r13) 13]
    [(r14) 14]
    [(r15) 15]))
