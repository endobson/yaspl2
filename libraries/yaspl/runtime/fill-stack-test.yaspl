#:module (yaspl runtime fill-stack-test)
#:import {
  (bytes)
  (either)
  (io)
  (list)
  (machine-code)
  (prim)
  (stack-trace)
  (tuples)
}
(export
  (#:values main))
(types)

(define (fill-stack-frame-a) : StackSnapshot
  (case (fill-stack-frame-b)
    [(tuple2 ss _)
     ss]))

(define (fill-stack-frame-b) : (Tuple2 StackSnapshot Bytes)
  (tuple2 (make-stack-snapshot) #""))

(define (osx-main [stdout : OutputPort]) : Int
  (match-define ss (fill-stack-frame-a))
  (case (stack-snapshot->stack-trace ss)
    [(left v)
     (begin
       (write-line v stdout)
       1)]
    [(right trace)
     (match-define formatted-trace (format-stack-trace trace))
     (begin
       (write-line #"call-stack:" stdout)
       (write-all-bytes formatted-trace stdout)
       (if (= (length (bytes-split formatted-trace #"\n")) 5) 0 1))]))

;; TODO make this actually work
(define (linux-main) : Int
  0)

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (current-system-abi)
    [(osx-abi) (osx-main stdout)]
    [(linux-abi) (linux-main)]))
