#:module (yaspl interpreter yaspl-interpreter)
#:import {
  (bytes)
  (dict)
  {(libraries languages expanded-patterns-language)
    {#:types
      BytesCaseClause
      DefaultCaseClause
      Expression
      FunctionArg
      IntCaseClause
      VariantCaseClause
    }
    {#:patterns
      app-expr
      begin-expr
      boolean-literal
      bytes-case-clause
      bytes-case-expr
      bytes-literal
      default-case-clause
      global-var-expr
      halt-expr
      if-expr
      int-case-clause
      int-case-expr
      int-literal
      join-expr
      join-point-expr
      lambda-expr
      let-expr
      local-var-expr
      variant-case-expr
    }
  }
  (list)
  (maybe)
  (prim)
  (top-level-name)
  (yaspl var)
}
(export
  (#:values make-yaspl-interpreter yaspl-interpreter-step)
  (#:patterns step-success step-failure))
(types
  (define-type YasplInterpreter
    (yaspl-interpreter
      [functions : (Dict TopLevelName FunctionDefinition)]
      [stack : (List StackFrame)]
      [eval-context : (List EvalContextFrame)]
      [operand : Operand]))

  (define-type FunctionDefinition
    (function-definition [args : (List FunctionArg)] [body : Expression]))

  (define-type StackFrame
    (stack-frame))
  (define-type EvalContextFrame
    (conditional-frame [env : Environment] [t : Expression] [f : Expression])
    (app-op-frame [tail-position : Boolean] [env : Environment] [args : (List Expression)])
    (app-args-frame [tail-position : Boolean] [env : Environment]
                    [op-v : Value] [args-v : (List Value)] [args : (List Expression)])
    (bind-frame [v : Var] [env : Environment] [expr : Expression])
    (variant-case-frame [env : Environment] [clauses : (List VariantCaseClause)]
                        [default : (Maybe DefaultCaseClause)])
    (int-case-frame [env : Environment] [clause : IntCaseClause]
                    [default : DefaultCaseClause])
    (bytes-case-frame [env : Environment] [clause : BytesCaseClause]
                      [default : DefaultCaseClause])
    (begin-exprs-frame [exprs : (List Expression)] [last-expr : Expression] [env : Environment]))
  (define-type Environment
    (environment
      [locals : (Dict Var Value)]
      [join-points : (Dict Var JoinPoint)]))

  (define-type JoinPoint
    (join-point
      [eval-context : (List EvalContextFrame)]
      [env : Environment]
      [expr : Expression]))

  (define-type Operand
    (expr-operand [e : Expression] [env : Environment])
    (begin-exprs-operand [es : (List Expression)] [last-expr : Expression] [env : Environment])
    (value-operand [v : Value]))
  (define-type Value
    (int-value [v : Int])
    (bytes-value [v : Bytes])
    (boolean-value [v : Boolean])
    (closure-value [env : (Dict Var Value)] [args : (List FunctionArg)] [body : Expression]))
  (define-type StepResult
    (step-success [int : YasplInterpreter])
    (step-failure
      [message : Bytes]
      [int : YasplInterpreter])))

(define (make-yaspl-interpreter) : YasplInterpreter
  (yaspl-interpreter (make-dict top-level-name-cmp) (empty) (empty)
                     (value-operand (int-value 0))))

(define (yaspl-interpreter-step [int : YasplInterpreter]) : StepResult
  (match-define (yaspl-interpreter functions stack ctx op) int)
  (match-define return-value
    (lambda ([v : Value])
      (step-success (yaspl-interpreter functions stack ctx (value-operand v)))))
  (match-define step-down
    (lambda ([e : Expression] [env : Environment] [c : EvalContextFrame])
      (step-success (yaspl-interpreter functions stack (cons c ctx) (expr-operand e env)))))
  (match-define step-to
    (lambda ([e : Operand])
      (step-success (yaspl-interpreter functions stack ctx e))))
  (case op
    [(expr-operand e env)
     (match-define step-down*
       (lambda ([e : Expression] [c : EvalContextFrame])
         (step-down e env c)))
     (case e
       [(int-literal v)
        (return-value (int-value v))]
       [(bytes-literal v)
        (return-value (bytes-value v))]
       [(boolean-literal v)
        (return-value (boolean-value v))]
       [(local-var-expr v)
        (case (dict-ref (environment-locals env) v)
          [(nothing)
           (step-failure #"Unbound variable" int)]
          [(just v)
           (return-value v)])]
       [(global-var-expr v)
        (case (dict-ref functions v)
          [(nothing)
           (step-failure #"Unbound global variable" int)]
          [(just (function-definition args body))
           (return-value (closure-value (make-dict var-cmp) args body))])]
       [(if-expr cond true false)
        (step-down* cond (conditional-frame env true false))]
       [(app-expr tail op args)
        (step-down* op (app-op-frame tail env args))]
       [(let-expr var expr body)
        (step-down* expr (bind-frame var env body))]
       [(lambda-expr args _type body)
        (return-value (closure-value (environment-locals env) args body))]
       [(variant-case-expr expr clauses default)
        (step-down* expr (variant-case-frame env clauses default))]
       [(int-case-expr expr clause default)
        (step-down* expr (int-case-frame env clause default))]
       [(bytes-case-expr expr clause default)
        (step-down* expr (bytes-case-frame env clause default))]
       [(halt-expr)
        (step-failure #"Halt" int)]
       [(join-point-expr var expr body)
        (step-to (expr-operand body (environment-add-join-point env var (join-point ctx env expr))))]
       [(join-expr var)
        (case (dict-ref (environment-join-points env) var)
          [(nothing)
           (step-failure #"Unbound join point" int)]
          [(just (join-point ctx env e))
           (step-success (yaspl-interpreter functions stack ctx (expr-operand e env)))])]
       [(begin-expr exprs last-expr)
        (step-to (begin-exprs-operand exprs last-expr env))])]
    [(begin-exprs-operand exprs expr env)
     (case exprs
       [(empty) (step-to (expr-operand expr env))]
       [(cons first-expr exprs)
        (step-down first-expr env (begin-exprs-frame exprs expr env))])]
    [(value-operand v)
     (case ctx
       [(empty)
        (case stack
          [(empty)
           (step-failure #"NYI" int)]
          [(cons (stack-frame) _stack)
           (step-failure #"NYI" int)])]
       [(cons frame ctx)
        (match-define step-to
          (lambda ([e : Operand])
            (step-success (yaspl-interpreter functions stack ctx e))))
        (case frame
          [(conditional-frame env t f)
           (case v
             [(boolean-value v)
              (step-to (expr-operand (if v t f) env))]
             [_
              (step-failure #"Got non-boolean in conditional" int)])]
          [(int-case-frame env (int-case-clause expected expr) (default-case-clause default-expr))
           (case v
             [(int-value v)
              (step-to (expr-operand (if (= v expected) expr default-expr) env))]
             [_
              (step-failure #"Got non-int in int-case" int)])]
          [(bytes-case-frame env (bytes-case-clause expected expr) (default-case-clause default-expr))
           (case v
             [(bytes-value v)
              (step-to (expr-operand (if (bytes=? v expected) expr default-expr) env))]
             [_
              (step-failure #"Got non-bytes in bytes-case" int)])]
          [(bind-frame var env body)
           (step-to (expr-operand body (environment-add-local env var v)))]
          [(begin-exprs-frame exprs last-expr env)
           (step-to (begin-exprs-operand exprs last-expr env))]
          [_
           (step-failure #"NYI" int)])])]))


(define (environment-add-join-point [env : Environment] [v : Var] [join-point : JoinPoint])
  : Environment
  (match-define (environment locals joins) env)
  (environment locals (dict-add joins v join-point)))
(define (environment-add-local [env : Environment] [var : Var] [value : Value])
  : Environment
  (match-define (environment locals joins) env)
  (environment (dict-add locals var value) joins))
