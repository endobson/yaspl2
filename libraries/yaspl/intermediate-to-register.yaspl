#:module (yaspl intermediate-to-register)
#:import {
  (bytes)
  (dict)
  (intermediate-language)
  (list)
  (maybe)
  (prim)
  (prim-language) {
    #:values
      not-equal
  }
  (prim-language register-language-builder)
  (register-language) {
    #:types
      [FunctionDefinition r:FunctionDefinition]
      Var
    #:values
      closure-call
      comparison-condition
      closure-convention
      [cond-jump r:cond-jump]
      eight-byte-mem-op
      [function-call-inst r:function-call-inst]
      [function-definition r:function-definition]
      [halt r:halt]
      [heap-allocate-inst r:heap-allocate-inst]
      [int-literal r:int-literal]
      [jump r:jump]
      memory-compare-condition
      negated-var-condition
      [pointer-ref-inst r:pointer-ref-inst]
      [pointer-set!-inst r:pointer-set!-inst]
      [return r:return]
      [symbol-address-inst r:symbol-address-inst]
  }
  (tuples)
  (yaspl module-environment)
}
(export
  #:types ()
  #:values (compile-module)
  #:patterns ())
(types
  (define-type Environment
    (environment
      [vars : (Dict Bytes Var)]
      [module-env : ModuleEnvironment])))


(define (compile-module [mod : Module]) : Void
  (match-define env (make-module-environment mod))
  (match-define funcs
    (map
      (lambda ([f : FunctionDefinition])
        (convert-function f env))
      (module-definitions mod)))
  (void))


(define (env-ref [env : Environment] [name : Bytes]) : (Maybe Var)
  (dict-ref (environment-vars env) name))

(define (env-global-ref [env : Environment] [name : Bytes]) : (Maybe Bytes)
  (module-environment-global-ref (environment-module-env env) name))
(define (env-pattern-tag-ref [env : Environment] [name : Bytes]) : (Maybe Int)
  (module-environment-tag-ref (environment-module-env env) name))

(define (env-set [env : Environment] [name : Bytes] [var : Var]) : Environment
  (case env
    [(environment vars module-env)
     (environment (dict-set vars name var) module-env)]))

(define (convert-function [f : FunctionDefinition] [env : ModuleEnvironment]) : r:FunctionDefinition
  (match-define (function-definition name _ args free-vars body) f)
  (match-define acc (block-accumulator 0 0 (make-dict =)))
  (match-define (tuple2 start-block-num acc) (fresh-block-number* acc))

  (match-define (tuple2 freshened-args acc)
    (map-state fresh-name* args acc))
  (match-define (tuple2 freshened-free-vars acc)
    (map-state fresh-name* free-vars acc))
  (match-define freshened-args+free-vars (append freshened-args freshened-free-vars))

  (match-define acc (start-block start-block-num (map new-arg freshened-args+free-vars) acc))
  (match-define env (environment (make-dict bytes=?) env))
  (match-define env
    (foldl
      (lambda ([t : (Tuple2 Bytes Var)] [env : Environment])
        (case t
          [(tuple2 name var) (env-set env name var)]))
      freshened-args+free-vars
      env))

  (match-define (tuple2 result acc) (convert-expr body env acc))
  (match-define (block-accumulator next-var next-block blocks) (add-terminal acc (r:return result)))

  (r:function-definition name (closure-convention (length args) start-block-num (length free-vars)) blocks next-var next-block))

(define (convert-expr [e : Expression] [env : Environment] [acc : Accumulator]) : (Tuple2 Var Accumulator)
  (case e
    [(int-literal v)
     (case (fresh-var acc #"int")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var v)))])]
    [(boolean-literal v)
     (case (fresh-var acc #"bool")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var (if v 1 0))))])]
    [(var-expr v)
     (case (env-ref env v)
       [(just var) (tuple2 var acc)]
       [(nothing)
        (case (env-global-ref env v)
          [(just sym)
           (match-define (tuple2 var acc) (fresh-var acc v))
           (tuple2 var (add-instruction acc (r:symbol-address-inst var sym)))]
          [(nothing)
           (panic #"Unbound variable when converting to register")])])]
    [(begin-expr e es)
     (convert-begin e es env acc)]
    [(let-expr name e body)
     (match-define (tuple2 v acc) (convert-expr e env acc))
     (convert-expr e (env-set env name v) acc)]
    [(call-closure-expr op args)
     (case (convert-expr op env acc)
       [(tuple2 closure-var acc)
        (case (convert-exprs args env acc)
          [(tuple2 arg-vars acc)
           (case (fresh-var acc #"res")
             [(tuple2 result-var acc)
              (tuple2
                result-var
                (add-instruction
                  acc
                  (r:function-call-inst result-var (closure-call closure-var) arg-vars)))])])])]
    [(make-array-expr args)
     (case (fresh-var acc #"size")
       [(tuple2 size-var acc)
        (case (fresh-var acc #"arr")
          [(tuple2 array-var acc)
           (match-define acc
             (add-instruction
               (add-instruction
                 (add-instruction acc (r:int-literal size-var (* (+ 1 (length args)) 8)))
                 (r:heap-allocate-inst array-var size-var))
               (r:pointer-set!-inst (eight-byte-mem-op) array-var 0 size-var)))
           (match-define acc (fill-array array-var 8 args env acc))
           (tuple2 array-var acc)])])]
    [(if-expr cond then else)
     (match-define (tuple2 branch-var acc)
       (convert-expr cond env acc))
     (match-define (tuple2 t-block-num acc) (fresh-block-number acc))
     (match-define (tuple2 f-block-num acc) (fresh-block-number acc))
     (match-define acc
       (add-terminal acc (r:cond-jump (negated-var-condition branch-var)
                                      f-block-num (empty)
                                      t-block-num (empty))))

     (match-define (tuple2 t-value acc)
       (convert-expr then env (start-block t-block-num (empty) acc)))
     (match-define (tuple2 t-block acc) (split-accumulator acc))
     (match-define (tuple2 f-value acc)
       (convert-expr else env (start-block f-block-num (empty) acc)))
     (match-define (tuple2 f-block acc) (split-accumulator acc))

     (match-define (tuple2 c-block-num acc) (fresh-block-number* acc))

     (match-define acc
       (add-terminal*
         (add-terminal* acc t-block (r:jump c-block-num (varargs list t-value)))
         f-block (r:jump c-block-num (varargs list f-value))))
     (match-define (tuple2 join-var acc) (fresh-var* acc #"join"))

     (tuple2
       join-var
       (start-block c-block-num (varargs list join-var) acc))]
    [(create-closure-expr name exprs)
     (case (env-global-ref env name)
       [(nothing) (panic #"No global for closure")]
       [(just symbol)
        (match-define (tuple2 size-var acc) (fresh-var acc #"size"))
        (match-define (tuple2 closure-var acc) (fresh-var acc #"clos"))
        (match-define (tuple2 symbol-var acc) (fresh-var acc #"sym"))
        (match-define acc
          (add-instructions
            acc
            (varargs list
              (r:int-literal size-var (* (+ 1 (length exprs)) 8))
              (r:heap-allocate-inst closure-var size-var)
              (r:symbol-address-inst symbol-var symbol)
              (r:pointer-set!-inst (eight-byte-mem-op) closure-var 0 symbol-var))))
        (match-define acc (fill-array closure-var 8 exprs env acc))
        (tuple2 closure-var acc)])]
    [(case-expr expr clauses)
     (match-define (tuple2 value-var acc) (convert-expr expr env acc))
     (match-define (tuple2 join-block acc) (fresh-block-number acc))
     (match-define acc (convert-clauses clauses value-var join-block env acc))
     (match-define (tuple2 join-var acc) (fresh-var* acc #"join"))
     (tuple2
       join-var
       (start-block join-block (varargs list join-var) acc))]))


(define (convert-clauses [clauses : (List CaseClause)] [value : Var] [join-block : Int]
                         [env : Environment] [acc : Accumulator]) : BlockAccumulator
  (case clauses
    [(empty) (add-terminal acc (r:halt))]
    [(cons (case-clause pattern expr) clauses)
     (match-define (tuple2 fail-block acc) (fresh-block-number acc))

     (match-define (tuple2 inner-env acc) (convert-pattern pattern value fail-block env acc))
     (match-define (tuple2 value-var acc) (convert-expr expr inner-env acc))
     (match-define acc
       (start-block fail-block (empty) (add-terminal acc (r:jump join-block (varargs list value-var)))))
     (convert-clauses clauses value join-block env acc)]))

(define (convert-pattern [pattern : Pattern] [value : Var] [fail-block : Int]
                         [env : Environment] [acc : Accumulator]) : (Tuple2 Environment Accumulator)
  (case pattern
    [(ignore-pattern) (tuple2 env acc)]
    [(variable-pattern var)
     (tuple2 (env-set env var value) acc)]
    [(int-pattern exp)
     (match-define (tuple2 exp-var acc) (fresh-var acc #"intpat"))
     (match-define acc (add-instruction acc (r:int-literal exp-var exp)))
     (match-define (tuple2 continue-block acc) (fresh-block-number acc))
     (tuple2
       env
       (start-block
         continue-block
         (empty)
         (add-terminal acc (r:cond-jump (comparison-condition (not-equal) exp-var value)
                                        fail-block (empty) continue-block (empty)))))]
    [(bytes-pattern name)
     (case (env-global-ref env name)
       [(nothing) (panic #"No symbol for bytes pattern")]
       [(just symbol)
        (match-define (tuple2 bytes-var acc) (fresh-var acc #"bytes"))
        (match-define (tuple2 size-var acc) (fresh-var acc #"size"))
        (match-define acc (add-instruction acc (r:symbol-address-inst bytes-var symbol)))
        (match-define acc
          (add-instruction acc (r:pointer-ref-inst size-var (eight-byte-mem-op) bytes-var 0)))
        (match-define (tuple2 continue-block acc) (fresh-block-number acc))
        (tuple2
          env
          (start-block
            continue-block
            (empty)
            (add-terminal acc (r:cond-jump (memory-compare-condition #t size-var bytes-var value)
                                           fail-block (empty) continue-block (empty)))))])]
    [(abstraction-pattern name patterns)
     (case (env-pattern-tag-ref env name)
       [(nothing) (panic #"No tag for abstraction")]
       [(just tag)
        (match-define (tuple2 expected-tag acc) (fresh-var acc #"exp-tag"))
        (match-define (tuple2 actual-tag acc) (fresh-var acc #"actual-tag"))
        (match-define acc (add-instruction acc (r:int-literal expected-tag tag)))
        (match-define acc
          (add-instruction acc (r:pointer-ref-inst actual-tag (eight-byte-mem-op) value 0)))
        (match-define (tuple2 continue-block acc) (fresh-block-number acc))
        (match-define acc
          (start-block
            continue-block
            (empty)
            (add-terminal acc (r:cond-jump (comparison-condition (not-equal) expected-tag actual-tag)
                                           fail-block (empty) continue-block (empty)))))
        (convert-sub-patterns patterns value 8 fail-block env acc)])]))

(define (convert-sub-patterns
          [patterns : (List Pattern)] [ptr : Var] [offset : Int] [fail-block : Int]
          [env : Environment] [acc : Accumulator]) : (Tuple2 Environment Accumulator)
  (case patterns
    [(empty) (tuple2 env acc)]
    [(cons pattern patterns)
     (match-define (tuple2 new-value acc) (fresh-var acc #"val"))
     (match-define acc
       (add-instruction acc
         (r:pointer-ref-inst new-value (eight-byte-mem-op) ptr offset)))
     (match-define (tuple2 env acc) (convert-pattern pattern new-value fail-block env acc))
     (convert-sub-patterns patterns ptr (+ offset 8) fail-block env acc)]))


(define (fill-array [base : Var] [offset : Int] [exprs : (List Expression)]
                    [env : Environment] [acc : Accumulator]) : Accumulator
  (case exprs
    [(empty) acc]
    [(cons expr exprs)
     (case (convert-expr expr env acc)
       [(tuple2 value-var acc)
        (fill-array
          base
          (+ offset 8)
          exprs
          env
          (add-instruction
            acc
            (r:pointer-set!-inst (eight-byte-mem-op) base offset value-var)))])]))

(define (convert-begin [expr : Expression] [exprs : (List Expression)] [env : Environment] [acc : Accumulator])
  : (Tuple2 Var Accumulator)
  (match-define (tuple2 v acc) (convert-expr expr env acc))
  (case exprs
    [(empty)
     (tuple2 v acc)]
    [(cons expr exprs)
     (convert-begin expr exprs env acc)]))

(define (convert-exprs [exprs : (List Expression)] [env : Environment] [acc : Accumulator])
  : (Tuple2 (List Var) Accumulator)
  (case exprs
    [(empty)
     (tuple2 (empty) acc)]
    [(cons expr exprs)
     (match-define (tuple2 v acc) (convert-expr expr env acc))
     (match-define (tuple2 vars acc) (convert-exprs exprs env acc))
     (tuple2 (cons v vars) acc)]))

(define (fresh-var [acc : Accumulator] [base-name : Bytes]) : (Tuple2 Var Accumulator)
  (case (fresh-name base-name acc)
    [(tuple2 (tuple2 _ v) acc) (tuple2 v acc)]))

(define (fresh-var* [acc : BlockAccumulator] [base-name : Bytes]) : (Tuple2 Var BlockAccumulator)
  (case (fresh-name* base-name acc)
    [(tuple2 (tuple2 _ v) acc) (tuple2 v acc)]))

(define (a b s) (map-state [f : (a s -> (Tuple2 b s))] [l : (List a)] [s : s]) : (Tuple2 (List b) s)
  (case l
    [(empty) (tuple2 (empty) s)]
    [(cons e l)
     (case (f e s)
       [(tuple2 v s)
        (case (map-state f l s)
          [(tuple2 vs s)
           (tuple2 (cons v vs) s)])])]))
