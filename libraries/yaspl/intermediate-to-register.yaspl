#:module (yaspl intermediate-to-register)
#:import {
  (dict)
  (intermediate-language)
  (list)
  (maybe)
  (prim)
  (prim-language) {
    #:values
      numeric-bin-op
      plus
  }
  (prim-language register-language-builder)
  (register-language) {
    #:types
      Var
    #:values
      [bin-op-inst r:bin-op-inst]
      closure-call
      eight-byte-mem-op
      [function-call-inst r:function-call-inst]
      [heap-allocate-inst r:heap-allocate-inst]
      [int-literal r:int-literal]
      [pointer-set!-inst r:pointer-set!-inst]
      var
  }
  (tuples)
}
(export
  #:types ()
  #:values (convert-expr)
  #:patterns ())
(types
  (define-type Environment
    (environment [vars : (Dict Bytes Var)])))

(define (env-ref [env : Environment] [name : Bytes]) : Var
  (case (dict-ref (environment-vars env) name)
    [(nothing) (panic #"unbound variable")]
    [(just v) v]))

(define (env-set [env : Environment] [name : Bytes] [var : Var]) : Environment
  (case env
    [(environment vars)
     (environment (dict-set vars name var))]))

(define (convert-expr [e : Expression] [env : Environment] [acc : Accumulator]) : (Tuple2 Var Accumulator)
  (case e
    [(int-literal v)
     (case (fresh-var acc #"int")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var v)))])]
    [(boolean-literal v)
     (case (fresh-var acc #"bool")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var (if v 1 0))))])]
    [(var-expr v)
     (tuple2 (env-ref env v) acc)]
    [(begin-expr e es)
     (convert-begin e es env acc)]
    [(let-expr name e body)
     (match-define (tuple2 v acc) (convert-expr e env acc))
     (convert-expr e (env-set env name v) acc)]
    [(call-closure-expr op args)
     (case (convert-expr op env acc)
       [(tuple2 closure-var acc)
        (case (convert-exprs args env acc)
          [(tuple2 arg-vars acc)
           (case (fresh-var acc #"res")
             [(tuple2 result-var acc)
              (tuple2
                result-var
                (add-instruction
                  acc
                  (r:function-call-inst result-var (closure-call closure-var) arg-vars)))])])])]
    [(make-array-expr args)
     (case (fresh-var acc #"size")
       [(tuple2 size-var acc)
        (case (fresh-var acc #"arr")
          [(tuple2 array-var acc)
           (match-define acc
             (add-instruction
               (add-instruction
                 (add-instruction acc (r:int-literal size-var (* (+ 1 (length args)) 8)))
                 (r:heap-allocate-inst array-var size-var))
               (r:pointer-set!-inst (eight-byte-mem-op) array-var size-var)))
           (match-define acc (fill-array array-var args env acc))
           (tuple2 array-var acc)])])]
    [_ (panic #"NYI")]))

(define (fill-array [last-index : Var] [exprs : (List Expression)]
                    [env : Environment] [acc : Accumulator]) : Accumulator
  (case exprs
    [(empty) acc]
    [(cons expr exprs)
     (case (convert-expr expr env acc)
       [(tuple2 value-var acc)
        (case (fresh-var acc #"delta")
          [(tuple2 delta-var acc)
           (case (fresh-var acc #"arr")
             [(tuple2 new-index acc)
              (fill-array
                new-index
                exprs
                env
                (add-instruction
                  (add-instruction
                    (add-instruction acc (r:int-literal delta-var 8))
                    (r:bin-op-inst new-index (numeric-bin-op (plus)) last-index delta-var))
                  (r:pointer-set!-inst (eight-byte-mem-op) new-index value-var)))])])])]))

(define (convert-begin [expr : Expression] [exprs : (List Expression)] [env : Environment] [acc : Accumulator])
  : (Tuple2 Var Accumulator)
  (match-define (tuple2 v acc) (convert-expr expr env acc))
  (case exprs
    [(empty)
     (tuple2 v acc)]
    [(cons expr exprs)
     (convert-begin expr exprs env acc)]))

(define (convert-exprs [exprs : (List Expression)] [env : Environment] [acc : Accumulator])
  : (Tuple2 (List Var) Accumulator)
  (case exprs
    [(empty)
     (tuple2 (empty) acc)]
    [(cons expr exprs)
     (match-define (tuple2 v acc) (convert-expr expr env acc))
     (match-define (tuple2 vars acc) (convert-exprs exprs env acc))
     (tuple2 (cons v vars) acc)]))


(define (fresh-var [acc : Accumulator] [base-name : Bytes]) : (Tuple2 Var Accumulator)
  (match-define (accumulator next-var next-block current-block blocks) acc)
  (tuple2
    (var base-name next-var)
    (accumulator (+ 1 next-var) next-block current-block blocks)))
