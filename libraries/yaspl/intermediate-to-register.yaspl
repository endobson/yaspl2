#:module (yaspl intermediate-to-register)
#:import {
  (dict)
  (intermediate-language)
  (list)
  (maybe)
  (prim)
  (prim-language register-language-builder)
  (register-language) {
    #:types
      Var
    #:values
      [int-literal r:int-literal]
      var
  }
  (tuples)
}
(export
  #:types ()
  #:values (convert-expr)
  #:patterns ())
(types
  (define-type Environment
    (environment [vars : (Dict Bytes Var)])))

(define (env-ref [env : Environment] [name : Bytes]) : Var
  (case (dict-ref (environment-vars env) name)
    [(nothing) (panic #"unbound variable")]
    [(just v) v]))

(define (env-ref* [env : Environment] [names : (List Bytes)]) : (List Var)
  (map (lambda ([name : Bytes]) (env-ref env name)) names))

(define (env-add [env : Environment] [name : Bytes] [var : Var]) : Environment
  (case env
    [(environment vars)
     (environment (dict-add vars name var))]))

(define (env-replace [env : Environment] [name : Bytes] [var : Var]) : Environment
  (case env
    [(environment vars)
     (environment (dict-replace vars name var))]))


(define (convert-expr [e : Expression] [env : Environment] [acc : Accumulator]) : (Tuple2 Var Accumulator)
  (case e
    [(int-literal v)
     (case (fresh-var acc #"int")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var v)))])]
    [(boolean-literal v)
     (case (fresh-var acc #"bool")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var (if v 1 0))))])]
    [(var-expr v)
     (tuple2 (env-ref env v) acc)]
    [_ (panic #"NYI")]))

(define (fresh-var [acc : Accumulator] [base-name : Bytes]) : (Tuple2 Var Accumulator)
  (match-define (accumulator next-var next-block current-block blocks) acc)
  (tuple2
    (var base-name next-var)
    (accumulator (+ 1 next-var) next-block current-block blocks)))
