#:module (yaspl intermediate-to-register)
#:import {
  (intermediate-language)
  (prim)
  (prim-language register-language-builder)
  (register-language) {
    #:types
      Var
    #:values
      [int-literal r:int-literal]
      var
  }
  (tuples)
}
(export
  #:types ()
  #:values (convert-expr)
  #:patterns ())
(types
  (define-type Environment
    (environment)))



(define (convert-expr [e : Expression] [env : Environment] [acc : Accumulator]) : (Tuple2 Var Accumulator)
  (case e
    [(int-literal v)
     (case (fresh-var acc #"int")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var v)))])]
    [(boolean-literal v)
     (case (fresh-var acc #"bool")
       [(tuple2 var acc)
        (tuple2 var (add-instruction acc (r:int-literal var (if v 1 0))))])]
    [_ (panic #"NYI")]))

(define (fresh-var [acc : Accumulator] [base-name : Bytes]) : (Tuple2 Var Accumulator)
  (match-define (accumulator next-var next-block current-block blocks) acc)
  (tuple2
    (var base-name next-var)
    (accumulator (+ 1 next-var) next-block current-block blocks)))
