#:module (yaspl top-level-objects)
#:import {
  (list)
  (module-signature)
  (prim)
  (register-language) {
    #:types
      [FunctionDefinition r:FunctionDefinition]
  }
  (stack-machine)
}
(export
  #:types (TopLevelObject CompiledModule)
  #:values (stack-function-tlo register-function-tlo bytes-tlo trivial-variant-tlo trivial-closure-tlo
            compiled-module)
  #:patterns (stack-function-tlo register-function-tlo bytes-tlo trivial-variant-tlo trivial-closure-tlo
              compiled-module))
(types
  (define-type CompiledModule
    (compiled-module
      [code : (List TopLevelObject)]
      [sig : ModuleSignature]))
  (define-type TopLevelObject
    (stack-function-tlo [v : StackFunction])
    (register-function-tlo [v : r:FunctionDefinition])
    (bytes-tlo [name : Bytes] [value : Bytes])
    (trivial-variant-tlo [name : Bytes] [variant-tag : Int])
    (trivial-closure-tlo [name : Bytes] [fun-name : Bytes])))
