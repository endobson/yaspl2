#:module (yaspl conversions source-language-parser)
#:import {
  (bytes)
  (data source-location)
  (either)
  (list)
  (maybe)
  (module-name)
  (prim)
  (sexp-parser)
  (tuples)
  (yaspl languages source-language)
}
(export
  (#:types)
  (#:values parse-module parse-expression)
  (#:patterns source-parse-error))
(types
  (define-type SourceParseError
    (source-parse-error [v : Bytes] [source : SourceSpan])))

(define [a] (right/source-parse-error [v : a]) : (Either SourceParseError a)
  (right v))

(define [a b r]
  (either-app2
    [f : (a b -> r)]
    [e1 : (Either SourceParseError a)]
    [e2 : (Either SourceParseError b)]) : (Either SourceParseError r)
  (case e1
    [(left v) (left v)]
    [(right v1)
     (case e2
       [(left v) (left v)]
       [(right v2)
        (right (f v1 v2))])]))

(define [a b c r]
  (either-app3
    [f : (a b c -> r)]
    [e1 : (Either SourceParseError a)]
    [e2 : (Either SourceParseError b)]
    [e3 : (Either SourceParseError c)]) : (Either SourceParseError r)
  (case e1
    [(left v) (left v)]
    [(right v1)
     (case e2
       [(left v) (left v)]
       [(right v2)
        (case e3
          [(left v) (left v)]
          [(right v3)
           (right (f v1 v2 v3))])])]))

(define [a b c d r]
  (either-app4
    [f : (a b c d -> r)]
    [e1 : (Either SourceParseError a)]
    [e2 : (Either SourceParseError b)]
    [e3 : (Either SourceParseError c)]
    [e4 : (Either SourceParseError d)]) : (Either SourceParseError r)
  (case e1
    [(left v) (left v)]
    [(right v1)
     (case e2
       [(left v) (left v)]
       [(right v2)
        (case e3
          [(left v) (left v)]
          [(right v3)
           (case e4
             [(left v) (left v)]
             [(right v4)
              (right (f v1 v2 v3 v4))])])])]))

(define (parse-imports [sexps : (List Sexp)]) : (Either SourceParseError (List Imports))
  (case sexps
    [(empty)
     (right (empty))]
    [(cons (brace-node (cons (node module-name module-name-src) import-elems) _) next-imports)
     (case (parse-module-name (source-span-annotated module-name module-name-src))
       [(left v) (left v)]
       [(right module-name)
        (case (parse-import-elems module-name import-elems)
          [(left v) (left v)]
          [(right imports)
           (case (parse-imports next-imports)
             [(left v) (left v)]
             [(right importss) (right (cons imports importss))])])])]
    [(cons (node module-name module-name-src) next-imports)
     (case (parse-module-name (source-span-annotated module-name module-name-src))
       [(left v) (left v)]
       [(right module-name)
        (case (parse-imports next-imports)
          [(left err) (left err)]
          [(right importss) (right (cons (full-imports module-name) importss))])])]
    [(cons sexp _)
     (left (source-parse-error #"Bad import form" (sexp-source-span sexp)))]))

(define (parse-partial-import-items [sexps : (List Sexp)]) : (Either SourceParseError (List Import))
  (parse-partial-import-items* sexps (empty)))

(define (parse-partial-import-items* [sexps : (List Sexp)] [acc : (List Import)])
  : (Either SourceParseError (List Import))
  (case sexps
    [(empty)
     (right (reverse acc))]
    [(cons (symbol-sexp name _) sexps)
     (parse-partial-import-items* sexps (cons (import name name) acc))]
    [(cons (bracket-node (cons (symbol-sexp exported-name _) (cons (symbol-sexp local-name _) (empty)))
                         _)
           sexps)
     (parse-partial-import-items* sexps (cons (import exported-name local-name) acc))]
    [(cons sexp _)
     (left (source-parse-error #"Bad input, invalid partial import item" (sexp-source-span sexp)))]))

(define (parse-partial-imports-section [section : Bytes] [sexps : (List Sexp)])
  : (Either SourceParseError (Tuple2 (List Import) (List Sexp)))
  (case sexps
    [(cons (brace-node (cons (keyword-sexp actual-section _) inner-sexps) _) next-sexps)
     (if (bytes=? actual-section section)
         (case (parse-partial-import-items inner-sexps)
           [(right imports)
            (right (tuple2 imports next-sexps))]
           [(left v)
            (left v)])
         (right (tuple2 (empty) sexps)))]
    [_
     (right (tuple2 (empty) sexps))]))

(define (parse-import-elems [mod-name : ModName] [sexps : (List Sexp)]) : (Either SourceParseError Imports)
  (case (parse-partial-imports-section #"types" sexps)
    [(left v)
     (left v)]
    [(right (tuple2 types sexps))
     (case (parse-partial-imports-section #"values" sexps)
       [(left v)
        (left v)]
       [(right (tuple2 values sexps))
        (case (parse-partial-imports-section #"patterns" sexps)
          [(left v)
           (left v)]
          [(right (tuple2 patterns sexps))
           (case (parse-partial-imports-section #"statics" sexps)
             [(left v)
              (left v)]
             [(right (tuple2 statics sexps))
              (case sexps
                [(empty)
                 (right (partial-imports mod-name types values patterns statics))]
                [(cons sexp _)
                 (left (source-parse-error #"Not a valid imports clause"
                                           (sexp-source-span sexp)))])])])])]))


(define (parse-exports/top [sexp : Sexp]) : (Either SourceParseError Exports)
  (case sexp
    [(node (cons (symbol-sexp #"export" _) export-sexps) exports-src)
     (match-define (tuple2 export-sexps type-exports) : (Tuple2 (List Sexp) (List Sexp))
       (case export-sexps
         [(cons (node (cons (keyword-sexp #"types" _) type-exports) _) export-sexps)
          (tuple2 export-sexps type-exports)]
         [_
          (tuple2 export-sexps (empty))]))
     (match-define (tuple2 export-sexps value-exports) : (Tuple2 (List Sexp) (List Sexp))
       (case export-sexps
         [(cons (node (cons (keyword-sexp #"values" _) value-exports) _) export-sexps)
          (tuple2 export-sexps value-exports)]
         [_
          (tuple2 export-sexps (empty))]))
     (match-define (tuple2 export-sexps pattern-exports) : (Tuple2 (List Sexp) (List Sexp))
       (case export-sexps
         [(cons (node (cons (keyword-sexp #"patterns" _) pattern-exports) _) export-sexps)
          (tuple2 export-sexps pattern-exports)]
         [_
          (tuple2 export-sexps (empty))]))
     (match-define (tuple2 export-sexps static-exports) : (Tuple2 (List Sexp) (List Sexp))
       (case export-sexps
         [(cons (node (cons (keyword-sexp #"statics" _) static-exports) _) export-sexps)
          (tuple2 export-sexps static-exports)]
         [_
          (tuple2 export-sexps (empty))]))
     (case export-sexps
       [(empty)
        (case (extract-rights (map parse-exported-symbol type-exports))
          [(left v) (left v)]
          [(right type-names)
           (case (extract-rights (map parse-exported-symbol value-exports))
             [(left v) (left v)]
             [(right value-names)
              (case (extract-rights (map parse-exported-symbol pattern-exports))
                [(left v) (left v)]
                [(right pattern-names)
                 (case (extract-rights (map parse-exported-symbol static-exports))
                   [(left v) (left v)]
                   [(right static-names)
                    (let ([convert (lambda ([name : Bytes]) (export name name))])
                      (right (exports
                               (map convert type-names)
                               (map convert value-names)
                               (map convert pattern-names)
                               (map convert static-names))))])])])])]
       [(cons _ _)
        (left (source-parse-error #"Bad exports" exports-src))])]
    [_ (left (source-parse-error #"Bad exports" (sexp-source-span sexp)))]))

(define (parse-exported-symbol [sexp : Sexp]) : (Either SourceParseError Bytes)
  (case sexp
    [(symbol-sexp bytes _) (right bytes)]
    [_ (left (source-parse-error #"Not a valid export" (sexp-source-span sexp)))]))


(define (parse-types/top [sexp : Sexp]) : (Either SourceParseError (List TypeDefinition))
  (case sexp
    [(node (cons (symbol-sexp #"types" _) type-definitions) _)
     (extract-rights (map parse-type-definition type-definitions))]
    [_ (left (source-parse-error #"Bad types" (sexp-source-span sexp)))]))

(define (parse-type-definition [sexp : Sexp]) : (Either SourceParseError TypeDefinition)
  (case sexp
    [(node (cons (symbol-sexp #"define-type" _) (cons type-name/vars variants)) _)
     (case (extract-type-name type-name/vars)
       [(left v) (left v)]
       [(right type-name)
        (case (extract-type-vars type-name/vars)
          [(left v) (left v)]
          [(right type-vars)
           (case (extract-rights (map parse-variant variants))
             [(left v) (left v)]
             [(right variants)
              (right (type-definition type-name type-vars variants))])])])]
    [_ (left (source-parse-error #"Bad type definition: expecting (define-type ...)"
                                 (sexp-source-span sexp)))]))

(define (parse-variant [sexp : Sexp]) : (Either SourceParseError VariantDefinition)
  (case sexp
    [(node (cons (symbol-sexp variant-name _) fields) _)
     (case (extract-rights (map parse-variant-field fields))
       [(left v) (left v)]
       [(right fields)
        (right (variant-definition variant-name fields))])]
    [_ (left (source-parse-error #"Bad variant definition" (sexp-source-span sexp)))]))

(define (parse-variant-field [sexp : Sexp]) : (Either SourceParseError VariantField)
  (case sexp
    [(bracket-node
       (cons (symbol-sexp field-name _) (cons (symbol-sexp #":" _) (cons type (empty))))
       _)
     (case (parse-pre-type type)
       [(left v) (left v)]
       [(right type)
        (right (variant-field field-name type))])]
    [_ (left (source-parse-error #"Bad variant field" (sexp-source-span sexp)))]))

(define (extract-type-name [sexp : Sexp]) : (Either SourceParseError Bytes)
  (case sexp
    [(symbol-sexp type-name _)
     (right type-name)]
    [(node (cons (symbol-sexp type-name _) _) _)
     (right type-name)]
    [_ (left (source-parse-error #"Bad type-name/vars" (sexp-source-span sexp)))]))

(define (extract-type-vars [sexp : Sexp]) : (Either SourceParseError (Maybe (List Bytes)))
  (case sexp
    [(symbol-sexp _ _)
     (right (nothing))]
    [(node (cons _ type-var-sexps) _)
     (case (extract-rights (map parse-type-var-symbol type-var-sexps))
       [(left v) (left v)]
       [(right type-vars)
        (right (just type-vars))])]
    [_ (left (source-parse-error #"Bad type-name/vars" (sexp-source-span sexp)))]))

(define (parse-type-var-symbol [sexp : Sexp]) : (Either SourceParseError Bytes)
  (case sexp
    [(symbol-sexp bytes _) (right bytes)]
    [_ (left (source-parse-error #"Not a valid type variable" (sexp-source-span sexp)))]))


(define (parse-pre-type [sexp : Sexp]) : (Either SourceParseError PreType)
  (case sexp
    [(symbol-sexp v src) (right (var-pre-type v src))]
    ;; TODO Make function parsing better
    [(node (cons (symbol-sexp #"->" _) (cons result (empty))) src)
     (case (parse-pre-type result)
       [(left v) (left v)]
       [(right result)
        (right (fun-pre-type (empty) (empty) result src))])]
    [(node (cons arg1 (cons (symbol-sexp #"->" _) (cons result (empty)))) src)
     (case (parse-pre-type arg1)
       [(left v) (left v)]
       [(right arg1)
        (case (parse-pre-type result)
          [(left v) (left v)]
          [(right result)
           (right (fun-pre-type (empty) (cons arg1 (empty)) result src))])])]
    [(node (cons arg1 (cons arg2 (cons (symbol-sexp #"->" _) (cons result (empty))))) src)
     (case (parse-pre-type arg1)
       [(left v) (left v)]
       [(right arg1)
        (case (parse-pre-type arg2)
          [(left v) (left v)]
          [(right arg2)
           (case (parse-pre-type result)
             [(left v) (left v)]
             [(right result)
              (right (fun-pre-type (empty) (cons arg1 (cons arg2 (empty))) result src))])])])]
    [(node (cons arg1 (cons arg2 (cons arg3 (cons (symbol-sexp #"->" _) (cons result (empty)))))) src)
     (case (parse-pre-type arg1)
       [(left v) (left v)]
       [(right arg1)
        (case (parse-pre-type arg2)
          [(left v) (left v)]
          [(right arg2)
           (case (parse-pre-type arg3)
             [(left v) (left v)]
             [(right arg3)
              (case (parse-pre-type result)
                [(left v) (left v)]
                [(right result)
                 (right (fun-pre-type (empty) (cons arg1 (cons arg2 (cons arg3 (empty)))) result src))])])])])]
    [(node (cons arg1 (cons arg2 (cons arg3 (cons arg4 (cons (symbol-sexp #"->" _) (cons result (empty)))))))
           src)
     (case (parse-pre-type arg1)
       [(left v) (left v)]
       [(right arg1)
        (case (parse-pre-type arg2)
          [(left v) (left v)]
          [(right arg2)
           (case (parse-pre-type arg3)
             [(left v) (left v)]
             [(right arg3)
              (case (parse-pre-type arg4)
                [(left v) (left v)]
                [(right arg4)
                 (case (parse-pre-type result)
                   [(left v) (left v)]
                   [(right result)
                    (right (fun-pre-type
                             (empty) (cons arg1 (cons arg2 (cons arg3 (cons arg4 (empty)))))
                             result src))])])])])])]
    [(node (cons (symbol-sexp constructor cons-src) args) src)
     (case (extract-rights (map parse-pre-type args))
       [(left v) (left v)]
       [(right args)
        (right (type-app-pre-type (source-span-annotated constructor cons-src) args src))])]
    [_ (left (source-parse-error #"Not a valid Type" (sexp-source-span sexp)))]))

(define (parse-toplevel-definition [sexp : Sexp])
  : (Either SourceParseError (Either FunctionDefinition StaticDefinition))
  (case sexp
    [(node parts parts-src)
     (case parts
       [(cons (symbol-sexp #"define" _) parts)
        (case (parse-function-definition parts parts-src)
          [(left v) (left v)]
          [(right v) (right (left v))])]
       [(cons (symbol-sexp #"define/varargs" _) parts)
        (case (parse-vararg-definition parts parts-src)
          [(left v) (left v)]
          [(right v) (right (right v))])]
       [(empty)
        (left (source-parse-error #"Invalid toplevel definition: no parts" parts-src))]
       [(cons bad-define _)
        (left (source-parse-error #"Invalid toplevel definition: doesn't start with valid 'define'"
                                  (sexp-source-span bad-define)))])]
    [_
     (left (source-parse-error #"Invalid toplevel definition: not a node" (sexp-source-span sexp)))]))

(define (parse-function-definition [parts : (List Sexp)] [src : SourceSpan])
  : (Either SourceParseError FunctionDefinition)
  (match-define (tuple2 type-vars parts) : (Tuple2 (List Sexp) (List Sexp))
    (case parts
      [(cons (bracket-node type-vars _) parts)
       (tuple2 type-vars parts)]
      [parts
       (tuple2 (empty) parts)]))
  (case parts
    [(cons (node name+args name+args-src) parts)
     (case name+args
       [(empty)
        (left (source-parse-error #"Invalid function definition: empty name and args."
                                  name+args-src))]
       [(cons (symbol-sexp function-name _) args)
        (parse-function-definition* function-name type-vars args parts src)]
       [(cons name _args)
        (left (source-parse-error #"Invalid function definition: name is not a symbol"
                                  (sexp-source-span name)))])]
    [(cons name+args _)
     (left (source-parse-error #"Invalid function definition: couldn't parse name and args."
                               (sexp-source-span name+args)))]
    [(empty)
     (left (source-parse-error #"Invalid function definition: missing name and args."
                               src))]))

(define (parse-vararg-definition [parts : (List Sexp)] [src : SourceSpan])
  : (Either SourceParseError StaticDefinition)
  (match-define (tuple2 type-vars parts) : (Tuple2 (List Sexp) (List Sexp))
    (case parts
      [(cons (bracket-node type-vars _) parts)
       (tuple2 type-vars parts)]
      [parts
       (tuple2 (empty) parts)]))

  (case parts
    [(cons (symbol-sexp name _)
           (cons (symbol-sexp #":" _)
                 (cons (node (cons arg-type (cons return-type (empty))) _)
                       (cons (symbol-sexp cons-name cons-name-src)
                             (cons (symbol-sexp empty-name empty-name-src)
                                   (empty))))))
     (case (extract-rights (map parse-type-var-symbol type-vars))
       [(left v) (left v)]
       [(right type-vars)
        (case (parse-pre-type arg-type)
          [(left v) (left v)]
          [(right arg-type)
           (case (parse-pre-type return-type)
             [(left v) (left v)]
             [(right return-type)
              (right (varargs-definition name type-vars arg-type return-type
                                         (source-span-annotated cons-name cons-name-src)
                                         (source-span-annotated empty-name empty-name-src)))])])])]
    [_
     (left (source-parse-error #"Invalid toplevel definition: unparseable varargs"
                               src))]))

(define (parse-function-definition*
          [function-name : Bytes]
          [type-vars : (List Sexp)]
          [args : (List Sexp)]
          [parts : (List Sexp)]
          [full-src : SourceSpan]) : (Either SourceParseError FunctionDefinition)
  (match-define error
    (lambda ([v : SourceParseError]) : (Either SourceParseError FunctionDefinition)
      (case v
        [(source-parse-error message loc)
         (left
           (source-parse-error
             (bytes-append (varargs list #"Invalid function definition '" function-name #"': "
                                    message))
             loc))])))

  (case (extract-rights (map parse-type-var-symbol type-vars))
    [(left v) (error v)]
    [(right type-vars)
     (case (extract-rights (map parse-arg args))
       [(left v) (error v)]
       [(right parsed-args)
        (case parts
          [(cons (symbol-sexp #":" _) (cons result-type (cons body body*)))
           (case (parse-pre-type result-type)
             [(left v) (error v)]
             [(right result-type)
              (case (parse-block #t body body*)
                [(left v) (error v)]
                [(right body)
                 (right
                   (function-definition
                     function-name
                     type-vars
                     parsed-args
                     result-type
                     body))])])]
          [_
           (error (source-parse-error #"Couldn't parse result type" full-src))])])]))

(define (parse-arg [sexp : Sexp]) : (Either SourceParseError FunctionArg)
  (case sexp
    [(bracket-node (cons pattern (cons (symbol-sexp #":" _) (cons type (empty)))) _)
     (case (parse-pattern pattern)
       [(left v) (left v)]
       [(right pattern)
        (case (parse-pre-type type)
          [(left v) (left v)]
          [(right pre-type)
           (right (function-arg pattern pre-type))])])]
    [_ (left (source-parse-error #"Not a valid argument" (sexp-source-span sexp)))]))


(define (parse-block [tail-position : Boolean] [sexp : Sexp] [sexps : (List Sexp)])
  : (Either SourceParseError Block)
  (parse-block* tail-position sexp sexps (empty)))

(define (parse-block* [tail-position : Boolean]
                      [sexp : Sexp]
                      [sexps : (List Sexp)]
                      [rev-defs : (List BlockDefinition)])
  : (Either SourceParseError Block)
  (case sexps
    [(empty)
     (case (parse-expression tail-position sexp)
       [(left v) (left v)]
       [(right expr)
        (right (block (reverse rev-defs) expr))])]
    [(cons next-sexp sexps)
     (case (parse-block-definition sexp)
       [(left v) (left v)]
       [(right def)
        (parse-block* tail-position next-sexp sexps (cons def rev-defs))])]))


(define (parse-block-definition [sexp : Sexp]) : (Either SourceParseError BlockDefinition)
  (case sexp
    [(node (cons (symbol-sexp #"match-define" _) match-sexps) src)
     (case match-sexps
       [(cons pattern-sexp (cons expr-sexp (empty)))
        (case (parse-pattern pattern-sexp)
          [(left v) (left v)]
          [(right pattern)
           (case (parse-expression #f expr-sexp)
             [(left v) (left v)]
             [(right expr)
              (right (match-def pattern (nothing) expr))])])]
       [(cons pattern-sexp (cons (symbol-sexp #":" _) (cons type-sexp (cons expr-sexp (empty)))))
        (case (parse-pattern pattern-sexp)
          [(left v) (left v)]
          [(right pattern)
           (case (parse-pre-type type-sexp)
             [(left v) (left v)]
             [(right type)
              (case (parse-expression #f expr-sexp)
                [(left v) (left v)]
                [(right expr)
                 (right (match-def pattern (just type) expr))])])])]
       [(cons _ (empty))
        (left (source-parse-error #"match-define: not enough forms" src))]
       [_
        (left (source-parse-error #"match-define: couldn't be parsed" src))])]
    [_ (left (source-parse-error #"Not a valid block definition" (sexp-source-span sexp)))]))

(define (parse-expression [tail-position : Boolean] [sexp : Sexp]) : (Either SourceParseError Expression)
  (case sexp
    [(number-sexp v src) (right (int-literal v src))]
    [(bytes-sexp v src) (right (bytes-literal v src))]
    [(boolean-sexp v src) (right (boolean-literal v src))]
    [(symbol-sexp v src) (right (var-expr v src))]
    [(node (cons (symbol-sexp #"if" _) exprs) src)
     (case exprs
       [(cons cond (cons true (cons false (empty))))
        (either-app4 if-expr
          (parse-expression #f cond)
          (parse-expression tail-position true)
          (parse-expression tail-position false)
          (right/source-parse-error src))]
       [_
        (left (source-parse-error #"If: requires exactly three expressions" src))])]
    [(node (cons (symbol-sexp #"begin" _) exprs) src)
     (case (reverse exprs)
       [(empty)
        (left (source-parse-error #"Begin requires at least one expression" src))]
       [(cons last-expr exprs)
        (either-app3 begin-expr
          (extract-rights (map (lambda ([s : Sexp]) (parse-expression #f s)) (reverse exprs)))
          (parse-expression tail-position last-expr)
          (right/source-parse-error src))])]
    [(node (cons (symbol-sexp #"varargs" _) (cons (symbol-sexp f f-src) exprs)) src)
     (case (extract-rights (map (lambda ([s : Sexp]) (parse-expression #f s)) exprs))
       [(left v) (left v)]
       [(right exprs)
        (right (varargs-app-expr tail-position (source-span-annotated f f-src) exprs src))])]
    [(node (cons (symbol-sexp #"let" _) other-sexps) src)
     (parse-let-sexps tail-position other-sexps src)]
    [(node (cons (symbol-sexp #"case" _) (cons expr clauses)) src)
     (either-app3 case-expr
       (parse-expression #f expr)
       (extract-rights (map (lambda ([s : Sexp]) (parse-case-clause tail-position s))
                            clauses))
       (right/source-parse-error src))]
    [(node (cons (symbol-sexp #"lambda" _) lambda-sexps) src)
     (parse-lambda-sexps lambda-sexps src)]
    [(node (cons (symbol-sexp #"ann" _) (cons pre-type (cons expr (empty)))) src)
     (case (parse-pre-type pre-type)
       [(left v) (left v)]
       [(right pre-type)
        (case (parse-expression tail-position expr)
          [(left v) (left v)]
          [(right expr)
           (right (annotated-expr pre-type expr src))])])]
    [(node (cons (symbol-sexp #"match-define" _) _) src)
     (left (source-parse-error #"Definitions are not valid expressions" src))]
    [(node (cons op-expr arg-exprs) src)
     (case (parse-expression #f op-expr)
       [(left v) (left v)]
       [(right op-expr)
        (case (extract-rights (map (lambda ([s : Sexp]) (parse-expression #f s)) arg-exprs))
          [(left v) (left v)]
          [(right arg-exprs)
           (right (app-expr tail-position op-expr arg-exprs src))])])]
    [(node (empty) src)
     (left (source-parse-error #"Application needs an operator" src))]
    [(bracket-node _ src)
     (left (source-parse-error #"Bracketed nodes are not valid expressions" src))]
    [(brace-node _ src)
     (left (source-parse-error #"Braced nodes are not valid expressions" src))]
    [(keyword-sexp _ src)
     (left (source-parse-error #"Keywords are not valid expressions" src))]))

(define (parse-let-sexps [tail-position : Boolean] [sexps : (List Sexp)] [full-src : SourceSpan])
  : (Either SourceParseError Expression)
  (case sexps
    [(empty)
     (left (source-parse-error #"Let: not enough subparts" full-src))]
    [(cons _ (empty))
     (left (source-parse-error #"Let: not enough subparts" full-src))]
    [(cons bindings (cons body body*))
     (case bindings
       [(node bindings-list src)
        (case bindings-list
          [(cons (bracket-node (cons (symbol-sexp name name-src) (cons expr (empty))) _) (empty))
           (either-app4 let-expr
             (right/source-parse-error (source-span-annotated name name-src))
             (parse-expression #f expr)
             (parse-block tail-position body body*)
             (right/source-parse-error full-src))]
          [_
           (left (source-parse-error #"Let bindings: couldn't be parsed" src))])]
       [_
        (left (source-parse-error #"Let bindings: couldn't be parsed" (sexp-source-span bindings)))])]))

(define (parse-lambda-sexps [sexps : (List Sexp)] [full-src : SourceSpan]) : (Either SourceParseError Expression)
  (case sexps
    [(cons (node arg+tys _)
           (cons (symbol-sexp #":" _)
                 (cons type-expr (cons body body*))))
     (case (parse-pre-type type-expr)
       [(left v) (left v)]
       [(right pre-type)
        (either-app4 lambda-expr
          (extract-rights (map parse-arg arg+tys))
          (right/source-parse-error (just pre-type))
          (parse-block #t body body*)
          (right/source-parse-error full-src))])]
    [(cons (node arg+tys _) (cons body body*))
     (either-app4 lambda-expr
       (extract-rights (map parse-arg arg+tys))
       (right/source-parse-error (ann (Maybe PreType) (nothing)))
       (parse-block #t body body*)
       (right/source-parse-error full-src))]
    [_
     (left (source-parse-error #"Lambda: couldn't be parsed" full-src))]))



(define (parse-case-clause [tail-position : Boolean] [sexp : Sexp]) : (Either SourceParseError CaseClause)
  (case sexp
    [(bracket-node (cons pattern (cons body body*)) _)
     (either-app2 case-clause (parse-pattern pattern) (parse-block tail-position body body*))]
    [_ (left (source-parse-error #"Not a valid case clause" (sexp-source-span sexp)))]))

(define (parse-pattern [sexp : Sexp]) : (Either SourceParseError Pattern)
  (case sexp
    [(symbol-sexp sym src)
     (right
       (if (starts-with? sym #"_")
           (ignore-pattern src)
           (variable-pattern sym src)))]
    [(bytes-sexp v src) (right (bytes-pattern v src))]
    [(number-sexp v src) (right (int-pattern v src))]
    [(node (cons (symbol-sexp name name-src) patterns) src)
     (either-app3 abstraction-pattern
       (right/source-parse-error (source-span-annotated name name-src))
       (extract-rights (map parse-pattern patterns))
       (right/source-parse-error src))]
    [_ (left (source-parse-error #"Not a valid pattern" (sexp-source-span sexp)))]))


(define (parse-module [bodies : (SourceSpanAnnotated (List Sexp))]) : (Either SourceParseError Module)
  (match-define (source-span-annotated bodies all-src) bodies)
  (case bodies
    [(cons (keyword-sexp #"module" _)
           (cons (node module-name module-name-src)
                  (cons (keyword-sexp #"import" _)
                        (cons (brace-node import-sexps _)
                              (cons exports
                                    (cons types
                                          definitions))))))
     (case (parse-module-name (source-span-annotated module-name module-name-src))
       [(left v) (left v)]
       [(right module-name)
        (case (parse-imports import-sexps)
          [(left v) (left v)]
          [(right imports)
           (case (parse-exports/top exports)
             [(left v) (left v)]
             [(right exports)
              (case (parse-types/top types)
                [(left v) (left v)]
                [(right types)
                 (case (extract-rights (map parse-toplevel-definition definitions))
                   [(left v) (left v)]
                   [(right defs)
                    (match-define (tuple2 fun-defs static-defs) (partition-eithers defs))
                    (right (module module-name imports exports types fun-defs static-defs))])])])])])]
    [_ (left (source-parse-error #"Bad module forms" all-src))]))

(define (parse-module-name [forms : (SourceSpanAnnotated (List Sexp))])
  : (Either SourceParseError ModName)
  (match-define (source-span-annotated forms src) forms)
  (case (extract-justs (map parse-symbol forms))
    [(just vs) (right (mod-name vs))]
    [(nothing) (left (source-parse-error #"Bod module name" src))]))

(define (parse-symbol [form : Sexp]) : (Maybe Bytes)
  (case form
    [(symbol-sexp v _) (just v)]
    [_ (nothing)]))
