#:module (yaspl conversions resolve-types)
#:import {
  (bytes)
  (data source-location)
  (dict)
  (either)
  (list)
  (maybe)
  (module-name)
  (prim)
  {(resolved-imports-language)
    {#:types
      [Block ri:Block]
      [BlockDefinition ri:BlockDefinition]
      [CaseClause ri:CaseClause]
      [CondClause ri:CondClause]
      [Export ri:Export]
      [Exports ri:Exports]
      [Expression ri:Expression]
      [FunctionArg ri:FunctionArg]
      [FunctionDefinition ri:FunctionDefinition]
      [Imports ri:Imports]
      [Module ri:Module]
      [Pattern ri:Pattern]
      [PreType ri:PreType]
      [StaticDefinition ri:StaticDefinition]
      [TypeDefinition ri:TypeDefinition]
      [VariantDefinition ri:VariantDefinition]
      [VariantField ri:VariantField]
    }
    {#:values
      [pre-type-source-span ri:pre-type-source-span]
      [type-definition-name* ri:type-definition-name*]
    }
    {#:patterns
      [abstraction-pattern ri:abstraction-pattern]
      [annotated-expr ri:annotated-expr]
      [app-expr ri:app-expr]
      [begin-expr ri:begin-expr]
      [block ri:block]
      [boolean-literal ri:boolean-literal]
      [bytes-literal ri:bytes-literal]
      [bytes-pattern ri:bytes-pattern]
      [case-clause ri:case-clause]
      [case-expr ri:case-expr]
      [cond-clause ri:cond-clause]
      [cond-expr ri:cond-expr]
      [export ri:export]
      [exports ri:exports]
      [fun-pre-type ri:fun-pre-type]
      [function-arg ri:function-arg]
      [function-definition ri:function-definition]
      [if-expr ri:if-expr]
      [ignore-pattern ri:ignore-pattern]
      [imports ri:imports]
      [int-literal ri:int-literal]
      [int-pattern ri:int-pattern]
      [lambda-expr ri:lambda-expr]
      [let-expr ri:let-expr]
      [match-def ri:match-def]
      [module ri:module]
      [type-app-pre-type ri:type-app-pre-type]
      [type-definition ri:type-definition]
      [var-expr ri:var-expr]
      [var-pre-type ri:var-pre-type]
      [varargs-app-expr ri:varargs-app-expr]
      [varargs-definition ri:varargs-definition]
      [variable-pattern ri:variable-pattern]
      [variant-definition ri:variant-definition]
      [variant-field ri:variant-field]
    }
  }
  (tuples)
  (types)
  (yaspl languages resolved-types-language)
}
(export
  (#:types TypeResolutionError)
  (#:values resolve-types type-resolution-error->bytes)
  (#:patterns))
(types
  (define-type Context
    (context
      [types : (Dict Bytes Type)]))

  (define-type TypeResolutionError
    (type-resolution-error [mod-name : ModName] [err : LocalTypeResolutionError]))
  (define-type LocalTypeResolutionError
    (unbound-type-variable [id : Identifier])
    (non-value-kind [t : Type] [source : SourceSpan])
    (type-constructor-bad-arg-kind [source : SourceSpan])
    (type-constructor-bad-number-of-args [source : SourceSpan])
    (type-constructor-bad-constructor [t : Type] [source : SourceSpan])))

(define (resolve-types [mod : ri:Module]) : (Either TypeResolutionError Module)
  (match-define ctx (init-context mod))
  (match-define (ri:module (source-span-annotated name _) imports exports types definitions statics) mod)
  (match-define error
    (lambda ([v : LocalTypeResolutionError]) : (Either TypeResolutionError Module)
      (left (type-resolution-error name v))))
  (case (resolve-types/type-defs types ctx)
    [(left v) (error v)]
    [(right types)
     (case (resolve-types/functions definitions ctx)
       [(left v) (error v)]
       [(right definitions)
        (case (resolve-types/statics statics ctx)
          [(left v) (error v)]
          [(right statics)
           (match-define imports (resolve-types/imports imports))
           (match-define exports (resolve-types/exports exports ctx))
           (right (module name imports exports types definitions statics))])])]))

(define (init-context [mod : ri:Module]) : Context
  (match-define (ri:module (source-span-annotated mod-name _) imports _ type-defs _ _) mod)
  (match-define (ri:imports imported-types _ _ _ _) imports)
  (context
    (type-definitions->types mod-name type-defs imported-types)))

(define (type-definitions->types
          [mod-name : ModName]
          [defs : (List ri:TypeDefinition)]
          [acc : (Dict Bytes Type)]) : (Dict Bytes Type)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (type-definitions->types
       mod-name
       defs
       (dict-add
         acc
         (ri:type-definition-name* def)
         (type-definition->type mod-name def)))]))

(define (type-definition->type [mod-name : ModName] [def : ri:TypeDefinition]) : Type
  (case def
    [(ri:type-definition (identifier name _) (nothing) _)
     (abstract-type mod-name name (empty) (star-kind))]
    [(ri:type-definition (identifier name _) (just vars) _)
     (type-constructor mod-name name (map (lambda ([_v : Bytes]) (star-kind)) vars))]))

(define (resolve-types/exports [e : ri:Exports] [ctx : Context])
  : Exports
  (match-define (ri:exports types values patterns statics) e)
  (exports
    (resolve-types/type-exports types ctx)
    (resolve-types/other-exports values)
    (resolve-types/other-exports patterns)
    (resolve-types/other-exports statics)))

(define (resolve-types/type-exports [exports : (List ri:Export)] [ctx : Context])
  : (List TypeExport)
  (map
    (lambda ([export : ri:Export]) : TypeExport
      (match-define (ri:export (identifier local-name _) (identifier exported-name _)) export)
      (case (context-ref-type ctx local-name)
        [(nothing) (panic #"Unbound export")]
        [(just v)
         (type-export exported-name v)]))
    exports))

(define (resolve-types/other-exports [exports : (List ri:Export)])
  : (List Export)
  (map
    (lambda ([e : ri:Export])
      (match-define (ri:export (identifier local-name _) (identifier exported-name _)) e)
      (export local-name exported-name))
    exports))

(define (resolve-types/statics [statics : (List ri:StaticDefinition)] [ctx : Context])
  : (Either LocalTypeResolutionError (List StaticDefinition))
  (map/failure
    (lambda ([static : ri:StaticDefinition])
      : (Either LocalTypeResolutionError StaticDefinition)
      (case static
        [(ri:varargs-definition
           (identifier name _)
           type-vars arg-type return-type cons-func empty-func)
         (match-define ctx (context-add-var-types ctx type-vars))
         (case (pre-type->value-type arg-type ctx)
           [(left v) (left v)]
           [(right arg-type)
            (case (pre-type->value-type return-type ctx)
              [(left v) (left v)]
              [(right return-type)
               (right (varargs-definition name type-vars arg-type return-type cons-func
                                          empty-func))])])]))
    statics))

(define (resolve-types/type-defs [defs : (List ri:TypeDefinition)] [ctx : Context])
  : (Either LocalTypeResolutionError (List TypeDefinition))
  (map/failure/env resolve-types/type-def defs ctx))

(define (resolve-types/type-def [def : ri:TypeDefinition] [ctx : Context])
  : (Either LocalTypeResolutionError TypeDefinition)
  (match-define (ri:type-definition (identifier name _) vars variants) def)
  (match-define ctx
    (case vars
      [(nothing) ctx]
      [(just vars)
       (context-add-var-types ctx vars)]))
  (case (resolve-types/variants variants ctx)
    [(left v) (left v)]
    [(right variants)
     (right (type-definition name vars variants))]))


(define (resolve-types/variants [defs : (List ri:VariantDefinition)] [ctx : Context])
  : (Either LocalTypeResolutionError (List VariantDefinition))
  (map/failure/env resolve-types/variant defs ctx))

(define (resolve-types/variant [def : ri:VariantDefinition] [ctx : Context])
  : (Either LocalTypeResolutionError VariantDefinition)
  (match-define (ri:variant-definition (identifier name _) fields) def)
  (case (resolve-types/variant-fields fields ctx)
    [(left v) (left v)]
    [(right fields)
     (right (variant-definition name fields))]))


(define (resolve-types/variant-fields [fields : (List ri:VariantField)] [ctx : Context])
  : (Either LocalTypeResolutionError (List VariantField))
  (map/failure/env resolve-types/variant-field fields ctx))

(define (resolve-types/variant-field [def : ri:VariantField] [ctx : Context])
  : (Either LocalTypeResolutionError VariantField)
  (match-define (ri:variant-field (identifier name _) type) def)
  (case (pre-type->value-type type ctx)
    [(left v) (left v)]
    [(right type)
     (right (variant-field name type))]))


(define (resolve-types/functions [defs : (List ri:FunctionDefinition)] [ctx : Context])
  : (Either LocalTypeResolutionError (List FunctionDefinition))
  (map/failure/env resolve-types/function defs ctx))

(define (resolve-types/function [def : ri:FunctionDefinition] [ctx : Context])
  : (Either LocalTypeResolutionError FunctionDefinition)
  (match-define
    (ri:function-definition (identifier name _) type-vars args return-type body)
    def)
  (match-define ctx (context-add-var-types ctx type-vars))
  (case (resolve-types/args args ctx)
    [(left v) (left v)]
    [(right args)
     (case (pre-type->value-type return-type ctx)
       [(left v) (left v)]
       [(right return-type)
        (case (resolve-types/block body ctx)
          [(left v) (left v)]
          [(right body)
           (right (function-definition name type-vars args return-type body))])])]))

(define (resolve-types/args [args : (List ri:FunctionArg)] [ctx : Context])
  : (Either LocalTypeResolutionError (List FunctionArg))
  (map/failure
    (lambda ([arg : ri:FunctionArg]) : (Either LocalTypeResolutionError FunctionArg)
      (match-define (ri:function-arg pattern pre-type) arg)
      (case (resolve-types/pattern pattern ctx)
        [(left v) (left v)]
        [(right pattern)
         (case (pre-type->value-type pre-type ctx)
           [(left v) (left v)]
           [(right type)
            (right (function-arg pattern type))])]))
    args))

(define (resolve-types/exprs [exprs : (List ri:Expression)] [ctx : Context])
  : (Either LocalTypeResolutionError (List Expression))
  (map/failure/env resolve-types/expr exprs ctx))

(define (resolve-types/expr [expr : ri:Expression] [ctx : Context])
  : (Either LocalTypeResolutionError Expression)
  (case expr
    [(ri:lambda-expr args maybe-return-type body src)
     (case (resolve-types/args args ctx)
       [(left v) (left v)]
       [(right args)
        (case (maybe-pre-type->maybe-value-type maybe-return-type ctx)
          [(left v) (left v)]
          [(right maybe-return-type)
           (case (resolve-types/block body ctx)
             [(left v) (left v)]
             [(right body)
              (right (lambda-expr args maybe-return-type body src))])])])]
    [(ri:annotated-expr pre-type expr src)
     (case (pre-type->value-type pre-type ctx)
       [(left v) (left v)]
       [(right type)
        (case (resolve-types/expr expr ctx)
          [(left v) (left v)]
          [(right expr)
           (right (annotated-expr type expr src))])])]
    ;; Recur structurally
    [(ri:var-expr id)
     (right (var-expr id))]
    [(ri:int-literal v src)
     (right (int-literal v src))]
    [(ri:bytes-literal v src)
     (right (bytes-literal v src))]
    [(ri:boolean-literal v src)
     (right (boolean-literal v src))]
    [(ri:if-expr c t f src)
     (case (resolve-types/expr c ctx)
       [(left v) (left v)]
       [(right c)
        (case (resolve-types/expr t ctx)
          [(left v) (left v)]
          [(right t)
           (case (resolve-types/expr f ctx)
             [(left v) (left v)]
             [(right f)
              (right (if-expr c t f src))])])])]
    [(ri:cond-expr clauses final src)
     (case (map/failure/env resolve-types/cond-clause clauses ctx)
       [(left v) (left v)]
       [(right clauses)
        (case (resolve-types/block final ctx)
          [(left v) (left v)]
          [(right final)
           (right (cond-expr clauses final src))])])]
    [(ri:begin-expr void-exprs last-expr src)
     (case (resolve-types/exprs void-exprs ctx)
       [(left v) (left v)]
       [(right void-exprs)
        (case (resolve-types/expr last-expr ctx)
          [(left v) (left v)]
          [(right last-expr)
           (right (begin-expr void-exprs last-expr src))])])]
    [(ri:let-expr (identifier name _) expr body src)
     (case (resolve-types/expr expr ctx)
       [(left v) (left v)]
       [(right expr)
        (case (resolve-types/block body ctx)
          [(left v) (left v)]
          [(right body)
           (right (let-expr name expr body src))])])]
    [(ri:app-expr tail-position op args src)
     (case (resolve-types/expr op ctx)
       [(left v) (left v)]
       [(right op)
        (case (resolve-types/exprs args ctx)
          [(left v) (left v)]
          [(right args)
           (right (app-expr tail-position op args src))])])]
    [(ri:varargs-app-expr tail-position op args src)
     (case (resolve-types/exprs args ctx)
       [(left v) (left v)]
       [(right args)
        (right (varargs-app-expr tail-position op args src))])]
    [(ri:case-expr expr clauses src)
     (case (resolve-types/expr expr ctx)
       [(left v) (left v)]
       [(right expr)
        (case (map/failure/env resolve-types/case-clause clauses ctx)
          [(left v) (left v)]
          [(right clauses)
           (right (case-expr expr clauses src))])])]))


(define (resolve-types/case-clause [clause : ri:CaseClause] [ctx : Context])
  : (Either LocalTypeResolutionError CaseClause)
  (match-define (ri:case-clause pattern body) clause)
  (case (resolve-types/pattern pattern ctx)
    [(left v) (left v)]
    [(right pattern)
     (case (resolve-types/block body ctx)
       [(left v) (left v)]
       [(right body)
        (right (case-clause pattern body))])]))

(define (resolve-types/cond-clause [clause : ri:CondClause] [ctx : Context])
  : (Either LocalTypeResolutionError CondClause)
  (match-define (ri:cond-clause test body src) clause)
  (case (resolve-types/expr test ctx)
    [(left v) (left v)]
    [(right test)
     (case (resolve-types/block body ctx)
       [(left v) (left v)]
       [(right body)
        (right (cond-clause test body src))])]))

(define (resolve-types/block [b : ri:Block] [ctx : Context])
  : (Either LocalTypeResolutionError Block)
  (match-define (ri:block defs expr) b)
  (case
    (map/failure
      (lambda ([def : ri:BlockDefinition])
        : (Either LocalTypeResolutionError BlockDefinition)
        (case def
          [(ri:match-def pattern type expr)
           (case (resolve-types/pattern pattern ctx)
             [(left v) (left v)]
             [(right pattern)
              (case (maybe-pre-type->maybe-value-type type ctx)
                [(left v) (left v)]
                [(right type)
                 (case (resolve-types/expr expr ctx)
                   [(left v) (left v)]
                   [(right expr)
                    (right (match-def pattern type expr))])])])]))
      defs)
    [(left v) (left v)]
    [(right defs)
     (case (resolve-types/expr expr ctx)
       [(left v) (left v)]
       [(right expr)
        (right (block defs expr))])]))

(define (resolve-types/pattern [pattern : ri:Pattern] [ctx : Context])
  : (Either LocalTypeResolutionError Pattern)
  (case pattern
    [(ri:bytes-pattern v src)
     (right (bytes-pattern v src))]
    [(ri:int-pattern v src)
     (right (int-pattern v src))]
    [(ri:variable-pattern id)
     (right (variable-pattern id))]
    [(ri:ignore-pattern src)
     (right (ignore-pattern src))]
    [(ri:abstraction-pattern (identifier name _) patterns src)
     (case (map/failure/env resolve-types/pattern patterns ctx)
       [(left v) (left v)]
       [(right patterns)
        (right (abstraction-pattern name patterns src))])]))

(define (resolve-types/imports [i : ri:Imports]) : Imports
  (case i
    [(ri:imports _types values patterns statics static-info)
     (imports values patterns statics static-info)]))

(define (context-ref-type [ctx : Context] [name : Bytes]) : (Maybe Type)
  (case ctx
    [(context types)
     (dict-ref types name)]))

(define (context-add-type [ctx : Context] [name : Bytes] [type : Type]) : Context
  (case ctx
    [(context types)
     (context (dict-set types name type))]))

(define (context-add-var-types [context : Context] [names : (List Bytes)]) : Context
  (case names
    [(empty) context]
    [(cons name names)
     (context-add-var-types
       (context-add-type context name (var-type name))
       names)]))

(define (pre-type->type [pre : ri:PreType] [context : Context])
  : (Either LocalTypeResolutionError Type)
  (case pre
    [(ri:var-pre-type id)
     (match-define (identifier v _) id)
     (case (context-ref-type context v)
       [(nothing)
        (left (unbound-type-variable id))]
       [(just v) (right v)])]
    [(ri:fun-pre-type type-vars args result _)
     (match-define context (context-add-var-types context type-vars))
     (match-define recur (lambda ([pre : ri:PreType]) (pre-type->value-type pre context)))
     (case (map/failure recur args)
       [(left v) (left v)]
       [(right args)
        (case (recur result)
          [(left v) (left v)]
          [(right result)
           (right (fun-type type-vars args result))])])]
    [(ri:type-app-pre-type cons-id args app-src)
     (match-define (identifier constructor cons-src) cons-id)
     (case (context-ref-type context constructor)
       [(nothing)
        (left (unbound-type-variable cons-id))]
       ;; TODO actually check that the kind of the argument types match the expected kinds
       [(just (type-constructor mod-name name arg-kinds))
        (case (zip args arg-kinds)
          [(just args+kinds)
           (case (map/failure
                   (lambda ([t : (Tuple2 ri:PreType Kind)])
                     : (Either LocalTypeResolutionError Type)
                     (case t
                       [(tuple2 pre kind)
                        (case (pre-type->type pre context)
                          [(left v) (left v)]
                          [(right t)
                           (if (kind=? kind (type->kind t))
                               (right t)
                               (left (type-constructor-bad-arg-kind (ri:pre-type-source-span pre))))])]))
                   args+kinds)
             [(left v) (left v)]
             [(right types)
              (right (abstract-type mod-name name types (star-kind)))])]
          [(nothing)
           (left (type-constructor-bad-number-of-args app-src))])]
       [(just t)
        (left (type-constructor-bad-constructor t cons-src))])]))

(define (maybe-pre-type->maybe-value-type [t : (Maybe ri:PreType)] [ctx : Context])
  : (Either LocalTypeResolutionError (Maybe Type))
  (case t
    [(nothing) (right (nothing))]
    [(just t)
     (case (pre-type->value-type t ctx)
       [(left v) (left v)]
       [(right t) (right (just t))])]))

(define (pre-type->value-type [pre-type : ri:PreType] [ctx : Context])
  : (Either LocalTypeResolutionError Type)
  (case (pre-type->type pre-type ctx)
    [(left v) (left v)]
    [(right type)
     (case (type->kind type)
       [(fun-kind _ _)
        (left (non-value-kind type (ri:pre-type-source-span pre-type)))]
       [(star-kind)
        (right type)]
       [(prim64-kind)
        (right type)])]))

(define (type-resolution-error->bytes [v : TypeResolutionError]) : Bytes
  (match-define (type-resolution-error mod-name error) v)
  (match-define msg
    (case error
      [(unbound-type-variable (identifier v src))
       (bytes-append (varargs list
         (source-span->start-location-bytes src)
         #": Unbound type variable: " v #"\n"))]
      [(non-value-kind type src)
       (bytes-append (varargs list
         (source-span->start-location-bytes src)
         #": Type's kind must correspond to a value, got: "
         (print-type type)
         #"\n"))]
      [(type-constructor-bad-arg-kind src)
       (bytes-append (varargs list
         (source-span->start-location-bytes src)
         #": Kind doesn't match in type constructor application\n"))]
      [(type-constructor-bad-number-of-args src)
       (bytes-append (varargs list
         (source-span->start-location-bytes src)
         #": Number of arguments to type constructor doesn't match.\n"))]
      [(type-constructor-bad-constructor type src)
       (bytes-append (varargs list
         (source-span->start-location-bytes src)
         #": Cannot apply non constructor type: "
         (print-type type)
         #"\n"))]))
  (bytes-append
    (varargs list #"Errors resolving types for module: " (mod-name->bytes mod-name) #"\n\n" msg)))
