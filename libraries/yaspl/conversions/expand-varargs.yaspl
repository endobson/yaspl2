#:module (yaspl conversions expand-varargs)
#:import {
  (libraries languages expanded-varargs-language)
  (list)
  (prim)
  {(yaspl languages resolved-vars-language)
    {#:types
      [CaseClause rv:CaseClause]
      [Expression rv:Expression]
      [FunctionDefinition rv:FunctionDefinition]
      [Module rv:Module]
    }
    {#:patterns
      [app-expr rv:app-expr]
      [begin-expr rv:begin-expr]
      [boolean-literal rv:boolean-literal]
      [bytes-literal rv:bytes-literal]
      [case-clause rv:case-clause]
      [case-expr rv:case-expr]
      [function-definition rv:function-definition]
      [global-var-expr rv:global-var-expr]
      [if-expr rv:if-expr]
      [int-literal rv:int-literal]
      [lambda-expr rv:lambda-expr]
      [let-expr rv:let-expr]
      [local-var-expr rv:local-var-expr]
      [module rv:module]
      [varargs-app-expr rv:varargs-app-expr]
    }
  }
}
(export
  (#:types)
  (#:values expand-varargs)
  (#:patterns))
(types)

(define (expand-varargs [mod : rv:Module]) : Module
  (case mod
    [(rv:module name imports exports funcs datatype-defs)
     (module name imports exports (map expand-varargs/function-definition funcs) datatype-defs)]))

(define (expand-varargs/function-definition [fun : rv:FunctionDefinition]) : FunctionDefinition
  (case fun
    [(rv:function-definition function-name closure-name type-vars args return-type next-var body)
     (function-definition function-name closure-name type-vars args return-type next-var
                          (expand-varargs/expr body))]))

(define (expand-varargs/expr [expr : rv:Expression]) : Expression
  (case expr
    [(rv:varargs-app-expr tail _ empty-func (empty))
     (app-expr tail (global-var-expr empty-func) (empty))]
    [(rv:varargs-app-expr tail cons-func empty-func (cons arg args))
     (match-define inner
       (foldl
         (lambda ([arg : Expression] [acc : Expression])
           (app-expr
             #f
             (global-var-expr cons-func)
             (varargs list arg acc)))
         (reverse (map expand-varargs/expr args))
         (app-expr #f (global-var-expr empty-func) (empty))))
     (app-expr
       tail
       (global-var-expr cons-func)
       (varargs list (expand-varargs/expr arg) inner))]
    ;; Recur structurally
    [(rv:case-expr expr ty clauses)
     (case-expr (expand-varargs/expr expr) ty (map expand-varargs/clause clauses))]
    [(rv:int-literal v)
     (int-literal v)]
    [(rv:bytes-literal v)
     (bytes-literal v)]
    [(rv:boolean-literal v)
     (boolean-literal v)]
    [(rv:local-var-expr v)
     (local-var-expr v)]
    [(rv:global-var-expr v)
     (global-var-expr v)]
    [(rv:if-expr c t f )
     (if-expr (expand-varargs/expr c) (expand-varargs/expr t) (expand-varargs/expr f))]
    [(rv:begin-expr exprs last)
     (begin-expr (map expand-varargs/expr exprs) (expand-varargs/expr last))]
    [(rv:app-expr tail op args)
     (app-expr tail (expand-varargs/expr op) (map expand-varargs/expr args))]
    [(rv:let-expr name expr body)
     (let-expr name (expand-varargs/expr expr) (expand-varargs/expr body))]
    [(rv:lambda-expr args type body)
     (lambda-expr args type (expand-varargs/expr body))]))


(define (expand-varargs/clause [clause : rv:CaseClause]) : CaseClause
  (case clause
    [(rv:case-clause pat body)
     (case-clause pat (expand-varargs/expr body))]))
