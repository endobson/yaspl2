#:module (yaspl conversions resolve-imports)
#:import {
  (bytes)
  (data indexed-set)
  (data source-location)
  (dict)
  (either)
  (join-list)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (resolved-imports-language)
  (top-level-name)
  (tuples)
  {(yaspl languages source-language)
    {#:types
      [Import s:Import]
      [Imports s:Imports]
      [Module s:Module]
    }
    {#:patterns
      [full-imports s:full-imports]
      [import s:import]
      [module s:module]
      [partial-imports s:partial-imports]
    }
  }
}
(export
  (#:types ImportResolutionErrors)
  (#:values resolve-imports import-resolution-errors->bytes resolve-imports/importss)
  (#:patterns))
(types
  (define-type State
    (state
      [types : (BindingsState TypeSignature)]
      [values : (BindingsState ValueSignature)]
      [patterns : (BindingsState PatternSignature)]
      [statics : (BindingsState StaticSignature)]
      [errors : (List ImportResolutionError)]))

  (define-type (BindingsState K)
    (bindings-state [bindings : (Dict Bytes K)] [duplicates : (List Identifier)]))

  (define-type ImportResolutionErrors
    (import-resolution-errors
      [module-name : ModName]
      [errors : (List ImportResolutionError)]))

  (define-type ImportResolutionError
    (non-existent-imports/module [module-name : ModName] [src : SourceSpan])
    (non-existent-imports/bindings
      [module-name : ModName]
      [types : (List Identifier)]
      [values : (List Identifier)]
      [patterns : (List Identifier)]
      [statics : (List Identifier)])
    (duplicate-imports
      [types : (List Identifier)]
      [values : (List Identifier)]
      [patterns : (List Identifier)]
      [statics : (List Identifier)])))

(define (resolve-imports [mod : s:Module] [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either ImportResolutionErrors Module)
  (match-define
    (s:module name/src importss exports definitions)
    mod)
  (match-define (source-span-annotated name _) name/src)
  (case (resolve-imports/importss importss sigs)
    [(left errors)
     (left (import-resolution-errors name errors))]
    [(right imports)
     (right (module name/src imports exports definitions))]))

(define (resolve-imports/importss
          [importss : (List s:Imports)]
          [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either (List ImportResolutionError) Imports)
  (resolve-imports/importss* importss sigs
    (state
      (bindings-state (make-dict bytes-cmp) (empty))
      (bindings-state (make-dict bytes-cmp) (empty))
      (bindings-state (make-dict bytes-cmp) (empty))
      (bindings-state (make-dict bytes-cmp) (empty))
      (empty))))

(define (resolve-imports/importss*
          [importss : (List s:Imports)]
          [sigs : (IndexedSet ModuleSignature ModName)]
          [state : State])
  : (Either (List ImportResolutionError) Imports)
  (case importss
    [(cons import imports)
     (resolve-imports/importss* imports sigs (resolve-imports/import import sigs state))]
    [(empty)
     (case state
       [(state (bindings-state types (empty))
               (bindings-state values (empty))
               (bindings-state patterns (empty))
               (bindings-state statics (empty))
               (empty))
        (right (imports types values patterns statics (make-static-info sigs)))]
       [(state (bindings-state _types (empty))
               (bindings-state _values (empty))
               (bindings-state _patterns (empty))
               (bindings-state _statics (empty))
               errors)
        (left errors)]
       [(state (bindings-state _types dupe-types)
               (bindings-state _values dupe-values)
               (bindings-state _patterns dupe-patterns)
               (bindings-state _statics dupe-statics)
               errors)
        (left
          (cons
            (duplicate-imports dupe-types dupe-values dupe-patterns dupe-statics)
            errors))])]))

(define [K] (add-bindings [imports : (Dict Bytes K)] [src : SourceSpan] [s : (BindingsState K)])
  : (BindingsState K)
  (dict-fold
    imports
    (lambda ([name : Bytes] [value : K] [s : (BindingsState K)])
      (match-define (bindings-state defs dupes) s)
      (case (dict-maybe-add defs name value)
        [(nothing)
         (bindings-state defs (cons (identifier name src) dupes))]
        [(just defs)
         (bindings-state defs dupes)]))
    s))

(define [K] (resolve-partial-imports
              [imports : (List s:Import)]
              [exports : (Dict Bytes K)]
              [s : (BindingsState K)])
  : (Tuple2 (List Identifier) (BindingsState K))
  (foldl
    (lambda ([import : s:Import] [acc : (Tuple2 (List Identifier) (BindingsState K))])
      (match-define (tuple2 unknowns s) acc)
      (match-define (s:import export-name/src local-name/src) import)
      (match-define (identifier export-name _) export-name/src)
      (match-define (identifier local-name _) local-name/src)
      (case (dict-ref exports export-name)
        [(nothing)
         (tuple2 (cons export-name/src unknowns) s)]
        [(just value)
         (match-define (bindings-state defs dupes) s)
         (tuple2
           unknowns
           (case (dict-maybe-add defs local-name value)
             [(nothing)
              (bindings-state defs (cons local-name/src dupes))]
             [(just defs)
              (bindings-state defs dupes)]))]))
    imports
    (tuple2 (ann (List Identifier) (empty)) s)))

(define (resolve-imports/import
          [imports : s:Imports]
          [sigs : (IndexedSet ModuleSignature ModName)]
          [s : State])
  : State
  (match-define (state types values patterns statics errors) s)
  (case imports
    [(s:full-imports (source-span-annotated mod-name mod-src))
     (case (indexed-set-ref sigs mod-name)
       [(nothing)
        (state types values patterns statics
               (cons (non-existent-imports/module mod-name mod-src) errors))]
       [(just (module-signature _ e-values e-patterns e-types e-statics _))
        (state (add-bindings e-types mod-src types)
               (add-bindings e-values mod-src values)
               (add-bindings e-patterns mod-src patterns)
               (add-bindings e-statics mod-src statics)
               errors)])]
    [(s:partial-imports (source-span-annotated mod-name mod-src) i-types i-values i-patterns i-statics)
     (case (indexed-set-ref sigs mod-name)
       [(nothing)
        (state types values patterns statics
               (cons (non-existent-imports/module mod-name mod-src) errors))]
       [(just (module-signature mod-name e-values e-patterns e-types e-statics _))
        (match-define (tuple2 unknown-types types)
          (resolve-partial-imports i-types e-types types))
        (match-define (tuple2 unknown-values values)
          (resolve-partial-imports i-values e-values values))
        (match-define (tuple2 unknown-patterns patterns)
          (resolve-partial-imports i-patterns e-patterns patterns))
        (match-define (tuple2 unknown-statics statics)
          (resolve-partial-imports i-statics e-statics statics))
        (match-define errors
          (case (tuple2 (tuple2 unknown-types unknown-values)
                        (tuple2 unknown-patterns unknown-statics))
            [(tuple2 (tuple2 (empty) (empty))
                     (tuple2 (empty) (empty)))
             errors]
            [_
             (cons (non-existent-imports/bindings mod-name unknown-types unknown-values unknown-patterns
                                                  unknown-statics)
                   errors)]))
        (state types values patterns statics errors)])]))

(define (import-resolution-errors->bytes [me : ImportResolutionErrors]) : Bytes
  (case me
    [(import-resolution-errors mod-name errors)
     (bytes-append
       (append
         (varargs list
           #"Errors resolving imports for module: " (mod-name->bytes mod-name) #"\n\n")
         (map import-resolution-error->bytes errors)))]))

(define (import-resolution-error->bytes [e : ImportResolutionError]) : Bytes
  (case e
    [(non-existent-imports/module import-name src)
     (bytes-append
       (varargs list
         (source-span->start-location-bytes src)
         #": Could not find referenced module: " (mod-name->bytes import-name) #"\n"))]
    [(non-existent-imports/bindings import-name types values patterns statics)
     (match-define unexported-errors
       (lambda ([kind : Bytes] [names : (List Identifier)]) : (JoinList Bytes)
         (concat-map-jl/list
           (lambda ([name/src : Identifier])
             (match-define (identifier name src) name/src)
             (varargs join-list
               (source-span->start-location-bytes src)
               #": " name #" is not an exported " kind
               #" from " (mod-name->bytes import-name) #"\n"))
           names)))
      (bytes-append
        (jl->list
          (varargs append-jl*
            (unexported-errors #"type" types)
            (unexported-errors #"value" values)
            (unexported-errors #"pattern" patterns)
            (unexported-errors #"static" statics))))]
    [(duplicate-imports types values patterns statics)
     (match-define duplicate-import-errors
       (lambda ([kind : Bytes] [names : (List Identifier)]) : (JoinList Bytes)
         (concat-map-jl/list
           (lambda ([name/src : Identifier])
             (match-define (identifier name src) name/src)
             (varargs join-list
               (source-span->start-location-bytes src)
               #": a " kind #" binding for " name #" is already imported\n"))
           names)))
     (bytes-append
       (jl->list
         (varargs append-jl*
           (duplicate-import-errors #"type" types)
           (duplicate-import-errors #"value" values)
           (duplicate-import-errors #"pattern" patterns)
           (duplicate-import-errors #"static" statics))))]))

(define (make-static-info [sigs : (IndexedSet ModuleSignature ModName)])
  : (Dict TopLevelName TopLevelSignature)
  (merge-dicts*
    (make-dict top-level-name-cmp)
    (map module-signature-static-info (indexed-set->list sigs))))
