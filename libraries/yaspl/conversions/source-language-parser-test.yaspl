#:module (source-language-test)
#:import {
  (bytes)
  (data source-location)
  (either)
  (list)
  (maybe)
  (prim)
  (sexp-parser)
  (yaspl conversions source-language-parser)
  (yunit)
}
(export
  (#:values main))
(types)

(define (check-expr-parses [expr : Bytes]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (parse-single-sexp (sourced-bytes (unnamed-source) expr))
      [(left (sexp-error v _)) (just (failure v))]
      [(right sexp)
       (case (parse-expression #f sexp)
         [(left (source-parse-error v _)) (just (failure v))]
         [(right _)
          (nothing)])])))

(define (check-expr-error [expr : Bytes] [substr : Bytes])
  : (-> (Maybe FailedAssertion))
  (lambda ()
    (case (parse-single-sexp (sourced-bytes (unnamed-source) expr))
      [(left (sexp-error v _)) (just (failure v))]
      [(right sexp)
       (case (parse-expression #f sexp)
         [(right _) (just (failure #"Expression succesfully parsed (instead of producing an error)"))]
         [(left (source-parse-error v _))
          (if (starts-with? v substr)
              (nothing)
              (just (failure v)))])])))



(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (yunit/main stderr
    (varargs list
      (test-case #"let: simple-parse"
        (check-expr-parses #"(let ([x 1]) x)"))
      (test-case #"let: definitions"
        (check-expr-parses #"(let ([x 1]) (match-define y x) y)"))
      (test-case #"let: 0 parts"
        (check-expr-error #"(let)" #"Let: not enough subparts"))
      (test-case #"let: 1 part"
        (check-expr-error #"(let ([x 1]))" #"Let: not enough subparts"))
      (test-case #"let: atomic bindings"
        (check-expr-error #"(let x x)" #"Let bindings: couldn't be parsed"))
      (test-case #"let: atomic binding"
        (check-expr-error #"(let (x) x)" #"Let bindings: couldn't be parsed"))
      (test-case #"let: non symbol binding"
        (check-expr-error #"(let ([#\"x\" 1]) x)" #"Let bindings: couldn't be parsed"))
      (test-case #"let: 1 part binding"
        (check-expr-error #"(let ([x]) x)" #"Let bindings: couldn't be parsed"))
      (test-case #"let: 3 part binding"
        (check-expr-error #"(let ([x 1 2]) x)" #"Let bindings: couldn't be parsed"))


      (test-case #"if: simple-parse"
        (check-expr-parses #"(if x y z)"))
      (test-case #"if: 0 parts"
        (check-expr-error #"(if)" #"If: requires exactly three expressions"))
      (test-case #"if: 1 part"
        (check-expr-error #"(if x)" #"If: requires exactly three expressions"))
      (test-case #"if: 2 parts"
        (check-expr-error #"(if x y)" #"If: requires exactly three expressions"))
      (test-case #"if: 4 parts"
        (check-expr-error #"(if w x y z)" #"If: requires exactly three expressions"))
    )))
