#:module (yaspl conversions resolve-vars)
#:import {
  (bytes)
  (data lifted-primitives)
  (dict)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (top-level-name)
  (tuples)
  {(type-checked-language)
    {#:types
      [Block tc:Block]
      [BlockDefinition tc:BlockDefinition]
      [CaseClause tc:CaseClause]
      [CondClause tc:CondClause]
      [DatatypeDefinition tc:DatatypeDefinition]
      [Export tc:Export]
      [Exports tc:Exports]
      [Expression tc:Expression]
      [FunctionArg tc:FunctionArg]
      [FunctionDefinition tc:FunctionDefinition]
      [Imports tc:Imports]
      [Module tc:Module]
      [Pattern tc:Pattern]
      [StaticDefinition tc:StaticDefinition]
      [ValueExport tc:ValueExport]
    }
    {#:values
      [field-descriptor-runtime-index tc:field-descriptor-runtime-index]
      [module-definitions tc:module-definitions]
      [module-imports tc:module-imports]
      [module-name tc:module-name]
      [module-patterns tc:module-patterns]
      [module-static-definitions tc:module-static-definitions]
    }
    {#:patterns
      [abstraction-pattern tc:abstraction-pattern]
      [annotated-expr tc:annotated-expr]
      [app-expr tc:app-expr]
      [begin-expr tc:begin-expr]
      [block tc:block]
      [boolean-literal tc:boolean-literal]
      [bytes-literal tc:bytes-literal]
      [bytes-pattern tc:bytes-pattern]
      [case-clause tc:case-clause]
      [case-expr tc:case-expr]
      [cond-clause tc:cond-clause]
      [cond-expr tc:cond-expr]
      [export tc:export]
      [exports tc:exports]
      [function-arg tc:function-arg]
      [function-definition tc:function-definition]
      [identifier tc:identifier]
      [if-expr tc:if-expr]
      [ignore-pattern tc:ignore-pattern]
      [imports tc:imports]
      [int-literal tc:int-literal]
      [int-pattern tc:int-pattern]
      [lambda-expr tc:lambda-expr]
      [let-expr tc:let-expr]
      [match-def tc:match-def]
      [module tc:module]
      [value-export tc:value-export]
      [var-expr tc:var-expr]
      [varargs-app-expr tc:varargs-app-expr]
      [varargs-definition tc:varargs-definition]
      [variable-pattern tc:variable-pattern]
      [variant-accessor tc:variant-accessor]
      [variant-constructor tc:variant-constructor]
    }
  }
  (types)
  (variant-info)
  (yaspl languages resolved-vars-language)
  (yaspl var)
}
(export
  (#:types)
  (#:values resolve-vars )
  (#:patterns))
(types
  (define-type Environment
    (environment
      [local-variables : (Dict Bytes Var)]
      [global-variables : (Dict Bytes TopLevelName)]
      [global-statics : (Dict Bytes TopLevelStaticInfo)]
      [pattern-variables : (Dict Bytes VariantDestructionInfo)]
      [module-name : ModName]))

  (define-type TopLevelStaticInfo
    (varargs-top-level-info
      [type-vars : (List Bytes)]
      [arg-type : Type]
      [return-type : Type]
      [cons-func : TopLevelName]
      [empty-func : TopLevelName]))

  (define-type State
    (state [counter : VarNumber])))

(define (resolve-vars [mod : tc:Module]) : Module
  (match-define (tc:module name imports exports definitions datatype-definitions _patterns _statics) mod)

  (match-define datatype-definitions : (Dict Bytes DatatypeDefinition)
    (dict-add-all
      (make-dict bytes-cmp)
      (map (lambda ([def : tc:DatatypeDefinition])
             (resolve-vars/datatype-definition def name))
           datatype-definitions)))

  (match-define global-env (setup-value-environment mod datatype-definitions))
  (match-define global-statics
    (setup-static-environment mod global-env))
  (match-define pattern-env
    (setup-pattern-environment mod))
  (match-define env (environment (make-dict bytes-cmp) global-env global-statics pattern-env name))

  (module name
          (resolve-vars/imports imports)
          (resolve-vars/exports exports env)
          (map (lambda ([f : tc:FunctionDefinition]) (resolve-vars/function-definition f env))
               definitions)
          (dict-values datatype-definitions)))

(define (setup-value-environment
          [mod : tc:Module]
          [datatype-definitions : (Dict Bytes DatatypeDefinition)]) : (Dict Bytes TopLevelName)
  (add-all-imported-functions
    (add-locally-defined-functions
      (add-datatype-definitions
        (make-dict bytes-cmp)
        datatype-definitions)
      mod)
    mod))

(define (add-all-imported-functions [env : (Dict Bytes TopLevelName)] [mod : tc:Module])
  : (Dict Bytes TopLevelName)
  (match-define (tc:imports values _ _) (tc:module-imports mod))
  (merge-dicts
    (dict-value-map values
      (lambda ([v : ValueSignature])
        (value-signature-value v)))
    env))

(define (add-locally-defined-functions [env : (Dict Bytes TopLevelName)] [mod : tc:Module])
  : (Dict Bytes TopLevelName)
  (foldl
    (lambda ([def : tc:FunctionDefinition] [env : (Dict Bytes TopLevelName)])
      (case def
        [(tc:function-definition name _ _ _ _)
         (dict-add env name (top-level-name (tc:module-name mod)
                                            (bytes-append (varargs list name #"_closure"))))]))
    (tc:module-definitions mod)
    env))

(define (add-datatype-definitions
          [env : (Dict Bytes TopLevelName)]
          [datatype-definitions : (Dict Bytes DatatypeDefinition)])
  : (Dict Bytes TopLevelName)
  (merge-dicts
    env
    (dict-value-map
      datatype-definitions
      (lambda ([data : DatatypeDefinition])
        (case data
          [(variant-constructor _ _ closure-name _ _ _ _ _ _)
           closure-name]
          [(variant-accessor _ closure-name _ _)
           closure-name])))))

(define (setup-static-environment
          [mod : tc:Module]
          [global-env : (Dict Bytes TopLevelName)])
  : (Dict Bytes TopLevelStaticInfo)
  (add-all-imported-statics
    (add-locally-defined-statics
      (make-dict bytes-cmp)
      mod
      global-env)
    mod))

(define (add-locally-defined-statics
          [env : (Dict Bytes TopLevelStaticInfo)]
          [mod : tc:Module]
          [global-env : (Dict Bytes TopLevelName)])
  : (Dict Bytes TopLevelStaticInfo)
  (dict-add-all
    env
    (map
      (lambda ([def : tc:StaticDefinition]) : (Tuple2 Bytes TopLevelStaticInfo)
        (case def
          [(tc:varargs-definition
             name type-vars arg-type return-type
             (tc:identifier cons-func _) (tc:identifier empty-func _))
           (tuple2 name (varargs-top-level-info type-vars arg-type return-type
                                                (dict-ref/panic global-env cons-func)
                                                (dict-ref/panic global-env empty-func)))]))
      (tc:module-static-definitions mod))))

(define (add-all-imported-statics
          [env : (Dict Bytes TopLevelStaticInfo)]
          [mod : tc:Module])
  : (Dict Bytes TopLevelStaticInfo)
  (match-define (tc:imports _ statics _) (tc:module-imports mod))
  (merge-dicts
    env
    (dict-value-map
      statics
      (lambda ([sig : StaticSignature]) : TopLevelStaticInfo
        (case sig
          [(varargs-signature type-vars arg-type return-type cons-func empty-func)
           (varargs-top-level-info type-vars arg-type return-type cons-func empty-func)])))))

(define (setup-pattern-environment [mod : tc:Module])
  : (Dict Bytes VariantDestructionInfo)
  (dict-value-map
    (tc:module-patterns mod)
    (lambda ([sig : PatternSignature])
      (case sig
        [(pattern-signature _ info) info]))))

(define (resolve-vars/imports [i : tc:Imports]) : Imports
  (match-define (tc:imports _ _ static-info) i)
  (imports static-info))

(define (resolve-vars/exports [e : tc:Exports] [env : Environment]) : Exports
  (case e
    [(tc:exports types values patterns statics)
     (exports
       types
       (map (lambda ([e : tc:ValueExport]) (resolve-vars/value-export e env)) values)
       patterns
       (map (lambda ([e : tc:Export]) (resolve-vars/static-export e env)) statics))]))

(define (resolve-vars/value-export [e : tc:ValueExport] [env : Environment]) : ValueExport
  (case e
    [(tc:value-export local-name exported-name type)
     (value-export exported-name (dict-ref/panic (environment-global-variables env) local-name)
                   type)]))

(define (resolve-vars/static-export [e : tc:Export] [env : Environment]) : StaticExport
  (case e
    [(tc:export local-name exported-name)
     (case (dict-ref/panic (environment-global-statics env) local-name)
       [(varargs-top-level-info type-vars arg-type return-type cons-func empty-func)
        (varargs-export exported-name type-vars arg-type return-type cons-func empty-func)])]))

(define (resolve-vars/function-definition [f : tc:FunctionDefinition] [env : Environment])
  : FunctionDefinition
  (case f
    [(tc:function-definition name type-vars args return-type body)
     (match-define state (state (initial-var-number)))
     (match-define (tuple2 (tuple2 args body) state)
       (resolve-vars/function-body args body env state))
     (match-define (state next-var) state)
     (function-definition
       (top-level-name (environment-module-name env) name)
       (top-level-name (environment-module-name env) (bytes-append (varargs list name #"_closure")))
       type-vars args return-type next-var body)]))

(define (resolve-vars/datatype-definition [f : tc:DatatypeDefinition] [mod-name : ModName])
  : (Tuple2 Bytes DatatypeDefinition)
  (case f
    [(tc:variant-constructor variant-name _ star-field-count i64-field-count fields tag)
     (match-define make-name
       (lambda ([suffix : Bytes])
         (top-level-name mod-name (bytes-append (varargs list variant-name suffix)))))
     (match-define descriptor-name (make-name #"_descriptor"))
     (tuple2
       variant-name
       (variant-constructor
         variant-name
         (make-name #"")
         (make-name #"_closure")
         (make-name #"_const")
         descriptor-name
         (make-name #"_variantname")
         star-field-count
         i64-field-count
         (variant-construction-info
           tag descriptor-name
           (map (lambda ([f : FieldDescriptor])
                  (lifted-int (tc:field-descriptor-runtime-index f)))
                fields))))]
    [(tc:variant-accessor name _type field-offset info)
     (match-define make-name
       (lambda ([suffix : Bytes])
         (top-level-name mod-name (bytes-append (varargs list name suffix)))))
     (tuple2
       name
       (variant-accessor
         (make-name #"")
         (make-name #"_closure")
         field-offset
         info))]))

;; TODO optimize this so that we don't add unnecessary patterns
(define (resolve-vars/function-arg
          [arg : tc:FunctionArg]
          [env : Environment]
          [state : State])
  : (Tuple3 (Tuple2 FunctionArg (Maybe Pattern)) Environment State)
  (case arg
    [(tc:function-arg (tc:variable-pattern (tc:identifier v _)) type)
     (match-define (tuple3 env var state) (environment-add-local env v state))
     (tuple3 (tuple2 (function-arg var type) (nothing)) env state)]
    [(tc:function-arg pattern type)
     (match-define (tuple2 var-num state) (get-next-index state))
     (match-define (tuple3 pattern env state)
       (resolve-vars/pattern pattern env state))
     (tuple3 (tuple2
               (function-arg (var #"arg" var-num) type)
               (just pattern))
             env
             state)]))


(define (resolve-vars/function-body
          [args : (List tc:FunctionArg)]
          [body : tc:Block]
          [env : Environment]
          [state : State])
  : (Tuple2 (Tuple2 (List FunctionArg) Expression) State)
  (match-define (tuple3 args env state) (resolve-vars/function-args args env state))
  (match-define (tuple2 body state) (resolve-vars/block body env state))
  (match-define body
    (foldl
      (lambda ([arg : (Tuple2 FunctionArg (Maybe Pattern))] [body : Expression])
        (case arg
          [(tuple2 (function-arg _var _type) (nothing))
           body]
          [(tuple2 (function-arg var _type) (just pattern))
           (case-expr (local-var-expr var)
                      (varargs list (case-clause pattern body)))]))
      args
      body))
  (tuple2
    (tuple2
      (map
        (lambda ([arg : (Tuple2 FunctionArg (Maybe Pattern))])
          (case arg [(tuple2 fun-arg _) fun-arg]))
        args)
      body)
    state))

(define (resolve-vars/function-args
          [args : (List tc:FunctionArg)]
          [env : Environment]
          [state : State])
  : (Tuple3 (List (Tuple2 FunctionArg (Maybe Pattern))) Environment State)
  (case args
    [(empty)
     (tuple3 (empty) env state)]
    [(cons arg args)
     (match-define (tuple3 arg env state) (resolve-vars/function-arg arg env state))
     (match-define (tuple3 args env state) (resolve-vars/function-args args env state))
     (tuple3 (cons arg args) env state)]))




(define (resolve-vars/block [block : tc:Block] [env : Environment] [state : State])
  : (Tuple2 Expression State)
  (match-define (tc:block defs expr) block)
  (resolve-vars/block* defs expr env state))

(define (resolve-vars/block*
          [defs : (List tc:BlockDefinition)] [body : tc:Expression]
          [env : Environment] [state : State])
  : (Tuple2 Expression State)
  (case defs
    [(empty)
     (resolve-vars/expr body env state) ]
    [(cons (tc:match-def pattern _ expr) defs)
     (match-define (tuple2 expr state) (resolve-vars/expr expr env state))
     (match-define (tuple3 pattern env state) (resolve-vars/pattern pattern env state))
     (match-define (tuple2 rec-expr state) (resolve-vars/block* defs body env state))
     (tuple2 (case-expr expr (varargs list (case-clause pattern rec-expr))) state)]))

(define (resolve-vars/expr [expr : tc:Expression] [env : Environment] [state : State])
  : (Tuple2 Expression State)
  (case expr
    [(tc:var-expr (tc:identifier v _))
     (case (dict-ref (environment-local-variables env) v)
       [(just v)
        (tuple2 (local-var-expr v) state)]
       [(nothing)
        (case (dict-ref (environment-global-variables env) v)
          [(just v)
           (tuple2 (global-var-expr v) state)]
          [(nothing)
           (panic #"Unbound variable")])])]
    [(tc:lambda-expr args return-type body _)
     (match-define (tuple2 (tuple2 args body) state)
       (resolve-vars/function-body args body env state))
     (tuple2 (lambda-expr args return-type body) state)]
    ;; Structural cases
    [(tc:int-literal v _)
     (tuple2 (int-literal v) state)]
    [(tc:bytes-literal v _)
     (tuple2 (bytes-literal v) state)]
    [(tc:boolean-literal v _)
     (tuple2 (boolean-literal v) state)]
    [(tc:if-expr c t f _)
     (match-define (tuple2 c state) (resolve-vars/expr c env state))
     (match-define (tuple2 t state) (resolve-vars/expr t env state))
     (match-define (tuple2 f state) (resolve-vars/expr f env state))
     (tuple2 (if-expr c t f) state)]
    [(tc:cond-expr clauses final _)
     (resolve-vars/cond-clauses clauses final env state)]
    [(tc:begin-expr es e _)
     (match-define (tuple2 es state) (resolve-vars/exprs es env state))
     (match-define (tuple2 e state) (resolve-vars/expr e env state))
     (tuple2 (begin-expr es e) state)]
    [(tc:let-expr name expr body _)
     (match-define (tuple2 expr state) (resolve-vars/expr expr env state))
     (match-define (tuple3 env var state) (environment-add-local env name state))
     (match-define (tuple2 body state) (resolve-vars/block body env state))
     (tuple2 (let-expr var expr body) state)]
    [(tc:case-expr expr clauses _)
     (match-define (tuple2 expr state) (resolve-vars/expr expr env state))
     (match-define (tuple2 clauses state) (resolve-vars/case-clauses clauses env state))
     (tuple2 (case-expr expr clauses) state)]
    [(tc:annotated-expr _ expr _)
     (match-define (tuple2 expr state) (resolve-vars/expr expr env state))
     (tuple2 expr state)]
    [(tc:app-expr tail-position op args _)
     (match-define (tuple2 op state) (resolve-vars/expr op env state))
     (match-define (tuple2 args state) (resolve-vars/exprs args env state))
     (tuple2 (app-expr tail-position op args) state)]
    [(tc:varargs-app-expr tail-position (tc:identifier op _) args _)
     (case (dict-ref/panic (environment-global-statics env) op)
       [(varargs-top-level-info _ _ _ cons-func empty-func)
        (match-define (tuple2 args state) (resolve-vars/exprs args env state))
        (tuple2 (varargs-app-expr tail-position cons-func empty-func args) state)])]))

(define (resolve-vars/exprs [exprs : (List tc:Expression)] [env : Environment] [state : State])
  : (Tuple2 (List Expression) State)
  (case exprs
    [(empty) (tuple2 (empty) state)]
    [(cons e es)
     (match-define (tuple2 e state) (resolve-vars/expr e env state))
     (match-define (tuple2 es state) (resolve-vars/exprs es env state))
     (tuple2 (cons e es) state)]))


(define (resolve-vars/case-clause [c : tc:CaseClause] [env : Environment] [state : State])
  : (Tuple2 CaseClause State)
  (case c
    [(tc:case-clause pat body)
     (match-define (tuple3 pat env state) (resolve-vars/pattern pat env state))
     (match-define (tuple2 expr state) (resolve-vars/block body env state))
     (tuple2 (case-clause pat expr) state)]))

(define (resolve-vars/case-clauses [cs : (List tc:CaseClause)] [env : Environment] [state : State])
  : (Tuple2 (List CaseClause) State)
  (case cs
    [(empty) (tuple2 (empty) state)]
    [(cons c cs)
     (match-define (tuple2 c state) (resolve-vars/case-clause c env state))
     (match-define (tuple2 cs state) (resolve-vars/case-clauses cs env state))
     (tuple2 (cons c cs) state)]))

(define (resolve-vars/cond-clauses
          [clauses : (List tc:CondClause)]
          [final : tc:Block]
          [env : Environment]
          [state : State])
  : (Tuple2 Expression State)
  (case clauses
    [(empty) (resolve-vars/block final env state)]
    [(cons (tc:cond-clause test body _) clauses)
     (match-define (tuple2 test-expr state) (resolve-vars/expr test env state))
     (match-define (tuple2 true-expr state) (resolve-vars/block body env state))
     (match-define (tuple2 false-expr state) (resolve-vars/cond-clauses clauses final env state))
     (tuple2 (if-expr test-expr true-expr false-expr) state)]))

(define (resolve-vars/pattern [p : tc:Pattern] [env : Environment] [state : State])
  : (Tuple3 Pattern Environment State)
  (case p
    [(tc:int-pattern v _)
     (tuple3 (int-pattern v) env state)]
    [(tc:bytes-pattern v _)
     (tuple3 (bytes-pattern v) env state)]
    [(tc:ignore-pattern _)
     (match-define (tuple2 var-num state) (get-next-index state))
     (tuple3 (variable-pattern (var #"_" var-num)) env state)]
    [(tc:variable-pattern (tc:identifier v _))
     (match-define (tuple3 env var state) (environment-add-local env v state))
     (tuple3 (variable-pattern var) env state)]
    [(tc:abstraction-pattern name patterns _)
     (match-define (tuple3 patterns env state) (resolve-vars/patterns patterns env state))
     (tuple3 (abstraction-pattern (dict-ref/panic (environment-pattern-variables env) name) patterns)
             env state)]))

(define (resolve-vars/patterns [ps : (List tc:Pattern)] [env : Environment] [state : State])
  : (Tuple3 (List Pattern) Environment State)
  (case ps
    [(empty) (tuple3 (empty) env state)]
    [(cons p ps)
     (match-define (tuple3 p env state) (resolve-vars/pattern p env state))
     (match-define (tuple3 ps env state) (resolve-vars/patterns ps env state))
     (tuple3 (cons p ps) env state)]))

(define (get-next-index [acc : State]) : (Tuple2 VarNumber State)
  (case acc
    [(state counter)
     (tuple2 counter (state (next-var-number counter)))]))

(define (environment-add-local [env : Environment] [local : Bytes] [state : State])
  : (Tuple3 Environment Var State)
  (match-define (environment locals globals statics patterns name) env)
  (match-define (tuple2 var-num state) (get-next-index state))
  (match-define v (var local var-num))
  (tuple3
    (environment (dict-set locals local v) globals statics patterns name)
    v
    state))
