#:module (yaspl conversions expand-datatypes)
#:import {
  (bytes)
  (data lifted-primitives)
  (dict)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (tuples)
  (types)
  (variant-info)
  (yaspl languages expanded-datatypes-language)
  {(yaspl languages resolved-types-language)
    {#:types
      [Exports rt:Exports]
      [Imports rt:Imports]
      [Module rt:Module]
      [TypeDefinition rt:TypeDefinition]
      [VariantDefinition rt:VariantDefinition]
      [VariantField rt:VariantField]
    }
    {#:values
      [imports-patterns rt:imports-patterns]
    }
    {#:patterns
      [exports rt:exports]
      [imports rt:imports]
      [module rt:module]
      [type-definition rt:type-definition]
      [variant-definition rt:variant-definition]
      [variant-field rt:variant-field]
    }
  }
}
(export
  (#:types)
  (#:values expand-datatypes)
  (#:patterns))
(types

  (define-type ExpandedDatatype
    (expanded-datatype
      [name : Bytes]
      [mod-name : ModName]
      [vars : (List Bytes)]
      [variants : (List ExpandedVariant)]))
  (define-type ExpandedVariant
    (expanded-variant
      [name : Bytes]
      [tag : U8]
      [fields : (List ExpandedField)]
      [destruction-info : VariantDestructionInfo]))
  (define-type ExpandedField
    (expanded-field
      [name : Bytes]
      [type : Type]
      [source-index : Int]
      [runtime-index : Int])))

(define (expand-datatypes [mod : rt:Module]) : Module
  (case mod
    [(rt:module name imports exports types definitions statics)
     (match-define new-types (expand-datatypes* name types))
     (match-define type-defs (expand-datatypes/type-definitions new-types))
     (match-define patterns
       (merge-dicts
         (rt:imports-patterns imports)
         (expand-datatypes/patterns new-types)))
     (match-define imports (expand-datatypes/imports imports))
     (match-define exports (expand-datatypes/exports exports patterns))
     (module name imports exports definitions type-defs patterns statics)]))

(define (expand-datatypes* [mod-name : ModName] [defs : (List rt:TypeDefinition)])
  : (List ExpandedDatatype)
  (map
    (lambda ([def : rt:TypeDefinition])
      (case def
        [(rt:type-definition name type-vars variants)
         (match-define all-tags (build-list (length variants)
                                            (lambda ([i : Int]) (lifted-u8 (u8 i)))))
         (expanded-datatype
           name
           mod-name
           (simplify-type-vars type-vars)
           (map/indexed
             (lambda ([variant : rt:VariantDefinition] [index : Int])
               (case variant
                 [(rt:variant-definition name fields)
                  (match-define tag (u8 index))
                  (match-define field-order
                    (compute-field-order fields))

                  (match-define expanded-fields
                    (map/indexed
                      (lambda ([v : rt:VariantField] [i : Int]) : ExpandedField
                        (case v
                          [(rt:variant-field name type)
                           (case (dict-ref/panic field-order name)
                             [(lifted-int runtime-index)
                              (expanded-field name type i runtime-index)])]))
                      fields))

                  (match-define info
                    (variant-destruction-info
                      tag all-tags
                      (map (lambda ([f : ExpandedField])
                             (lifted-int (expanded-field-runtime-index f)))
                           expanded-fields)))

                  (expanded-variant name tag expanded-fields info)]))
             variants))]))
    defs))

(define (compute-field-order [fields : (List rt:VariantField)]) : (Dict Bytes LiftedInt)
  (match-define acc : (Tuple2 (Dict Bytes LiftedInt) LiftedInt)
    (tuple2 (make-dict bytes-cmp) (lifted-int 0)))
  (match-define acc
    (foldl
      (lambda ([field : rt:VariantField]
               [acc : (Tuple2 (Dict Bytes LiftedInt) LiftedInt)])
        : (Tuple2 (Dict Bytes LiftedInt) LiftedInt)
        (case field
          [(rt:variant-field name type)
           (case (type->kind type)
             [(star-kind)
              (match-define (tuple2 dict lifted-offset) acc)
              (match-define (lifted-int offset) lifted-offset)
              (tuple2
                (dict-add dict name lifted-offset)
                (lifted-int (+ offset 1)))]
             [(prim64-kind) acc]
             [(fun-kind _ _) (panic #"Bad kind")])]))
      fields
      acc))
  (match-define acc
    (foldl
      (lambda ([field : rt:VariantField]
               [acc : (Tuple2 (Dict Bytes LiftedInt) LiftedInt)])
        : (Tuple2 (Dict Bytes LiftedInt) LiftedInt)
        (case field
          [(rt:variant-field name type)
           (case (type->kind type)
             [(prim64-kind)
              (match-define (tuple2 dict lifted-offset) acc)
              (match-define (lifted-int offset) lifted-offset)
              (tuple2
                (dict-add dict name lifted-offset)
                (lifted-int (+ offset 1)))]
             [(star-kind) acc]
             [(fun-kind _ _) (panic #"Bad kind")])]))
      fields
      acc))
  (match-define (tuple2 dict _offset) acc)
  dict)


(define (expand-datatypes/imports [is : rt:Imports]) : Imports
  (case is
    [(rt:imports values _ static-bindings static-info)
     (imports values static-bindings static-info)]))

(define (expand-datatypes/type-definitions [defs : (List ExpandedDatatype)])
  : (List DatatypeDefinition)
  (foldl
    (lambda ([def : ExpandedDatatype] [acc : (List DatatypeDefinition)])
      (case def
        [(expanded-datatype name mod-name type-vars variants)
         (match-define self-type
           (abstract-type mod-name name (map var-type type-vars) (star-kind)))
         (case variants
           [(cons variant (empty))
            (match-define (expanded-variant variant-name _ fields info) variant)

            (variant-definition->accessors
              (variant-definition->constructor acc type-vars self-type variant)
              variant-name type-vars self-type info fields)]
           [_
            (variant-definitions->constructors
              acc type-vars self-type variants)])]))
    defs
    (ann (List DatatypeDefinition) (empty))))

(define (expand-datatypes/patterns [defs : (List ExpandedDatatype)])
  : (Dict Bytes PatternSignature)
  (foldl
    (lambda ([def : ExpandedDatatype] [acc : (Dict Bytes PatternSignature)])
      (match-define (expanded-datatype type-name mod-name type-vars variants) def)
      (match-define all-variant-names (map expanded-variant-name variants))
      (dict-add-all
        acc
        (map
          (lambda ([var : ExpandedVariant])
            (match-define (expanded-variant name _ fields info) var)
            (tuple2
              name
              (pattern-signature
                (source-variant-info name mod-name type-name type-vars
                                     (map expanded-field-type fields)
                                     all-variant-names)
                info)))
          variants)))
    defs
    (ann (Dict Bytes PatternSignature) (make-dict bytes-cmp))))

(define (simplify-type-vars [type-vars : (Maybe (List Bytes))]) : (List Bytes)
  (case type-vars
    [(nothing) (empty)]
    [(just vars) vars]))


(define (variant-definitions->constructors
          [acc : (List DatatypeDefinition)]
          [type-vars : (List Bytes)]
          [self-type : Type]
          [defs : (List ExpandedVariant)]) : (List DatatypeDefinition)
  (case defs
    [(empty) acc]
    [(cons def defs)
     (variant-definitions->constructors
       (variant-definition->constructor acc type-vars self-type def)
       type-vars
       self-type
       defs)]))

(define (variant-definition->constructor
          [acc : (List DatatypeDefinition)]
          [type-vars : (List Bytes)]
          [self-type : Type]
          [def : ExpandedVariant]) : (List DatatypeDefinition)
  (case def
    [(expanded-variant name tag fields _)
     (match-define field-descriptors
       (map
         (lambda ([v : ExpandedField])
           (case v
             [(expanded-field name _ _ runtime-index)
              (field-descriptor name runtime-index)]))
         fields))
     (match-define num-star-fields
       (count
         (lambda ([v : ExpandedField])
           (case v
             [(expanded-field _ type _ _)
              (kind=? (star-kind) (type->kind type))]))
         fields))
     (match-define num-i64-fields
       (count
         (lambda ([v : ExpandedField])
           (case v
             [(expanded-field _ type _ _)
              (kind=? (prim64-kind) (type->kind type))]))
         fields))


     (match-define type
       (fun-type type-vars (map expanded-field-type fields) self-type))
     (cons
       (variant-constructor name type num-star-fields
                            num-i64-fields field-descriptors tag)
       acc)]))

(define (variant-definition->accessors
          [acc : (List DatatypeDefinition)]
          [variant-name : Bytes]
          [type-vars : (List Bytes)]
          [self-type : Type]
          [info : VariantDestructionInfo]
          [fields : (List ExpandedField)]) : (List DatatypeDefinition)
  (case fields
    [(empty) acc]
    [(cons (expanded-field name field-type source-index _) fields)
     (match-define type (fun-type type-vars (varargs list self-type) field-type))
     (variant-definition->accessors
       (cons
         (variant-accessor (bytes-append (varargs list variant-name #"-" name)) type
                           source-index info)
         acc)
       variant-name
       type-vars
       self-type
       info
       fields)]))

(define (expand-datatypes/exports
          [orig-exports : rt:Exports]
          [local-patterns : (Dict Bytes PatternSignature)])
  : Exports
  (match-define (rt:exports types values patterns statics) orig-exports)
  (match-define patterns (expand-datatypes/pattern-exports patterns local-patterns))
  (exports types values patterns statics))

(define (expand-datatypes/pattern-exports [exports : (List Export)]
                                          [patterns : (Dict Bytes PatternSignature)])
  : (List PatternExport)
  (map
    (lambda ([export : Export]) : PatternExport
      (match-define (export local-name exported-name) export)
      (pattern-export exported-name (dict-ref/panic patterns local-name)))
    exports))
