#:module (x86-64-runtime-test)
#:import {
  (bytes)
  (join-list)
  (list)
  (maybe)
  (prim)
  (system-abi)
  (tuples)
  (x86-64-runtime)
  (yaspl assembly-function)
  (yaspl x86-64-assembly)
  (yunit)
}
(export
  (#:values main))
(types)


(define (test-primitives-correct-entry) : (Maybe FailedAssertion)
  (match-define (tuple2 text-fragments _const-fragments)
    (unzip (map prim-assembly-function->fragments (prim-functions (osx-syscall-abi)))))
  (find/maybe
    (lambda ([text : TextFragment]) : (Maybe FailedAssertion)
      (match-define (function-fragment fun-name parts) text)
      (case (jl->list parts)
        [(empty)
         (just (failure (bytes-append (varargs list #"Not enough instructions: " fun-name))))]
        [(cons _inst1 (empty))
         (just (failure (bytes-append (varargs list #"Not enough instructions: " fun-name))))]
        [(cons _inst1 (cons _inst2 _))
         ;; TODO enforce that the first two instructions are as expected
         (nothing)]))
    text-fragments))

(define (main [args : Bytes] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]): Int
  (yunit/main stderr
    (varargs list
      (test-case #"primitives have correct entry" test-primitives-correct-entry))))
