#:module (yaspl debug intermediate-to-html)
#:import {
  (formats html)
  (formats xml)
  (intermediate-expression-printer)
  (intermediate-language)
  (join-list)
  (list)
  (maybe)
  (module-name)
  (pretty-printer)
  (prim)
  (yaspl var)
}
(export
  #:types ()
  #:values (intermediate-to-html)
  #:patterns ())

(types)


(define (intermediate-to-html [mod : Module]) : Node
  (match-define name (mod-name->bytes (module-name mod)))
  (html
    (head
      (varargs list
        (title (single-jl name))
        (style (style-content))))
    (body
      (varargs list
        (h1 (text-node/escape (single-jl name)))
        (h2 (text-node/escape (single-jl #"Function Definitions")))
        (ul/li (map function-definition->html (module-definitions mod)))))))


(define (function-definition->html [f : FunctionDefinition]) : Node
  (match-define (function-definition name type args free-vars body) f)
  (div*
    (varargs list
      (attribute/escape #"class" (single-jl #"glow")))
    (varargs list
      (h3 (text-node/escape (single-jl name)))
      (span*
        (varargs list
          (attribute/escape #"class" (single-jl #"typed-args")))
        (interleave
          (map
            (lambda ([arg-name : Var])
              (span*
                (varargs list
                  (attribute/escape #"class" (single-jl #"typed-arg")))
                (varargs list
                  (span*
                    (varargs list
                      (attribute/escape #"class" (single-jl #"arg")))
                    (varargs list (text-node/escape (single-jl (var->bytes arg-name)))))
                  (text-node/escape (single-jl #" : "))
                  (span*
                    (varargs list
                      (attribute/escape #"class" (single-jl #"arg")))
                    (varargs list (text-node/escape (single-jl #"THE TYPE")))))))
            args)
          (text-node/escape (single-jl #", "))))
      (div*
        (empty)
        (varargs list
          (pre
            (text-node/escape
              (case (pretty-print (print-intermediate-expression body))
                [(nothing) (single-jl #"Unrenderable")]
                [(just content) content]))))))))

(define (style-content) : (JoinList Bytes)
  (list->jl
    (interleave
      (varargs list
        #"div.glow {"
        #"    background-color: lightgreen;"
        #"    transition: background-color 0.3s linear;"
        #"    margin: 8;"
        #"    padding: 4;"
        #"}"
        #""
        #"div.glow:hover {"
        #"    background-color: lightblue;"
        #"}"
        #""
        #"div.args {"
        #"    font: monospace;"
        #""
        #"}"
        #""
        #"div.function-body pre {"
        #"    margin: 0;"
        #""
        #"}"
        #""
        #"span.typed-arg {"
        #""
        #"    border: black;"
        #"    border-style: solid;"
        #"    border-width: 1;"
        #"    border-radius: 4px;"
        #""
        #"    padding: 0 2;"
        #"}"
        #""
        #"span.typed-args > span.arg-separator {"
        #""
        #"}"
        #""
        #""
        #"body {"
        #"    margin: 0 8;"
        #"}"
        #""
        #"h2 {"
        #"    margin: 0;"
        #"}"
        #"h3 {"
        #"    margin: 0;"
        #"}")
      #"\n")))
