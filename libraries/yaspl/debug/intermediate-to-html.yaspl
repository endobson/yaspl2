#:module (yaspl debug intermediate-to-html)
#:import {
  (formats html)
  (formats xml)
  (intermediate-language)
  (join-list)
  (list)
  (module-name)
  (prim)
}
(export
  #:types ()
  #:values (intermediate-to-html)
  #:patterns ())

(types)


(define (intermediate-to-html [mod : Module]) : Node
  (match-define name (mod-name->bytes (module-name mod)))
  (html
    (head (cons (title (single-jl name)) (empty)))
    (body
      (varargs list
        (h1 (text-node/escape (single-jl name)))
        (h2 (text-node/escape (single-jl #"Data Types")))
        (ul/li (map type-definition->html (module-types mod)))
        (h2 (text-node/escape (single-jl #"Function Definitions")))
        (ul/li (map function-definition->html (module-definitions mod)))))))


(define (function-definition->html [f : FunctionDefinition]) : Node
  (match-define (function-definition name type args free-vars body) f)
  (div*
    (empty)
    (varargs list
      (text-node/escape (single-jl name))
      (ul*
        (varargs list
          (attribute/escape #"style" (single-jl #"display: flex;")))
        (map
          (lambda ([arg : Bytes])
            (li*
              (varargs list
                (attribute/escape #"style" (single-jl #"list-style-type: none;")))
              (varargs list
                (div*
                  (varargs list
                    (attribute/escape #"style"
                      (single-jl #"padding: 2;")))
                  (varargs list (text-node/escape (single-jl arg)))))))
          args)))))

(define (type-definition->html [t : TypeDefinition]) : Node
  (match-define (type-definition name type-binding type-vars constructed-type variants) t)
  (div*
    (empty)
    (varargs list
      (text-node/escape (single-jl name))
      (ul/li (map variant->html variants)))))

(define (variant->html [v : VariantDefinition]) : Node
  (match-define (variant-definition name tag fields) v)
  (text-node/escape (single-jl name)))
