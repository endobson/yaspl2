#:module (yaspl mangle-names)
#:import {
  (bytes)
  (list)
  (maybe)
  (module-name)
  (prim)
  (top-level-name)
}
(export
  (#:values
     mangle-top-level-name))
(types)

;; TODO remove initial y once starting with an 'l' is not an issue
(define (mangle-top-level-name [t : TopLevelName]) : Bytes
  (match-define (top-level-name m l) t)
  (case (mod-name-parts m)
    [(cons #"prim" (empty))
     (bytes-append (varargs list #"yprim_" l))]
    [mod-parts
     (bytes-append
       (cons #"y"
         (append*
           (interleave
             (map
               (lambda ([n : Bytes]) (mangle-name/helper n 0 0))
               (append mod-parts (varargs list l)))
             (varargs list #"_")))))]))

;; Takes a byte and mangles it if necessary
(define (maybe-mangle-byte [v : U8]) : (Maybe Bytes)
  (case (u8->s64 v)
    [45 (just #"_H_")] ;; -
    [42 (just #"_P_")] ;; *
    [47 (just #"_S_")] ;; /
    [60 (just #"_L_")] ;; <
    [61 (just #"_E_")] ;; =
    [62 (just #"_G_")] ;; >
    [63 (just #"_Q_")] ;; ?
    [33 (just #"_B_")] ;; !
    [58 (just #"_C_")] ;; :
    [95 (just #"_U_")] ;; _
    [_ (nothing)]))

(define (mangle-name/helper [name : Bytes] [start-index : Int] [index : Int]) : (List Bytes)
  (if (= index (bytes-length name))
      (varargs list (subbytes name start-index index))
      (let ([next-index (+ 1 index)])
        (case (maybe-mangle-byte (bytes-ref name index))
          [(nothing) (mangle-name/helper name start-index next-index)]
          [(just escaped)
           (cons
             (subbytes name start-index index)
             (cons
               escaped
               (mangle-name/helper name next-index next-index)))]))))
