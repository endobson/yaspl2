#:module (x86-64-runtime)
#:import {
  (bytes)
  (join-list)
  (list)
  (prim)
  (prim-names)
  (system-abi)
  (top-level-name)
  (tuples)
  (yaspl assembly-function)
  (yaspl mangle-names)
  (yaspl x86-64-assembly)
}
(export
  (#:values yaspl-runtime prim-function-fragments))
(types)

(define (yaspl-runtime [main-function-name : TopLevelName] [abi : SystemAbi]) : AssemblyFragments
  (match-define syscall-abi : SyscallAbi
    (case abi
      [(osx-abi) (osx-syscall-abi)]
      [(linux-abi) (linux-syscall-abi)]
      [(yasplos-abi) (panic #"Syscalls not supported")]))
  (match-define (tuple2 text-fragments const-fragments)
    (unzip (prim-function-fragments syscall-abi)))

  (match-define subroutine-text-fragments
    (prim-subroutine-fragments syscall-abi))

  (assembly-fragments
    (append*
      (varargs list
        (start-function-fragments main-function-name syscall-abi)
        subroutine-text-fragments
        text-fragments))
    const-fragments
    (empty)))

(define (start-function-fragments [main-function-name : TopLevelName] [abi : SyscallAbi])
  : (List TextFragment)
  (varargs list
    (let ([start-name
            (case abi
              [(osx-syscall-abi) #"start"]
              [(linux-syscall-abi) #"_start"])])
      (function-fragment
        start-name
        (named-block (bytes-append (varargs list start-name #"_0"))
          (varargs join-list
            (jmp #"start_break")))))

    (function-fragment
      #"start_break"
      (varargs append-jl*
        (named-block #"start_break_0"
          (varargs append-jl*
            (varargs join-list
              ;; Allocate Heap (Call mmap)
              ;; No fixed address desired
              (movq (imm64/s32 0) (r64m-reg (rdi)))
              ;; We want a large heap but cannot load more than an 32 bits
              ;; currently so do a multiplication

              ;; On osx this is 8k * 1MiB = 8GiB
              ;; On linux this is 2k * 1MiB = 2GiB
              ;; 2^20 = 1MiB
              (movq (imm64/s32 #x200000) (r64m-reg (rsi)))
              (case abi
                [(osx-syscall-abi)
                 (movq (imm64/s32 #x2000) (r64m-reg (rax)))] ;; 2^13 = 8k
                [(linux-syscall-abi)
                 (movq (imm64/s32 #x800) (r64m-reg (rax)))]) ;; 2^11 = 2k
              (imulq (rax) (rsi))
              ;; 0x1 = PROT_READ
              ;; 0x2 = PROT_WRITE
              ;; 0x4 = PROT_EXEC
              (movq (imm64/s32 #x7) (r64m-reg (rdx)))
              (case abi
                [(osx-syscall-abi)
                 ;; 0x0002 = MAP_PRIVATE
                 ;; 0x1000 = MAP_ANON
                 (movq (imm64/s32 #x1002) (r64m-reg (r10)))]
                [(linux-syscall-abi)
                 ;; 0x0002 = MAP_PRIVATE
                 ;; 0x0020 = MAP_ANON
                 (movq (imm64/s32 #x0022) (r64m-reg (r10)))])
              ;; FD = -1 for no FD
              (movq (imm64/s32 (- 0 1)) (r64m-reg (r8)))
              ;; offset which is ignored because of MAP_ANON
              (movq (imm64/s32 0) (r64m-reg (r9)))
              (case abi
                [(osx-syscall-abi)
                 ;; 0xC5 is mmap, plus 0x2000000 because xnu
                 (movq (imm64/s32 #x20000C5) (r64m-reg (rax)))]
                [(linux-syscall-abi)
                 ;; 0x09 is mmap
                 (movq (imm64/s32 #x09) (r64m-reg (rax)))])
              (syscall))
            (case abi
              [(osx-syscall-abi)
               (single-jl (jb #"yprim_start_panic"))]
              [(linux-syscall-abi)
               (varargs join-list
                 (cmpq (imm64/s32 0) (r64m-reg (rax)))
                 (jl #"yprim_start_panic"))])
            (varargs join-list
              ;; Save heap to %r15 which is our bump pointer
              (movq (r64mi-reg (rax)) (r64m-reg (r15)))
              ;; Save initial value to r14 for setting up the thread control block later.
              (movq (r64mi-reg (rax)) (r64m-reg (r14)))

              ;; Ignore number of args as we want to reuse code for environment.
              (addq (imm64/s32 8) (r64m-reg (rsp)))
              ;; Clear direction for all the scans that will be done.
              (cld)

              ;; Save start of args stack point in rbp so that we can iterate over the args
              ;; multiple times.
              (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))

              ;; Initialize r8 (our accumuulator) to zero.
              (movq (imm64/s32 0) (r64m-reg (r8)))
              (jmp #"start_count_args_size_test"))))

        ;; This loop will compute the size of the args including the null bytes.
        ;; r8 is the accumulator of the sizes.
        (named-block #"start_count_args_size_test"
          (varargs join-list
            (popq (r64m-reg (rdi))) ; rdi is now the current string
            (cmpq (imm64/s32 0) (r64m-reg (rdi)))
            (je #"start_count_args_size_end")))

        (named-block #"start_count_arg_size_body"
          (varargs join-list
            (movq (imm64/s32 0) (r64m-reg (rax)))
            ;; Assumption: Strings cannot be longer than 2^64-1
            ;; Loads treat the immediate as a 32 bit signed number, which is sign extended.
            ;; Then repne-scasb treats it as unsigned which means -1 => 2^64-1
            (movq (imm64/s32 (- 0 1)) (r64m-reg (rcx)))
            (repne-scasb)
            ;; rcx is now -1 - string-length (including null byte).
            ;; Use bitwise-negation to negate it and add 1, getting the string length
            (notq (rcx))
            (addq (r64mi-reg (rcx)) (r64m-reg (r8)))

            (jmp #"start_count_args_size_test")))

        (named-block #"start_count_args_size_end"
          (varargs join-list

            ;; Allocate a byte vector long enough to hold all the args and put it in r13
            (movq (r64mi-reg (r15)) (r64m-reg (r13)))

            ;; Write the tag
            (leaq/rip-rel (bytes-variant-descriptor-symbol) (r9))
            (movq (r64mi-reg (r9)) (r64m-mem (mem (r15) 0)))
            ;; Write the size
            (movq (r64mi-reg (r8)) (r64m-mem (mem (r15) 8)))
            (addq (imm64/s32 16) (r64m-reg (r15)))

            ;; Set up r9 to point at where we need to copy bytes to.
            (movq (r64mi-reg (r15)) (r64m-reg (r9)))

            ;; Advance allocation pointer over reserved memory, and 8byte align it.
            (addq (r64mi-reg (r8)) (r64m-reg (r15)))
            (addq (imm64/s32 7) (r64m-reg (r15)))
            (andq (imm64/s32 (- 0 8)) (r64m-reg (r15)))

            ;; Reset stack pointer
            (movq (r64mi-reg (rbp)) (r64m-reg (rsp)))

            (jmp #"start_copy_args_test")))

        ;; This loop will set the bytes value at r13 to be all the args concatenated
        ;; r9 is the current point to write to.
        (named-block #"start_copy_args_test"
          (varargs join-list
            (popq (r64m-reg (r8))) ; r8 is now the current string
            (cmpq (imm64/s32 0) (r64m-reg (r8)))
            (je #"start_copy_args_end")))

        (named-block #"start_copy_arg_body"
          (varargs join-list
            (movq (r64mi-reg (r8)) (r64m-reg (rdi)))
            (movq (imm64/s32 0) (r64m-reg (rax)))
            ;; Assumption: Strings cannot be longer than 2^64-1
            ;; Loads treat the immediate as a 32 bit signed number, which is sign extended.
            ;; Then repne-scasb treats it as unsigned which means -1 => 2^64-1
            (movq (imm64/s32 (- 0 1)) (r64m-reg (rcx)))
            (repne-scasb)
            ;; rcx is now -1 - string-length (including null byte).
            ;; Use bitwise-negation to negate it and add 1, getting the string length
            (notq (rcx))

            ;; Copy that many bytes over
            (movq (r64mi-reg (r8)) (r64m-reg (rsi)))
            (movq (r64mi-reg (r9)) (r64m-reg (rdi)))
            (rep-movsb)
            (movq (r64mi-reg (rdi)) (r64m-reg (r9)))

            (jmp #"start_copy_args_test")))

        (named-block #"start_copy_args_end"
          (varargs join-list
            ;; Call main and then exit
            (jmp #"start_call_main")))

        (named-block #"yprim_start_panic"
          (varargs join-list
            (ud2)))))

    (function-fragment
      #"start_call_main"
      (named-block #"start_call_main_0"
        (varargs join-list
          ;; Set up the thread control block
          (subq (imm64/s32 #x08) (rsp))
          ;; Make our initial allocation look like 2 Mebibytes.
          (addq (imm64/s32 #x200000) (r64m-reg (r14)))
          (movq (r64mi-reg (r14)) (r64m-mem (mem (rsp) 0)))
          (movq (r64mi-reg (rsp)) (r64m-reg (r14)))

          ;; Set up initial base pointer
          (movq (imm64/s32 0) (r64m-reg (rbp)))
          ;; Set up the arguments
          (movq (r64mi-reg (r13)) (r64m-reg (rdi)))
          (movq (imm64/s32 0) (r64m-reg (rsi)))
          (movq (imm64/s32 1) (r64m-reg (rdx)))
          (movq (imm64/s32 2) (r64m-reg (rcx)))
          (movq (r64mi-reg (r13)) (r64m-reg (r8)))
          (leaq/rip-rel (mangle-top-level-name main-function-name) (r11))
          (call/indirect (r64m-mem (mem (r11) 8)))
          ;; Closure is still on the stack
          (movq (r64mi-reg (rax)) (r64m-reg (rdi)))
          (case abi
            [(osx-syscall-abi)
             ;; #x01 is exit, plus 0x2000000 because xnu
             (movq (imm64/s32 #x2000001) (r64m-reg (rax)))]
            [(linux-syscall-abi)
             ;; #x3C is exit
             (movq (imm64/s32 #x3C) (r64m-reg (rax)))])
          (syscall))))))

(define (prim-syscall
          [name : Bytes]
          [osx-syscall-number : Int]
          [linux-syscall-number : Int]
          [abi : SyscallAbi]
          [body : (JoinList Instruction)])
 : (Tuple2 TextFragment ConstFragment)
 (prim-assembly-function/panic name
   (append-jl
     body
     (case abi
       [(osx-syscall-abi)
        (varargs join-list
          (movq (imm64/s32 (+ #x2000000 osx-syscall-number)) (r64m-reg (rax)))
          (syscall)
          (jb (bytes-append (varargs list #"yprim_" name #"_panic")))
          (ret))]
       [(linux-syscall-abi)
        (varargs join-list
          (movq (imm64/s32 linux-syscall-number) (r64m-reg (rax)))
          (syscall)
          (cmpq (imm64/s32 0) (r64m-reg (rax)))
          (jl (bytes-append (varargs list #"yprim_" name #"_panic")))
          (ret))]))))

;; write-bytes
(define (write-bytes-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"write_bytes" #x04 #x01 abi
    (varargs join-list
      ;; Swap %rdi and %rsi
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (movq (r64mi-reg (rsi)) (r64m-reg (rdi)))
      (movq (r64mi-reg (rax)) (r64m-reg (rsi)))

      ;; %rdi is now the file descriptor
      ;; Make %rsi the start of the buffer
      (leaq (scaled (rsi) (scale-1) (rdx) 16) (rsi))
      ;; Make %rdx the length to write
      (subq (r64mi-reg (rdx)) (rcx))
      (movq (r64mi-reg (rcx)) (r64m-reg (rdx))))))

;; read-bytes
(define (read-bytes-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"read_bytes" #x03 #x00 abi
    (varargs join-list
      ;; Swap %rdi and %rsi
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (movq (r64mi-reg (rsi)) (r64m-reg (rdi)))
      (movq (r64mi-reg (rax)) (r64m-reg (rsi)))

      ;; %rdi is the file descriptor
      ;; Make %rsi the start of the buffer
      (leaq (scaled (rsi) (scale-1) (rdx) 16) (rsi))
      ;; Make %rdx the length to read
      (subq (r64mi-reg (rdx)) (rcx))
      (movq (r64mi-reg (rcx)) (r64m-reg (rdx))))))

;; open-input-file
(define (open-input-file-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"open_input_file" #x05 #x02 abi
    (varargs join-list
      ;; Make %rdi point at start of null terminated path
      (addq (imm64/s32 16) (r64m-reg (rdi)))
      (movq (imm64/s32 0) (r64m-reg (rsi)))))) ;; 0 is read only

;; open-output-file
(define (open-output-file-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"open_output_file" #x05 #x02 abi
    (varargs join-list
      ;; Make %rdi point at start of null terminated path
      (addq (imm64/s32 16) (r64m-reg (rdi)))
      (case abi
        [(osx-syscall-abi)
         ;; 0x01 is write only, 0x0a00 is exclusive create
         (movq (imm64/s32 #x0a01) (r64m-reg (rsi)))]
        [(linux-syscall-abi)
         ;; 0x01 is write only, 0xC0 is exclusive create
         (movq (imm64/s32 #xC1) (r64m-reg (rsi)))])
      (movq (imm64/s32 504) (r64m-reg (rdx)))))) ;; 770 for mode

;; close-output-port
;; close-input-port
(define (close-port-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"close_port" #x06 #x03 abi
    (empty-jl)))

;; delete-file
(define (delete-file-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"delete_file" #x0a #x57 abi
    (varargs join-list
      ;; Make %rdi point at start of null terminated path
      (addq (imm64/s32 16) (r64m-reg (rdi))))))

;; make-directory
(define (make-director-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"make_directory" #x88 #x53 abi
    (varargs join-list
      ;; Make %rdi point at start of null terminated path
      (addq (imm64/s32 16) (r64m-reg (rdi)))
      (movq (imm64/s32 504) (r64m-reg (rsi)))))) ;; 770 for mode


;; set-file-or-directory-permissions
(define (set-file-or-directory-permissions-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"set_file_or_directory_permissions" #x0f #x5a abi
    (varargs join-list
      ;; Make %rdi point at start of null terminated path
      (addq (imm64/s32 16) (r64m-reg (rdi)))
      ;; %rsi is already the permissions
      )))

;; socket
(define (socket-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"socket" #x61 #x29 abi
    (empty-jl
      ;; Argument 1: domain
      ;; Argument 2: type
      ;; Argument 3: protocol
      )))

;; bind
(define (bind-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"bind" #x68 #x31 abi
    (varargs join-list
      ;; Argument 1: socket
      ;; Argument 2: sockaddr
      ;; Argument 3: length
      (addq (imm64/s32 16) (r64m-reg (rsi))))))

;; sendto
(define (sendto-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"sendto" #x85 #x2c abi
    (varargs join-list
      ;; Argument 1: socket
      ;; Argument 2: buffer
      ;; Argument 3: buffer-length
      ;; Argument 4: flags
      ;; Argument 5: sockaddr
      ;; Argument 6: sockaddr-length
      (addq (imm64/s32 16) (r64m-reg (rsi)))
      (addq (imm64/s32 16) (r64m-reg (r8)))
      (movq (r64mi-reg (rcx)) (r64m-reg (r10))))))

;; recvfrom
(define (recvfrom-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"recvfrom" #x1d #x2d abi
    (varargs join-list
      ;; Argument 1: socket
      ;; Argument 2: buffer
      ;; Argument 3: buffer-length
      ;; Argument 4: flags
      ;; Argument 5: sockaddr
      ;; Argument 6: sockaddr-length
      (addq (imm64/s32 16) (r64m-reg (rsi)))
      (addq (imm64/s32 16) (r64m-reg (r8)))
      (addq (imm64/s32 16) (r64m-reg (r9)))
      (movq (r64mi-reg (rcx)) (r64m-reg (r10))))))

;; connect
(define (connect-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"connect" #x62 #x2a abi
    (varargs join-list
      ;; Argument 1: socket
      ;; Argument 2: sockaddr
      ;; Argument 3: sockaddr-length
      (addq (imm64/s32 16) (r64m-reg (rsi))))))

;; shutdown
(define (shutdown-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"shutdown" #x86 #x30 abi
    (empty-jl
      ;; Argument 1: socket
      ;; Argument 2: how
      )))

;; listen
(define (listen-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"listen" #x6A #x32 abi
    (empty-jl
      ;; Argument 1: socket
      ;; Argument 2: backlog
      )))

;; accept
(define (accept-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"accept" #x1E #x2b abi
    (varargs join-list
      ;; Argument 1: socket
      ;; Argument 2: sockaddr
      ;; Argument 3: sockaddr-length
      (addq (imm64/s32 16) (r64m-reg (rsi)))
      (addq (imm64/s32 16) (r64m-reg (rdx))))))

;; setsockopt
(define (setsockopt-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"setsockopt" #x69 #x36 abi
    (varargs join-list
      ;; Argument 1: socket
      ;; Argument 2: level
      ;; Argument 3: option name
      ;; Argument 4: option value
      ;; Argument 5: option length
      (movq (r64mi-reg (rcx)) (r64m-reg (r10)))
      (addq (imm64/s32 16) (r64m-reg (r10))))))

;; ioctl
(define (ioctl-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-syscall #"ioctl" #x36 #x10 abi
    (varargs join-list
      ;; Make %rdx point at the actual buffer
      (addq (imm64/s32 16) (r64m-reg (rdx))))))

;; Mach calls

;; mach_task_self
(define (mach-task-self-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"mach_task_self"
    (varargs join-list
      (movq (imm64/s32 #x100001c) (r64m-reg (rax)))
      (syscall)
      (cmpq (imm64/s32 0) (r64m-reg (rax)))
      (je #"yprim_mach_task_self_panic")
      (ret))))

;; mach_thread_self
(define (mach-thread-self-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"mach_thread_self"
    (varargs join-list
      (movq (imm64/s32 #x100001b) (r64m-reg (rax)))
      (syscall)
      (cmpq (imm64/s32 0) (r64m-reg (rax)))
      (je #"yprim_mach_thread_self_panic")
      (ret))))


;; mach_reply_port
(define (mach-reply-port-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"mach_reply_port"
    (varargs join-list
      (movq (imm64/s32 #x100001a) (r64m-reg (rax)))
      (syscall)
      (cmpq (imm64/s32 0) (r64m-reg (rax)))
      (je #"yprim_mach_reply_port_panic")
      (ret))))


;; mach_port_mod_refs
(define (mach-port-mod-refs-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"mach_port_mod_refs"
    (varargs join-list
      ;; Argument 1: task
      ;; Argument 2: port
      ;; Argument 3: right
      ;; Argument 4: delta
      (movq (r64mi-reg (rcx)) (r64m-reg (r10)))
      (movq (imm64/s32 #x1000013) (r64m-reg (rax)))
      (syscall)
      (cmpq (imm64/s32 0) (r64m-reg (rax)))
      (jne #"yprim_mach_port_mod_refs_panic")
      (ret))))

;; mach_msg
(define (mach-msg-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"mach_msg"
    (varargs join-list
      (movq (r64mi-mem (mem (rax) 0)) (r64m-reg (rax))) ;; Notify Port
      (movq (r64mi-reg (rcx)) (r64m-reg (r10)))

      (addq (imm64/s32 16) (r64m-reg (rdi))) ;; Adjust past buffer's length field
      (pushq (r64mi-reg (rax))) ;; Push back the notify port
      (pushq (imm64/s32 0)) ;; Dummy Return Address
      (movq (imm64/s32 #x100001f) (r64m-reg (rax)))
      (syscall)
      (cmpq (imm64/s32 0) (r64m-reg (rax)))
      (jne #"yprim_mach_msg_panic")
      (addq (imm64/s32 #x10) (r64m-reg (rsp))) ;; 2 pop
      (ret))))

;; and
(define (and-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"and"
    (varargs join-list
      (andq (r64mi-reg (rdi)) (r64m-reg (rsi)))
      (movq (r64mi-reg (rsi)) (r64m-reg (rax)))
      (ret))))

;; or
(define (or-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"or"
    (varargs join-list
      (orq (rdi) (rsi))
      (movq (r64mi-reg (rsi)) (r64m-reg (rax)))
      (ret))))

;; not
(define (not-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"not"
    (varargs join-list
      (xorq (imm64/s32 1) (rdi))
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; make-bytes
(define (make-bytes-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"make_bytes"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      ;; Add 16 bytes for the tag/length, and a bit more to keep the next allocation 8 byte aligned
      (addq (imm64/s32 23) (r64m-reg (rax)))
      (andq (imm64/s32 (- 0 8)) (r64m-reg (rax)))
      (call #"yprim_heap_allocate")
      ;; Rounded Buffer with tag and length space is in rax
      ;; Write the tag and size
      (leaq/rip-rel (bytes-variant-descriptor-symbol) (rdx))
      (movq (r64mi-reg (rdx)) (r64m-mem (mem (rax) 0)))
      (movq (r64mi-reg (rdi)) (r64m-mem (mem (rax) 8)))

      ;; Do a zero fill of the buffer space
      (movq (r64mi-reg (rax)) (r64m-reg (rdx)))
      (movq (r64mi-reg (rdi)) (r64m-reg (rcx)))
      (movq (r64mi-reg (rax)) (r64m-reg (rdi)))
      (addq (imm64/s32 16) (r64m-reg (rdi)))
      (movq (imm64/s32 0) (r64m-reg (rax)))
      (cld)
      (rep-stosb)
      (movq (r64mi-reg (rdx)) (r64m-reg (rax)))
      (ret))))

;; void
(define (void-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"void"
    (varargs join-list
      (movq (imm64/s32 0) (r64m-reg (rax)))
      (ret))))

;; s8
;; TODO(endobson) add check that it is in the right range
(define (s8-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"s8"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; u8
;; TODO(endobson) add check that it is in the right range
(define (u8-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"u8"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; s16
;; TODO(endobson) add check that it is in the right range
(define (s16-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"s16"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; u16
;; TODO(endobson) add check that it is in the right range
(define (u16-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"u16"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; s32
;; TODO(endobson) add check that it is in the right range
(define (s32-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"s32"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; u32
;; TODO(endobson) add check that it is in the right range
(define (u32-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"u32"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (cmpq (imm64/s32 0) (r64m-reg (rdi)))
      (jl #"yprim_u32_panic")
      (ret))))

;; u64
;; TODO(endobson) add check that it is in the right range
(define (u64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"u64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (cmpq (imm64/s32 0) (r64m-reg (rdi)))
      (jl #"yprim_u64_panic")
      (ret))))

;; u8->s64
(define (u8->s64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"u8_s64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; s8->s64
(define (s8->s64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"s8_s64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; s16->s64
(define (s16->s64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"s16_s64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; u16->s64
(define (u16->s64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"u16_s64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; s32->s64
(define (s32->s64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"s32_s64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; u32->s64
(define (u32->s64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"u32_s64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (ret))))

;; u64->s64
(define (u64->s64-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function/panic #"u64_s64"
    (varargs join-list
      (movq (r64mi-reg (rdi)) (r64m-reg (rax)))
      (cmpq (imm64/s32 0) (r64m-reg (rdi)))
      (jl #"yprim_u64_s64_panic")
      (ret))))


;; u16/le-byte#
;; s16/le-byte#
(define (i16/le-byte0-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"double_le_byte0"
    (varargs join-list
      (movzbq (r8m-reg (dil)) (rax))
      (ret))))
(define (i16/le-byte1-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"double_le_byte1"
    (varargs join-list
      (shrq/imm (s8 8) (rdi))
      (movzbq (r8m-reg (dil)) (rax))
      (ret))))

;; u32/le-byte#
;; s32/le-byte#
(define (i32/le-byte0-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"quad_le_byte0"
    (varargs join-list
      (movzbq (r8m-reg (dil)) (rax))
      (ret))))
(define (i32/le-byte1-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"quad_le_byte1"
    (varargs join-list
      (shrq/imm (s8 8) (rdi))
      (movzbq (r8m-reg (dil)) (rax))
      (ret))))
(define (i32/le-byte2-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"quad_le_byte2"
    (varargs join-list
      (shrq/imm (s8 16) (rdi))
      (movzbq (r8m-reg (dil)) (rax))
      (ret))))
(define (i32/le-byte3-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"quad_le_byte3"
    (varargs join-list
      (shrq/imm (s8 24) (rdi))
      (movzbq (r8m-reg (dil)) (rax))
      (ret))))

;; panic
(define (panic-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"panic"
    (varargs join-list
      (pushq (r64mi-reg (rbp)))
      (movq (r64mi-reg (rsp)) (r64m-reg (rbp)))
      (addq (imm64/s32 16) (r64m-reg (rdi)))
      (ud2))))

;; get-frame-pointer
(define (get-frame-pointer-impl) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"get_frame_pointer"
    (varargs join-list
      (movq (r64mi-reg (rbp)) (r64m-reg (rax)))
      (ret))))

;; current-system-abi-int
(define (current-system-abi-int-impl [abi : SyscallAbi]) : (Tuple2 TextFragment ConstFragment)
  (prim-assembly-function #"current_system_abi_int"
    (varargs join-list
      (movq
        (imm64/s32
          (case abi
            [(osx-syscall-abi) #x01]
            [(linux-syscall-abi) #x02]))
        (r64m-reg (rax)))
      (ret))))


(define (prim-function-fragments [abi : SyscallAbi])
  : (List (Tuple2 TextFragment ConstFragment))
  (varargs list
    (write-bytes-impl abi)
    (read-bytes-impl abi)
    (open-input-file-impl abi)
    (open-output-file-impl abi)
    (close-port-impl abi)
    (delete-file-impl abi)
    (make-director-impl abi)
    (set-file-or-directory-permissions-impl abi)
    (socket-impl abi)
    (bind-impl abi)
    (sendto-impl abi)
    (recvfrom-impl abi)
    (connect-impl abi)
    (shutdown-impl abi)
    (listen-impl abi)
    (accept-impl abi)
    (setsockopt-impl abi)
    (ioctl-impl abi)

    (mach-task-self-impl)
    (mach-thread-self-impl)
    (mach-reply-port-impl)
    (mach-port-mod-refs-impl)
    (mach-msg-impl)

    (and-impl)
    (or-impl)
    (not-impl )
    (void-impl)

    (make-bytes-impl)

    (s8-impl)
    (u8-impl)
    (s16-impl)
    (u16-impl)
    (s32-impl)
    (u32-impl)
    (u64-impl)
    (s8->s64-impl)
    (u8->s64-impl)
    (s16->s64-impl)
    (u16->s64-impl)
    (s32->s64-impl)
    (u32->s64-impl)
    (u64->s64-impl)
    (i16/le-byte0-impl)
    (i16/le-byte1-impl)
    (i32/le-byte0-impl)
    (i32/le-byte1-impl)
    (i32/le-byte2-impl)
    (i32/le-byte3-impl)

    (panic-impl)
    (get-frame-pointer-impl)
    (current-system-abi-int-impl abi)))


;; These are not native functions, but just native subroutines
;; They do not follow standard calling conventions
(define (prim-subroutine-fragments [abi : SyscallAbi])
  : (List TextFragment)
  (varargs list
    ;; heap-allocate
    (function-fragment
      #"yprim_heap_allocate"
      (varargs append-jl*
        (named-block #"yprim_heap_allocate_0"
          (varargs join-list
            (xaddq (rax) (r15))
            (cmpq (r64mi-reg (r15)) (r64m-mem (mem (r14) 0)))
            (jbe #"yprim_heap_allocate_slow")
            (ret)))
        (named-block #"yprim_heap_allocate_slow"
          (varargs join-list
           ;; Reverse the xadd
           (subq (r64mi-reg (r15)) (rax))
           (negq (rax))
           ;; 'allocate' the requested memory rounded up to units of 2MiB.
           (movq (r64mi-mem (mem (r14) 0)) (r64m-reg (r15)))
           (addq (r64mi-reg (rax)) (r64m-mem (mem (r14) 0)))
           (addq (imm64/s32 #x1FFFFF) (r64m-mem (mem (r14) 0)))
           (andq (imm64/s32 (- 0 #x200000)) (r64m-mem (mem (r14) 0)))
           (jmp #"yprim_heap_allocate")))))

    ;; variant-panic
    (function-fragment
      #"yprim_variant_panic"
      (varargs append-jl*
        (named-block #"yprim_variant_panic_0"
          (varargs join-list
            (ud2)))))))
