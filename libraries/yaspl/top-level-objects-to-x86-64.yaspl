#:module (yaspl top-level-objects-to-x86-64)
#:import {
  (bytes)
  (either)
  (list)
  (prim)
  {(register-language-compiler)
    {#:values
      [compile-function r:compile-function]
    }
  }
  (tuples)
  (yaspl top-level-objects)
  (yaspl x86-64-assembly)
}
(export
  (#:values convert-objects))
(types)

(define (convert-objects [objects : (List TopLevelObject)]) : AssemblyFragments
  (match-define (tuple2 text-fragments const-fragments)
    (partition-eithers (reverse-map convert-object objects)))
  (assembly-fragments text-fragments const-fragments))

(define (convert-object [object : TopLevelObject]) : (Either TextFragment ConstFragment)
  (case object
    [(register-function-tlo fun)
     (case (r:compile-function fun)
       [(left v) (panic v)]
       [(right v) (left v)])]
    [(bytes-tlo name value)
     (match-define tag-bytes (make-bytes 8))
     (match-define length-bytes (make-bytes 8))
     (begin
       (bytes-set!/u64-le length-bytes 0 (u64 (bytes-length value)))
       ;; The alignment is 3 so that the tag and length fields are naturally aligned
       (let ([part (bytes-fragment (bytes-append (varargs list tag-bytes length-bytes value)))])
         (right (const-fragment name 3 (varargs list part)))))]
    [(variant-descriptor-tlo name variant-name)
     ;; The descriptor needs to have an alignment of 8, so that it can be combined with a tag.
     ;; Currently it just contains the variant name
     (right (const-fragment name 8 (varargs list (address-fragment variant-name 0))))]
    [(trivial-variant-tlo name desc-name tag)
     ;; The alignment is 3 so that the variant-descriptor/tag is naturally aligned.
     ;; The tag is the address of the variant descriptor combined with the tag.
     (right (const-fragment name 3 (varargs list (address-fragment desc-name (u8->s64 tag)))))]
    [(trivial-closure-tlo name fun-name)
     (right (closure-fragment name fun-name))]))
