#:module (yaspl top-level-objects-to-x86-64)
#:import {
  (bytes)
  (either)
  (list)
  (prim)
  (register-language-compiler) {
    #:values
      [compile-function r:compile-function]
  }
  (tuples)
  (x86-64-stack-machine) {
    #:values
      [convert-function s:convert-function]
  }
  (yaspl top-level-objects)
  (yaspl x86-64-assembly)
}
(export
  #:types ()
  #:values (convert-objects)
  #:patterns ())
(types)

(define (convert-objects [objects : (List TopLevelObject)]) : AssemblyFragments
  (match-define (tuple2 text-fragments const-fragments)
    (partition-eithers (reverse-map convert-object objects)))
  (assembly-fragments text-fragments const-fragments))

(define (convert-object [object : TopLevelObject]) : (Either TextFragment ConstFragment)
  (case object
    [(stack-function-tlo fun)
     (left (s:convert-function fun))]
    [(register-function-tlo fun)
     (case (r:compile-function fun)
       [(left v) (panic v)]
       [(right (tuple2 _ v)) (left v)])]
    [(bytes-tlo name value)
     (match-define raw-value
       (bytes-append
         (varargs list
           (eight-bytes-le-bytes (int->eight-bytes-le (bytes-length value)))
           value)))
     (right (bytes-fragment name raw-value))]
    [(trivial-variant-tlo name tag)
     (right (bytes-fragment name (eight-bytes-le-bytes (int->eight-bytes-le tag))))]
    [(trivial-closure-tlo name fun-name)
     (right (address-fragment name fun-name))]))
