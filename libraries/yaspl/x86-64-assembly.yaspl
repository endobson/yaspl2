#:module (yaspl x86-64-assembly)
#:import {
  (bytes)
  (join-list)
  (list)
  (prim)
}
(export
  #:types (Section BasicBlock Instruction Register AssemblyFragments
           TextFragment ConstFragment Scale RegMemImm Immediate)
  #:values (function-fragment address-fragment bytes-fragment basic-block section assembly-fragments
            section-blocks
            rax rdi rsi rdx rcx rbx r8 r9 imm-s32 rmi-imm movq movq/imm addq subq orq andq al dil sil
            dl cl r8b r9b r11 r10b r11b r15b bpl cmpq sete movzbq setne setle setge setl setg imulq
            jne jmp ret syscall call rsp leaq/rip-rel r15 pushq je jl jg jle jge r10 jb scale-1 leaq
            shlq idivq rep-movsq rep-stosq jmp/indirect ud2 call/indirect shrq movb rep-stosb cld rbp
            nop r14 rep-movsb repne-scasb popq scale-8 decq notq repne-scasq repe-cmpsb test
            reg mem imm scaled)
  #:patterns (function-fragment address-fragment bytes-fragment assembly-fragments basic-block section
              rmi-register rmi-direct-memory rmi-displaced-memory rmi-scaled-memory rmi-imm
              imm-s32
              scale-1 scale-2 scale-4 scale-8
              al ah bl bh cl ch dl dh dil sil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b
              ax bx cx dx di si bp sp r8w r9w r10w r11w r12w r13w r14w r15w
              eax ebx ecx edx edi esi ebp esp r8d r9d r10d r11d r12d r13d r14d r15d
              rax rbx rcx rdx rdi rsi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15
              addq andq call call/indirect cld cmpq decq idivq imulq incq jb je jl jg jle jge jmp
              jmp/indirect jne jnz leaq leaq/rip-rel lahf movb movq movq/imm movzbq nop notq orq popq pushq
              rep-movsb rep-movsq rep-stosb rep-stosq repe-cmpsb repne-scasb repne-scasq ret sete setg
              setge setl setle setne shlq shrq std subq syscall test ud2))
(types
  (define-type AssemblyFragments
    (assembly-fragments
      [text-fragments : (List TextFragment)]
      [const-fragments : (List ConstFragment)]))

  (define-type TextFragment
    (function-fragment [name : Bytes] [sections : (List Section)]))
  (define-type ConstFragment
    (address-fragment [name : Bytes] [value : Bytes])
    (bytes-fragment [name : Bytes] [value : Bytes]))

  (define-type Section
    (section [blocks : (List BasicBlock)]))
  (define-type BasicBlock
    (basic-block [name : Bytes] [instructions : (JoinList Instruction)]))
  (define-type Instruction
    (addq [rmi : RegMemImm] [reg : Register])
    (andq [reg1 : RegMemImm] [reg2 : Register])
    (call [label : Bytes])
    (call/indirect [rmi : RegMemImm])
    (cld)
    (cmpq [rmi1 : RegMemImm] [rmi2 : RegMemImm])
    (decq [reg : Register])
    (idivq [reg : Register])
    (imulq [reg1 : Register] [reg2 : Register])
    (incq [reg : Register])
    (jb [label : Bytes])
    (je [label : Bytes])
    (jl [label : Bytes])
    (jg [label : Bytes])
    (jle [label : Bytes])
    (jge [label : Bytes])
    (jmp [label : Bytes])
    (jmp/indirect [reg : Register])
    (jne [label : Bytes])
    (jnz [label : Bytes])
    (leaq [rmi : RegMemImm] [reg : Register])
    (leaq/rip-rel [label : Bytes] [reg : Register])
    (lahf)
    (movb [rmi1 : RegMemImm] [rmi2 : RegMemImm])
    (movq [rmi1 : RegMemImm] [rmi2 : RegMemImm])
    (movq/imm [imm : EightBytesLe] [reg : Register])
    (movzbq [rmi : RegMemImm] [r : Register])
    (nop)
    (notq [reg : Register])
    (orq [reg1 : Register] [reg2 : Register])
    (popq [rmi : RegMemImm])
    (pushq [rmi : RegMemImm])
    (rep-movsb)
    (rep-movsq)
    (rep-stosb)
    (rep-stosq)
    (repe-cmpsb)
    (repne-scasb)
    (repne-scasq)
    (ret)
    (sete [reg : Register])
    (setg [reg : Register])
    (setge [reg : Register])
    (setl [reg : Register])
    (setle [reg : Register])
    (setne [reg : Register])
    (shlq [reg : Register])
    (shrq [reg : Register])
    (std)
    (subq [rmi : RegMemImm] [reg : Register])
    (syscall)
    (test [rmi1 : RegMemImm] [rmi2 : RegMemImm])
    (ud2))
  (define-type Register
    ;; 8 Bit registers
    (al)
    (ah)
    (bl)
    (bh)
    (cl)
    (ch)
    (dl)
    (dh)
    (dil)
    (sil)
    (bpl)
    (spl)
    (r8b)
    (r9b)
    (r10b)
    (r11b)
    (r12b)
    (r13b)
    (r14b)
    (r15b)
    ;; 16 bit registers
    (ax)
    (bx)
    (cx)
    (dx)
    (di)
    (si)
    (bp)
    (sp)
    (r8w)
    (r9w)
    (r10w)
    (r11w)
    (r12w)
    (r13w)
    (r14w)
    (r15w)
    ;; 32 bit registers
    (eax)
    (ebx)
    (ecx)
    (edx)
    (edi)
    (esi)
    (ebp)
    (esp)
    (r8d)
    (r9d)
    (r10d)
    (r11d)
    (r12d)
    (r13d)
    (r14d)
    (r15d)
    ;;64 bit registers
    (rax)
    (rbx)
    (rcx)
    (rdx)
    (rdi)
    (rsi)
    (rbp)
    (rsp)
    (r8)
    (r9)
    (r10)
    (r11)
    (r12)
    (r13)
    (r14)
    (r15))
  (define-type RegMemImm
    (rmi-register [r : Register])
    (rmi-direct-memory [reg : Register])
    (rmi-displaced-memory [reg : Register] [offset : S32])
    (rmi-scaled-memory [reg : Register] [scale : Scale] [index-reg : Register] [offset : S32])
    (rmi-imm [v : Immediate]))
  (define-type Immediate
    (imm-s32 [v : S32]))
  (define-type Scale
    (scale-1)
    (scale-2)
    (scale-4)
    (scale-8)))


(define (reg [r : Register]) : RegMemImm
  (rmi-register r))
(define (mem [r : Register] [offset : Int]) : RegMemImm
  (case r
    ;; rsp as the index means 0 index
    [(rsp) (rmi-scaled-memory r (scale-1) (rsp) (s32 offset))]
    [(r12) (rmi-scaled-memory r (scale-1) (rsp) (s32 offset))]
    [(rbp) (rmi-displaced-memory r (s32 offset))]
    [(r13) (rmi-displaced-memory r (s32 offset))]
    [_ (if (= offset 0)
           (rmi-direct-memory r)
           (rmi-displaced-memory r (s32 offset)))]))
(define (imm [v : Int]) : RegMemImm
  (rmi-imm (imm-s32 (s32 v))))
(define (scaled [r : Register] [scale : Scale] [index : Register] [offset : Int]) : RegMemImm
  (rmi-scaled-memory r scale index (s32 offset)))
