#:module (yaspl x86-64-assembly)
#:import {
  (bytes)
  (join-list)
  (list)
  (maybe)
  (prim)
  (set)
}
(export
  (#:types Section BasicBlock Instruction Register Register8 AssemblyFragments
           TextFragment ConstFragment Scale RegMem RegMemImm Reg8Mem Reg8MemImm MemoryArgument)
  (#:values function-fragment address-fragment bytes-fragment basic-block section assembly-fragments
            section-blocks
            rax rdi rsi rdx rcx rbx r8 r9 rmi-imm movq movq/imm addq subq orq andq al dil sil
            dl cl bl r8b r9b r11 r12 r13 r10b r11b r12b r13b r14b r15b bpl cmpb cmpq sete movzbq
            setne setle setge setl setg imulq
            imulq/imm jne jmp ret syscall call rsp leaq/rip-rel r15 pushq je jl jg jle jge r10 jb jbe
            scale-1 leaq shlq shlq/imm idivq rep-movsq rep-stosq jmp/indirect ud2 call/indirect shrq
            shrq/imm movb xaddq xorq
            rep-stosb cld rbp nop r14 rep-movsb repne-scasb popq scale-8 decq negq notq repne-scasq
            repe-cmpsb test rmi-reg rmi-mem r8mi-reg r8mi-mem r8mi-imm rm-reg rm-mem r8m-reg r8m-mem mem
            imm imm8 scaled
            sections->referenced-labels)
  (#:patterns function-fragment address-fragment bytes-fragment assembly-fragments basic-block section
              rmi-reg rmi-mem rmi-imm r8mi-reg r8mi-mem r8mi-imm rm-reg rm-mem r8m-reg r8m-mem
              mem-direct mem-sib-direct mem-displaced mem-scaled
              scale-1 scale-2 scale-4 scale-8
              al ah bl bh cl ch dl dh dil sil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b
              rax rbx rcx rdx rdi rsi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15
              addq andq call call/indirect cld cmpb cmpq decq idivq imulq imulq/imm incq jb jbe je jl
              jg jle jge jmp jmp/indirect jne jnz leaq leaq/rip-rel lahf movb movq movq/imm movzbq
              negq nop notq orq popq pushq rep-movsb rep-movsq rep-stosb rep-stosq repe-cmpsb
              repne-scasb repne-scasq ret sete setg setge setl setle setne shlq shlq/imm shrq shrq/imm
              std subq syscall test ud2 xaddq xorq))
(types
  (define-type AssemblyFragments
    (assembly-fragments
      [text-fragments : (List TextFragment)]
      [const-fragments : (List ConstFragment)]))

  (define-type TextFragment
    (function-fragment [name : Bytes] [sections : (List Section)]))
  (define-type ConstFragment
    (address-fragment [name : Bytes] [value : Bytes])
    (bytes-fragment [name : Bytes] [value : Bytes]))

  (define-type Section
    (section [blocks : (List BasicBlock)]))
  (define-type BasicBlock
    (basic-block [name : Bytes] [instructions : (JoinList Instruction)]))
  (define-type Instruction
    (addq [rmi : RegMemImm] [rm : RegMem])
    (andq [reg1 : RegMemImm] [reg2 : Register])
    (call [label : Bytes])
    (call/indirect [rm : RegMem])
    (cld)
    (cmpb [rmi1 : Reg8MemImm] [rm2 : Reg8Mem])
    (cmpq [rmi1 : RegMemImm] [rm2 : RegMem])
    (decq [reg : Register])
    (idivq [reg : Register])
    (imulq [reg1 : Register] [reg2 : Register])
    (imulq/imm [imm : S32] [rmi : RegMemImm] [reg : Register])
    (incq [reg : Register])
    (jb [label : Bytes])
    (jbe [label : Bytes])
    (je [label : Bytes])
    (jl [label : Bytes])
    (jg [label : Bytes])
    (jle [label : Bytes])
    (jge [label : Bytes])
    (jmp [label : Bytes])
    (jmp/indirect [rm : RegMem])
    (jne [label : Bytes])
    (jnz [label : Bytes])
    (leaq [mem : MemoryArgument] [reg : Register])
    (leaq/rip-rel [label : Bytes] [reg : Register])
    (lahf)
    (movb [reg : Reg8MemImm] [mem : MemoryArgument])
    (movq [rmi1 : RegMemImm] [rm2 : RegMem])
    (movq/imm [imm : S64] [reg : Register])
    (movzbq [rm : Reg8Mem] [reg2 : Register])
    (negq [reg : Register])
    (nop)
    (notq [reg : Register])
    (orq [reg1 : Register] [reg2 : Register])
    (popq [rm : RegMem])
    (pushq [rmi : RegMemImm])
    (rep-movsb)
    (rep-movsq)
    (rep-stosb)
    (rep-stosq)
    (repe-cmpsb)
    (repne-scasb)
    (repne-scasq)
    (ret)
    (sete [reg : Register8])
    (setg [reg : Register8])
    (setge [reg : Register8])
    (setl [reg : Register8])
    (setle [reg : Register8])
    (setne [reg : Register8])
    (shlq [reg : Register])
    (shlq/imm [v : U8] [reg : Register])
    (shrq [reg : Register])
    (shrq/imm [v : U8] [reg : Register])
    (std)
    (subq [rmi : RegMemImm] [reg : Register])
    (syscall)
    (test [reg1 : Register] [reg2 : Register])
    (ud2)
    (xaddq [reg1 : Register] [reg2 : Register])
    (xorq [reg1 : RegMemImm] [reg2 : Register]))

  ;; 8 Bit registers
  (define-type Register8
    (al)
    (ah)
    (bl)
    (bh)
    (cl)
    (ch)
    (dl)
    (dh)
    (dil)
    (sil)
    (bpl)
    (spl)
    (r8b)
    (r9b)
    (r10b)
    (r11b)
    (r12b)
    (r13b)
    (r14b)
    (r15b))

  ;;64 bit registers
  (define-type Register
    (rax)
    (rbx)
    (rcx)
    (rdx)
    (rdi)
    (rsi)
    (rbp)
    (rsp)
    (r8)
    (r9)
    (r10)
    (r11)
    (r12)
    (r13)
    (r14)
    (r15))
  (define-type RegMem
    (rm-reg [r : Register])
    (rm-mem [m : MemoryArgument]))
  (define-type Reg8Mem
    (r8m-reg [r : Register8])
    (r8m-mem [m : MemoryArgument]))
  (define-type RegMemImm
    (rmi-reg [r : Register])
    (rmi-mem [m : MemoryArgument])
    (rmi-imm [v : S32]))
  (define-type Reg8MemImm
    (r8mi-reg [r : Register8])
    (r8mi-mem [m : MemoryArgument])
    (r8mi-imm [v : U8]))
  (define-type MemoryArgument
    ;; Doesn't support rsp,rbp,r12,r13
    (mem-direct [reg : Register])
    ;; Doesn't support rbp,r13
    (mem-sib-direct [reg : Register])
    (mem-displaced [reg : Register] [offset : S32])
    (mem-scaled [reg : Register] [scale : Scale] [index-reg : Register] [offset : S32]))
  (define-type Scale
    (scale-1)
    (scale-2)
    (scale-4)
    (scale-8)))


(define (mem [r : Register] [offset : Int]) : MemoryArgument
  (case r
    ;; rsp as the index means 0 index
    [(rsp)
     (if (= offset 0)
         (mem-sib-direct r)
         (mem-scaled r (scale-1) (rsp) (s32 offset)))]
    [(r12)
     (if (= offset 0)
         (mem-sib-direct r)
         (mem-scaled r (scale-1) (rsp) (s32 offset)))]
    [(rbp) (mem-displaced r (s32 offset))]
    [(r13) (mem-displaced r (s32 offset))]
    [_ (if (= offset 0)
           (mem-direct r)
           (mem-displaced r (s32 offset)))]))
(define (imm [v : Int]) : RegMemImm
  (rmi-imm (s32 v)))
(define (imm8 [v : Int]) : Reg8MemImm
  (r8mi-imm (u8 v)))
(define (scaled [r : Register] [scale : Scale] [index : Register] [offset : Int]) : MemoryArgument
  (mem-scaled r scale index (s32 offset)))

(define (sections->referenced-labels [sections : (List Section)]) : (Set Bytes)
  (foldl
    (lambda ([s : Section] [acc : (Set Bytes)])
      (case s
        [(section blocks)
         (foldl
           (lambda ([b : BasicBlock] [acc : (Set Bytes)])
              (case b
                [(basic-block name instructions)
                 (set-add-all
                   acc
                   (filter-map instruction->referenced-label (jl->list instructions)))]))
           blocks
           acc)]))
    sections
    (make-set bytes-cmp)))

(define (instruction->referenced-label [inst : Instruction]) : (Maybe Bytes)
  (case inst
    [(addq rmi reg)
     (nothing)]
    [(andq rmi reg)
     (nothing)]
    [(call label)
     (just label)]
    [(call/indirect rmi)
     (nothing)]
    [(cld)
     (nothing)]
    [(cmpq rmi1 rmi2)
     (nothing)]
    [(cmpb rmi1 rmi2)
     (nothing)]
    [(decq reg)
     (nothing)]
    [(idivq reg)
     (nothing)]
    [(imulq reg1 reg2)
     (nothing)]
    [(imulq/imm imm rmi reg)
     (nothing)]
    [(incq reg)
     (nothing)]
    [(jb label)
     (just label)]
    [(jbe label)
     (just label)]
    [(je label)
     (just label)]
    [(jl label)
     (just label)]
    [(jg label)
     (just label)]
    [(jle label)
     (just label)]
    [(jge label)
     (just label)]
    [(jmp label)
     (just label)]
    [(jmp/indirect reg)
     (nothing)]
    [(jne label)
     (just label)]
    [(jnz label)
     (just label)]
    [(lahf)
     (nothing)]
    [(leaq rmi reg)
     (nothing)]
    [(leaq/rip-rel label reg)
     (just label)]
    [(movb reg1 rmi2)
     (nothing)]
    [(movq rmi1 rmi2)
     (nothing)]
    [(movq/imm imm reg)
     (nothing)]
    [(movzbq r8m reg)
     (nothing)]
    [(negq reg)
     (nothing)]
    [(nop)
     (nothing)]
    [(notq reg)
     (nothing)]
    [(orq reg1 reg2)
     (nothing)]
    [(popq rmi)
     (nothing)]
    [(pushq rmi)
     (nothing)]
    [(rep-stosb)
     (nothing)]
    [(rep-stosq)
     (nothing)]
    [(rep-movsb)
     (nothing)]
    [(rep-movsq)
     (nothing)]
    [(repe-cmpsb)
     (nothing)]
    [(repne-scasb)
     (nothing)]
    [(repne-scasq)
     (nothing)]
    [(ret)
     (nothing)]
    [(sete reg)
     (nothing)]
    [(setg reg)
     (nothing)]
    [(setge reg)
     (nothing)]
    [(setl reg)
     (nothing)]
    [(setle reg)
     (nothing)]
    [(setne reg)
     (nothing)]
    [(shlq reg)
     (nothing)]
    [(shlq/imm v reg)
     (nothing)]
    [(shrq reg)
     (nothing)]
    [(shrq/imm v reg)
     (nothing)]
    [(std)
     (nothing)]
    [(subq rmi reg)
     (nothing)]
    [(syscall)
     (nothing)]
    [(test rmi1 rmi2)
     (nothing)]
    [(ud2)
     (nothing)]
    [(xaddq rmi reg)
     (nothing)]
    [(xorq rmi reg)
     (nothing)]))
