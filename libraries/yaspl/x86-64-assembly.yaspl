#:module (yaspl x86-64-assembly)
#:import {
  (bytes)
  (join-list)
  (list)
  (maybe)
  (prim)
  (set)
}
(export
  (#:types Instruction Register Register64 Register8 AssemblyFragments
           TextFragment TextFragmentPart ConstFragment ConstFragmentPart
           Scale Reg64Mem Reg64MemImm Reg8Mem Reg8MemImm MemoryArgument Displacement)
  (#:values function-fragment address-fragment closure-fragment bytes-fragment
            named-block assembly-fragments const-fragment label-fragment instruction-fragment
            append-fragments
            rax rdi rsi rdx rcx rbx r8 r9 r64mi-imm-s32* r64mi-imm-s8 movq movq/imm*
            addq subq orq andq al dil sil
            dl cl bl r8b r9b r11 r12 r13 r10b r11b r12b r13b r14b r15b bpl cmpb cmpq sete movzbq
            setne setle setge setl setg imulq
            imulq/imm* jne jmp ret syscall call rsp leaq/rip-rel r15 pushq je jl jg jle jge r10 jb jbe
            scale-1 leaq shlq shlq/imm idivq rep-movsq rep-stosq jmp/indirect ud2 call/indirect shrq
            shrq/imm movb xaddq xorq
            rep-stosb cld rbp nop r14 rep-movsb repne-scasb popq scale-8 decq negq notq repne-scasq
            repe-cmpsb test r64mi-reg r64mi-mem r8mi-reg r8mi-mem r8mi-imm-s8
            r64m-reg r64m-mem r8m-reg r8m-mem mem
            imm64/s32 imm8 scaled
            register8 register64
            compute-referenced-labels)
  (#:patterns function-fragment address-fragment bytes-fragment const-fragment
              assembly-fragments label-fragment instruction-fragment
              r64mi-reg r64mi-mem r64mi-imm-s32 r64mi-imm-s8 r64m-reg r64m-mem
              r8mi-reg r8mi-mem r8mi-imm-s8 r8m-reg r8m-mem
              mem-direct mem-sib-direct mem-sib-displaced mem-displaced mem-scaled
              displacement-s8 displacement-s32
              register8 register64
              scale-1 scale-2 scale-4 scale-8
              al ah bl bh cl ch dl dh dil sil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b
              rax rbx rcx rdx rdi rsi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15
              addq andq call call/indirect cld cmpb cmpq decq idivq imulq imulq/imm/s8 imulq/imm/s32
              incq jb jbe je jl
              jg jle jge jmp jmp/indirect jne jnz leaq leaq/rip-rel lahf movb movq movq/imm64 movzbq
              negq nop notq orq popq pushq rep-movsb rep-movsq rep-stosb rep-stosq repe-cmpsb
              repne-scasb repne-scasq ret sete setg setge setl setle setne shlq shlq/imm shrq shrq/imm
              std subq syscall test ud2 xaddq xorq))
(types
  (define-type AssemblyFragments
    (assembly-fragments
      [text-fragments : (List TextFragment)]
      [const-fragments : (List ConstFragment)]))

  (define-type TextFragment
    (function-fragment [name : Bytes] [body : (JoinList TextFragmentPart)]))
  (define-type ConstFragment
    ;; alignment is the number of bits that need to be zero
    (const-fragment [name : Bytes] [alignment : Int] [parts : (List ConstFragmentPart)]))
  (define-type TextFragmentPart
    (label-fragment [name : Bytes])
    (instruction-fragment [value : Instruction]))
  (define-type ConstFragmentPart
    (address-fragment [value : Bytes] [addend : Int])
    (bytes-fragment [value : Bytes]))


  (define-type Instruction
    (addq [rmi : Reg64MemImm] [rm : Reg64Mem])
    (andq [rmi : Reg64MemImm] [rm : Reg64Mem])
    (call [label : Bytes])
    (call/indirect [rm : Reg64Mem])
    (cld)
    (cmpb [rmi1 : Reg8MemImm] [rm2 : Reg8Mem])
    (cmpq [rmi1 : Reg64MemImm] [rm2 : Reg64Mem])
    (decq [reg : Register64])
    (idivq [reg : Register64])
    (imulq [reg1 : Register64] [reg2 : Register64])
    (imulq/imm/s8 [imm : S8] [rm : Reg64Mem] [reg : Register64])
    (imulq/imm/s32 [imm : S32] [rm : Reg64Mem] [reg : Register64])
    (incq [reg : Register64])
    (jb [label : Bytes])
    (jbe [label : Bytes])
    (je [label : Bytes])
    (jl [label : Bytes])
    (jg [label : Bytes])
    (jle [label : Bytes])
    (jge [label : Bytes])
    (jmp [label : Bytes])
    (jmp/indirect [rm : Reg64Mem])
    (jne [label : Bytes])
    (jnz [label : Bytes])
    (leaq [mem : MemoryArgument] [reg : Register64])
    (leaq/rip-rel [label : Bytes] [reg : Register64])
    (lahf)
    (movb [reg : Reg8MemImm] [mem : MemoryArgument])
    (movq [rmi1 : Reg64MemImm] [rm2 : Reg64Mem])
    (movq/imm64 [imm : S64] [reg : Register64])
    (movzbq [rm : Reg8Mem] [reg2 : Register64])
    (negq [reg : Register64])
    (nop)
    (notq [reg : Register64])
    (orq [reg1 : Register64] [reg2 : Register64])
    (popq [rm : Reg64Mem])
    (pushq [rmi : Reg64MemImm])
    (rep-movsb)
    (rep-movsq)
    (rep-stosb)
    (rep-stosq)
    (repe-cmpsb)
    (repne-scasb)
    (repne-scasq)
    (ret)
    (sete [reg : Register8])
    (setg [reg : Register8])
    (setge [reg : Register8])
    (setl [reg : Register8])
    (setle [reg : Register8])
    (setne [reg : Register8])
    (shlq [reg : Register64])
    (shlq/imm [v : S8] [reg : Register64])
    (shrq [reg : Register64])
    (shrq/imm [v : S8] [reg : Register64])
    (std)
    (subq [rmi : Reg64MemImm] [reg : Register64])
    (syscall)
    (test [reg1 : Register64] [reg2 : Register64])
    (ud2)
    (xaddq [reg1 : Register64] [reg2 : Register64])
    (xorq [reg1 : Reg64MemImm] [reg2 : Register64]))

  ;; Generic registers
  (define-type Register
    (register8 [r : Register8])
    (register64 [r : Register64]))
  ;; 8 Bit registers
  (define-type Register8
    (al)
    (ah)
    (bl)
    (bh)
    (cl)
    (ch)
    (dl)
    (dh)
    (dil)
    (sil)
    (bpl)
    (spl)
    (r8b)
    (r9b)
    (r10b)
    (r11b)
    (r12b)
    (r13b)
    (r14b)
    (r15b))
  ;;64 bit registers
  (define-type Register64
    (rax)
    (rbx)
    (rcx)
    (rdx)
    (rdi)
    (rsi)
    (rbp)
    (rsp)
    (r8)
    (r9)
    (r10)
    (r11)
    (r12)
    (r13)
    (r14)
    (r15))

  (define-type Reg64Mem
    (r64m-reg [r : Register64])
    (r64m-mem [m : MemoryArgument]))
  (define-type Reg8Mem
    (r8m-reg [r : Register8])
    (r8m-mem [m : MemoryArgument]))
  (define-type Reg64MemImm
    (r64mi-reg [r : Register64])
    (r64mi-mem [m : MemoryArgument])
    (r64mi-imm-s32 [v : S32])
    (r64mi-imm-s8 [v : S8]))
  (define-type Reg8MemImm
    (r8mi-reg [r : Register8])
    (r8mi-mem [m : MemoryArgument])
    (r8mi-imm-s8 [v : S8]))
  (define-type MemoryArgument
    ;; Doesn't support rsp,rbp,r12,r13
    (mem-direct [reg : Register64])
    ;; Use a sib byte so that rsp and r12 can be encoded
    ;; Doesn't support rbp,r13
    (mem-sib-direct [reg : Register64])
    ;; Doesn't support rsp,r12
    (mem-displaced [reg : Register64] [displacement : Displacement])
    ;; Use a sib byte so that rsp and r12 can be encoded
    (mem-sib-displaced [reg : Register64] [displacement : Displacement])
    (mem-scaled [reg : Register64] [scale : Scale] [index-reg : Register64]
                [displacement : Displacement]))
  (define-type Displacement
    (displacement-s8 [v : S8])
    (displacement-s32 [v : S32]))
  (define-type Scale
    (scale-1)
    (scale-2)
    (scale-4)
    (scale-8)))


(define (mem [r : Register64] [offset : Int]) : MemoryArgument
  (case r
    ;; rsp as the index means 0 index
    [(rsp)
     (if (= offset 0)
         (mem-sib-direct r)
         (mem-sib-displaced r (displacement offset)))]
    [(r12)
     (if (= offset 0)
         (mem-sib-direct r)
         (mem-sib-displaced r (displacement offset)))]
    [(rbp) (mem-displaced r (displacement offset))]
    [(r13) (mem-displaced r (displacement offset))]
    [_ (if (= offset 0)
           (mem-direct r)
           (mem-displaced r (displacement offset)))]))
;; Smart constructor for immediates in the s32 range
(define (imm64/s32 [v : Int]) : Reg64MemImm
  (if (and (<= (- 0 128) v) (<= v 127))
      (r64mi-imm-s8 (s8 v))
      (r64mi-imm-s32 (s32 v))))
;; Smart constructor for displacements
(define (displacement [v : Int]) : Displacement
  (if (and (<= (- 0 128) v) (<= v 127))
      (displacement-s8 (s8 v))
      (displacement-s32 (s32 v))))


(define (r64mi-imm-s32* [v : S32]) : Reg64MemImm
  (imm64/s32 (s32->s64 v)))

(define (imm8 [v : Int]) : Reg8MemImm
  (r8mi-imm-s8 (s8 v)))
(define (scaled [r : Register64] [scale : Scale] [index : Register64] [offset : Int]) : MemoryArgument
  (mem-scaled r scale index (displacement offset)))

(define (compute-referenced-labels [parts : (JoinList TextFragmentPart)]) : (Set Bytes)
  (set-add-all
    (make-set bytes-cmp)
    (jl->list
      (concat-map-jl
        (lambda ([p : TextFragmentPart]) : (JoinList Bytes)
          (case p
            [(label-fragment _) (empty-jl)]
            [(instruction-fragment i)
             (case (instruction->referenced-label i)
               [(nothing) (empty-jl)]
               [(just l) (single-jl l)])]))
        parts))))

(define (instruction->referenced-label [inst : Instruction]) : (Maybe Bytes)
  (case inst
    [(addq _ _)
     (nothing)]
    [(andq _ _)
     (nothing)]
    [(call label)
     (just label)]
    [(call/indirect _)
     (nothing)]
    [(cld)
     (nothing)]
    [(cmpq _ _)
     (nothing)]
    [(cmpb _ _)
     (nothing)]
    [(decq _)
     (nothing)]
    [(idivq _)
     (nothing)]
    [(imulq _ _)
     (nothing)]
    [(imulq/imm/s8 _ _ _)
     (nothing)]
    [(imulq/imm/s32 _ _ _)
     (nothing)]
    [(incq _)
     (nothing)]
    [(jb label)
     (just label)]
    [(jbe label)
     (just label)]
    [(je label)
     (just label)]
    [(jl label)
     (just label)]
    [(jg label)
     (just label)]
    [(jle label)
     (just label)]
    [(jge label)
     (just label)]
    [(jmp label)
     (just label)]
    [(jmp/indirect _)
     (nothing)]
    [(jne label)
     (just label)]
    [(jnz label)
     (just label)]
    [(lahf)
     (nothing)]
    [(leaq _ _)
     (nothing)]
    [(leaq/rip-rel label _)
     (just label)]
    [(movb _ _)
     (nothing)]
    [(movq _ _)
     (nothing)]
    [(movq/imm64 _ _)
     (nothing)]
    [(movzbq _ _)
     (nothing)]
    [(negq _)
     (nothing)]
    [(nop)
     (nothing)]
    [(notq _)
     (nothing)]
    [(orq _ _)
     (nothing)]
    [(popq _)
     (nothing)]
    [(pushq _)
     (nothing)]
    [(rep-stosb)
     (nothing)]
    [(rep-stosq)
     (nothing)]
    [(rep-movsb)
     (nothing)]
    [(rep-movsq)
     (nothing)]
    [(repe-cmpsb)
     (nothing)]
    [(repne-scasb)
     (nothing)]
    [(repne-scasq)
     (nothing)]
    [(ret)
     (nothing)]
    [(sete _)
     (nothing)]
    [(setg _)
     (nothing)]
    [(setge _)
     (nothing)]
    [(setl _)
     (nothing)]
    [(setle _)
     (nothing)]
    [(setne _)
     (nothing)]
    [(shlq _)
     (nothing)]
    [(shlq/imm _ _)
     (nothing)]
    [(shrq _)
     (nothing)]
    [(shrq/imm _ _)
     (nothing)]
    [(std)
     (nothing)]
    [(subq _ _)
     (nothing)]
    [(syscall)
     (nothing)]
    [(test _ _)
     (nothing)]
    [(ud2)
     (nothing)]
    [(xaddq _ _)
     (nothing)]
    [(xorq _ _)
     (nothing)]))

;; Smart constructors for instructions
(define (movq/imm* [v : Int] [r : Register64]) : Instruction
  (if (and (<= (- 0 #x80000000) v) (<= v #x7FFFFFFF))
      (movq (r64mi-imm-s32 (s32 v)) (r64m-reg r))
      (movq/imm64 v r)))

(define (imulq/imm* [v : S32] [rm : Reg64Mem] [r : Register64]) : Instruction
  (match-define v (s32->s64 v))
  (if (and (<= (- 0 #x80) v) (<= v #x7F))
      (imulq/imm/s8 (s8 v) rm r)
      (imulq/imm/s32 (s32 v) rm r)))

;; Smart constructor for fragments
(define (closure-fragment [name : Bytes] [descriptor : Bytes] [value : Bytes]) : ConstFragment
  ;; The alignment is 3 for unclear reasons. Might be able to be changed.
  ;; TODO Put a real descriptor here for constant closures
  (const-fragment name 3 (varargs list
                                  (address-fragment descriptor 0)
                                  (address-fragment value 0))))

(define (named-block [name : Bytes] [instructions : (JoinList Instruction)])
  : (JoinList TextFragmentPart)
  (cons-jl
    (label-fragment name)
    (map-jl instruction-fragment instructions)))

;; Combine two sets of fragments
(define (append-fragments [f1 : AssemblyFragments] [f2 : AssemblyFragments]) : AssemblyFragments
  (match-define (assembly-fragments text1 const1) f1)
  (match-define (assembly-fragments text2 const2) f2)
  (assembly-fragments (append text1 text2) (append const1 const2)))
