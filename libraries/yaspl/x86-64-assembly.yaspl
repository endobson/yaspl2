#:module (yaspl x86-64-assembly)
#:import {
  (bytes)
  (join-list)
  (list)
  (prim)
}
(export
  #:types (Section BasicBlock Instruction Register Register8 AssemblyFragments
           TextFragment ConstFragment Scale RegMem RegMemImm Reg8Mem MemoryArgument)
  #:values (function-fragment address-fragment bytes-fragment basic-block section assembly-fragments
            section-blocks
            rax rdi rsi rdx rcx rbx r8 r9 rmi-imm movq movq/imm addq subq orq andq al dil sil
            dl cl bl r8b r9b r11 r12 r13 r10b r11b r12b r13b r14b r15b bpl cmpq sete movzbq
            setne setle setge setl setg imulq
            imulq/imm jne jmp ret syscall call rsp leaq/rip-rel r15 pushq je jl jg jle jge r10 jb jbe
            scale-1 leaq shlq shlq/imm idivq rep-movsq rep-stosq jmp/indirect ud2 call/indirect shrq
            shrq/imm movb xaddq xorq
            rep-stosb cld rbp nop r14 rep-movsb repne-scasb popq scale-8 decq negq notq repne-scasq
            repe-cmpsb test rmi-reg rmi-mem rm-reg rm-mem r8m-reg r8m-mem mem imm scaled)
  #:patterns (function-fragment address-fragment bytes-fragment assembly-fragments basic-block section
              rmi-reg rmi-mem rmi-imm rm-reg rm-mem r8m-reg r8m-mem mem-direct mem-displaced mem-scaled
              scale-1 scale-2 scale-4 scale-8
              al ah bl bh cl ch dl dh dil sil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b
              ax bx cx dx di si bp sp r8w r9w r10w r11w r12w r13w r14w r15w
              eax ebx ecx edx edi esi ebp esp r8d r9d r10d r11d r12d r13d r14d r15d
              rax rbx rcx rdx rdi rsi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15
              addq andq call call/indirect cld cmpq decq idivq imulq imulq/imm incq jb jbe je jl jg jle jge jmp
              jmp/indirect jne jnz leaq leaq/rip-rel lahf movb movq movq/imm movzbq negq nop
              notq orq popq pushq rep-movsb rep-movsq rep-stosb rep-stosq repe-cmpsb repne-scasb
              repne-scasq ret sete setg setge setl setle setne shlq shlq/imm shrq shrq/imm std subq
              syscall test ud2 xaddq xorq))
(types
  (define-type AssemblyFragments
    (assembly-fragments
      [text-fragments : (List TextFragment)]
      [const-fragments : (List ConstFragment)]))

  (define-type TextFragment
    (function-fragment [name : Bytes] [sections : (List Section)]))
  (define-type ConstFragment
    (address-fragment [name : Bytes] [value : Bytes])
    (bytes-fragment [name : Bytes] [value : Bytes]))

  (define-type Section
    (section [blocks : (List BasicBlock)]))
  (define-type BasicBlock
    (basic-block [name : Bytes] [instructions : (JoinList Instruction)]))
  (define-type Instruction
    (addq [rmi : RegMemImm] [rm : RegMem])
    (andq [reg1 : RegMemImm] [reg2 : Register])
    (call [label : Bytes])
    (call/indirect [rm : RegMem])
    (cld)
    (cmpq [rmi1 : RegMemImm] [rm2 : RegMem])
    (decq [reg : Register])
    (idivq [reg : Register])
    (imulq [reg1 : Register] [reg2 : Register])
    (imulq/imm [imm : S32] [rmi : RegMemImm] [reg : Register])
    (incq [reg : Register])
    (jb [label : Bytes])
    (jbe [label : Bytes])
    (je [label : Bytes])
    (jl [label : Bytes])
    (jg [label : Bytes])
    (jle [label : Bytes])
    (jge [label : Bytes])
    (jmp [label : Bytes])
    (jmp/indirect [rm : RegMem])
    (jne [label : Bytes])
    (jnz [label : Bytes])
    (leaq [mem : MemoryArgument] [reg : Register])
    (leaq/rip-rel [label : Bytes] [reg : Register])
    (lahf)
    (movb [reg : Register8] [mem : MemoryArgument])
    (movq [rmi1 : RegMemImm] [rm2 : RegMem])
    (movq/imm [imm : EightBytesLe] [reg : Register])
    (movzbq [rm : Reg8Mem] [reg2 : Register])
    (negq [reg : Register])
    (nop)
    (notq [reg : Register])
    (orq [reg1 : Register] [reg2 : Register])
    (popq [rm : RegMem])
    (pushq [rmi : RegMemImm])
    (rep-movsb)
    (rep-movsq)
    (rep-stosb)
    (rep-stosq)
    (repe-cmpsb)
    (repne-scasb)
    (repne-scasq)
    (ret)
    (sete [reg : Register8])
    (setg [reg : Register8])
    (setge [reg : Register8])
    (setl [reg : Register8])
    (setle [reg : Register8])
    (setne [reg : Register8])
    (shlq [reg : Register])
    (shlq/imm [v : U8] [reg : Register])
    (shrq [reg : Register])
    (shrq/imm [v : U8] [reg : Register])
    (std)
    (subq [rmi : RegMemImm] [reg : Register])
    (syscall)
    (test [reg1 : Register] [reg2 : Register])
    (ud2)
    (xaddq [reg1 : Register] [reg2 : Register])
    (xorq [reg1 : RegMemImm] [reg2 : Register]))

  ;; 8 Bit registers
  (define-type Register8
    (al)
    (ah)
    (bl)
    (bh)
    (cl)
    (ch)
    (dl)
    (dh)
    (dil)
    (sil)
    (bpl)
    (spl)
    (r8b)
    (r9b)
    (r10b)
    (r11b)
    (r12b)
    (r13b)
    (r14b)
    (r15b))
  (define-type Register
    ;; 16 bit registers
    (ax)
    (bx)
    (cx)
    (dx)
    (di)
    (si)
    (bp)
    (sp)
    (r8w)
    (r9w)
    (r10w)
    (r11w)
    (r12w)
    (r13w)
    (r14w)
    (r15w)
    ;; 32 bit registers
    (eax)
    (ebx)
    (ecx)
    (edx)
    (edi)
    (esi)
    (ebp)
    (esp)
    (r8d)
    (r9d)
    (r10d)
    (r11d)
    (r12d)
    (r13d)
    (r14d)
    (r15d)
    ;;64 bit registers
    (rax)
    (rbx)
    (rcx)
    (rdx)
    (rdi)
    (rsi)
    (rbp)
    (rsp)
    (r8)
    (r9)
    (r10)
    (r11)
    (r12)
    (r13)
    (r14)
    (r15))
  (define-type RegMem
    (rm-reg [r : Register])
    (rm-mem [m : MemoryArgument]))
  (define-type Reg8Mem
    (r8m-reg [r : Register8])
    (r8m-mem [m : MemoryArgument]))
  (define-type RegMemImm
    (rmi-reg [r : Register])
    (rmi-mem [m : MemoryArgument])
    (rmi-imm [v : S32]))
  (define-type MemoryArgument
    (mem-direct [reg : Register])
    (mem-displaced [reg : Register] [offset : S32])
    (mem-scaled [reg : Register] [scale : Scale] [index-reg : Register] [offset : S32]))
  (define-type Scale
    (scale-1)
    (scale-2)
    (scale-4)
    (scale-8)))


(define (mem [r : Register] [offset : Int]) : MemoryArgument
  (case r
    ;; rsp as the index means 0 index
    [(rsp) (mem-scaled r (scale-1) (rsp) (s32 offset))]
    [(r12) (mem-scaled r (scale-1) (rsp) (s32 offset))]
    [(rbp) (mem-displaced r (s32 offset))]
    [(r13) (mem-displaced r (s32 offset))]
    [_ (if (= offset 0)
           (mem-direct r)
           (mem-displaced r (s32 offset)))]))
(define (imm [v : Int]) : RegMemImm
  (rmi-imm (s32 v)))
(define (scaled [r : Register] [scale : Scale] [index : Register] [offset : Int]) : MemoryArgument
  (mem-scaled r scale index (s32 offset)))
