#:module (yaspl optimize-intermediate)
#:import {
  (bytes)
  (dict)
  (intermediate-expression)
  (intermediate-language)
  (list)
  (maybe)
  (module-signature)
  (prim)
  (top-level-name)
  (tuples)
  (yaspl var)
}
(export
  (#:values optimize-intermediate-module))
(types
  (define-type OptimizeEnvironment
    (optimize-environment
      [inlineable : (Dict TopLevelName InlineableFunction)]
      [known-functions : (Dict TopLevelName TopLevelName)]
      [locals : (Dict Var AbstractValue)]))
  (define-type AbstractValue
    (av-unknown)
    (av-symbol [s : TopLevelName])))

(define (make-optimize-environment [mod : Module]) : OptimizeEnvironment
  (optimize-environment
    (add-all-inlineable-functions
      (imports-static-info (module-imports mod))
      (add-all-inlineable-functions
        (module-static-info mod)
        (make-dict top-level-name-cmp)))
    (add-all-known-functions
      (imports-static-info (module-imports mod))
      (add-all-known-functions
        (module-static-info mod)
        (make-dict top-level-name-cmp)))
    (make-dict var-cmp)))

(define (add-all-inlineable-functions
          [sigs : (Dict TopLevelName TopLevelSignature)]
          [env : (Dict TopLevelName InlineableFunction)])
  : (Dict TopLevelName InlineableFunction)
  (dict-fold
    sigs
    (lambda ([k : TopLevelName] [v : TopLevelSignature] [env : (Dict TopLevelName InlineableFunction)])
      (case v
        [(top-level-signature _ inlineable)
         (case inlineable
           [(just inline) (dict-add env k inline)]
           [(nothing) env])]))
    env))

(define (add-all-known-functions
          [sigs : (Dict TopLevelName TopLevelSignature)]
          [env : (Dict TopLevelName TopLevelName)])
  : (Dict TopLevelName TopLevelName)
  (dict-fold
    sigs
    (lambda ([k : TopLevelName] [v : TopLevelSignature] [env : (Dict TopLevelName TopLevelName)])
      (case v
        [(top-level-signature known _)
         (case known
           [(just known)
            ;; There might be multiple imports for the same symbol so use set instead of add
            (dict-set env k known)]
           [(nothing) env])]))
    env))

(define (optimize-intermediate-module [mod : Module]) : Module
  (match-define (module name imports exports definitions constants static-info) mod)
  (module name imports exports
          (optimize-function-definitions definitions (make-optimize-environment mod))
          constants static-info))

(define (optimize-function-definitions [functions : (List FunctionDefinition)]
                                       [env : OptimizeEnvironment])
  : (List FunctionDefinition)
  (map
    (lambda ([f : FunctionDefinition]) (optimize-function-definition f env))
    functions))

(define (optimize-function-definition [function : FunctionDefinition]
                                      [env : OptimizeEnvironment])
  : FunctionDefinition
  (match-define (function-definition name type args free-vars next-var body) function)
  (match-define env (add-arguments (append args free-vars) env))
  (function-definition name type args free-vars next-var (optimize-expr body env)))

(define (optimize-expr [expr : Expression] [env : OptimizeEnvironment]) : Expression
  (match-define recur (lambda ([e : Expression]) (optimize-expr e env)))
  (case expr
    [(int-literal _) expr]
    [(boolean-literal _) expr]
    [(local-var-expr _) expr]
    [(global-var-expr _) expr]
    [(if-expr c t f)
     (if-expr (recur c) (recur t) (recur f))]
    [(begin-expr exprs last-expr)
     (begin-expr (map recur exprs) (recur last-expr))]
    [(create-closure-expr fun-name args)
     (create-closure-expr fun-name (map recur args))]
    [(call-closure-expr tail-position op args)
     (match-define op (recur op))
     (case (abstract-value->known-function (expr->abstract-value op env) env)
       [(just fun-name)
        (recur (call-function-expr tail-position fun-name args))]
       [(nothing)
        (call-closure-expr tail-position op (map recur args))])]
    [(call-function-expr tail-position fun-name args)
     (match-define opt-args (map recur args))
     (case (dict-ref (optimize-environment-inlineable env) fun-name)
       [(just (hoas-linear-inlineable-function f))
        (f opt-args)]
       [(just (variant-accessor-inlineable-function index info))
        (case opt-args
          [(cons opt-expr (empty))
           (variant-field-ref-expr opt-expr index info)]
          [_ (panic #"Bad variant access inlining")])]
       [(just (zero-arg-constant-inlineable-function value))
        (case opt-args
          [(empty)
           (global-var-expr value)]
          [_ (panic #"Bad zero-arg constant inlining")])]
       [(just (variant-constructor-inlineable-function tag))
        (make-variant-expr tag opt-args)]
       [(nothing)
        (call-function-expr tail-position fun-name opt-args)])]
    [(let-expr name expr body)
     (match-define expr (recur expr))
     (match-define av (expr->abstract-value expr env))
     (match-define body (optimize-expr body (add-local name av env)))
     (let-expr name expr body)]
    [(int-case-expr expr (int-case-clause val body) (default-case-clause default))
     (int-case-expr
       (recur expr)
       (int-case-clause val (recur body))
       (default-case-clause (recur default)))]
    [(bytes-case-expr expr (bytes-case-clause val body) (default-case-clause default))
     (bytes-case-expr
       (recur expr)
       (bytes-case-clause val (recur body))
       (default-case-clause (recur default)))]
    [(variant-case-expr expr clauses default)
     (variant-case-expr
       (recur expr)
       (map (lambda ([v : VariantCaseClause])
              (case v
                [(variant-case-clause info fields body)
                 (match-define env
                   (add-locals (map (lambda ([v : Var]) (tuple2 v (av-unknown))) fields) env))
                 (variant-case-clause info fields (optimize-expr body env))]))
            clauses)
       (case default
         [(nothing) (nothing)]
         [(just (default-case-clause default-expr))
          (just (default-case-clause (recur default-expr)))]))]
    [(bytes-length-expr bytes)
     (bytes-length-expr (recur bytes))]
    [(bytes-ref-expr bytes off)
     (bytes-ref-expr (recur bytes) (recur off))]
    [(bytes-set!-expr bytes off val)
     (bytes-set!-expr (recur bytes) (recur off) (recur val))]
    [(prim-numeric-bin-op op l r)
     (prim-numeric-bin-op op (recur l) (recur r))]
    [(prim-comparison-bin-op op l r)
     (prim-comparison-bin-op op (recur l) (recur r))]
    [(prim-logical-bin-op op l r)
     (prim-logical-bin-op op (recur l) (recur r))]
    [(prim-logical-unary-op op e)
     (prim-logical-unary-op op (recur e))]
    [(make-variant-expr info exprs)
     (make-variant-expr info (map recur exprs))]
    [(variant-field-ref-expr expr index info)
     (variant-field-ref-expr (recur expr) index info)]
    [(no-op-cast-op src dest e)
     (no-op-cast-op src dest e)]
    [(halt-expr)
     (halt-expr)]
    [(join-expr v)
     (join-expr v)]
    [(join-point-expr v ty expr body)
     (join-point-expr v ty (recur expr) (recur body))]))

(define (add-arguments [args : (List Var)] [env : OptimizeEnvironment]) : OptimizeEnvironment
  (match-define (optimize-environment inlineable known locals) env)
  (match-define locals
    (dict-add-all
      locals
      (map
        (lambda ([v : Var]) (tuple2 v (av-unknown)))
        args)))
  (optimize-environment inlineable known locals))

(define (add-local [name : Var] [v : AbstractValue] [env : OptimizeEnvironment]) : OptimizeEnvironment
  (match-define (optimize-environment inlineable known locals) env)
  (match-define locals (dict-add locals name v))
  (optimize-environment inlineable known locals))

(define (add-locals [vars : (List (Tuple2 Var AbstractValue))] [env : OptimizeEnvironment])
  : OptimizeEnvironment
  (match-define (optimize-environment inlineable known locals) env)
  (match-define locals (dict-add-all locals vars))
  (optimize-environment inlineable known locals))


(define (expr->abstract-value [expr : Expression] [env : OptimizeEnvironment]) : AbstractValue
  (case expr
    [(global-var-expr v) (av-symbol v)]
    [(local-var-expr v)
     (case (dict-ref (optimize-environment-locals env) v)
       [(nothing) (panic (bytes-append (varargs list #"Unbound local: " (var->bytes v))))]
       [(just av) av])]
    [_ (av-unknown)]))

(define (abstract-value->known-function [av : AbstractValue] [env : OptimizeEnvironment])
  : (Maybe TopLevelName)
  (case av
    [(av-symbol s)
     (dict-ref (optimize-environment-known-functions env) s)]
    [_ (nothing)]))
