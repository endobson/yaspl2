#:module (svg)
#:import {
  (join-list)
  (list)
  (numbers)
  (prim)
  (xml)
}
(export
  #:types ()
  #:values (svg ellipse rect fill stroke stroke-width foreign-object html-body)
  #:patterns ())
(types)


(define (svg [children : (List Node)]) : Node
  (element-node #"svg"
    (varargs list
      (attribute/escape #"xmlns" (single-jl #"http://www.w3.org/2000/svg")))
    children))

(define (fill [color : Bytes]) : Attribute
  (attribute/escape #"fill" (single-jl color)))
(define (stroke [color : Bytes]) : Attribute
  (attribute/escape #"stroke" (single-jl color)))
(define (stroke-width [amount : Int]) : Attribute
  (attribute/escape #"stroke-width" (single-jl (integer->decimal-bytes amount))))

(define (ellipse [center-x : Int] [center-y : Int] [radius-x : Int] [radius-y : Int]
                 [options : (List Attribute)]) : Node
  (element-node #"ellipse"
    (append
      (varargs list
        (attribute/escape #"cx" (single-jl (integer->decimal-bytes center-x)))
        (attribute/escape #"cy" (single-jl (integer->decimal-bytes center-y)))
        (attribute/escape #"rx" (single-jl (integer->decimal-bytes radius-x)))
        (attribute/escape #"ry" (single-jl (integer->decimal-bytes radius-y))))
      options)
    (empty)))

(define (rect [x : Int] [y : Int] [width : Int] [height : Int]
              [options : (List Attribute)]) : Node
  (element-node #"rect"
    (append
      (varargs list
        (attribute/escape #"x" (single-jl (integer->decimal-bytes x)))
        (attribute/escape #"y" (single-jl (integer->decimal-bytes y)))
        (attribute/escape #"width" (single-jl (integer->decimal-bytes width)))
        (attribute/escape #"height" (single-jl (integer->decimal-bytes height))))
      options)
    (empty)))

(define (foreign-object [x : Int] [y : Int] [width : Int] [height : Int]
                        [options : (List Attribute)] [content : (List Node)]) : Node
  (element-node #"foreignObject"
    (append
      (varargs list
        (attribute/escape #"x" (single-jl (integer->decimal-bytes x)))
        (attribute/escape #"y" (single-jl (integer->decimal-bytes y)))
        (attribute/escape #"width" (single-jl (integer->decimal-bytes width)))
        (attribute/escape #"height" (single-jl (integer->decimal-bytes height))))
      options)
    content))

(define (html-body [content : (List Node)]) : Node
  (element-node #"body"
    (varargs list
      (attribute/escape #"xmlns" (single-jl #"http://www.w3.org/1999/xhtml"))
      (attribute/escape #"style" (single-jl #"margin: 0px 8px")))
    content))
