#:module (yunit)
#:import {
  (dict)
  (io)
  (list)
  (maybe)
  (prim)
  (tuples)
}
(export
  (#:types TestCase FailedAssertion)
  (#:values yunit/main test-case new-test-case failure
            and-check check-dict=?)
  (#:patterns))
(types
  (define-type TestCase
    (test-case [name : Bytes] [run : (-> Boolean)])
    (new-test-case [name : Bytes] [run : (-> (Maybe FailedAssertion))]))

  (define-type FailedAssertion
    (silent-failure)
    (failure [message : Bytes])))

(define (A B) (check-dict=?
                [val=? : (B B -> Boolean)]
                [expected : (Dict A B)]
                [actual : (Dict A B)]) : (-> (Maybe FailedAssertion))
  (and-check
    (append
      (dict-map
        actual
        (lambda ([k : A] [v : B])
          (lambda () : (Maybe FailedAssertion)
             (case (dict-ref expected k)
               [(nothing) (just (failure #"Extra key"))]
               [(just v2)
                (if (val=? v v2)
                    (nothing)
                    (just (failure #"Values don't match at key")))]))))
      (dict-map
        expected
        (lambda ([k : A] [v : B])
          (lambda () : (Maybe FailedAssertion)
            (case (dict-ref actual k)
              [(nothing) (just (failure #"Missing key"))]
              [(just v2)
               (if (val=? v v2)
                   (nothing)
                   (just (failure #"Values don't match at key")))])))))))


(define (and-check [checks : (List (-> (Maybe FailedAssertion)))]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case checks
      [(empty) (nothing)]
      [(cons check checks)
       (case (check)
         [(nothing) ((and-check checks))]
         [failure failure])])))

(define (run-test-cases [tests : (List TestCase)]) : (List (Tuple2 Bytes FailedAssertion))
  (case tests
    [(empty) (empty)]
    [(cons (test-case name action) tests)
     (if (action)
         (run-test-cases tests)
         (cons (tuple2 name (silent-failure)) (run-test-cases tests)))]
    [(cons (new-test-case name action) tests)
     (case (action)
       [(nothing) (run-test-cases tests)]
       [(just f)
        (cons (tuple2 name f) (run-test-cases tests))])]))

(define (write-indented-lines [lines : (List (Tuple2 Bytes FailedAssertion))] [out : OutputPort]) : Void
  (case lines
    [(empty) (void)]
    [(cons line lines)
     (begin
       (write-all-bytes #"  " out)
       (case line
         [(tuple2 name f)
          (begin
            (write-all-bytes name out)
            (write-all-bytes #": " out)
            (case f
              [(silent-failure) (void)]
              [(failure m) (write-all-bytes m out)]))])
       (newline out)
       (write-indented-lines lines out))]))

(define (yunit/main [stderr : OutputPort] [tests : (List TestCase)]) : Int
  (case (run-test-cases tests)
    [(empty) 0]
    [failed-cases
     (begin
       (write-line #"Test cases failed: " stderr)
       (write-indented-lines failed-cases stderr)
       1)]))
