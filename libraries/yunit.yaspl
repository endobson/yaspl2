(module yunit
  (import
    (prim
      #:types (OutputPort Bytes Byte Boolean Void)
      #:values (void)
      #:patterns ())
    (list
      #:types (List)
      #:values (empty cons)
      #:patterns (cons empty))
    (io write-all-bytes newline write-line))
  (export
    #:types (TestCase)
    #:values (yunit/main test-case)
    #:patterns ())
  (types
    (define-type TestCase
      (test-case [name Bytes] [run (-> Boolean)])))

  (define (run-test-cases [tests : (List TestCase)]) : (List Bytes)
    (case tests
      [(empty) (empty)]
      [(cons (test-case name action) tests)
       (if (action)
           (run-test-cases tests)
           (cons name (run-test-cases tests)))]))

  (define (write-indented-lines [lines : (List Bytes)] [out : OutputPort]) : Void
    (case lines
      [(empty) (void)]
      [(cons line lines)
       (begin
         (write-all-bytes #"  " out)
         (write-all-bytes line out)
         (newline out)
         (write-indented-lines lines out))]))

  (define (yunit/main [stderr : OutputPort] [tests : (List TestCase)]) : Byte
    (case (run-test-cases tests)
      [(empty) 0]
      [failed-cases
       (begin
         (write-line #"Test cases failed: " stderr)
         (write-indented-lines failed-cases stderr)
         1)])))

