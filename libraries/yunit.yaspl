#:module (yunit)
#:import {
  (bytes)
  (data lifted-primitives)
  (dict)
  (either)
  (io)
  (list)
  (maybe)
  (numbers)
  (prim)
  (tuples)
}
(export
  (#:types TestCase FailedAssertion)
  (#:values yunit/main test-case failure
            and-check check-dict=?
            expect-equal expect-not-equal
            eq/bytes eq/int eq/boolean
            eq/list eq/either eq/maybe eq/tuple2
            expect-equal/bytes expect-equal/boolean expect-equal/int))
(types
  (define-type TestCase
    (test-case [name : Bytes] [run : (-> (Maybe FailedAssertion))]))

  (define-type (EqualityUtil A)
    (equality-util
      [=? : (A A -> Boolean)]
      [print : (A -> Bytes)]))

  (define-type FailedAssertion
    (failure [message : Bytes])))

(define [A B] (check-dict=?
                [val=? : (B B -> Boolean)]
                [expected : (Dict A B)]
                [actual : (Dict A B)]) : (-> (Maybe FailedAssertion))
  (and-check
    (append
      (dict-map
        actual
        (lambda ([k : A] [v : B])
          (lambda () : (Maybe FailedAssertion)
             (case (dict-ref expected k)
               [(nothing) (just (failure #"Extra key"))]
               [(just v2)
                (if (val=? v v2)
                    (nothing)
                    (just (failure #"Values don't match at key")))]))))
      (dict-map
        expected
        (lambda ([k : A] [v : B])
          (lambda () : (Maybe FailedAssertion)
            (case (dict-ref actual k)
              [(nothing) (just (failure #"Missing key"))]
              [(just v2)
               (if (val=? v v2)
                   (nothing)
                   (just (failure #"Values don't match at key")))])))))))

(define [A] (expect-equal [eq-util : (EqualityUtil A)])
  : (A A -> (Maybe FailedAssertion))
  (lambda ([actual : A] [expected : A])
    (match-define (equality-util =? print) eq-util)
    (if (=? actual expected)
        (nothing)
        (just (failure
                (bytes-append
                  (varargs list #"Value Mismatch: Actual: " (print actual)
                                #" Expected: " (print expected))))))))

(define [A] (expect-not-equal [eq-util : (EqualityUtil A)])
  : (A A -> (Maybe FailedAssertion))
  (lambda ([actual : A] [expected : A])
    (match-define (equality-util =? print) eq-util)
    (if (=? actual expected)
        (just (failure
                (bytes-append
                  (varargs list #"Value Match: Actual: " (print actual)
                                #" Expected: " (print expected)))))
        (nothing))))

(define (eq/bytes) : (EqualityUtil Bytes)
  (equality-util bytes=? (lambda ([x : Bytes]) (bytes-append (varargs list #"#\"" x #"\"")))))

(define (eq/int) : (EqualityUtil LiftedInt)
  (equality-util lifted-int=? (lambda ([(lifted-int x) : LiftedInt])
                                (integer->decimal-bytes x))))

(define (eq/boolean) : (EqualityUtil LiftedBoolean)
  (equality-util lifted-boolean=?
                 (lambda ([l : LiftedBoolean])
                   (case l
                     [(lifted-true) #"true"]
                     [(lifted-false) #"false"]))))

(define [A] (eq/list [elem-util : (EqualityUtil A)])
  : (EqualityUtil (List A))
  (match-define (equality-util elem=? print-elem) elem-util)
  (equality-util
    (list=? elem=?)
    (lambda ([l : (List A)]) : Bytes
      (bytes-append
        (cons #"("
          (append
            (interleave (map print-elem l) #" ")
            (varargs list #")")))))))

(define [A] (eq/maybe [elem-util : (EqualityUtil A)])
  : (EqualityUtil (Maybe A))
  (match-define (equality-util elem=? print-elem) elem-util)
  (equality-util
    (maybe=? elem=?)
    (lambda ([v : (Maybe A)]) : Bytes
      (case v
        [(nothing) #"(nothing)"]
        [(just e)
         (bytes-append (varargs list #"(just " (print-elem e) #")"))]))))

(define [A B] (eq/either [a-util : (EqualityUtil A)] [b-util : (EqualityUtil B)])
  : (EqualityUtil (Either A B))
  (match-define (equality-util a=? print-a) a-util)
  (match-define (equality-util b=? print-b) b-util)
  (equality-util
    (either=? a=? b=?)
    (lambda ([v : (Either A B)]) : Bytes
      (case v
        [(left a)
         (bytes-append (varargs list #"(left " (print-a a) #")"))]
        [(right b)
         (bytes-append (varargs list #"(right " (print-b b) #")"))]))))

(define [A B] (eq/tuple2 [a-util : (EqualityUtil A)] [b-util : (EqualityUtil B)])
  : (EqualityUtil (Tuple2 A B))
  (match-define (equality-util a=? print-a) a-util)
  (match-define (equality-util b=? print-b) b-util)
  (equality-util
    (tuple2=? a=? b=?)
    (lambda ([v : (Tuple2 A B)]) : Bytes
      (case v
        [(tuple2 a b)
         (bytes-append (varargs list #"(tuple2 " (print-a a) #" " (print-b b) #")"))]))))

(define (expect-equal/bytes [actual : Bytes] [expected : Bytes])
  : (Maybe FailedAssertion)
  ((expect-equal (eq/bytes)) actual expected))

(define (expect-equal/int [actual : Int] [expected : Int])
  : (Maybe FailedAssertion)
  ((expect-equal (eq/int))
   (lifted-int actual) (lifted-int expected)))

(define (expect-equal/boolean [actual : Boolean] [expected : Boolean])
  : (Maybe FailedAssertion)
  ((expect-equal (eq/boolean))
   (lifted-boolean actual) (lifted-boolean expected)))

(define (and-check [checks : (List (-> (Maybe FailedAssertion)))]) : (-> (Maybe FailedAssertion))
  (lambda ()
    (case checks
      [(empty) (nothing)]
      [(cons check checks)
       (case (check)
         [(nothing) ((and-check checks))]
         [failure failure])])))

(define (run-test-cases [tests : (List TestCase)]) : (List (Tuple2 Bytes FailedAssertion))
  (filter-map
    (lambda ([t : TestCase]) : (Maybe (Tuple2 Bytes FailedAssertion))
      (match-define (test-case name action) t)
      (case (action)
        [(nothing) (nothing)]
        [(just f) (just (tuple2 name f))]))
    tests))

(define (write-indented-lines [lines : (List (Tuple2 Bytes FailedAssertion))] [out : OutputPort]) : Void
  (for-each
    (lambda ([line : (Tuple2 Bytes FailedAssertion)])
      (match-define (tuple2 name (failure m)) line)
      (begin
        (write-all-bytes #"  " out)
        (write-all-bytes name out)
        (write-all-bytes #": " out)
        (write-all-bytes m out)
        (newline out)))
    lines))

(define (yunit/main [stderr : OutputPort] [tests : (List TestCase)]) : Int
  (case (run-test-cases tests)
    [(empty) 0]
    [failed-cases
     (begin
       (write-line #"Test cases failed: " stderr)
       (write-indented-lines failed-cases stderr)
       1)]))
