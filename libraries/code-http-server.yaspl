(module code-http-server
  (import
    (prim
      #:types (Array Bytes InputPort OutputPort OutputPort Void)
      #:values (socket sendto bind shutdown listen accept make-bytes bytes-set! write-bytes quotient
                close-output-port panic
                remainder = void connect bytes-length + * bytes-ref array-length array-ref)
      #:patterns ())
    (io write-line read-all-bytes write-all-bytes newline)
    (buffered-port
      #:types (BufferedPort)
      #:values (make-buffered-port read-crlf-line)
      #:patterns (line-result))
    (numbers decimal-bytes->integer integer->decimal-bytes)
    (maybe
      #:types (Maybe)
      #:values (just nothing)
      #:patterns (just nothing))
    (bytes bytes-copy! bytes-append)
    (join-list
      #:types (JoinList)
      #:values (append-jl single-jl snoc-jl cons-jl jl->list)
      #:patterns ())
    (regexp
      #:types (Regexp)
      #:values (any-regexp group-regexp rep-regexp regexp-match epsilon-regexp seq-regexp lit-regexp
                non-greedy-rep-regexp)
      #:patterns ())
    (list
      #:types (List)
      #:values (cons empty length reverse map list)
      #:patterns (cons empty))
    (mach spawn)
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns (tuple2))
    (tcp tcp-address tcp-socket-bind tcp-socket-accept tcp-socket-set-reuse-address)
    (http-server 
      #:types (Ipv4Address)
      #:values (run-http-server http-response)
      #:patterns (http-request http-request-header))
    (ip
      #:types (Ipv4Address)
      #:values (bytes->ipv4-address)
      #:patterns ()))
  (export)
  (types
    (define-type HtmlElement
      (html-element [head HeadElement] [body BodyElement]))
    (define-type HeadElement
      (head-element [title (Maybe TitleElement)]))
    (define-type TitleElement
      (title-element [contents Bytes]))
    (define-type BodyElement
      (body-element [contents Bytes])))

  (define (double-quote-bytes) : Bytes
    (let ([bytes (make-bytes 1)])
      (begin
        (bytes-set! bytes 0 34)
        bytes)))

  (define (html-document->xml-bytes [e : HtmlElement]) : Bytes
    (bytes-append
      (jl->list
        (cons-jl #"<?xml version="
          (cons-jl (double-quote-bytes)
            (cons-jl #"1.0"
              (cons-jl (double-quote-bytes) 
                (cons-jl #" encoding="
                  (cons-jl (double-quote-bytes) 
                    (cons-jl #"UTF-8"
                      (cons-jl (double-quote-bytes) 
                        (cons-jl #"?>" (html-element->xml-bytes e)))))))))))))


  (define (html-element->xml-bytes [e : HtmlElement]) : (JoinList Bytes)
    (case e
      [(html-element head body)
       (cons-jl #"<html xmlns="
         (cons-jl (double-quote-bytes) 
           (cons-jl #"http://www.w3.org/1999/xhtml"
             (cons-jl (double-quote-bytes) (cons-jl #">"
               (snoc-jl
                 (append-jl (head-element->xml-bytes head)
                            (body-element->xml-bytes body))
                 #"</html>"))))))]))

  (define (head-element->xml-bytes [e : HeadElement]) : (JoinList Bytes)
    (single-jl #"<head></head>"))

  (define (body-element->xml-bytes [e : BodyElement]) : (JoinList Bytes)
    (case e
      [(body-element content)
       (cons-jl #"<body>" (snoc-jl (single-jl content) #"</body>"))]))

  (define (request-handler [request : HttpRequest]) : HttpResponse
    (case request
      [(http-request resource headers)
       (http-response
         200
         #"OK"
         #"application/xhtml+xml"
         (html-document->xml-bytes
           (html-element
             (head-element (nothing))
             (body-element #"foobar"))))]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Byte
    (if (= (array-length args) 3)
        (case (bytes->ipv4-address (array-ref args 1))
          [(just ip-addr)
           (let ([address (tcp-address ip-addr (decimal-bytes->integer (array-ref args 2)))])
             (run-http-server address request-handler))]
          [(nothing)
           (begin
             (write-line #"Unparsable ip address" stderr)
             1)])
        (begin
          (write-line #"Wrong number of arguments" stderr)
          1))))
