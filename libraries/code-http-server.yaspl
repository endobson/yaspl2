#:module (code-http-server)
#:import {
  (bytes) {
    #:values
      bytes=?
      starts-with?
      subbytes
  }
  (depth-first-search) {
    #:values
      depth-first-search
  }
  (dict) {
    #:types
      Dict
    #:values
      dict-add
      dict-map
      dict-ref
      dict-update
      dict-values
      make-dict
  }
  (either) {
    #:patterns
      left
      right
  }
  (http-server) {
    #:types
      HttpRequest
      HttpResponse
    #:values
      http-response
      run-http-server
    #:patterns
      http-request
  }
  (io) {
    #:values
      write-line
  }
  (ip) {
    #:values
      bytes->ipv4-address
  }
  (join-list) {
    #:types
      JoinList
    #:values
      append-jl
      concat-jl
      jl->list
      single-jl
      snoc-jl
  }
  (list) {
    #:types
      List
    #:values
      array->list
      build-list
      cons
      empty
      foldl
      length
      list
      list-ref
      map
    #:patterns
      cons
      empty
  }
  (maybe) {
    #:types
      Maybe
    #:values
      just
      nothing
    #:patterns
      just
      nothing
  }
  (numbers) {
    #:values
      decimal-bytes->integer
  }
  (prim) {
    #:types
      Array
      Bytes
      InputPort
      Int
      OutputPort
    #:values
      *
      +
      <
      =
      bytes-length
      panic
  }
  (print-stack-function) {
    #:values
      command->bytes
      extract-top-level-objects
      function->bytes
      terminal->bytes
  }
  (stack-machine) {
    #:types
      StackBasicBlock
      StackFunction
      StackTerminal
      TopLevelObject
      VariantCases
    #:values
      stack-basic-block-terminal
    #:patterns
      boolean-jmp
      bytes-tlo
      catch-all-case
      function-tlo
      known-tail-call
      no-catch-all-case
      return
      stack-basic-block
      stack-function
      tail-call
      trivial-closure-tlo
      uncond-jmp
      variant-case
      variant-switch
  }
  (svg) {
    #:values
      fill
      foreign-object
      html-body
      rect
      stroke
      svg
  }
  (tcp) {
    #:values
      tcp-address
  }
  (tuples) {
    #:types
      Tuple2
      Tuple3
    #:values
      tuple2
      tuple3
    #:patterns
      tuple2
      tuple3
  }
  (x86-64-stack-machine) {
    #:types
      AssemblyFragment
    #:values
      assembly-commands->bytes
      convert-objects
      fragment->commands
    #:patterns
      address-fragment
      bytes-fragment
      function-fragment
  }
  (xml) {
    #:types
      Attribute
      Node
    #:values
      attribute
      document->xml-bytes
      element-node
      text-node
  }
}
(export
  #:types ()
  #:values ()
  #:patterns ())
(types
  (define-type GraphicBlock
    (graphic-block [width : Int] [height : Int] [content : Node])))

(define (html [head : Node] [body : Node]) : Node
  (element-node
    #"html"
    (cons (attribute #"xmlns" (single-jl #"http://www.w3.org/1999/xhtml")) (empty))
    (cons head (cons body (empty)))))
(define (head) : Node
  (element-node #"head" (empty) (empty)))
(define (body [children : (List Node)]) : Node
  (element-node #"body" (empty) children))

(define (pre [child : Node]) : Node
  (element-node #"pre" (empty) (cons child (empty))))
(define (pre* [attributes : (List Attribute)] [child : Node]) : Node
  (element-node #"pre" attributes (cons child (empty))))
(define (code [child : Node]) : Node
  (element-node #"code" (empty) (cons child (empty))))
(define (div [child : Node]) : Node
  (element-node #"div" (empty) (cons child (empty))))
(define (link [uri : (JoinList Bytes)] [contents : Node]) : Node
  (element-node #"a"
    (cons (attribute #"href" uri) (empty))
    (cons contents (empty))))

(define (top-level-object->node [object : TopLevelObject]) : (Maybe Node)
  (case object
    [(function-tlo (stack-function name _ _))
     (just (div (link (single-jl name) (text-node (single-jl name)))))]
    [(bytes-tlo name _)
     (nothing)]
    [(trivial-closure-tlo name _)
     (nothing)]))

(define (fragment->node [fragment : AssemblyFragment]) : Node
  (case fragment
    [(function-fragment name _)
     (div (link (single-jl name) (text-node (single-jl name))))]
    [(address-fragment name _)
     (div (link (single-jl name) (text-node (single-jl name))))]
    [(bytes-fragment name _)
     (div (link (single-jl name) (text-node (single-jl name))))]))


(define (find-function [name : Bytes] [objects : (List TopLevelObject)]) : (Maybe StackFunction)
  (case objects
    [(empty) (nothing)]
    [(cons (function-tlo func) objects)
     (case func
       [(stack-function func-name _ _)
        (if (bytes=? name func-name)
            (just func)
            (find-function name objects))])]
    [(cons _ objects)
     (find-function name objects)]))


(define (find-fragment [name : Bytes] [fragments : (List AssemblyFragment)]) : (Maybe AssemblyFragment)
  (case fragments
    [(empty) (nothing)]
    [(cons frag fragments)
     (case frag
       [(function-fragment name2 _)
        (if (bytes=? name name2)
            (just frag)
            (find-fragment name fragments))]
       [(address-fragment name2 _)
        (if (bytes=? name name2)
            (just frag)
            (find-fragment name fragments))]
       [(bytes-fragment name2 _)
        (if (bytes=? name name2)
            (just frag)
            (find-fragment name fragments))])]))

(define (A B) (map/maybe [f : (A -> (Maybe B))] [l : (List A)]) : (List B)
  (case l
    [(empty) (empty)]
    [(cons e l)
     (case (f e)
       [(nothing) (map/maybe f l)]
       [(just e) (cons e (map/maybe f l))])]))

(define (not-found) : HttpResponse
  (http-response 404 #"Not Found" #"text/plain" #"Not Found"))

(define (xhtml-ok-response [node : Node]) : HttpResponse
  (http-response 200 #"OK" #"application/xhtml+xml" (document->xml-bytes node)))
(define (svg-ok-response [node : Node]) : HttpResponse
  (http-response 200 #"OK" #"image/svg+xml" (document->xml-bytes node)))

(define (serve-assembly-response
          [fragments : (List AssemblyFragment)]
          [name : Bytes]) : HttpResponse
  (if (= (bytes-length name) 0)
      (xhtml-ok-response
        (html
          (head)
          (body (map fragment->node fragments))))
      (case (find-fragment name fragments)
        [(nothing) (not-found)]
        [(just fragment)
         (xhtml-ok-response
           (html
             (head)
             (body
               (cons
                 (pre (code (text-node (assembly-commands->bytes
                                         (jl->list (fragment->commands fragment))))))
                 (empty)))))])))

(define (serve-stack-response
          [objects : (List TopLevelObject)]
          [name : Bytes]) : HttpResponse
  (if (= (bytes-length name) 0)
      (xhtml-ok-response
        (html
          (head)
          (body (map/maybe top-level-object->node objects))))
      (case (find-function name objects)
        [(nothing) (not-found)]
        [(just function)
         (xhtml-ok-response
           (html
             (head)
             (body
               (cons
                 (pre (code (text-node (function->bytes function))))
                 (empty)))))])))
(define (terminal->successors [term : StackTerminal]) : (List Int)
  (case term
    [(boolean-jmp true false) (varargs list true false)]
    [(uncond-jmp index) (varargs list index)]
    [(variant-switch cases) (variant-cases->successors cases)]
    [(return _) (empty)]
    [(tail-call _ _) (empty)]
    [(known-tail-call _ _ _) (empty)]))

(define (variant-cases->successors [cases : VariantCases]) : (List Int)
  (case cases
    [(no-catch-all-case) (empty)]
    [(catch-all-case index) (varargs list index)]
    [(variant-case _ index cases)
     (cons index (variant-cases->successors cases))]))

(define (panic/int-list [bytes : Bytes]) : (List Int)
  (panic bytes))
(define (panic/int [bytes : Bytes]) : Int
  (panic bytes))
(define (panic/stack-basic-block-list [bytes : Bytes]) : (List StackBasicBlock)
  (panic bytes))
(define (panic/dict-int-stack-basic-block-list [bytes : Bytes]) : (Dict Int (List StackBasicBlock))
  (panic bytes))
(define (empty/stack-basic-block-list) : (List StackBasicBlock)
  (empty))
(define (make-dict/int-stack-basic-block-list) : (Dict Int (List StackBasicBlock))
  (make-dict =))


(define (make-blocks-by-depth
          [depths : (Dict Int Int)]
          [blocks : (List StackBasicBlock)])
  : (Dict Int (List StackBasicBlock))
  (foldl
    (lambda ([entry : (Tuple2 Int Int)] [acc : (Dict Int (List StackBasicBlock))])
      (case entry
        [(tuple2 index depth)
         (case (list-ref blocks index)
           [(nothing) (panic/dict-int-stack-basic-block-list #"Bad index")]
           [(just block)
            (dict-update
              acc
              depth
              (lambda ([blocks : (List StackBasicBlock)]) (cons block blocks))
              (empty/stack-basic-block-list))])]))
    (dict-map depths (lambda ([key : Int] [value : Int]) (tuple2 key value)))
    (make-dict/int-stack-basic-block-list)))

(define (layer-blocks [blocks : (List StackBasicBlock)]) : (List (List StackBasicBlock))
  (let ([succ
          (lambda ([index : Int])
            (case (list-ref blocks index)
              [(nothing) (panic/int-list #"Bad index")]
              [(just block) (terminal->successors (stack-basic-block-terminal block))]))])
    (let ([ordered-indices (depth-first-search succ (varargs list 0) =)])
      (let ([depths (compute-depths succ ordered-indices (dict-add (make-dict =) 0 0))])
        (let ([max-depth (max* 0 (dict-values depths))])
          (let ([blocks-by-depth (make-blocks-by-depth depths blocks)])
            (let ([ref (lambda ([depth : Int])
                         (case (dict-ref blocks-by-depth depth)
                           [(nothing) (panic/stack-basic-block-list #"Bad index")]
                           [(just blocks) blocks]))])
              (build-list (+ max-depth 1) ref))))))))


(define (compute-depths [succ : (Int -> (List Int))] [vs : (List Int)]
                        [acc : (Dict Int Int)]) : (Dict Int Int)
  (case vs
    [(empty) acc]
    [(cons v vs)
     (let ([cur-height
            (case (dict-ref acc v)
              [(nothing) (panic/int #"Bad index")]
              [(just v) v])])
       (compute-depths
         succ
         vs
         (foldl (lambda ([v : Int] [acc : (Dict Int Int)])
                  (dict-update acc v
                               (lambda ([old-height : Int])
                                 (max old-height (+ 1 cur-height)))
                               0))
                (succ v)
                acc)))]))


(define (layout-blocks [blocks : (List (List StackBasicBlock))]) : (List Node)
  (case
    (foldl
      (lambda ([blocks : (List StackBasicBlock)] [acc : (Tuple2 Int (List Node))])
        (case acc
          [(tuple2 y-offset nodes)
           (case
             (foldl
               (lambda ([block : StackBasicBlock] [acc : (Tuple3 Int Int (List Node))])
                 (case acc
                   [(tuple3 x-offset max-height nodes)
                    (case (block->graphic-block block)
                      [(graphic-block width height html)
                       (tuple3
                         (+ (+ x-offset width) 20)
                         (max max-height height)
                         (cons
                           (rect x-offset y-offset width height
                                 (varargs list (fill #"none") (stroke #"black")))
                           (cons
                             (foreign-object x-offset y-offset width height (empty) (varargs list html))
                             nodes)))])]))
               blocks
               (tuple3 10 0 nodes))
             [(tuple3 _ height nodes)
              (tuple2 (+ y-offset (+ height 20)) nodes)])]))
      blocks
      (tuple2 10 (empty/node)))
    [(tuple2 _ nodes) nodes]))




(define (block->graphic-block [block : StackBasicBlock]) : GraphicBlock
  (graphic-block
    (+ 15 (* 8 (basic-block-width block)))
    (+ 2 (* 15 (basic-block-size block)))
    (html-body (varargs list (block->node block)))))


(define (empty/node) : (List Node)
  (empty))

(define (serve-stack-graphic-response
          [objects : (List TopLevelObject)]
          [name : Bytes]) : HttpResponse
  (if (= (bytes-length name) 0)
      (xhtml-ok-response
        (html
          (head)
          (body (map/maybe top-level-object->node objects))))
      (case (find-function name objects)
        [(nothing) (not-found)]
        [(just (stack-function _ _ basic-blocks))
         (svg-ok-response
           (svg (layout-blocks (layer-blocks basic-blocks))))])))

(define (block->node [block : StackBasicBlock]) : Node
  (let ([make-line (lambda ([text : (JoinList Bytes)]) (snoc-jl text #"\n"))])
    (case block
      [(stack-basic-block cmds terminal)
       (pre*
         (varargs list
           (attribute #"style" (single-jl #"margin: 0px 0px")))
         (code (text-node
                 (append-jl
                   (concat-jl (map make-line (map command->bytes cmds)))
                   (make-line (terminal->bytes terminal))))))])))



(define (basic-block-size [block : StackBasicBlock]) : Int
  (case block
    [(stack-basic-block cmds _)
     (+ 1 (length cmds))]))

(define (jl-bytes-length [v : (JoinList Bytes)]) : Int
  (foldl (lambda ([v : Bytes] [sum : Int]) (+ sum (bytes-length v)))
         (jl->list v) 0))
(define (max [v1 : Int] [v2 : Int]) : Int
  (if (< v1 v2) v2 v1))
(define (max* [v : Int] [vs : (List Int)]) : Int
  (case vs
    [(empty) v]
    [(cons v2 vs) (max* (max v v2) vs)]))

(define (basic-block-width [block : StackBasicBlock]) : Int
  (case block
    [(stack-basic-block cmds terminal)
     (max* (jl-bytes-length (terminal->bytes terminal))
           (map jl-bytes-length (map command->bytes cmds)))]))


(define (serve-index-response) : HttpResponse
  (xhtml-ok-response
    (html
      (head)
      (body
        (varargs list
           (div (link (single-jl #"/stack/") (text-node (single-jl #"stack"))))
           (div (link (single-jl #"/stack-graphic/") (text-node (single-jl #"stack-graphic"))))
           (div (link (single-jl #"/assembly/") (text-node (single-jl #"assembly")))))))))

(define (make-request-handler
          [objects : (List TopLevelObject)]
          [fragments : (List AssemblyFragment)]) : (HttpRequest -> HttpResponse)
  (lambda ([request : HttpRequest])
    (case request
      [(http-request path headers)
       (if (bytes=? path #"/")
           (serve-index-response)
           (if (starts-with? path #"/assembly/")
               (let ([name (subbytes path 10 (bytes-length path))])
                 (serve-assembly-response fragments name))
               (if (starts-with? path #"/stack/")
                   (let ([name (subbytes path 7 (bytes-length path))])
                     (serve-stack-response objects name))
                   (if (starts-with? path #"/stack-graphic/")
                       (let ([name (subbytes path 15 (bytes-length path))])
                         (serve-stack-graphic-response objects name))
                       (not-found)))))])))

(define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : Int
  (case (array->list args)
    [(empty)
     (begin
       (write-line #"No executable specified???" stderr)
       1)]
    [(cons _ (empty))
     (begin
       (write-line #"No ip address supplied." stderr)
       1)]
    [(cons _ (cons _ (empty)))
     (begin
       (write-line #"No port supplied" stderr)
       1)]
    [(cons _ (cons ip-addr (cons port module-names)))
     (case (bytes->ipv4-address ip-addr)
       [(just ip-addr)
        (case (decimal-bytes->integer port)
          [(just port)
           (let ([address (tcp-address ip-addr port)])
             (case (extract-top-level-objects module-names)
               [(left v)
                (begin
                  (write-line v stderr)
                  1)]
               [(right objects)
                (begin
                  (run-http-server address (make-request-handler objects (convert-objects objects)))
                  (write-line #"Http server stopped running." stderr)
                  1)]))]
          [(nothing)
           (begin
             (write-line #"Unparsable port number" stderr)
             1)])]
       [(nothing)
        (begin
          (write-line #"Unparsable ip address" stderr)
          1)])]))
