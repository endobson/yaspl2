#:module (sexp-parser)
#:import {
  (bytes)
  (data lifted-primitives)
  (data source-location)
  (either)
  (formats sexp)
  (lexer)
  (list)
  (maybe)
  (numbers)
  (prim)
}
(export
  (#:types SexpResult SexpError)
  (#:values parse-single-sexp parse-sexp parse-sexps)
  (#:patterns sexp-result sexp-result-eof sexp-result-error sexp-error))
(types
  (define-type ParenStyle
    (bracket)
    (brace)
    (paren))

  (define-type SexpResult
    (sexp-result [v : Sexp] [lexer : Lexer])
    (sexp-result-eof [source : SourceSpan])
    (sexp-result-error [e : SexpError]))
  (define-type InnerSexpResult
    (inner-sexp-result [v : Sexp] [lexer : Lexer])
    (inner-sexp-result-error [e : SexpError]))

  (define-type SexpError
    (sexp-error [v : Bytes] [source : SourceSpan])))

(define (parse-sexps [sbytes : SourcedBytes]) : (Either SexpError (SourceSpanAnnotated (List Sexp)))
  (parse-sexps/acc (make-lexer sbytes) (empty)))

(define (parse-sexps/acc [lexer : Lexer] [acc : (List Sexp)])
  : (Either SexpError (SourceSpanAnnotated (List Sexp)))
  (let ([val (loop lexer)])
    (case val
      [(sexp-result-eof eof-loc)
       (let ([sexps (reverse acc)])
         (right
           (source-span-annotated
             sexps
             (case sexps
               [(empty) eof-loc]
               [(cons s _)
                (full-span (sexp-source-span s) eof-loc)]))))]
      [(sexp-result v lexer)
       (parse-sexps/acc lexer (cons v acc))]
      [(sexp-result-error e) (left e)])))

(define (parse-single-sexp [sbytes : SourcedBytes]) : (Either SexpError Sexp)
  (let ([lexer (make-lexer sbytes)])
    (let ([val (loop lexer)])
      (case val
        [(sexp-result-eof loc) (left (sexp-error #"End of input" loc))]
        [(sexp-result-error e) (left e)]
        [(sexp-result v lexer)
          (case (run-lexer lexer)
            [(lex-result (source-span-annotated _ src) _lexer)
             (left (sexp-error #"Leftovers" src))]
            [(bad-input v loc)
             (left (sexp-error (bytes-append (varargs list #"Leftovers: Bad input: " v)) loc))]
            [(end-of-input _)
             (right v)])]))))
(define (parse-sexp [lexer : Lexer]) : SexpResult
  (loop lexer))

(define (loop [lexer : Lexer]) : SexpResult
  (let ([val (run-lexer lexer)])
    (case val
      [(end-of-input loc) (sexp-result-eof loc)]
      [(bad-input v loc)
       (sexp-result-error
         (sexp-error (bytes-append (varargs list #"Unable to lex input: " v)) loc))]
      [(lex-result (source-span-annotated v source) lexer)
       (case v
         [(decimal-number-lexeme bytes)
          (case (decimal-bytes->integer bytes)
            [(nothing) (panic #"decimal-number-lexeme didn't contain a decimal number")]
            [(just (lifted-int n))
             (sexp-result (number-sexp n source) lexer)])]
         [(hexadecimal-number-lexeme bytes)
          (case (hexadecimal-bytes->integer bytes)
            [(nothing) (panic #"hexadecimal-number-lexeme didn't contain a hexadecimal number")]
            [(just (lifted-int n))
             (sexp-result (number-sexp n source) lexer)])]
         [(symbol-lexeme bytes) (sexp-result (symbol-sexp bytes source) lexer)]
         [(bytes-lexeme bytes) (sexp-result (bytes-sexp bytes source) lexer)]
         [(keyword-lexeme bytes) (sexp-result (keyword-sexp bytes source) lexer)]
         [(boolean-lexeme bool) (sexp-result (boolean-sexp bool source) lexer)]
         [(left-paren-lexeme)
          (inner-sexp-result->sexp-result (node-loop (empty) source (paren) lexer))]
         [(left-bracket-lexeme)
          (inner-sexp-result->sexp-result (node-loop (empty) source (bracket) lexer))]
         [(left-brace-lexeme)
          (inner-sexp-result->sexp-result (node-loop (empty) source (brace) lexer))]
         [(comment-lexeme) (loop lexer)]
         [(right-bracket-lexeme) (sexp-result-error (sexp-error #"Unexpected ]." source))]
         [(right-brace-lexeme) (sexp-result-error (sexp-error #"Unexpected }." source))]
         [(right-paren-lexeme) (sexp-result-error (sexp-error #"Unexpected )." source))])])))

(define (inner-sexp-result->sexp-result [v : InnerSexpResult]) : SexpResult
  (case v
    [(inner-sexp-result v lexer) (sexp-result v lexer)]
    [(inner-sexp-result-error e) (sexp-result-error e)]))

(define (node-loop [vals : (List Sexp)] [source-start : SourceSpan]
                   [paren-style : ParenStyle] [lexer : Lexer])
  : InnerSexpResult
  (let ([val (run-lexer lexer)])
    (case val
      [(end-of-input _)
       (inner-sexp-result-error
         (sexp-error
           (case paren-style
             [(paren) #"Unmatched open paren"]
             [(bracket) #"Unmatched open bracket"]
             [(brace) #"Unmatched open brace"])
           source-start))]
      [(bad-input v source)
       (inner-sexp-result-error
         (sexp-error
           (bytes-append (varargs list #"Unable to lex input: " v))
           source))]
      [(lex-result (source-span-annotated v source) lexer)
        (case v
          [(comment-lexeme)
           (node-loop vals source-start paren-style lexer)]
          [(symbol-lexeme bytes)
           (node-loop (cons (symbol-sexp bytes source) vals) source-start paren-style lexer)]
          [(decimal-number-lexeme bytes)
           (case (decimal-bytes->integer bytes)
             [(nothing) (panic #"decimal-number-lexeme didn't contain a decimal number")]
             [(just (lifted-int n))
              (node-loop (cons (number-sexp n source) vals) source-start paren-style lexer)])]
          [(hexadecimal-number-lexeme bytes)
           (case (hexadecimal-bytes->integer bytes)
             [(nothing) (panic #"hexadecimal-number-lexeme didn't contain a hexadecimal number")]
             [(just (lifted-int n))
              (node-loop (cons (number-sexp n source) vals) source-start paren-style lexer)])]
          [(bytes-lexeme bytes)
           (node-loop (cons (bytes-sexp bytes source) vals) source-start paren-style lexer)]
          [(keyword-lexeme bytes)
           (node-loop (cons (keyword-sexp bytes source) vals) source-start paren-style lexer)]
          [(boolean-lexeme bool)
           (node-loop (cons (boolean-sexp bool source) vals) source-start paren-style lexer)]
          [(left-paren-lexeme)
            (case (node-loop (empty) source (paren) lexer)
              [(inner-sexp-result v lexer)
               (node-loop (cons v vals) source-start paren-style lexer)]
              [(inner-sexp-result-error e) (inner-sexp-result-error e)])]
          [(left-bracket-lexeme)
            (case (node-loop (empty) source (bracket) lexer)
              [(inner-sexp-result v lexer)
               (node-loop (cons v vals) source-start paren-style lexer)]
              [(inner-sexp-result-error e) (inner-sexp-result-error e)])]
          [(left-brace-lexeme)
            (case (node-loop (empty) source (brace) lexer)
              [(inner-sexp-result v lexer)
               (node-loop (cons v vals) source-start paren-style lexer)]
              [(inner-sexp-result-error e) (inner-sexp-result-error e)])]
          [(right-bracket-lexeme)
           (case paren-style
             [(bracket)
              (inner-sexp-result (bracket-node (reverse vals) (full-span source-start source)) lexer)]
             [_ (inner-sexp-result-error (sexp-error #"Unexpected ]." source))])]
          [(right-brace-lexeme)
           (case paren-style
             [(brace)
              (inner-sexp-result (brace-node (reverse vals) (full-span source-start source)) lexer)]
             [_ (inner-sexp-result-error (sexp-error #"Unexpected }." source))])]
          [(right-paren-lexeme)
           (case paren-style
             [(paren)
              (inner-sexp-result (node (reverse vals) (full-span source-start source)) lexer)]
             [_ (inner-sexp-result-error (sexp-error #"Unexpected )." source))])])])))

(define (full-span [s1 : SourceSpan] [s2 : SourceSpan]) : SourceSpan
  (match-define (source-span source1 start-line start-column _ _) s1)
  (match-define (source-span source2 _ _ end-line end-column) s2)
  (if (source=? source1 source2)
      (source-span source1 start-line start-column end-line end-column)
      (panic #"Broken sources")))
