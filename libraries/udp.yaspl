#:module (udp)
#:import {
  (ip) {
    #:types
      Ipv4Address
    #:values
      ipv4-address
      ipv4-address-octet1
      ipv4-address-octet2
      ipv4-address-octet3
      ipv4-address-octet4
  }
  (prim) {
    #:types
      Bytes
      Int
      Socket
      Void
    #:values
      *
      +
      bind
      bytes-length
      bytes-ref
      bytes-set!
      make-bytes
      quotient
      recvfrom
      remainder
      sendto
      socket
      u8
  }
  (tuples) {
    #:types
      Tuple2
    #:values
      tuple2
  }
}
(export
  #:types (UdpAddress UdpSocket)
  #:values (udp-address make-udp-socket udp-socket-bind udp-socket-recv! udp-socket-send-to)
  #:patterns ())
(types
  (define-type UdpSocket
    (udp-socket [sock : Socket]))
  (define-type UdpAddress
    (udp-address [ip : Ipv4Address] [port : Int])))

(define (make-udp-socket) : UdpSocket
  ;; First argument is for IPV4
  ;; Second argument is for UDP
  (udp-socket (socket 2 2 0)))

(define (udp-socket-bind [sock : UdpSocket] [address : UdpAddress]) : Void
  (case sock
    [(udp-socket sock)
     (let ([sock-addr (make-sock-addr address)])
       (bind sock sock-addr (bytes-length sock-addr)))]))


(define (make-sock-addr [address : UdpAddress]) : Bytes
  (case address
    [(udp-address ip-addr port)
     (let ([bytes (make-bytes 16)])
       (begin
         (bytes-set! bytes 0 (u8 0))
         (bytes-set! bytes 1 (u8 2)) ;; Family: AF_INET
         ;; Port 1026
         (bytes-set! bytes 2 (u8 (quotient port 256)))
         (bytes-set! bytes 3 (u8 (remainder port 256)))
         ;; IP addr = 0.0.0.0
         (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
         (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
         (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
         (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
         ;; ZERO
         (bytes-set! bytes  8 (u8 0))
         (bytes-set! bytes  9 (u8 0))
         (bytes-set! bytes 10 (u8 0))
         (bytes-set! bytes 11 (u8 0))
         (bytes-set! bytes 12 (u8 0))
         (bytes-set! bytes 13 (u8 0))
         (bytes-set! bytes 14 (u8 0))
         (bytes-set! bytes 15 (u8 0))
         bytes))]))


(define (udp-socket-recv! [sock : UdpSocket] [bytes : Bytes]) : (Tuple2 Int UdpAddress)
  (let ([sock-addr (make-bytes 16)])
    (let ([len-buf (make-bytes 4)])
      (begin
        (bytes-set! len-buf 0 (u8 (bytes-length sock-addr)))
        (let ([len (recvfrom (udp-socket-sock sock) bytes (bytes-length bytes) 0 sock-addr len-buf)])
          (let ([ip (ipv4-address
                      (u8 (bytes-ref sock-addr 4))
                      (u8 (bytes-ref sock-addr 5))
                      (u8 (bytes-ref sock-addr 6))
                      (u8 (bytes-ref sock-addr 7)))])
            (let ([port (+ (* 256 (bytes-ref sock-addr 2)) (bytes-ref sock-addr 3))])
              (tuple2 len (udp-address ip port)))))))))

(define (udp-socket-send-to [sock : UdpSocket] [addr : UdpAddress] [bytes : Bytes]) : Void
  (let ([sock-addr (make-sock-addr addr)])
    (sendto (udp-socket-sock sock) bytes (bytes-length bytes) 0
            sock-addr (bytes-length sock-addr))))
