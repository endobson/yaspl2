(module udp
  (import
    (prim
      #:types (Bytes Byte Void)
      #:values (socket bind recvfrom bytes-ref bytes-length make-bytes bytes-set! quotient
                remainder void + *)
      #:patterns ())
    (tuples
      #:types (Tuple2)
      #:values (tuple2)
      #:patterns ())
    (ip
      #:types (Ipv4Address)
      #:values (ipv4-address ipv4-address-octet1 ipv4-address-octet2 ipv4-address-octet3 ipv4-address-octet4)
      #:patterns ()))
  (export udp-address make-udp-socket udp-socket-bind udp-socket-recv!)
  (types
    (define-type UdpSocket
      (udp-socket [sock Byte]))
    (define-type UdpAddress
      (udp-address [ip Ipv4Address] [port Byte])))

  (define (make-udp-socket) : UdpSocket
    ;; First argument is for IPV4
    ;; Second argument is for UDP
    (udp-socket (socket 2 2 0)))

  (define (udp-socket-bind [sock : UdpSocket] [address : UdpAddress]) : Void
    (case address
      [(udp-address ip port)
       (case sock
         [(udp-socket sock)
          (let ([sock-addr (make-sock-addr ip port)])
            (bind sock sock-addr (bytes-length sock-addr)))])]))


  (define (make-sock-addr [ip-addr : Ipv4Address] [port : Byte]) : Bytes
    (let ([bytes (make-bytes 16)])
      (begin
        (bytes-set! bytes 0 0)
        (bytes-set! bytes 1 2) ;; Family: AF_INET
        ;; Port 1026
        (bytes-set! bytes 2 (quotient port 256))
        (bytes-set! bytes 3 (remainder port 256))
        ;; IP addr = 0.0.0.0
        (bytes-set! bytes 4 (ipv4-address-octet1 ip-addr))
        (bytes-set! bytes 5 (ipv4-address-octet2 ip-addr))
        (bytes-set! bytes 6 (ipv4-address-octet3 ip-addr))
        (bytes-set! bytes 7 (ipv4-address-octet4 ip-addr))
        ;; ZERO
        (bytes-set! bytes  8 0)
        (bytes-set! bytes  9 0)
        (bytes-set! bytes 10 0)
        (bytes-set! bytes 11 0)
        (bytes-set! bytes 12 0)
        (bytes-set! bytes 13 0)
        (bytes-set! bytes 14 0)
        (bytes-set! bytes 15 0)
        bytes)))


  (define (udp-socket-recv! [sock : UdpSocket] [bytes : Bytes]) : (Tuple2 Byte (UdpAddress))
    (let ([sock-addr (make-bytes 16)])
      (let ([len-buf (make-bytes 4)])
        (begin
          (bytes-set! len-buf 0 (bytes-length sock-addr))
          (let ([len (recvfrom (udp-socket-sock sock) bytes (bytes-length bytes) 0 sock-addr len-buf)])
            (let ([ip (ipv4-address
                        (bytes-ref sock-addr 4)
                        (bytes-ref sock-addr 5)
                        (bytes-ref sock-addr 6)
                        (bytes-ref sock-addr 7))])
              (let ([port (+ (* 256 (bytes-ref sock-addr 2)) (bytes-ref sock-addr 3))])
                (tuple2 len (udp-address ip port))))))))))
