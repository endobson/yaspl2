#:module (intermediate-expression-printer)
#:import {
  (intermediate-expression)
  (list)
  (numbers)
  (pretty-printer)
  (prim)
  (yaspl var)
}
(export
  (#:types)
  (#:values print-intermediate-expression)
  (#:patterns))
(types)

(define (print-intermediate-expression [e : Expression]) : Doc
  (expr->doc e))

(define (expr->doc [e : Expression]) : Doc
  (case e
    [(int-literal n)
     (doc-text (integer->decimal-bytes n))]
    [(boolean-literal b)
     (doc-text (if b #"#t" #"#f"))]
    [(local-var-expr n) (doc-text (var->bytes n))]
    [(global-var-expr n) (doc-text #"global-var nyi")]
    [(if-expr c t f)
     (doc-append
       (doc-text #"(if ")
       (doc-append
         (doc-flush (expr->doc c))
         (doc-append
           (doc-flush (expr->doc t))
           (doc-append (expr->doc f) (doc-text #")")))))]
    [(begin-expr _ _) (doc-text #"begin NYI")]
    [(create-closure-expr _ _) (doc-text #"create-closure NYI")]
    ;; TODO add multi line call
    [(call-closure-expr _ op args)
     (doc-append
       (doc-append
         (doc-text #"(")
         (doc-hsep (cons (expr->doc op) (map expr->doc args))))
       (doc-text #")"))]
    [(call-function-expr _ fun-name args)
     (doc-text #"call-function NYI")]
    [(let-expr _ _ _) (doc-text #"let-expr NYI")]
    [(case-expr expr clauses)
     (doc-append
       (doc-flush
         (doc-append
           (doc-text #"(case ")
           (expr->doc expr)))
       (doc-append
         (doc-text #"  ")
         (doc-append
           (doc-vsep (map clause->doc clauses))
           (doc-text #")"))))]
    [(array-expr _) (doc-text #"array NYI")]
    [(array-length-expr _) (doc-text #"array-length NYI")]
    [(array-ref-expr _ _) (doc-text #"array-ref NYI")]
    [(array-set!-expr _ _ _) (doc-text #"array-set! NYI")]
    [(bytes-length-expr _) (doc-text #"bytes-length NYI")]
    [(bytes-ref-expr _ _) (doc-text #"bytes-ref NYI")]
    [(bytes-set!-expr _ _ _) (doc-text #"bytes-set! NYI")]
    [(prim-numeric-bin-op _ _ _) (doc-text #"prim-numeric NYI")]
    [(prim-comparison-bin-op _ _ _) (doc-text #"prim-comparison NYI")]
    [(prim-logical-bin-op _ _ _) (doc-text #"prim-logical NYI")]
    [(prim-logical-unary-op _ _) (doc-text #"prim-logical NYI")]
    [(make-variant-expr _ _) (doc-text #"make-variant NYI")]
    [(variant-field-ref-expr _ _) (doc-text #"variant-field-ref-expr NYI")]
    [(no-op-cast-op _ _ _) (doc-text #"no-op-cast NYI")]))

(define (clause->doc [c : CaseClause]) : Doc
  (case c
    [(case-clause p e)
     (doc-append
       (doc-text #"[")
       (doc-append
         (doc-append
           (doc-flush (pattern->doc p))
           (expr->doc e))
         (doc-text #"]")))]))

(define (pattern->doc [p : Pattern]) : Doc
  (case p
    [(bytes-pattern v)
     (doc-append (doc-text #"#\"") (doc-append (doc-text #"byte-pattern nyi") (doc-text #"\"")))]
    [(int-pattern n)
     (doc-text (integer->decimal-bytes n))]
    [(variable-pattern v)
     (doc-text (var->bytes v))]
    [(ignore-pattern)
     (doc-text #"_")]
    [(abstraction-pattern name tag patterns)
     (doc-append
       (doc-text #"(")
       (doc-append
         (doc-hsep (cons (doc-text name) (map pattern->doc patterns)))
         (doc-text #")")))]))


(define (doc-hsep [docs : (List Doc)]) : Doc
  (case docs
    [(empty) (doc-text #"")]
    [(cons doc (empty)) doc]
    [(cons doc docs)
     (doc-append
       (doc-append doc (doc-text #" "))
       (doc-hsep docs))]))

(define (doc-vsep [docs : (List Doc)]) : Doc
  (case docs
    [(empty) (doc-text #"")]
    [(cons doc (empty)) doc]
    [(cons doc docs)
     (doc-append
       (doc-flush doc)
       (doc-vsep docs))]))
