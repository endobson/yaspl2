#:module (resolved-imports-language)
#:import {
  (bytes) {
    #:values
      bytes=?
  }
  (dict) {
    #:types
      Dict
    #:values
      dict-maybe-add
      dict-ref
      make-dict
  }
  (either) {
    #:types
      Either
    #:values
      left
      right
    #:patterns
      left
      right
  }
  (list) {
    #:types
      List
    #:values
      findf
    #:patterns
      cons
      empty
  }
  (maybe) {
    #:types
      Maybe
    #:patterns
      just
      nothing
  }
  (module-name) {
    #:types
      ModName
    #:values
      mod-name
      mod-name=?
  }
  (module-signature) {
    #:types
      ModuleSignature
      PatternSignature
    #:values
      module-signature-name
    #:patterns
      module-signature
  }
  (prim) {
    #:types
      Bytes
    #:values
      void
  }
  (source-language) {
    #:types
      Exports
      FunctionDefinition
      Import
      [Imports s:Imports]
      [Module s:Module]
      TypeDefinition
    #:patterns
      import
      [module s:module]
      [partial-imports s:partial-imports]
  }
  (types) {
    #:types
      Type
  }
}
(export
  #:types (Imports Module)
  #:values (resolve-imports)
  #:patterns (imports module))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]))
  (define-type Imports
    (imports
      [types : (Dict Bytes Type)]
      [values : (Dict Bytes Type)]
      [patterns : (Dict Bytes PatternSignature)])))

(define (resolve-imports [mod : s:Module] [sigs : (List ModuleSignature)]) : (Either Bytes Module)
  (match-define (s:module name importss exports types definitions) mod)
  (case (resolve-imports/importss importss sigs (make-dict bytes=?) (make-dict bytes=?) (make-dict bytes=?))
    [(left v) (left v)]
    [(right imports)
     (right (module name imports exports types definitions))]))

(define (resolve-imports/importss
          [importss : (List s:Imports)]
          [sigs : (List ModuleSignature)]
          [types : (Dict Bytes Type)]
          [values : (Dict Bytes Type)]
          [patterns : (Dict Bytes PatternSignature)]) :
  (Either Bytes Imports)
  (case importss
    [(empty)
     (right (imports types values patterns))]
    [(cons (s:partial-imports mod-name i-types i-values i-patterns) importss)
     (case (find-signature mod-name sigs)
       [(nothing) (left #"Couldnt' find signature")]
       [(just (module-signature _ _ e-patterns e-types e-value-types _))
        (case (add-type-imports i-types e-types types)
          [(left v) (left v)]
          [(right types)
           (case (add-value-imports i-values e-value-types values)
             [(left v) (left v)]
             [(right values)
              (case (add-pattern-imports i-patterns e-patterns patterns)
                [(left v) (left v)]
                [(right patterns)
                 (resolve-imports/importss importss sigs types values patterns)])])])])]))

(define (add-type-imports
          [imports : (List Import)]
          [exported-types : (Dict Bytes Type)]
          [types : (Dict Bytes Type)])
  : (Either Bytes (Dict Bytes Type))
  (case imports
    [(empty)
     (right types)]
    [(cons (import ex-name im-name) imports)
     (case (dict-ref exported-types ex-name)
       [(nothing) (left #"No such export")]
       [(just t)
        (case (dict-maybe-add types im-name t)
          [(nothing) (left #"Duplicate import binding")]
          [(just types)
           (add-type-imports imports exported-types types)])])]))


(define (add-value-imports
          [imports : (List Import)]
          [exported-values : (Dict Bytes Type)]
          [values : (Dict Bytes Type)])
  : (Either Bytes (Dict Bytes Type))
  (case imports
    [(empty)
     (right values)]
    [(cons (import ex-name im-name) imports)
     (case (dict-ref exported-values ex-name)
       [(nothing) (left #"No such export")]
       [(just t)
        (case (dict-maybe-add values im-name t)
          [(nothing) (left #"Duplicate import binding")]
          [(just values)
           (add-value-imports imports exported-values values)])])]))

(define (add-pattern-imports
          [imports : (List Import)]
          [exported-patterns : (Dict Bytes PatternSignature)]
          [patterns : (Dict Bytes PatternSignature)])
  : (Either Bytes (Dict Bytes PatternSignature))
  (case imports
    [(empty)
     (right patterns)]
    [(cons (import ex-name im-name) imports)
     (case (dict-ref exported-patterns ex-name)
       [(nothing) (left #"No such export")]
       [(just sig)
        (case (dict-maybe-add patterns im-name sig)
          [(nothing) (left #"Duplicate import binding")]
          [(just patterns)
           (add-pattern-imports imports exported-patterns patterns)])])]))


(define (find-signature [name : ModName] [sigs : (List ModuleSignature)]) : (Maybe ModuleSignature)
  (findf (lambda ([sig : ModuleSignature]) (mod-name=? name (module-signature-name sig))) sigs))
