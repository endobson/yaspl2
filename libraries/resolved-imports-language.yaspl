#:module (resolved-imports-language)
#:import {
  (bytes)
  (data indexed-set)
  (dict)
  (either)
  (join-list)
  (list)
  (list-multi-dict)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (top-level-name)
  (tuples)
  (types)
  {(yaspl languages source-language)
    {#:types
      Block
      BlockDefinition
      CaseClause
      Export
      Exports
      Expression
      FunctionArg
      FunctionDefinition
      Import
      [Imports s:Imports]
      [Module s:Module]
      Pattern
      PreType
      StaticDefinition
      TypeDefinition
      VariantDefinition
      VariantField
    }
    {#:values
      bytes-pattern
      export-exported-name
      export-local-name
      function-definition-name
      ignore-pattern
      pre-type-source-span
      type-definition-name
    }
    {#:patterns
      abstraction-pattern
      annotated-expr
      app-expr
      begin-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      export
      exports
      [full-imports s:full-imports]
      fun-pre-type
      function-arg
      function-definition
      if-expr
      ignore-pattern
      import
      int-literal
      int-pattern
      lambda-expr
      let-expr
      match-def
      [module s:module]
      [partial-imports s:partial-imports]
      type-app-pre-type
      type-definition
      var-expr
      var-pre-type
      varargs-app-expr
      varargs-definition
      variable-pattern
      variant-definition
      variant-field
    }
  }
}
(export
  (#:types
      Imports Module Block Export Pattern PreType BlockDefinition CaseClause Exports Expression
      FunctionDefinition FunctionArg TypeDefinition VariantDefinition VariantField StaticDefinition
      ImportResolutionErrors)
  (#:values resolve-imports import-resolution-errors->bytes
            module-definitions module-name module-types module-imports
            imports-patterns resolve-imports/importss type-definition-name
            bytes-pattern ignore-pattern
            pre-type-source-span
            export-exported-name export-local-name function-definition-name)
  (#:patterns imports module app-expr annotated-expr begin-expr block boolean-literal bytes-literal
              case-clause case-expr export exports fun-pre-type function-definition function-arg
              if-expr int-literal lambda-expr let-expr match-def type-app-pre-type type-definition
              var-expr var-pre-type varargs-app-expr variant-definition variant-field
              abstraction-pattern bytes-pattern ignore-pattern int-pattern variable-pattern
              varargs-definition))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]
            [statics : (List StaticDefinition)]))
  (define-type Imports
    (imports
      [types : (Dict Bytes Type)]
      [values : (Dict Bytes ValueSignature)]
      [patterns : (Dict Bytes PatternSignature)]
      [statics : (Dict Bytes StaticSignature)]
      [static-info : (Dict TopLevelName TopLevelSignature)]))

  (define-type ResolvedImports
    (resolved-imports
      [types : (ListMultiDict Bytes Type)]
      [values : (ListMultiDict Bytes ValueSignature)]
      [patterns : (ListMultiDict Bytes PatternSignature)]
      [statics : (ListMultiDict Bytes StaticSignature)]))

  (define-type FullyResolvedImports
    (fully-resolved-imports
      [types : (Dict Bytes Type)]
      [values : (Dict Bytes ValueSignature)]
      [patterns : (Dict Bytes PatternSignature)]
      [statics : (Dict Bytes StaticSignature)]))


  (define-type ImportResolutionErrors
    (import-resolution-errors
      [module-name : ModName]
      [errors : (List ImportResolutionError)]))

  (define-type ImportResolutionError
    (non-existent-imports/module [module-name : ModName])
    (non-existent-imports/bindings
      [module-name : ModName]
      [types : (List Bytes)]
      [values : (List Bytes)]
      [patterns : (List Bytes)]
      [statics : (List Bytes)])
    (duplicate-imports
      [modules : (List ModName)]
      [types : (List Bytes)]
      [values : (List Bytes)]
      [patterns : (List Bytes)]
      [statics : (List Bytes)])))

(define (resolve-imports [mod : s:Module] [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either ImportResolutionErrors Module)
  (match-define (s:module name importss exports types definitions statics) mod)
  (case (resolve-imports/importss importss sigs)
    [(left errors)
     (left (import-resolution-errors name errors))]
    [(right imports)
     (right (module name imports exports types definitions statics))]))

(define (resolve-imports/importss
          [importss : (List s:Imports)]
          [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either (List ImportResolutionError) Imports)
  (match-define (tuple2 maybe-errors resolved-imports)
    (unzip (map (lambda ([i : s:Imports]) (resolve-imports/import i sigs)) importss)))
  (match-define errors (filter-map (lambda ([x : (Maybe ImportResolutionError)]) x) maybe-errors))
  (case (merge-imports resolved-imports)
    [(left error)
     (left (cons error errors))]
    [(right (fully-resolved-imports types values patterns statics))
     (case errors
       [(empty) (right (imports types values patterns statics (make-static-info sigs)))]
       [_ (left errors)])]))

(define (merge-imports [is : (List ResolvedImports)])
  : (Either ImportResolutionError FullyResolvedImports)
  (merge-imports* (make-dict bytes-cmp) (make-dict bytes-cmp) (make-dict bytes-cmp) (make-dict bytes-cmp)
                  (empty) (empty) (empty) (empty) (empty) is))

(define (merge-imports*
          [types : (Dict Bytes Type)]
          [values : (Dict Bytes ValueSignature)]
          [patterns : (Dict Bytes PatternSignature)]
          [statics : (Dict Bytes StaticSignature)]
          [duplicate-modules : (List ModName)]
          [duplicate-types : (List Bytes)]
          [duplicate-values : (List Bytes)]
          [duplicate-patterns : (List Bytes)]
          [duplicate-statics : (List Bytes)]
          [is : (List ResolvedImports)])
  : (Either ImportResolutionError FullyResolvedImports)
  (case is
    [(empty)
     (case (tuple2 (tuple2 duplicate-modules duplicate-types)
                   (tuple3 duplicate-values duplicate-patterns duplicate-statics))
       [(tuple2 (tuple2 (empty) (empty)) (tuple3 (empty) (empty) (empty)))
        (right (fully-resolved-imports types values patterns statics))]
       [_
        (left (duplicate-imports duplicate-modules duplicate-types duplicate-values
                                 duplicate-patterns duplicate-statics))])]
    [(cons (resolved-imports new-types new-values new-patterns new-statics) is)
     (match-define (tuple2 types duplicate-types)
       (add-bindings new-types types duplicate-types))
     (match-define (tuple2 values duplicate-values)
       (add-bindings new-values values duplicate-values))
     (match-define (tuple2 patterns duplicate-patterns)
       (add-bindings new-patterns patterns duplicate-patterns))
     (match-define (tuple2 statics duplicate-statics)
       (add-bindings new-statics statics duplicate-statics))
     (merge-imports* types values patterns statics duplicate-modules
                     duplicate-types duplicate-values duplicate-patterns duplicate-statics
                     is)]))

(define (empty-resolved-imports) : ResolvedImports
  (resolved-imports (make-list-multi-dict bytes-cmp) (make-list-multi-dict bytes-cmp)
                    (make-list-multi-dict bytes-cmp) (make-list-multi-dict bytes-cmp)))

(define (resolve-imports/import [imports : s:Imports] [sigs : (IndexedSet ModuleSignature ModName)])
  : (Tuple2 (Maybe ImportResolutionError) ResolvedImports)
  (case imports
    [(s:full-imports mod-name)
     (case (indexed-set-ref sigs mod-name)
       [(nothing)
        (tuple2 (just (non-existent-imports/module mod-name))
                (empty-resolved-imports))]
       [(just (module-signature _ e-values e-patterns e-types e-statics _))
        (tuple2 (nothing)
                (resolved-imports (dict->list-multi-dict e-types)
                                  (dict->list-multi-dict e-values)
                                  (dict->list-multi-dict e-patterns)
                                  (dict->list-multi-dict e-statics)))])]
    [(s:partial-imports mod-name i-types i-values i-patterns i-statics)
     (case (indexed-set-ref sigs mod-name)
       [(nothing)
        (tuple2 (just (non-existent-imports/module mod-name))
                (empty-resolved-imports))]
       [(just (module-signature mod-name e-values e-patterns e-types e-statics _))
        (match-define (tuple2 unknown-types types)
          (resolve-partial-imports i-types e-types))
        (match-define (tuple2 unknown-values values)
          (resolve-partial-imports i-values e-values))
        (match-define (tuple2 unknown-patterns patterns)
          (resolve-partial-imports i-patterns e-patterns))
        (match-define (tuple2 unknown-statics statics)
          (resolve-partial-imports i-statics e-statics))

        (match-define maybe-error : (Maybe ImportResolutionError)
          (case (tuple2 (tuple2 unknown-types unknown-values)
                        (tuple2 unknown-patterns unknown-statics))
            [(tuple2 (tuple2 (empty) (empty))
                     (tuple2 (empty) (empty)))
             (nothing)]
            [_
             (just (non-existent-imports/bindings mod-name unknown-types unknown-values unknown-patterns
                                                  unknown-statics))]))
        (tuple2 maybe-error (resolved-imports types values patterns statics))])]))

(define [Val] (resolve-partial-imports
                [imports : (List Import)]
                [exports : (Dict Bytes Val)])
  : (Tuple2 (List Bytes) (ListMultiDict Bytes Val))
  (resolve-partial-imports* imports exports (empty) (make-list-multi-dict bytes-cmp)))

(define [Val] (resolve-partial-imports*
                [imports : (List Import)]
                [exports : (Dict Bytes Val)]
                [unknown-imports : (List Bytes)]
                [locals : (ListMultiDict Bytes Val)])
  : (Tuple2 (List Bytes) (ListMultiDict Bytes Val))
  (case imports
    [(empty)
     (tuple2 unknown-imports locals)]
    [(cons (import ex-name im-name) imports)
     (case (dict-ref exports ex-name)
       [(nothing)
        (resolve-partial-imports* imports exports (cons ex-name unknown-imports) locals)]
       [(just v)
        (resolve-partial-imports* imports exports unknown-imports
                                  (list-multi-dict-add locals im-name v))])]))

(define [Val] (add-bindings
                [new-bindings : (ListMultiDict Bytes Val)]
                [bindings : (Dict Bytes Val)]
                [duplicate-bindings : (List Bytes)])
  : (Tuple2 (Dict Bytes Val) (List Bytes))
  (list-multi-dict-fold
    new-bindings
    (lambda ([name : Bytes] [vals : (List Val)]
             [acc : (Tuple2 (Dict Bytes Val) (List Bytes))])
      (foldl
        (lambda ([val : Val]
                 [acc : (Tuple2 (Dict Bytes Val) (List Bytes))])
          (match-define (tuple2 bindings duplicate-bindings) acc)
          (case (dict-maybe-add bindings name val)
            [(nothing)
             (tuple2 bindings (cons name duplicate-bindings))]
            [(just bindings)
             (tuple2 bindings duplicate-bindings)]))
        vals acc))
    (tuple2 bindings duplicate-bindings)))

(define (import-resolution-errors->bytes [me : ImportResolutionErrors]) : Bytes
  (case me
    [(import-resolution-errors mod-name errors)
     (bytes-append
       (map (lambda ([error : ImportResolutionError]) (import-resolution-error->bytes mod-name error))
            errors))]))

(define (import-resolution-error->bytes [mod-name : ModName] [e : ImportResolutionError]) : Bytes
  (case e
    [(non-existent-imports/module import-name)
     (bytes-append
       (varargs list #"Missing import in " (mod-name->bytes mod-name)
                     #". Could not find module: " (mod-name->bytes import-name) #"\n"))]
    [(non-existent-imports/bindings import-name types values patterns statics)
     (let ([warn-no-exports
             (lambda ([kind : Bytes] [names : (List Bytes)]) : (JoinList Bytes)
               (case names
                 [(empty) (empty-jl)]
                 [_
                   (append-jl
                     (varargs join-list #"  " kind #" imports:\n")
                     (concat-map-jl/list
                       (lambda ([name : Bytes]) (varargs join-list #"    " name #"\n"))
                       names))]))])
        (bytes-append
          (jl->list
            (append-jl
              (varargs join-list
                #"Undefined imports in module " (mod-name->bytes mod-name) #" from module "
                (mod-name->bytes import-name) #":\n")
              (varargs append-jl*
                (warn-no-exports #"Type" types)
                (warn-no-exports #"Value" values)
                (warn-no-exports #"Pattern" patterns)
                (warn-no-exports #"Statics" statics))))))]
    [(duplicate-imports mod-names types values patterns statics)
     (let ([warn-duplicate-imports
             (lambda ([kind : Bytes] [names : (List Bytes)]) : (JoinList Bytes)
               (case names
                 [(empty) (empty-jl)]
                 [_
                   (append-jl
                     (varargs join-list #"  " kind #" imports:\n")
                     (concat-map-jl/list
                       (lambda ([name : Bytes]) (varargs join-list #"    " name #"\n"))
                       names))]))])
        (bytes-append
          (jl->list
            (append-jl
              (varargs join-list
                #"Duplicate imports in module " (mod-name->bytes mod-name) #":\n")
              (varargs append-jl*
                (warn-duplicate-imports #"Type" types)
                (warn-duplicate-imports #"Module" (map mod-name->bytes mod-names))
                (warn-duplicate-imports #"Value" values)
                (warn-duplicate-imports #"Pattern" patterns)
                (warn-duplicate-imports #"Static" statics))))))]))

(define (make-static-info [sigs : (IndexedSet ModuleSignature ModName)])
  : (Dict TopLevelName TopLevelSignature)
  (merge-dicts*
    (make-dict top-level-name-cmp)
    (map module-signature-static-info (indexed-set->list sigs))))
