#:module (resolved-imports-language)
#:import {
  (bytes)
  (data indexed-set)
  (dict)
  (either)
  (join-list)
  (list)
  (maybe)
  (module-name)
  (module-signature)
  (prim)
  (set)
  {(source-language)
    {#:types
      Block
      BlockDefinition
      CaseClause
      Export
      Exports
      Expression
      FunctionArg
      FunctionDefinition
      Import
      [Imports s:Imports]
      [Module s:Module]
      Pattern
      PreType
      TypeDefinition
      VariantDefinition
      VariantField
    }
    {#:values
      bytes-pattern
      ignore-pattern
      type-definition-name
    }
    {#:patterns
      abstraction-pattern
      annotated-expr
      app-expr
      begin-expr
      block
      boolean-literal
      bytes-literal
      bytes-pattern
      case-clause
      case-expr
      export
      exports
      [full-imports s:full-imports]
      fun-pre-type
      function-arg
      function-definition
      if-expr
      ignore-pattern
      import
      int-literal
      int-pattern
      lambda-expr
      let-expr
      match-def
      [module s:module]
      [partial-imports s:partial-imports]
      type-app-pre-type
      type-definition
      var-expr
      var-pre-type
      varargs-app-expr
      variable-pattern
      variant-definition
      variant-field
    }
  }
  (top-level-name)
  (tuples)
  (types)
}
(export
  (#:types
      Imports Module Block Export Pattern PreType BlockDefinition CaseClause Exports Expression
      FunctionDefinition FunctionArg TypeDefinition VariantDefinition VariantField)
  (#:values resolve-imports import-resolution-errors->bytes
            module-definitions module-name module-types module-imports
            imports-patterns resolve-imports/importss type-definition-name
            bytes-pattern ignore-pattern)
  (#:patterns imports module app-expr annotated-expr begin-expr block boolean-literal bytes-literal
              case-clause case-expr export exports fun-pre-type function-definition function-arg
              if-expr int-literal lambda-expr let-expr match-def type-app-pre-type type-definition
              var-expr var-pre-type varargs-app-expr variant-definition variant-field
              abstraction-pattern bytes-pattern ignore-pattern int-pattern variable-pattern))
(types
  (define-type Module
    (module [name : ModName]
            [imports : Imports]
            [exports : Exports]
            [types : (List TypeDefinition)]
            [definitions : (List FunctionDefinition)]))
  (define-type Imports
    (imports
      [types : (Dict Bytes Type)]
      [values : (Dict Bytes ValueSignature)]
      [patterns : (Dict Bytes PatternSignature)]
      [static-info : (Dict TopLevelName TopLevelSignature)]))

  (define-type ImportResolutionErrors
    (import-resolution-errors
      [module-name : ModName]
      [errors : (List ImportResolutionError)]))

  (define-type ImportResolutionError
    (non-existent-imports/module [module-name : ModName])
    (non-existent-imports/bindings
      [module-name : ModName]
      [types : (List Bytes)]
      [values : (List Bytes)]
      [patterns : (List Bytes)])
    (duplicate-imports
      [modules : (List ModName)]
      [types : (List Bytes)]
      [values : (List Bytes)]
      [patterns : (List Bytes)])))

(define (resolve-imports [mod : s:Module] [sigs : (IndexedSet ModuleSignature ModName)])
  : (Either ImportResolutionErrors Module)
  (match-define (s:module name importss exports types definitions) mod)
  (case (resolve-imports/importss
          importss sigs (make-set mod-name-cmp)
          (make-dict bytes-cmp) (make-dict bytes-cmp) (make-dict bytes-cmp)
          (empty) (empty) (empty) (empty) (empty))
    [(left errors)
     (left (import-resolution-errors name errors))]
    [(right imports)
     (right (module name imports exports types definitions))]))

(define (resolve-imports/importss
          [importss : (List s:Imports)]
          [sigs : (IndexedSet ModuleSignature ModName)]
          [seen-modules : (Set ModName)]
          [types : (Dict Bytes Type)]
          [values : (Dict Bytes ValueSignature)]
          [patterns : (Dict Bytes PatternSignature)]
          [errors : (List ImportResolutionError)]
          [duplicate-modules : (List ModName)]
          [duplicate-types : (List Bytes)]
          [duplicate-values : (List Bytes)]
          [duplicate-patterns : (List Bytes)])
  : (Either (List ImportResolutionError) Imports)
  (case importss
    [(empty)
     (match-define final-errors
       (case (tuple2 (tuple2 duplicate-modules duplicate-types)
                     (tuple2 duplicate-values duplicate-patterns))
         [(tuple2 (tuple2 (empty) (empty)) (tuple2 (empty) (empty)))
          errors]
         [_
          (cons (duplicate-imports duplicate-modules duplicate-types duplicate-values duplicate-patterns)
                errors)]))
     (case final-errors
       [(empty)
        (right (imports types values patterns (make-static-info sigs)))]
       [e
        (left e)])]
    [(cons (s:full-imports mod-name) importss)
     (if (set-member? seen-modules mod-name)
         (resolve-imports/importss
           importss sigs
           seen-modules types values patterns errors
           (cons mod-name duplicate-modules) duplicate-types duplicate-values duplicate-patterns)
         (case (indexed-set-ref sigs mod-name)
           [(nothing)
            (resolve-imports/importss
              importss sigs
              (set-add seen-modules mod-name) types values patterns
              (cons (non-existent-imports/module mod-name) errors)
              duplicate-modules duplicate-types duplicate-values duplicate-patterns)]
           [(just (module-signature _ e-values e-patterns e-types _))
            (match-define (tuple2 duplicate-types types)
              (add-all-type-imports e-types types duplicate-types))
            (match-define (tuple2 duplicate-values values)
              (add-all-value-imports e-values values duplicate-values))
            (match-define (tuple2 duplicate-patterns patterns)
              (add-all-pattern-imports e-patterns patterns duplicate-patterns))
            (resolve-imports/importss
              importss sigs
              (set-add seen-modules mod-name) types values patterns errors
              duplicate-modules duplicate-types duplicate-values duplicate-patterns)]))]
    [(cons (s:partial-imports mod-name i-types i-values i-patterns) importss)
     (if (set-member? seen-modules mod-name)
         (resolve-imports/importss
           importss sigs
           seen-modules types values patterns errors
           (cons mod-name duplicate-modules) duplicate-types duplicate-values duplicate-patterns)
         (case (indexed-set-ref sigs mod-name)
           [(nothing)
            (resolve-imports/importss
              importss sigs
              (set-add seen-modules mod-name) types values patterns
              (cons (non-existent-imports/module mod-name) errors)
              duplicate-modules duplicate-types duplicate-values duplicate-patterns)]
           [(just (module-signature _ e-values e-patterns e-types _))
            (match-define (tuple3 unknown-types duplicate-types types)
              (add-type-imports i-types e-types types (empty) duplicate-types))
            (match-define (tuple3 unknown-values duplicate-values values)
              (add-value-imports i-values e-values values (empty) duplicate-values))
            (match-define (tuple3 unknown-patterns duplicate-patterns patterns)
              (add-pattern-imports i-patterns e-patterns patterns (empty) duplicate-patterns))
            (match-define new-errors
              (case (tuple3 unknown-types unknown-values unknown-patterns)
                [(tuple3 (empty) (empty) (empty))
                 errors]
                [_
                 (cons (non-existent-imports/bindings mod-name unknown-types unknown-values unknown-patterns)
                       errors)]))
            (resolve-imports/importss
              importss sigs (set-add seen-modules mod-name) types values patterns new-errors
              duplicate-modules duplicate-types duplicate-values duplicate-patterns)]))]))

(define (add-type-imports
          [imports : (List Import)]
          [exported-types : (Dict Bytes Type)]
          [types : (Dict Bytes Type)]
          [unknown-imports : (List Bytes)]
          [duplicate-bindings : (List Bytes)])
  : (Tuple3 (List Bytes) (List Bytes) (Dict Bytes Type))
  (case imports
    [(empty)
     (tuple3 unknown-imports duplicate-bindings types)]
    [(cons (import ex-name im-name) imports)
     (case (dict-ref exported-types ex-name)
       [(nothing)
        (add-type-imports imports exported-types types (cons ex-name unknown-imports)
                          duplicate-bindings)]
       [(just t)
        (case (dict-maybe-add types im-name t)
          [(nothing)
           (add-type-imports imports exported-types types unknown-imports
                             (cons im-name duplicate-bindings))]
          [(just types)
           (add-type-imports imports exported-types types unknown-imports duplicate-bindings)])])]))

(define (add-value-imports
          [imports : (List Import)]
          [exported-values : (Dict Bytes ValueSignature)]
          [values : (Dict Bytes ValueSignature)]
          [unknown-imports : (List Bytes)]
          [duplicate-bindings : (List Bytes)])
  : (Tuple3 (List Bytes) (List Bytes) (Dict Bytes ValueSignature))
  (case imports
    [(empty)
     (tuple3 unknown-imports duplicate-bindings values)]
    [(cons (import ex-name im-name) imports)
     (case (dict-ref exported-values ex-name)
       [(nothing)
        (add-value-imports imports exported-values values (cons ex-name unknown-imports)
                           duplicate-bindings)]
       [(just t)
        (case (dict-maybe-add values im-name t)
          [(nothing)
           (add-value-imports imports exported-values values unknown-imports
                              (cons im-name duplicate-bindings))]
          [(just values)
           (add-value-imports imports exported-values values unknown-imports duplicate-bindings)])])]))

(define (add-pattern-imports
          [imports : (List Import)]
          [exported-patterns : (Dict Bytes PatternSignature)]
          [patterns : (Dict Bytes PatternSignature)]
          [unknown-imports : (List Bytes)]
          [duplicate-bindings : (List Bytes)])
  : (Tuple3 (List Bytes) (List Bytes) (Dict Bytes PatternSignature))
  (case imports
    [(empty)
     (tuple3 unknown-imports duplicate-bindings patterns)]
    [(cons (import ex-name im-name) imports)
     (case (dict-ref exported-patterns ex-name)
       [(nothing)
        (add-pattern-imports imports exported-patterns patterns (cons ex-name unknown-imports)
                             duplicate-bindings)]
       [(just sig)
        (case (dict-maybe-add patterns im-name sig)
          [(nothing)
           (add-pattern-imports imports exported-patterns patterns unknown-imports
                                (cons im-name duplicate-bindings))]
          [(just patterns)
           (add-pattern-imports imports exported-patterns patterns unknown-imports duplicate-bindings)])])]))

(define (add-all-type-imports
          [exported-types : (Dict Bytes Type)]
          [types : (Dict Bytes Type)]
          [duplicate-bindings : (List Bytes)])
  : (Tuple2 (List Bytes) (Dict Bytes Type))
  (dict-fold
    exported-types
    (lambda ([name : Bytes] [t : Type] [acc : (Tuple2 (List Bytes) (Dict Bytes Type))])
      (case acc
        [(tuple2 duplicate-bindings types)
         (case (dict-maybe-add types name t)
           [(nothing)
            (tuple2 (cons name duplicate-bindings) types)]
           [(just types)
            (tuple2 duplicate-bindings types)])]))
    (tuple2 duplicate-bindings types)))

(define (add-all-value-imports
          [exported-values : (Dict Bytes ValueSignature)]
          [values : (Dict Bytes ValueSignature)]
          [duplicate-bindings : (List Bytes)])
  : (Tuple2 (List Bytes) (Dict Bytes ValueSignature))
  (dict-fold
    exported-values
    (lambda ([name : Bytes]
             [v : ValueSignature]
             [acc : (Tuple2 (List Bytes) (Dict Bytes ValueSignature))])
      (case acc
        [(tuple2 duplicate-bindings values)
         (case (dict-maybe-add values name v)
           [(nothing)
            (tuple2 (cons name duplicate-bindings) values)]
           [(just values)
            (tuple2 duplicate-bindings values)])]))
    (tuple2 duplicate-bindings values)))

(define (add-all-pattern-imports
          [exported-patterns : (Dict Bytes PatternSignature)]
          [patterns : (Dict Bytes PatternSignature)]
          [duplicate-bindings : (List Bytes)])
  : (Tuple2 (List Bytes) (Dict Bytes PatternSignature))
  (dict-fold
    exported-patterns
    (lambda ([name : Bytes]
             [p : PatternSignature]
             [acc : (Tuple2 (List Bytes) (Dict Bytes PatternSignature))])
      (case acc
        [(tuple2 duplicate-bindings patterns)
         (case (dict-maybe-add patterns name p)
           [(nothing)
            (tuple2 (cons name duplicate-bindings) patterns)]
           [(just patterns)
            (tuple2 duplicate-bindings patterns)])]))
    (tuple2 duplicate-bindings patterns)))


(define (import-resolution-errors->bytes [me : ImportResolutionErrors]) : Bytes
  (case me
    [(import-resolution-errors mod-name errors)
     (bytes-append
       (map (lambda ([error : ImportResolutionError]) (import-resolution-error->bytes mod-name error))
            errors))]))

(define (import-resolution-error->bytes [mod-name : ModName] [e : ImportResolutionError]) : Bytes
  (case e
    [(non-existent-imports/module import-name)
     (bytes-append
       (varargs list #"Missing import in " (mod-name->bytes mod-name)
                     #". Could not find module: " (mod-name->bytes import-name) #"\n"))]
    [(non-existent-imports/bindings import-name types values patterns)
     (let ([warn-no-exports
             (lambda ([kind : Bytes] [names : (List Bytes)]) : (JoinList Bytes)
               (case names
                 [(empty) (empty-jl)]
                 [_
                   (append-jl
                     (varargs join-list #"  " kind #" imports:\n")
                     (concat-jl (map (lambda ([name : Bytes])
                                       (varargs join-list #"    " name #"\n"))
                                     names)))]))])
        (bytes-append
          (jl->list
            (append-jl
              (varargs join-list
                #"Undefined imports in module " (mod-name->bytes mod-name) #" from module "
                (mod-name->bytes import-name) #":\n")
              (varargs append-jl*
                (warn-no-exports #"Type" types)
                (warn-no-exports #"Value" values)
                (warn-no-exports #"Pattern" patterns))))))]
    [(duplicate-imports mod-names types values patterns)
     (let ([warn-duplicate-imports
             (lambda ([kind : Bytes] [names : (List Bytes)]) : (JoinList Bytes)
               (case names
                 [(empty) (empty-jl)]
                 [_
                   (append-jl
                     (varargs join-list #"  " kind #" imports:\n")
                     (concat-jl (map (lambda ([name : Bytes])
                                       (varargs join-list #"    " name #"\n"))
                                     names)))]))])
        (bytes-append
          (jl->list
            (append-jl
              (varargs join-list
                #"Duplicate imports in module " (mod-name->bytes mod-name) #":\n")
              (varargs append-jl*
                (warn-duplicate-imports #"Type" types)
                (warn-duplicate-imports #"Module" (map mod-name->bytes mod-names))
                (warn-duplicate-imports #"Value" values)
                (warn-duplicate-imports #"Pattern" patterns))))))]))

(define (make-static-info [sigs : (IndexedSet ModuleSignature ModName)])
  : (Dict TopLevelName TopLevelSignature)
  (merge-dicts*
    (make-dict top-level-name-cmp)
    (map module-signature-static-info (indexed-set->list sigs))))
