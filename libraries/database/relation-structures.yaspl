#:module (database relation-structures)
#:import {
  (dict)
  (list)
  (prim)
}
(export
  (#:types Database Row)
  (#:values
     database relation row schema
     bytes-value))
(types
  (define-type Database
    (database [relations : (Dict Bytes Relation)]))
  (define-type Relation
    (relation [schema : Schema] [data : (List Row)]))
  (define-type Row
    (row [columns : (Dict Bytes Value)]))
  (define-type Value
    (int-value [v : Int])
    (boolean-value [v : Boolean])
    (bytes-value [v : Bytes])
    (list-value [v : (List Value)]))
  (define-type Schema
    (schema [columns : (Dict Bytes Type)]))
  (define-type Type
    (int-type)
    (boolean-type)
    (bytes-type)
    (list-type [t : Type]))

  (define-type Query
    (base-relation [name : Bytes])
    (select [query : Query] [exprs : (Dict Bytes Expression)])
    (where [query : Query] [expr : Expression])
    (cross [left : Query] [right : Query]))

  (define-type Expression
    (var-expr [name : Bytes])
    (bin-op [op : Bytes] [l : Expression] [r : Expression])))
