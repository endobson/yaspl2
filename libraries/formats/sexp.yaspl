#:module (formats sexp)
#:import {
  (data source-location)
  (list)
  (prim)
}
(export
  (#:types Sexp )
  (#:values
    node brace-node bracket-node
    boolean-sexp bytes-sexp keyword-sexp number-sexp symbol-sexp
    sexp-source-span)
  (#:patterns
    node brace-node bracket-node
    boolean-sexp bytes-sexp keyword-sexp number-sexp symbol-sexp))
(types
  (define-type Sexp
    (node [list : (List Sexp)] [source : SourceSpan])
    (bracket-node [list : (List Sexp)] [source : SourceSpan])
    (brace-node [list : (List Sexp)] [source : SourceSpan])
    (symbol-sexp [bytes : Bytes] [source : SourceSpan])
    (bytes-sexp [bytes : Bytes] [source : SourceSpan])
    (keyword-sexp [bytes : Bytes] [source : SourceSpan])
    (boolean-sexp [v : Boolean] [source : SourceSpan])
    (number-sexp [byte : Int] [source : SourceSpan])))

(define (sexp-source-span [v : Sexp]) : SourceSpan
  (case v
    [(node _ source) source]
    [(bracket-node _ source) source]
    [(brace-node _ source) source]
    [(symbol-sexp _ source) source]
    [(bytes-sexp _ source) source]
    [(keyword-sexp _ source) source]
    [(boolean-sexp _ source) source]
    [(number-sexp _ source) source]))

