#:module (formats web-assembly)
#:import {
  (bytes)
  (join-list)
  (maybe)
  (list)
  (prim)
  (data lifted-primitives)
}
(export
  (#:types Module Memory Type Import Instruction Global Function Data)
  (#:values module function-type function-type-inputs 
            i32 i64 extern-ref
            function export function-export
            import function-import
            global global-type
            memory limits table
            active-data
            active-elem
            element
            rt-func-ref
            module->binary-bytes
            const-i32-inst const-i64-inst 
            i32-wrap-i64-inst
            i64-extend-s32-inst
            add-i32-inst 
            s64-lt-inst
            s64-le-inst
            s64-gt-inst
            s64-ge-inst
            i64-eq-inst
            i64-ne-inst
            i64-eqz-inst
            i64-and-inst
            i64-ior-inst
            i64-add-inst
            i64-sub-inst
            i64-mul-inst
            s64-div-inst
            s64-rem-inst
            i64-shl-inst
            u64-shr-inst
            ref-func-inst
            local-get-inst 
            local-set-inst 
            global-get-inst global-set-inst 
            i32-load-inst
            i64-load-inst
            i64-store-inst
            table-get-inst
            call-inst call-indirect-inst
            drop-inst block-inst branch-inst if-inst unreachable-inst
            block-value-type))
(types
  (define-type Module
    (module
      [types : (List Type)]
      [imports : (List Import)]
      ;; TODO order this like the generated sections
      [funcs : (List Function)]
      [tables : (List Table)]
      [mems : (List Memory)]
      [globals : (List Global)]
      [exports : (List Export)]
      [elems : (List Element)]
      [data : (List Data)]))
  (define-type Type
    (function-type [inputs : (List ValueType)] [outputs : (List ValueType)]))
  (define-type ValueType
    (i32)
    (i64)
    (f32)
    (f64)
    (extern-ref))

  (define-type RefType
    (rt-func-ref)
    (rt-extern-ref))


  (define-type Limits
    (limits [min : Int] [max : (Maybe LiftedInt)]))

  (define-type Memory
    (memory [limits : Limits]))
  (define-type Table
    (table [limits : Limits] [ty : RefType]))


  (define-type BlockType
    (block-index-type [idx : Int])
    (block-value-type [ty : (Maybe ValueType)]))

  (define-type Import
    (import [module-name : Bytes] [name : Bytes] [desc : ImportDescription]))
  (define-type ImportDescription
    (function-import [index : Int]))

  (define-type Function
    (function [type-index : Int] [locals : (List ValueType)]
              [expr : (List Instruction)]))
  (define-type Instruction
    (const-i32-inst [v : Int])
    (const-i64-inst [v : Int])
    (ref-func-inst [v : Int])
    (i32-wrap-i64-inst)
    (i64-extend-s32-inst)
    (add-i32-inst)
    (i32-load-inst [offset : Int] [align : Int])
    (i64-load-inst [offset : Int] [align : Int])
    (i64-store-inst [offset : Int] [align : Int])
    (i64-eq-inst)
    (i64-ne-inst)
    (i64-eqz-inst)

    (s64-lt-inst)
    (s64-le-inst)
    (s64-gt-inst)
    (s64-ge-inst)

    (i64-and-inst)
    (i64-ior-inst)

    (i64-add-inst)
    (i64-sub-inst)
    (i64-mul-inst)
    (s64-div-inst)
    (s64-rem-inst)
    (i64-shl-inst)
    (u64-shr-inst)

    (drop-inst)
    (local-get-inst [idx : Int])
    (local-set-inst [idx : Int])
    (local-tee-inst [idx : Int])
    (global-get-inst [idx : Int])
    (global-set-inst [idx : Int])
    (table-get-inst [idx : Int])
    (call-inst [idx : Int])
    (call-indirect-inst [table-idx : Int] [type-idx : Int])
    (if-inst [ty : BlockType] [t : (List Instruction)] [f : (List Instruction)])
    (block-inst [ty : BlockType] [insts : (List Instruction)])
    (branch-inst [idx : Int])
    (unreachable-inst)
    )

  (define-type Global
    (global [ty : GlobalType] [init : (List Instruction)]))
  (define-type GlobalType
    (global-type [mutable : Boolean] [ty : ValueType]))

  (define-type Export
    (export [name : Bytes] [desc : ExportDescription]))
  (define-type ExportDescription
    (function-export [index : Int]))

  (define-type Data
    (active-data [contents : Bytes] [offset : Int]))


  (define-type Element
    (element [ty : RefType] [contents : (List (List Instruction))] [mode : ElementMode]))
  (define-type ElementMode
    (active-elem [table-idx : Int] [offset : Int])))


(define (module->binary-bytes [mod : Module]) : Bytes
  (match-define (module types imports funcs tables mems globals exports elems data) mod)
  (bytes-append
    (jl->list
      (varargs append-jl*
        (single-jl #"\x00asm\x01\x00\x00\x00")
        (types->binary-bytes types)
        (imports->binary-bytes imports)
        (functions->binary-bytes/types funcs)
        (tables->binary-bytes tables)
        (memories->binary-bytes mems)
        (globals->binary-bytes globals)
        (exports->binary-bytes exports)
        (elements->binary-bytes elems)
        (functions->binary-bytes/code funcs)
        (datas->binary-bytes data)))))

(define (types->binary-bytes [types : (List Type)]) : (JoinList Bytes)
  (encode-section 1 types type->binary-bytes))
(define (functions->binary-bytes/types [functions : (List Function)]) : (JoinList Bytes)
  (encode-section 3 functions function->binary-bytes/type))
(define (functions->binary-bytes/code [functions : (List Function)]) : (JoinList Bytes)
  (encode-section 10 functions function->binary-bytes/code))
(define (imports->binary-bytes [imports : (List Import)]) : (JoinList Bytes)
  (encode-section 2 imports import->binary-bytes))
(define (tables->binary-bytes [tables : (List Table)]) : (JoinList Bytes)
  (encode-section 4 tables table->binary-bytes))
(define (memories->binary-bytes [memories : (List Memory)]) : (JoinList Bytes)
  (encode-section 5 memories memory->binary-bytes))
(define (globals->binary-bytes [exports : (List Global)]) : (JoinList Bytes)
  (encode-section 6 exports global->binary-bytes))
(define (exports->binary-bytes [exports : (List Export)]) : (JoinList Bytes)
  (encode-section 7 exports export->binary-bytes))
(define (elements->binary-bytes [elems : (List Element)]) : (JoinList Bytes)
  (encode-section 9 elems element->binary-bytes))
(define (datas->binary-bytes [datas : (List Data)]) : (JoinList Bytes)
  (encode-section 11 datas data->binary-bytes))

(define (type->binary-bytes [type : Type]) : (JoinList Bytes)
  (case type
    [(function-type inputs outputs)
     (cons-jl
       #"\x60"
       (append-jl
         (encode-vector inputs value-type->binary-bytes)
         (encode-vector outputs value-type->binary-bytes)))]))

(define (value-type->binary-bytes [type : ValueType]) : (JoinList Bytes)
  (single-jl
    (case type
      [(i32) #"\x7F"]
      [(i64) #"\x7E"]
      [(f32) #"\x7D"]
      [(f64) #"\x7C"]
      [(extern-ref) #"\x6F"])))

(define (ref-type->binary-bytes [type : RefType]) : (JoinList Bytes)
  (single-jl
    (case type
      [(rt-func-ref) #"\x70"]
      [(rt-extern-ref) #"\x6F"])))


(define (function->binary-bytes/type [f : Function]) : (JoinList Bytes)
  (case f
    [(function type-index _ _)
     (unsigned-leb128 type-index)]))

(define (function->binary-bytes/code [f : Function]) : (JoinList Bytes)
  (case f
    [(function _ locals expr)
     (size-prefixed
       (append-jl
         ;; TODO improve compression here
         (encode-vector locals local->binary-bytes)
         (instructions->binary-bytes expr)))]))

(define (local->binary-bytes [v : ValueType]) : (JoinList Bytes)
  (append-jl (unsigned-leb128 1) (value-type->binary-bytes v)))

(define (block-type->binary-bytes [b : BlockType]) : (JoinList Bytes)
  (case b
    [(block-index-type i) (panic #"NYI")]
    [(block-value-type (nothing)) (single-jl #"\x40")]
    [(block-value-type (just v)) (value-type->binary-bytes v)]))


(define (instruction->binary-bytes [i : Instruction]) : (JoinList Bytes)
  (case i
    [(const-i32-inst v)
     (cons-jl #"\x41" (signed-leb128 v))]
    [(const-i64-inst v)
     (cons-jl #"\x42" (signed-leb128 v))]
    [(ref-func-inst v)
     (cons-jl #"\xD2" (signed-leb128 v))]
    [(add-i32-inst)
     (single-jl #"\x6A")]
    [(i32-wrap-i64-inst)
     (single-jl #"\xA7")]
    [(i64-extend-s32-inst)
     (single-jl #"\xAC")]

    [(i64-eqz-inst)
     (single-jl #"\x50")]
    [(i64-eq-inst)
     (single-jl #"\x51")]
    [(i64-ne-inst)
     (single-jl #"\x52")]
    [(s64-lt-inst)
     (single-jl #"\x53")]
    [(s64-gt-inst)
     (single-jl #"\x55")]
    [(s64-le-inst)
     (single-jl #"\x57")]
    [(s64-ge-inst)
     (single-jl #"\x59")]


    [(i64-add-inst)
     (single-jl #"\x7C")]
    [(i64-sub-inst)
     (single-jl #"\x7D")]
    [(i64-mul-inst)
     (single-jl #"\x7E")]
    [(s64-div-inst)
     (single-jl #"\x7F")]
    [(s64-rem-inst)
     (single-jl #"\x81")]
    [(i64-and-inst)
     (single-jl #"\x83")]
    [(i64-ior-inst)
     (single-jl #"\x84")]
    [(i64-shl-inst)
     (single-jl #"\x86")]
    [(u64-shr-inst)
     (single-jl #"\x88")]


    [(local-get-inst idx)
     (cons-jl #"\x20" (unsigned-leb128 idx))]
    [(local-set-inst idx)
     (cons-jl #"\x21" (unsigned-leb128 idx))]
    [(local-tee-inst idx)
     (cons-jl #"\x22" (unsigned-leb128 idx))]
    [(global-get-inst idx)
     (cons-jl #"\x23" (unsigned-leb128 idx))]
    [(global-set-inst idx)
     (cons-jl #"\x24" (unsigned-leb128 idx))]
    [(i32-load-inst offset align)
     (cons-jl #"\x28" (append-jl (unsigned-leb128 align) (unsigned-leb128 offset)))]
    [(i64-load-inst offset align)
     (cons-jl #"\x29" (append-jl (unsigned-leb128 align) (unsigned-leb128 offset)))]
    [(i64-store-inst offset align)
     (cons-jl #"\x37" (append-jl (unsigned-leb128 align) (unsigned-leb128 offset)))]

    [(table-get-inst idx)
     (cons-jl #"\x25" (unsigned-leb128 idx))]
    [(call-inst idx)
     (cons-jl #"\x10" (unsigned-leb128 idx))]
    [(call-indirect-inst table type)
     (cons-jl #"\x11" (append-jl (unsigned-leb128 type) (unsigned-leb128 table)))]
    [(drop-inst)
     (single-jl #"\x1A")]
    [(branch-inst idx)
     (cons-jl #"\x0C" (unsigned-leb128 idx))]
    [(unreachable-inst)
     (single-jl #"\x00")]
    [(if-inst bt t f)
     (varargs append-jl*
       (single-jl #"\x04")
       (block-type->binary-bytes bt)
       (concat-map-jl/list instruction->binary-bytes t)
       (single-jl #"\x05")
       (concat-map-jl/list instruction->binary-bytes f)
       (single-jl #"\x0B"))]
    [(block-inst bt insts)
     (cons-jl
       #"\x02"
       (append-jl 
         (block-type->binary-bytes bt)
         (instructions->binary-bytes insts)))]))

;; Terminates the instruction with 0x0B (end) as is usually needed
(define (instructions->binary-bytes [i : (List Instruction)]) : (JoinList Bytes)
  (snoc-jl
    (concat-map-jl/list instruction->binary-bytes i)
    #"\x0B"))

(define (import->binary-bytes [e : Import]) : (JoinList Bytes)
  (case e
    [(import mod name desc)
     (varargs append-jl*
       (unsigned-leb128 (bytes-length mod))
       (single-jl mod)
       (unsigned-leb128 (bytes-length name))
       (single-jl name)
       (case desc
         [(function-import i)
          (cons-jl #"\x00" (unsigned-leb128 i))]))]))


(define (global->binary-bytes [g : Global]) : (JoinList Bytes)
  (case g
    [(global (global-type mutable ty) init)
     (varargs append-jl*
       (value-type->binary-bytes ty)
       (single-jl (if mutable #"\x01" #"\x00"))
       (instructions->binary-bytes init))]))


(define (export->binary-bytes [e : Export]) : (JoinList Bytes)
  (case e
    [(export name desc)
     (append-jl
       (unsigned-leb128 (bytes-length name))
       (cons-jl
         name
         (case desc
           [(function-export i)
            (cons-jl #"\x00" (unsigned-leb128 i))])))]))

(define (limits->binary-bytes [lim : Limits]) : (JoinList Bytes)
  (case lim
    [(limits min (nothing))
     (cons-jl #"\x00" (unsigned-leb128 min))]
    [(limits min (just (lifted-int max)))
     (cons-jl #"\x01" (append-jl (unsigned-leb128 min) (unsigned-leb128 max)))]))


(define (memory->binary-bytes [m : Memory]) : (JoinList Bytes)
  (match-define (memory lim) m)
  (limits->binary-bytes lim))

(define (table->binary-bytes [t : Table]) : (JoinList Bytes)
  (match-define (table lim rt) t)
  (append-jl
    (ref-type->binary-bytes rt)
    (limits->binary-bytes lim)))


(define (data->binary-bytes [d : Data]) : (JoinList Bytes)
  (case d
    [(active-data contents offset)
     (varargs append-jl*
       (unsigned-leb128 0)
       (instructions->binary-bytes (varargs list (const-i32-inst offset)))
       (unsigned-leb128 (bytes-length contents))
       (single-jl contents))]))

(define (element->binary-bytes [e : Element]) : (JoinList Bytes)
  (case e
    [(element rt inits (active-elem table-idx offset))
     (varargs append-jl*
       (unsigned-leb128 6)
       (unsigned-leb128 table-idx)
       (instructions->binary-bytes (varargs list (const-i32-inst offset)))
       (ref-type->binary-bytes rt)
       (encode-vector inits instructions->binary-bytes))]))


(define [A] (encode-vector [vec : (List A)] [f : (A -> (JoinList Bytes))]) : (JoinList Bytes)
  (append-jl (unsigned-leb128 (length vec)) (concat-map-jl/list f vec)))

(define [A] (encode-section [tag : Int] [items : (List A)] [f : (A -> (JoinList Bytes))]) : (JoinList Bytes)
  (cons-jl (bytes/1 (u8 tag)) (size-prefixed (encode-vector items f))))

(define (size-prefixed [v : (JoinList Bytes)]) : (JoinList Bytes)
  (append-jl (unsigned-leb128 (sum-jl bytes-length v)) v))


(define (signed-leb128 [v : Int]) : (JoinList Bytes)
  (cond
    [(and (<= 0 v) (< v 64))
     (single-jl (bytes/1 (u8 v)))]
    [(and (<= (- 0 64) v) (< v 0))
     (single-jl (bytes/1 (u8 (+ 128 v))))]
    [else
     (cons-jl
       (bytes/1 (u8 (+ 128 (remainder v 128))))
       (signed-leb128
         (if (< v 0)
             (- (- 0 (quotient (- 0 v) 128)) 1)
             (quotient v 128))))]))

(define (unsigned-leb128 [v : Int]) : (JoinList Bytes)
  (if (< v 128)
      (single-jl (bytes/1 (u8 v)))
      (cons-jl
        (bytes/1 (u8 (+ 128 (remainder v 128))))
        (unsigned-leb128 (quotient v 128)))))
