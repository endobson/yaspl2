#:module (formats elf)
#:import {
  (aligned-bytes)
  (bytes)
  (maybe)
  (dict)
  (set)
  (data lifted-primitives)
  (join-list)
  (list)
  (numbers)
  (prim)
  (structured-native-code)
  (tuples)
}
(export
  (#:types)
  (#:values serialize-elf-file)
  (#:patterns))
(types)

(define (serialize-elf-file [text-section : ProgramSection]) : Bytes
  (match-define (program-section (aligned-bytes text-section-contents text-section-alignment)
                                 text-relocations text-symbols)
    text-section)
  (match-define text-section-length (bytes-length text-section-contents))
  (match-define rounded-text-section-length (round-up text-section-length 8))
  (match-define (tuple2 rev-offset-defined-symbols (lifted-int defined-symbols-end))
    (foldl
      (lambda ([s : DefinedSymbol] [acc : (Tuple2 (List (Tuple2 DefinedSymbol LiftedInt)) LiftedInt)])
        (case acc
          [(tuple2 offset-symbols (lifted-int current-offset))
           (tuple2
             (cons (tuple2 s (lifted-int current-offset)) offset-symbols)
             (lifted-int (+ current-offset (+ 1 (bytes-length (defined-symbol-name s))))))]))
      text-symbols
      (tuple2
        (ann (List (Tuple2 DefinedSymbol LiftedInt)) (empty))
        (lifted-int 1))))
  (match-define offset-defined-symbols (reverse rev-offset-defined-symbols))
  (match-define undefined-symbols-set
    (set-remove-all
      (set-add-all
        (make-set bytes-cmp)
        (map relocation-symbol text-relocations))
      (map defined-symbol-name text-symbols)))
  (match-define undefined-symbols (set->list undefined-symbols-set))
  (match-define (tuple2 rev-offset-undefined-symbols (lifted-int string-table-size))
    (foldl
      (lambda ([s : Bytes] [acc : (Tuple2 (List (Tuple2 Bytes LiftedInt)) LiftedInt)])
        (case acc
          [(tuple2 offset-symbols (lifted-int current-offset))
           (tuple2
             (cons (tuple2 s (lifted-int current-offset)) offset-symbols)
             (lifted-int (+ current-offset (+ 1 (bytes-length s)))))]))
      undefined-symbols
      (tuple2
        (ann (List (Tuple2 Bytes LiftedInt)) (empty))
        (lifted-int defined-symbols-end))))
  (match-define offset-undefined-symbols (reverse rev-offset-undefined-symbols))
  (match-define symbol-locations : (Dict Bytes LiftedInt)
    (dict-add-all
      (dict-add-all
        (make-dict bytes-cmp)
        (map (lambda ([s : DefinedSymbol])
               (case s
                 [(defined-symbol name addr)
                  (tuple2 name (lifted-int addr))]))
             text-symbols))
      (map (lambda ([s : Bytes])
             (tuple2 s (lifted-int 0)))
           undefined-symbols)))

  (match-define symbol-table-size (* (+ (length undefined-symbols) (+ (length text-symbols) 4)) #x18))

  (match-define section-string-table-size
    (case text-relocations
      [(empty) #x2C]
      [_ #x31]))

  (match-define symbol-table-start (+ #x40 rounded-text-section-length))
  (match-define string-table-start (round-up (+ symbol-table-start symbol-table-size) 8))

  (match-define string-table-end (+ string-table-start string-table-size))
  (match-define rela-text-section-start (round-up string-table-end 8))

  (match-define rela-text-section-align-padding
    (- rela-text-section-start string-table-end))
  (match-define rela-text-section-size
    (case text-relocations
      [(empty) 0]
      [_ (* #x18 (length text-relocations))]))

  (match-define section-string-table-start
    (case text-relocations
      [(empty) string-table-end]
      [_ (+ rela-text-section-start rela-text-section-size)]))

  (match-define section-string-table-end
    (+ section-string-table-start section-string-table-size))
  (match-define section-header-start
    (round-up (+ section-string-table-start section-string-table-size) 8))
  (match-define section-header-padding
    (- section-header-start section-string-table-end))


  (bytes-append
    (jl->list
      (varargs append-jl*
        (single-jl #"\x7FELF") ;; Magic
        (single-jl #"\x02") ;; Class (64 bit)
        (single-jl #"\x01") ;; Data encoding (LSB)
        (single-jl #"\x01") ;; Version
        (single-jl #"\x00") ;; OS ABI (SysV)
        (single-jl #"\x00") ;; OS ABI version
        (single-jl (make-bytes 7)) ;; Padding
        (single-jl (bytes/u16-le 1)) ;; Relocatable object file
        (single-jl (bytes/u16-le #x3E)) ;; Machine type X86_64
        (single-jl (bytes/u32-le 1)) ;; Version
        (single-jl (bytes/u64-le 0)) ;; No start address
        (single-jl (bytes/u64-le 0)) ;; Program header offset
        ;; TODO This depends on the size of the contents
        ;(single-jl (bytes/u64-le #x0150)) ;; Section header offset
        (single-jl (bytes/u64-le section-header-start)) ;; Section header offset
        (single-jl (bytes/u32-le 0)) ;; FLAGS
        (single-jl (bytes/u16-le #x40)) ;; ELF header size
        (single-jl (bytes/u16-le #x00)) ;; Size of program header entry
        (single-jl (bytes/u16-le #x00)) ;; Number of program header entries
        (single-jl (bytes/u16-le #x40)) ;; size of section header entry
        (case text-relocations
          [(empty)
           (varargs append-jl*
             (single-jl (bytes/u16-le #x7))   ;; Number of section header entries
             (single-jl (bytes/u16-le #x6)))] ;; Index of section name section
          [_
           (varargs append-jl*
             (single-jl (bytes/u16-le #x8))    ;; Number of section header entries
             (single-jl (bytes/u16-le #x7)))]) ;; Index of section name section
        (single-jl text-section-contents)
        ;; Symbol tables are 8 byte aligned, so add padding as needed
        (single-jl (make-bytes (- rounded-text-section-length text-section-length)))
        (case text-relocations
          [(empty)
           (varargs append-jl*
             (symbol-table-entry 0 0 0 0)
             (symbol-table-entry 0 3 1 0)
             (symbol-table-entry 0 3 2 0)
             (symbol-table-entry 0 3 3 0))]
          [_
           (varargs append-jl*
             (symbol-table-entry 0 0 0 0)
             (symbol-table-entry 0 3 1 0)
             (symbol-table-entry 0 3 3 0)
             (symbol-table-entry 0 3 4 0))])
        (concat-jl
          (map
            (lambda ([entry : (Tuple2 DefinedSymbol LiftedInt)])
              (case entry
                [(tuple2 (defined-symbol _ addr) (lifted-int name-offset))
                 (symbol-table-entry name-offset 0 1 addr)]))
            offset-defined-symbols))
        (concat-jl
          (map
            (lambda ([entry : (Tuple2 Bytes LiftedInt)])
              (case entry
                [(tuple2 _ (lifted-int name-offset))
                 (symbol-table-entry name-offset #x10 0 0)]))
            offset-undefined-symbols))
        (single-jl (make-null-terminated #""))
        (concat-jl
          (map
            (lambda ([s : DefinedSymbol])
              (single-jl (make-null-terminated (defined-symbol-name s))))
            text-symbols))
        (concat-jl
          (map
            (lambda ([s : Bytes])
              (single-jl (make-null-terminated s)))
            undefined-symbols))
        (case text-relocations
          [(empty)
           (empty-jl)]
          [_
           (append-jl
             (single-jl (make-bytes rela-text-section-align-padding))
             (concat-jl
               (map
                 (lambda ([relocation : Relocation]) : (JoinList Bytes)
                   (case relocation
                     [(relocation kind offset sym)
                      (varargs join-list
                        (bytes/s64-le offset)
                        (case kind
                          [(branch-relocation)
                           #"\x02\x00\x00\x00\x06\x00\x00\x00"]
                          [(signed-relocation)
                           (if (set-member? undefined-symbols-set sym)
                               #"\x0b\x00\x00\x00\x06\x00\x00\x00"
                               #"\x0b\x00\x00\x00\x01\x00\x00\x00")]
                          [(unsigned-relocation)
                           #"\x0b\x00\x00\x00\x01\x00\x00\x00"])
                        (case kind
                          [(branch-relocation) (bytes/s64-le (- 0 4))]
                          [(signed-relocation)
                           (case (dict-ref symbol-locations sym)
                             [(nothing) (panic #"Unknown symbol")]
                             [(just (lifted-int v))
                              (bytes/u64-le v)])]
                          [(unsigned-relocation) (bytes/u64-le offset)]))]))
                 text-relocations)))])
        (single-jl (make-null-terminated #""))
        (single-jl (make-null-terminated #".symtab"))
        (single-jl (make-null-terminated #".strtab"))
        (single-jl (make-null-terminated #".shstrtab"))
        (case text-relocations
          [(empty)
           (single-jl (make-null-terminated #".text"))]
          [_
           (single-jl (make-null-terminated #".rela.text"))])
        (single-jl (make-null-terminated #".data"))
        (single-jl (make-null-terminated #".bss"))
        ;; Align the section header to 8 Bytes, so add padding as needed.
        (single-jl (make-bytes section-header-padding))
        (single-jl (make-bytes (* 16 4))) ;; Empty section header
        (case text-relocations
          [(empty)
           (varargs append-jl*
             (section-header 27 1 6 0 #x40 text-section-length 0 0 1 0)
             (section-header 33 1 3 0 (+ #x40 text-section-length) 0 0 0 1 0)
             (section-header 39 8 3 0 (+ #x40 text-section-length) 0 0 0 1 0))]
          [_
           (varargs append-jl*
             (section-header 32 1 6 0 #x40 text-section-length 0 0 1 0)
             (section-header 27 4 64 0 rela-text-section-start
                             (* #x18 (length text-relocations)) 5 1 8 #x18)
             (section-header 38 1 3 0 (+ #x40 text-section-length) 0 0 0 1 0)
             (section-header 44 8 3 0 (+ #x40 text-section-length) 0 0 0 1 0))])
        (let ([symbol-table-section-number
               (case text-relocations
                 [(empty) 5]
                 [_ 6])])
          (section-header 1 2 0 0 symbol-table-start symbol-table-size symbol-table-section-number
                          (+ 4 (length text-symbols)) 8 24))
        (section-header 9 3 0 0 string-table-start string-table-size 0 0 1 0)
        (section-header 17 3 0 0 section-string-table-start section-string-table-size 0 0 1 0)
        ))))

(define (bytes/u16-le [v : Int]) : Bytes
  (bytes/2 (u8 (remainder v 256)) (u8 (quotient v 256))))

(define (bytes/u32-le [v : Int]) : Bytes
  (match-define b (make-bytes 4))
  (begin
    (bytes-set!/quad-le b 0 (u32 v))
    b))

(define (bytes/u64-le [v : Int]) : Bytes
  (match-define b (make-bytes 8))
  (begin
    (bytes-set!/u64-le b 0 (u64 v))
    b))

(define (bytes/s64-le [v : Int]) : Bytes
  (match-define b (make-bytes 8))
  (begin
    (if (>= v 0)
        (bytes-set!/u64-le b 0 (u64 v))
        (begin
          (bytes-set!/s32-le b 0 (s32 v))
          (bytes-set!/s32-le b 4 (s32 (- 0 1)))))
    b))


(define (section-header
          [name-offset : Int]
          [section-type : Int]
          [section-flags : Int]
          [section-addr : Int]
          [section-offset : Int]
          [section-size : Int]
          [section-link : Int]
          [section-info : Int]
          [section-align : Int]
          [entry-size : Int]) : (JoinList Bytes)
  (varargs join-list
    (bytes/u32-le name-offset)
    (bytes/u32-le section-type)
    (bytes/u64-le section-flags)
    (bytes/u64-le section-addr)
    (bytes/u64-le section-offset)
    (bytes/u64-le section-size)
    (bytes/u32-le section-link)
    (bytes/u32-le section-info)
    (bytes/u64-le section-align)
    (bytes/u64-le entry-size)))

(define (symbol-table-entry
          [symbol-name-offset : Int]
          [binding-info : Int]
          [section-table-index : Int]
          [symbol-value : Int]) : (JoinList Bytes)
  (varargs join-list
    (bytes/u32-le symbol-name-offset)
    (bytes/2 (u8 binding-info) (u8 0))
    (bytes/u16-le section-table-index)
    (bytes/u64-le symbol-value)
    (make-bytes 8)))
