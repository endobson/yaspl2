#:module (formats elf)
#:import {
  (bytes)
  (either)
  (io)
  (list)
  (prim)
}
(export
  (#:types ElfFile SectionHeader SymbolTableEntry)
  (#:values
     read-elf
     parse-elf-symbol-table
     elf-file-raw-contents
     section-header-name-offset
     section-header-section-size
     section-header-section-offset
     section-header-section-info)
  (#:patterns
     elf-file
     section-header
     symbol-table-entry))
(types
  (define-type ElfFile
    (elf-file
      [section-headers : (List SectionHeader)]
      [section-header-names-index : Int]
      [raw-contents : Bytes]))
  (define-type SectionHeader
    (section-header
      [name-offset : Int]
      [section-type : Int]
      [section-attributes : Int]
      [section-addr : Int]
      [section-offset : Int]
      [section-size : Int]
      [section-link : Int]
      [section-info : Int]
      [section-addr-align : Int]
      [section-entry-size : Int]))
  (define-type SymbolTableEntry
    (symbol-table-entry
      [name-offset : Int]
      [value : Int]
      [size : Int])))


(define (read-elf [input : InputPort]) : (Either Bytes ElfFile)
  (match-define raw-contents (read-all-bytes input))
  (if (< (bytes-length raw-contents) 64)
      (left #"Elf file is too short")
      (case 3
        [_
         (match-define magic-number (bytes-ref/quad-le raw-contents 0))
         (match-define bit-size (u8->s64 (bytes-ref raw-contents 4)))
         (match-define endianness (u8->s64 (bytes-ref raw-contents 5)))
         (match-define first-version (u8->s64 (bytes-ref raw-contents 6)))
         (match-define os-abi (u8->s64 (bytes-ref raw-contents 7)))
         ;; padding
         (match-define object-type (bytes-ref/u16-le raw-contents 16))
         (match-define instruction-set (bytes-ref/u16-le raw-contents 18))
         (match-define second-version (bytes-ref/quad-le raw-contents 20))
         (match-define entry-point (u64->s64 (bytes-ref/u64-le raw-contents 24)))
         (match-define program-header-offset (u64->s64 (bytes-ref/u64-le raw-contents 32)))
         (match-define section-header-offset (u64->s64 (bytes-ref/u64-le raw-contents 40)))
         (match-define flags (bytes-ref/quad-le raw-contents 48))
         (match-define header-size (bytes-ref/u16-le raw-contents 52))
         (match-define program-header-table-entry-size (bytes-ref/u16-le raw-contents 54))
         (match-define program-header-table-num-entries (bytes-ref/u16-le raw-contents 56))
         (match-define section-header-table-entry-size (bytes-ref/u16-le raw-contents 58))
         (match-define section-header-table-num-entries (bytes-ref/u16-le raw-contents 60))
         (match-define section-names-index (bytes-ref/u16-le raw-contents 62))
         (if (not (= magic-number #x464c457f))
             (left #"ELF file doesn't start with correct magic number")
             (if (not (= bit-size 2))
                 (left #"ELF file isn't 64 bit")
             (if (not (= endianness 1))
                 (left #"ELF file isn't little endian")
             (if (not (= first-version 1))
                 (left #"ELF file version (1) isn't 1")
             (if (not (= os-abi 0))
                 (left #"ELF file os abi is set unexpectedly")
             (if (not (= object-type 1))
                 (left #"ELF file isn't a relocatable object")
             (if (not (= instruction-set #x3E))
                 (left #"ELF file's instruction set is not x86_64")
             (if (not (= second-version 1))
                 (left #"ELF file's version (2) isn't 1")
             (if (not (= entry-point 0))
                 (left #"ELF file's entry point isn't 0")
             (if (not (= program-header-offset 0))
                 (left #"ELF file's program header offset isn't 0")
             (if (not (= flags 0))
                 (left #"ELF file has unknown flags set")
             (if (not (= header-size 64))
                 (left #"ELF file's header-size is not 64")
             (if (not (= program-header-table-entry-size 0))
                 (left #"ELF file's program header table entry size is not zero")
             (if (not (= program-header-table-num-entries 0))
                 (left #"ELF file's number of program header entries is not zero")
             (if (not (= section-header-table-entry-size #x40))
                 (left #"ELF file's section header table entry size is not 64")
             (if (not (= section-header-table-num-entries 8))
                 (left #"ELF file's number of section header table enties is not 8")
             (if (not (= section-names-index 7))
                 (left #"ELF file's section header names table is not section 7")
                 (let ([section-headers
                         (parse-section-headers
                           raw-contents
                           section-header-offset
                           section-header-table-num-entries)])
                   (right (elf-file section-headers section-names-index raw-contents))))))))))))))))))))])))

(define (parse-section-headers [contents : Bytes] [offset : Int] [section-count : Int])
  : (List SectionHeader)
  (if (= section-count 0)
      (empty)
      (cons (parse-section-header contents offset)
            (parse-section-headers contents (+ offset 64) (- section-count 1)))))

(define (parse-section-header [contents : Bytes] [offset : Int]) : SectionHeader
  (match-define name-offset (bytes-ref/quad-le contents (+ offset 0)))
  (match-define section-type (bytes-ref/quad-le contents (+ offset 4)))
  (match-define section-attributes (u64->s64 (bytes-ref/u64-le contents (+ offset 8))))
  (match-define section-addr (u64->s64 (bytes-ref/u64-le contents (+ offset 16))))
  (match-define section-offset (u64->s64 (bytes-ref/u64-le contents (+ offset 24))))
  (match-define section-size (u64->s64 (bytes-ref/u64-le contents (+ offset 32))))
  (match-define section-link (bytes-ref/quad-le contents (+ offset 40)))
  (match-define section-info (bytes-ref/quad-le contents (+ offset 44)))
  (match-define section-addr-align (u64->s64 (bytes-ref/u64-le contents (+ offset 48))))
  (match-define section-entry-size (u64->s64 (bytes-ref/u64-le contents (+ offset 56))))
  (section-header
    name-offset
    section-type
    section-attributes
    section-addr
    section-offset
    section-size
    section-link
    section-info
    section-addr-align
    section-entry-size))

(define (parse-elf-symbol-table [section-header : SectionHeader] [raw-contents : Bytes])
  : (Either Bytes (List SymbolTableEntry))
  (if (not (= (section-header-section-entry-size section-header) 24))
      (left #"Symbol table entries must have a size of 24")
      (right
        (parse-elf-symbol-table/entries
          (section-header-section-offset section-header)
          (quotient (section-header-section-size section-header) 24)
          raw-contents))))

(define (parse-elf-symbol-table/entries [offset : Int] [remaining : Int] [raw-contents : Bytes])
  : (List SymbolTableEntry)
  (if (= remaining 0)
      (empty)
      (cons
        (symbol-table-entry
          (bytes-ref/quad-le raw-contents (+ offset 0)) ;; name
          ;; info : 1 byte
          ;; reserved : 1 byte
          ;; section-table-index : 2 byte
          (u64->s64 (bytes-ref/u64-le raw-contents (+ offset 8))) ;; value/address
          (u64->s64 (bytes-ref/u64-le raw-contents (+ offset 16)))) ;; size
        (parse-elf-symbol-table/entries (+ offset 24) (- remaining 1) raw-contents))))
