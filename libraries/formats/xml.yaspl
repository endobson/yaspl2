#:module (formats xml)
#:import {
  (bytes)
  (join-list)
  (list)
  (prim)
}
(export
  (#:types Node Attribute)
  (#:values element-node text-node/escape attribute/escape document->xml-bytes)
  (#:patterns))
(types
  (define-type Node
    (element-node [tag-name : Bytes] [attributes : (List Attribute)] [children : (List Node)])
    (text-node [contents : (JoinList Bytes)]))
  (define-type Attribute
    (attribute [name : Bytes] [value : (JoinList Bytes)])))


(define (document->xml-bytes [node : Node]) : Bytes
  (bytes-append
    (jl->list
      (cons-jl
        #"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
        (node->xml-bytes node)))))

(define (node->xml-bytes [v : Node]) : (JoinList Bytes)
  (case v
    [(element-node tag attributes child-nodes)
     (varargs append-jl*
        (varargs join-list #"<" tag)
        (concat-map-jl/list attribute->xml-bytes attributes)
        (single-jl #">")
        (concat-map-jl/list node->xml-bytes child-nodes)
        (varargs join-list #"</" tag #">"))]
    [(text-node contents)
     contents]))


;; This should be a U8
(define (bytes-concat-map [v : Bytes] [f : (U8 -> Bytes)]) : (JoinList Bytes)
  (bytes-concat-map* v 0 f))
(define (bytes-concat-map* [v : Bytes] [index : Int] [f : (U8 -> Bytes)]) : (JoinList Bytes)
  (if (< index (bytes-length v))
      (cons-jl (f (bytes-ref v index)) (bytes-concat-map* v (+ 1 index) f))
      (empty-jl)))
(define (bytes-contains [b : Bytes] [v : Int]) : Boolean
  (bytes-contains* b 0 v))
(define (bytes-contains* [b : Bytes] [index : Int] [v : Int]) : Boolean
  (if (< index (bytes-length b))
      (if (= (u8->s64 (bytes-ref b index)) v) #t (bytes-contains* b (+ 1 index) v))
      #f))

(define (escape-xml-text [name : Bytes]) : (JoinList Bytes)
  (if (or (or (bytes-contains name 38)
              (bytes-contains name 60))
          (bytes-contains name 62))
      (bytes-concat-map name
        (lambda ([v : U8])
          (let ([v (u8->s64 v)])
            (if (= v 38) ;; &
                #"&amp;"
                (if (= v 60) ;; <
                    #"&lt;"
                    (if (= v 62) ;; >
                        #"&gt;"
                        (bytes/1 (u8 v))))))))
      (single-jl name)))

(define (text-node/escape [contents : (JoinList Bytes)]) : Node
  (text-node (concat-map-jl escape-xml-text contents)))

(define (attribute/escape [name : Bytes] [value : (JoinList Bytes)]) : Attribute
  (attribute name (concat-map-jl escape-xml-text value)))


;; TODO move the space somewhere else
(define (attribute->xml-bytes [v : Attribute]) : (JoinList Bytes)
  (case v
    [(attribute name value)
     (varargs append-jl*
       (varargs join-list #" " name #"=\"")
       value
       (single-jl #"\""))]))
