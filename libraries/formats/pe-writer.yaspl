#:module (formats pe-writer)
#:import {
  (aligned-bytes)
  (bytes)
  (data lifted-primitives)
  (dict)
  (io)
  (join-list)
  (list)
  (maybe)
  (numbers)
  (prim)
  (set)
  (structured-native-code)
  (structured-pe)
  (tuples)
}
(export
  (#:values
     serialize-pe-library
     write-pe-executable))
(types
  (define-type LargeSymbolTableEntry
    (section-name/large
      [name : Bytes]
      [section-number : U16]
      [section-length : U32]
      [num-relocations : U16])
    (text-symbol/large
      [name : Bytes]
      [offset : U32])
    (const-symbol/large
      [name : Bytes]
      [offset : U32])
    (zero-data-symbol/large
      [name : Bytes]
      [offset : U32])
    (external-symbol/large
      [name : Bytes]))
  (define-type StringTable
    (string-table
      [index : (Dict Bytes LiftedInt)]
      [contents : (JoinList Bytes)]))

  (define-type SymbolTableEntry
    (section-name-part1 [name : Bytes] [section-number : U16])
    (section-name-part2 [length : U32] [num-relocations : U16])
    (text-symbol [name : Bytes] [offset : U32])
    (const-symbol [name : Bytes] [offset : U32])
    (zero-data-symbol [name : Bytes] [offset : U32])
    (external-symbol [name : Bytes])))

(define (serialize-pe-library
          [text-section : (ProgramSection AbstractRelocationKind)]
          [const-section : (ProgramSection AbstractRelocationKind)]
          [zero-data-section : ZeroDataSection])
  : Bytes
  (match-define (program-section (aligned-bytes text-contents _text-alignment)
                                 text-relocations text-global-symbols text-local-symbols)
    text-section)
  (match-define (program-section (aligned-bytes const-contents _const-alignment)
                                 const-relocations const-global-symbols const-local-symbols)
    const-section)
  (match-define (zero-data-section zero-data-section-size zero-data-section-alignment
                                   zero-data-section-symbols)
    zero-data-section)

  (match-define large-text-symbols
    (map
      (lambda ([s : DefinedSymbol]) : LargeSymbolTableEntry
        (match-define (defined-symbol name offset) s)
        (text-symbol/large name (u32 offset)))
      text-global-symbols))

  (match-define large-const-symbols
    (map
      (lambda ([s : DefinedSymbol]) : LargeSymbolTableEntry
        (match-define (defined-symbol name offset) s)
        (const-symbol/large name (u32 offset)))
      const-global-symbols))

  (match-define large-zero-data-symbols
    (map
      (lambda ([s : DefinedSymbol]) : LargeSymbolTableEntry
        (match-define (defined-symbol name offset) s)
        (zero-data-symbol/large name (u32 offset)))
      zero-data-section-symbols))


  (match-define defined-symbols
    (map defined-symbol-name
         (append* (varargs list
                    text-local-symbols text-global-symbols
                    const-local-symbols const-global-symbols
                    zero-data-section-symbols))))

  (match-define undefined-symbols
    (let ([defined-symbols-set (set-add-all (make-set bytes-cmp) defined-symbols)])
      (remove-duplicates
        (filter-map
          (lambda ([r : (Relocation AbstractRelocationKind)]) : (Maybe Bytes)
            (let ([sym (relocation-symbol r)])
              (if (set-member? defined-symbols-set sym)
                  (nothing)
                  (just sym))))
          (append text-relocations const-relocations)))))

  (match-define large-undefined-symbols : (List LargeSymbolTableEntry)
    (map
      (lambda ([sym : Bytes])
        (external-symbol/large sym))
      undefined-symbols))


  (match-define large-symbols : (List LargeSymbolTableEntry)
    (append*
      (varargs list
        (varargs list
          (section-name/large #".text\x00\x00\x00" (u16 1) (u32 (bytes-length text-contents)) (u16 0))
          (section-name/large #".rdata\x00\x00" (u16 2) (u32 (bytes-length const-contents)) (u16 0))
          (section-name/large #".bss\x00\x00\x00\x00" (u16 3) (u32 zero-data-section-size) (u16 0)))
        large-text-symbols
        large-const-symbols
        large-zero-data-symbols
        large-undefined-symbols)))

  (match-define string-table (make-string-table large-symbols))

  (match-define symbol-table-indexes (compute-symbol-table-indexes large-symbols))

  (match-define symbols
    (append*
      (map (lambda ([l : LargeSymbolTableEntry])
             (expand-large-symbol l (string-table-index string-table)))
           large-symbols)))

  (match-define symbol-table
    (concat-map-jl/list symbol->bytes symbols))


  (match-define number-text-relocations (length text-relocations))
  (match-define number-rdata-relocations (length const-relocations))



  (match-define num-sections 3)

  (match-define coff-header-start 0)
  (match-define coff-header-end (+ coff-header-start 20))
  (match-define section-headers-start coff-header-end)
  (match-define section-headers-end (+ section-headers-start (* num-sections 40)))
  (match-define text-section-start section-headers-end)
  (match-define text-section-length (bytes-length text-contents))
  (match-define text-section-end (+ text-section-start text-section-length))
  (match-define rdata-section-start text-section-end)
  (match-define rdata-section-length (bytes-length const-contents))
  (match-define rdata-section-end (+ rdata-section-start rdata-section-length))
  (match-define bss-section-start rdata-section-end)
  (match-define bss-section-length zero-data-section-size)
  (match-define bss-section-alignment zero-data-section-alignment)
  (match-define bss-section-end bss-section-start)
  (match-define symbol-table-start bss-section-end)
  (match-define symbol-table-length (sum-jl bytes-length symbol-table))
  (match-define symbol-table-end (+ symbol-table-start symbol-table-length))
  (match-define string-table-start symbol-table-end)
  (match-define string-table-length (sum-jl bytes-length (string-table-contents string-table)))
  (match-define string-table-end (+ string-table-start string-table-length))
  (match-define text-reloc-start string-table-end)
  (match-define text-reloc-length (* number-text-relocations 10))
  (match-define text-reloc-end (+ text-reloc-start text-reloc-length))
  (match-define rdata-reloc-start text-reloc-end)
  (match-define rdata-reloc-length (* number-rdata-relocations 10))
  (match-define _rdata-reloc-end (+ rdata-reloc-start rdata-reloc-length))

  (bytes-append
    (jl->list
      (varargs append-jl*
        (make-library-coff-header num-sections symbol-table-start (length symbols))
        (make-text-section-header
          text-section-start text-section-length
          text-reloc-start number-text-relocations)
        (make-rdata-section-header
          rdata-section-start rdata-section-length
          rdata-reloc-start number-rdata-relocations)
        (make-bss-section-header
          bss-section-length bss-section-alignment)
        (single-jl text-contents)
        (single-jl const-contents)
        symbol-table
        (string-table-contents string-table)
        (make-text-section-relocations text-relocations symbol-table-indexes)
        (make-rdata-section-relocations const-relocations symbol-table-indexes)
        ))))

(define (make-coff-header
          [number-of-sections : Int]
          [symbol-table-start : Int]
          [num-symbols : Int]
          [optional-header-size : Int]
          [characteristics : Int])
  : (JoinList Bytes)
  (varargs join-list
    (bytes/u16-le (u16 #x8664))                  ;; Machine type
    (bytes/u16-le (u16 number-of-sections))      ;; Number of sections
    (bytes/u32-le (u32 0))                       ;; Timestamp
    (bytes/u32-le (u32 symbol-table-start))      ;; Pointer to COFF symbol table
    (bytes/u32-le (u32 num-symbols))             ;; Number of COFF symbols
    (bytes/u16-le (u16 optional-header-size))    ;; Size of optional header
    (bytes/u16-le (u16 characteristics)) ;; Characteristics
    ))

(define (make-library-coff-header
          [num-sections : Int]
          [symbol-table-start : Int]
          [num-symbols : Int]) : (JoinList Bytes)
  (make-coff-header num-sections symbol-table-start num-symbols 0 (bitwise-ior #x2000 #x0020)))

(define (make-executable-coff-header [num-sections : Int]) : (JoinList Bytes)
  (make-coff-header num-sections 0 0 #xf0 (bitwise-ior (bitwise-ior #x2000 #x0020) #x0002)))


(define (make-text-section-header
          [text-section-start : Int]
          [text-section-length : Int]
          [text-reloc-start : Int]
          [text-num-relocations : Int])
  : (JoinList Bytes)
  (varargs join-list
    #".text\x00\x00\x00"
    (bytes/u32-le (u32 0))                                    ; VirtualSize
    (bytes/u32-le (u32 0))                                    ; VirtualAddress
    (bytes/u32-le (u32 text-section-length))                  ; SizeOfRawData
    (bytes/u32-le (u32 text-section-start))                   ; PointerToRawData
    (bytes/u32-le (u32 text-reloc-start))                     ; PointerToRelocations
    (bytes/u32-le (u32 0))                                    ; PointerToLinenumbers
    (bytes/u16-le (u16 text-num-relocations))                 ; NumberOfRelocations
    (bytes/u16-le (u16 0))                                    ; NumberOfLinenumbers
    (bytes/u32-le (u32 (bitwise-ior                           ; Characteristics
                         (bitwise-ior
                           #x40000000       ; Readable Section
                           #x20000000)      ; Executable Section
                         (bitwise-ior
                           #x00500000       ; 16 bit aligned
                           #x00000020)))))) ; Contains executable code

(define (make-executable-text-section-header
          [virtual-addr : Int]
          [virtual-size : Int]
          [text-section-start : Int]
          [text-section-length : Int])
  : (JoinList Bytes)
  (varargs join-list
    #".text\x00\x00\x00"
    (bytes/u32-le (u32 virtual-size))                         ; VirtualSize
    (bytes/u32-le (u32 virtual-addr))                         ; VirtualAddress
    (bytes/u32-le (u32 text-section-length))                  ; SizeOfRawData
    (bytes/u32-le (u32 text-section-start))                   ; PointerToRawData
    (bytes/u32-le (u32 0))                                    ; PointerToRelocations
    (bytes/u32-le (u32 0))                                    ; PointerToLinenumbers
    (bytes/u16-le (u16 0))                                    ; NumberOfRelocations
    (bytes/u16-le (u16 0))                                    ; NumberOfLinenumbers
    (bytes/u32-le (u32 (bitwise-ior                           ; Characteristics
                         (bitwise-ior
                           #x40000000       ; Readable Section
                           #x20000000)      ; Executable Section
                         #x00000020)))))    ; Contains executable code


(define (make-text-section-relocations
          [relocs : (List (Relocation AbstractRelocationKind))]
          [symbol-table-indexes : (Dict Bytes LiftedInt)])
  : (JoinList Bytes)
  (concat-map-jl/list
    (lambda ([r : (Relocation AbstractRelocationKind)]) : (JoinList Bytes)
      (match-define (relocation kind offset sym) r)
      (case (dict-ref symbol-table-indexes sym)
        [(nothing)
         (panic (bytes-append (varargs list #"Bad symbol: " sym)))]
        [(just (lifted-int index))
         (case kind
           [(load-relocation)
            (varargs join-list
              (bytes/u32-le (u32 offset))
              (bytes/u32-le (u32 index))
              (bytes/u16-le (u16 4)))]
           [(call-relocation)
            (varargs join-list
              (bytes/u32-le (u32 offset))
              (bytes/u32-le (u32 index))
              (bytes/u16-le (u16 4)))]
           [(branch-relocation)
            (varargs join-list
              (bytes/u32-le (u32 offset))
              (bytes/u32-le (u32 index))
              (bytes/u16-le (u16 4)))]
           [(address-relocation _)
            (panic #"Address Relocation not yet implemented")])]))
    relocs))

(define (make-rdata-section-header
          [rdata-section-start : Int]
          [rdata-section-length : Int]
          [rdata-reloc-start : Int]
          [rdata-num-relocations : Int])
  : (JoinList Bytes)

  (varargs join-list
    #".rdata\x00\x00"
    (bytes/u32-le (u32 0))                                    ; VirtualSize
    (bytes/u32-le (u32 0))                                    ; VirtualAddress
    (bytes/u32-le (u32 rdata-section-length))                 ; SizeOfRawData
    (bytes/u32-le (u32 rdata-section-start))                  ; PointerToRawData
    (bytes/u32-le (u32 rdata-reloc-start))                    ; PointerToRelocations
    (bytes/u32-le (u32 0))                                    ; PointerToLinenumbers
    (bytes/u16-le (u16 rdata-num-relocations))                ; NumberOfRelocations
    (bytes/u16-le (u16 0))                                    ; NumberOfLinenumbers
    (bytes/u32-le (u32 (bitwise-ior                           ; Characteristics
                         #x40000000         ; Readable Section
                         (bitwise-ior
                           #x00500000       ; 16 bit aligned
                           #x00000040)))))) ; Contains initialized data

(define (make-executable-rdata-section-header
          [virtual-addr : Int]
          [virtual-size : Int]
          [rdata-section-start : Int]
          [rdata-section-length : Int])
  : (JoinList Bytes)

  (varargs join-list
    #".rdata\x00\x00"
    (bytes/u32-le (u32 virtual-size))                         ; VirtualSize
    (bytes/u32-le (u32 virtual-addr))                         ; VirtualAddress
    (bytes/u32-le (u32 rdata-section-length))                 ; SizeOfRawData
    (bytes/u32-le (u32 rdata-section-start))                  ; PointerToRawData
    (bytes/u32-le (u32 0))                                    ; PointerToRelocations
    (bytes/u32-le (u32 0))                                    ; PointerToLinenumbers
    (bytes/u16-le (u16 0))                                    ; NumberOfRelocations
    (bytes/u16-le (u16 0))                                    ; NumberOfLinenumbers
    (bytes/u32-le (u32 (bitwise-ior                           ; Characteristics
                         #x40000000      ; Readable Section
                         #x00000040))))) ; Contains initialized data


(define (make-rdata-section-relocations
          [relocs : (List (Relocation AbstractRelocationKind))]
          [symbol-table-indexes : (Dict Bytes LiftedInt)])
  : (JoinList Bytes)
  (concat-map-jl/list
    (lambda ([r : (Relocation AbstractRelocationKind)]) : (JoinList Bytes)
      (case r
        [(relocation (address-relocation 0) offset sym)
         (case (dict-ref symbol-table-indexes sym)
           [(nothing)
            (panic (bytes-append (varargs list #"Bad symbol: " sym)))]
           [(just (lifted-int index))
            (varargs join-list
              (bytes/u32-le (u32 offset))
              (bytes/u32-le (u32 index))
              (bytes/u16-le (u16 1)))])] ;; ADDR64
        [_
         (panic #"Other relocations not supported")]))
    relocs))

(define (make-bss-section-header
          [bss-section-length : Int]
          [bss-section-alignment : Int])
  : (JoinList Bytes)
  ;; TODO actually handle alignment

  (varargs join-list
    #".bss\x00\x00\x00\x00"
    (bytes/u32-le (u32 0))                                    ; VirtualSize
    (bytes/u32-le (u32 0))                                    ; VirtualAddress
    (bytes/u32-le (u32 bss-section-length))                   ; SizeOfRawData
    (bytes/u32-le (u32 0))                                    ; PointerToRawData
    (bytes/u32-le (u32 0))                                    ; PointerToRelocations
    (bytes/u32-le (u32 0))                                    ; PointerToLinenumbers
    (bytes/u16-le (u16 0))                                    ; NumberOfRelocations
    (bytes/u16-le (u16 0))                                    ; NumberOfLinenumbers
    (bytes/u32-le (u32 (bitwise-ior                           ; Characteristics
                         (bitwise-ior
                           #x40000000       ; Readable Section
                           #x80000000)      ; Writeable Section
                         (bitwise-ior
                           #x00400000       ; 8 bit aligned
                           #x00000080)))))) ; Contains uninitialized data



(define (make-executable-data-section-header
          [virtual-addr : Int]
          [virtual-size : Int]
          [data-section-start : Int]
          [data-section-length : Int])
  : (JoinList Bytes)

  (varargs join-list
    #".data\x00\x00\x00"
    (bytes/u32-le (u32 virtual-size))                        ; VirtualSize
    (bytes/u32-le (u32 virtual-addr))                        ; VirtualAddress
    (bytes/u32-le (u32 data-section-length))                 ; SizeOfRawData
    (bytes/u32-le (u32 data-section-start))                  ; PointerToRawData
    (bytes/u32-le (u32 0))                                   ; PointerToRelocations
    (bytes/u32-le (u32 0))                                   ; PointerToLinenumbers
    (bytes/u16-le (u16 0))                                   ; NumberOfRelocations
    (bytes/u16-le (u16 0))                                   ; NumberOfLinenumbers
    (bytes/u32-le (u32 (bitwise-ior                          ; Characteristics
                         (bitwise-ior
                           #x40000000         ; Readable Section
                           #x80000000)        ; Writable Section
                         #x00000040)))))      ; Contains initialized data

(define (make-executable-reloc-section-header
          [virtual-addr : Int]
          [virtual-size : Int]
          [reloc-section-start : Int]
          [reloc-section-length : Int])
  : (JoinList Bytes)

  (varargs join-list
    #".reloc\x00\x00"
    (bytes/u32-le (u32 virtual-size))              ; VirtualSize
    (bytes/u32-le (u32 virtual-addr))              ; VirtualAddress
    (bytes/u32-le (u32 reloc-section-length))      ; SizeOfRawData
    (bytes/u32-le (u32 reloc-section-start))       ; PointerToRawData
    (bytes/u32-le (u32 0))                         ; PointerToRelocations
    (bytes/u32-le (u32 0))                         ; PointerToLinenumbers
    (bytes/u16-le (u16 0))                         ; NumberOfRelocations
    (bytes/u16-le (u16 0))                         ; NumberOfLinenumbers
    (bytes/u32-le (u32 (bitwise-ior                ; Characteristics
                         (bitwise-ior
                           #x40000000      ; Readable Section
                           #x02000000)     ; Discardable Section
                         #x00000040)))))  ; Contains initialized data


(define (expand-large-symbol [e : LargeSymbolTableEntry]
                             [strings : (Dict Bytes LiftedInt)]) : (List SymbolTableEntry)
  (match-define encode-symbol-name
    (lambda ([name : Bytes]) : Bytes
      (bytes-append
        (if (> (bytes-length name) 8)
            (case (dict-ref strings name)
              [(nothing) (panic #"Bad symbol")]
              [(just (lifted-int offset))
               (varargs list (bytes/u32-le (u32 0)) (bytes/u32-le (u32 offset)))])
            (varargs list name (make-bytes (- 8 (bytes-length name))))))))



  (case e
    [(section-name/large name section-num length num-relocations)
     (varargs list
       (section-name-part1 (encode-symbol-name name) section-num)
       (section-name-part2 length num-relocations))]
    [(text-symbol/large name offset)
     (varargs list
       (text-symbol (encode-symbol-name name) offset))]
    [(const-symbol/large name offset)
     (varargs list
       (const-symbol (encode-symbol-name name) offset))]
    [(zero-data-symbol/large name offset)
     (varargs list
       (zero-data-symbol (encode-symbol-name name) offset))]
    [(external-symbol/large name)
     (varargs list
       (external-symbol (encode-symbol-name name)))]))

(define (symbol->bytes [e : SymbolTableEntry]) : (JoinList Bytes)
  (case e
    [(section-name-part1 name section-number)
     (varargs join-list
       name                          ;; Name
       (bytes/u32-le (u32 0))        ;; Value
       (bytes/u16-le section-number) ;; Section Number
       (bytes/u16-le (u16 0))        ;; Type
       (bytes/1 (u8 3))              ;; Storage Class
       (bytes/1 (u8 1)))]            ;; Number of AuxSymbols

    [(section-name-part2 length num-relocations)
     (varargs join-list
       (bytes/u32-le length)          ;; Section Length
       (bytes/u16-le num-relocations) ;; Number of Relocations
       (bytes/u16-le (u16 0))         ;; Number of line numbers
       (bytes/u32-le (u32 0))         ;; Checksum
       (bytes/u16-le (u16 0))         ;; Associated Section
       (bytes/1 (u8 0))               ;; Comdat Selection
       #"\x00\x00\x00")]              ;; Padding
    [(text-symbol name offset)
     (varargs join-list
       name                          ;; Name
       (bytes/u32-le offset)         ;; Value
       (bytes/u16-le (u16 1))        ;; Section Number
       (bytes/u16-le (u16 #x20))     ;; Type
       (bytes/1 (u8 2))              ;; Storage Class
       (bytes/1 (u8 0)))]            ;; Number of AuxSymbols
    [(const-symbol name offset)
     (varargs join-list
       name                          ;; Name
       (bytes/u32-le offset)         ;; Value
       (bytes/u16-le (u16 2))        ;; Section Number
       (bytes/u16-le (u16 #x20))     ;; Type
       (bytes/1 (u8 2))              ;; Storage Class
       (bytes/1 (u8 0)))]            ;; Number of AuxSymbols
    [(zero-data-symbol name offset)
     (varargs join-list
       name                          ;; Name
       (bytes/u32-le offset)         ;; Value
       (bytes/u16-le (u16 3))        ;; Section Number
       (bytes/u16-le (u16 #x00))     ;; Type
       (bytes/1 (u8 2))              ;; Storage Class
       (bytes/1 (u8 0)))]            ;; Number of AuxSymbols
    [(external-symbol name)
     (varargs join-list
       name                          ;; Name
       (bytes/u32-le (u32 0))        ;; Value
       (bytes/u16-le (u16 0))        ;; Section Number
       (bytes/u16-le (u16 #x0))      ;; Type
       (bytes/1 (u8 2))              ;; Storage Class
       (bytes/1 (u8 0)))]))          ;; Number of AuxSymbols

(define (large-symbol->name [e : LargeSymbolTableEntry]) : Bytes
  (case e
    [(section-name/large name _ _ _) name]
    [(text-symbol/large name _) name]
    [(const-symbol/large name _) name]
    [(zero-data-symbol/large name _) name]
    [(external-symbol/large name) name]))


(define (make-string-table [es : (List LargeSymbolTableEntry)])
  : StringTable
  (match-define (tuple2 (lifted-int size) (string-table index contents))
    (foldl
      (lambda ([e : LargeSymbolTableEntry] [acc : (Tuple2 LiftedInt StringTable)])
        (match-define name (large-symbol->name e))
        (if (<= (bytes-length name) 8)
            acc
            (case acc
              [(tuple2 (lifted-int size) (string-table index contents))
               (tuple2
                 (lifted-int (+ size (+ (bytes-length name) 1)))
                 (string-table
                   (dict-add index name (lifted-int size))
                   (snoc-jl (snoc-jl contents name) #"\x00")))])))
      es
      (tuple2
        (lifted-int 4)
        (string-table
          (make-dict bytes-cmp)
          (empty-jl)))))

  (string-table
    index
    (cons-jl
      (bytes/u32-le (u32 size))
      contents)))

(define (large-symbol->size [e : LargeSymbolTableEntry]) : Int
  (case e
    [(section-name/large _ _ _ _) 2]
    [(text-symbol/large _ _) 1]
    [(const-symbol/large _ _) 1]
    [(zero-data-symbol/large _ _) 1]
    [(external-symbol/large _) 1]))

(define (compute-symbol-table-indexes [symbols : (List LargeSymbolTableEntry)])
  : (Dict Bytes LiftedInt)
  (match-define (tuple2 _ dict)
    (foldl
      (lambda ([sym : LargeSymbolTableEntry] [acc : (Tuple2 LiftedInt (Dict Bytes LiftedInt))])
        (match-define (tuple2 (lifted-int index) dict) acc)
        (tuple2
          (lifted-int (+ (large-symbol->size sym) index))
          (dict-add dict (large-symbol->name sym) (lifted-int index))))
      symbols
      (ann (Tuple2 LiftedInt (Dict Bytes LiftedInt)) (tuple2 (lifted-int 0) (make-dict bytes-cmp)))))
  dict)


(define (remove-duplicates [l : (List Bytes)]) : (List Bytes)
  (remove-duplicates* l (empty) (make-set bytes-cmp)))

(define (remove-duplicates* [l : (List Bytes)] [rev-acc : (List Bytes)] [seen : (Set Bytes)])
  : (List Bytes)
  (case l
    [(empty) (reverse rev-acc)]
    [(cons e l)
     (if (set-member? seen e)
         (remove-duplicates* l rev-acc seen)
         (remove-duplicates* l (cons e rev-acc) (set-add seen e)))]))



(define (write-pe-executable
          [pe-files : (List ParsedPe)]
          [output-file-name : Bytes]) : (Maybe Bytes)
  (call-with-output-file output-file-name
    (lambda ([p : OutputPort])
      (begin
        (write-all-bytes (serialize-pe-executable pe-files) p)
        (nothing)))))

(define (serialize-pe-executable [pe-files : (List ParsedPe)]) : Bytes

  (match-define
    (program-section
      (aligned-bytes text-section-contents _text-section-alignment)
      text-relocations
      text-global-symbols
      _text-local-symbols)
    (combine-sections (map parsed-pe-text-section pe-files)))

  ;; Sort the rdata-comdat sections to match the clang order.
  (match-define rdata-comdat-sections
    (stable-sort
      (append* (map parsed-pe-rdata-comdat-sections pe-files))
      (lambda ([sect1 : (ProgramSection PeRelocationKind)]
               [sect2 : (ProgramSection PeRelocationKind)])
        (match-define (program-section (aligned-bytes b1 _) _ _ _) sect1)
        (match-define (program-section (aligned-bytes b2 _) _ _ _) sect2)
        (bytes< (bytes-reverse b2) (bytes-reverse b1)))))


  (match-define
    (program-section
      (aligned-bytes rdata-section-contents _rdata-section-alignment)
      rdata-relocations
      rdata-global-symbols
      _rdata-local-symbols)
    (combine-sections/fill
      (append
        (map parsed-pe-rdata-section pe-files)
        rdata-comdat-sections)
      (u8 #x00)))

  (match-define
    (program-section
      (aligned-bytes bss-section-contents _bss-section-alignment)
      _bss-relocations
      bss-global-symbols
      _bss-local-symbols)
    (combine-sections (map parsed-pe-bss-section pe-files)))

  (match-define image-base #x180000000)

  (match-define header-size #x400)
  (match-define section-alignment #x1000)
  (match-define file-alignment #x200)

  ;; Start text after one blank page
  (match-define text-virt-addr (+ 0 section-alignment))
  (match-define text-virt-size (bytes-length text-section-contents))
  (match-define text-file-offset header-size)
  (match-define text-file-size (round-up text-virt-size file-alignment))

  (match-define rdata-virt-addr
                (round-up (+ text-virt-addr text-virt-size) section-alignment))
  (match-define rdata-virt-size (bytes-length rdata-section-contents))
  (match-define rdata-file-offset (+ text-file-offset text-file-size))
  (match-define rdata-file-size (round-up rdata-virt-size file-alignment))

  (match-define data-virt-addr
                (round-up (+ rdata-virt-addr rdata-virt-size) section-alignment))
  (match-define data-virt-size (bytes-length bss-section-contents))
  (match-define data-file-offset 0)
  (match-define data-file-size 0)

  (match-define base-relocs : (List Bytes)
    (map
      (lambda ([v : LiftedInt])
        (match-define (lifted-int offset) v)
        (bytes/u16-le (u16 (bitwise-ior #xa000 offset))))
      (sort
        (filter-map
          (lambda ([reloc : (Relocation PeRelocationKind)]) : (Maybe LiftedInt)
            (match-define (relocation type offset _) reloc)
            (case type
              [(pe-relocation-kind1)
               (just (lifted-int offset))]
              [(pe-relocation-kind4)
               (nothing)]))
          rdata-relocations)
        (lambda ([a : LiftedInt] [b : LiftedInt])
          (match-define (lifted-int a) a)
          (match-define (lifted-int b) b)
          (< a b)))))

  ;; Adjust the base-relocs to be padded to match clang.
  (match-define base-relocs
    (if (= (* (quotient (length base-relocs) 2) 2) (length base-relocs))
        base-relocs
        (append base-relocs (varargs list #"\x00\x00"))))

  (match-define reloc-section-contents
    (bytes-append
      (append
        (varargs list
          (bytes/u32-le (u32 rdata-virt-addr))
          (bytes/u32-le (u32 (+ 8 (bytes-length (bytes-append base-relocs))))))
        base-relocs)))

  (match-define reloc-virt-addr
                (round-up (+ data-virt-addr data-virt-size) section-alignment))
  (match-define reloc-virt-size (bytes-length reloc-section-contents))
  (match-define reloc-file-offset (+ rdata-file-offset rdata-file-size))
  (match-define reloc-file-size (round-up reloc-virt-size file-alignment))

  (match-define all-data-size (+ (+ rdata-file-size data-file-size) reloc-file-size))
  (match-define image-size (round-up (+ reloc-virt-addr reloc-virt-size) section-alignment))

  (match-define symbol-addresses : (Dict Bytes LiftedInt)
    (dict-add-all
      (make-dict bytes-cmp)
      (append
        (map
          (lambda ([s : DefinedSymbol])
            (case s
              [(defined-symbol name addr)
               (tuple2 name (lifted-int (+ image-base (+ data-virt-addr addr))))]))
          bss-global-symbols)
        (append
          (map
            (lambda ([s : DefinedSymbol])
              (case s
                [(defined-symbol name addr)
                 (tuple2 name (lifted-int (+ image-base (+ text-virt-addr addr))))]))
            text-global-symbols)
          (map
            (lambda ([s : DefinedSymbol])
              (case s
                [(defined-symbol name addr)
                 (tuple2 name (lifted-int (+ image-base (+ rdata-virt-addr addr))))]))
            rdata-global-symbols)))))


  (match-define text-section-contents
    (apply-pe-relocations
      text-relocations
      symbol-addresses
      (+ image-base text-virt-addr)
      text-section-contents))

  (match-define rdata-section-contents
    (apply-pe-relocations
      rdata-relocations
      symbol-addresses
      (+ image-base rdata-virt-addr)
      rdata-section-contents))


  (match-define entry-point
    (case (dict-ref symbol-addresses #"efi_main")
      [(nothing) 0]
      [(just (lifted-int v)) (- v image-base)]))


  (bytes-append
    (jl->list
      (varargs append-jl*
        (make-dos-header)
        (single-jl #"PE\x00\x00") ; Signature
        (make-executable-coff-header 4)
        (make-pe-header
          text-virt-addr ;; text-base
          text-file-size
          all-data-size
          entry-point
          image-size
          reloc-virt-addr
          reloc-virt-size
          header-size)
        (make-executable-text-section-header
          text-virt-addr text-virt-size
          text-file-offset text-file-size)
        (make-executable-rdata-section-header
          rdata-virt-addr rdata-virt-size
          rdata-file-offset rdata-file-size)
        (make-executable-data-section-header
          data-virt-addr data-virt-size
          data-file-offset data-file-size)
        (make-executable-reloc-section-header
          reloc-virt-addr reloc-virt-size
          reloc-file-offset reloc-file-size)
        (single-jl (make-bytes #x1e0))
        (single-jl text-section-contents)
        (single-jl (make-bytes/fill (- text-file-size (bytes-length text-section-contents))
                                    (u8 #xcc)))
        (single-jl rdata-section-contents)
        (single-jl (make-bytes (- rdata-file-size (bytes-length rdata-section-contents))))
        (single-jl reloc-section-contents)
        (single-jl (make-bytes (- reloc-file-size reloc-virt-size)))
        ))))


(define (make-dos-header) : (JoinList Bytes)
  (varargs join-list
    #"MZ"                          ; Signature
    (bytes/u16-le (u16 #x78))      ; Bytes on last page
    (bytes/u16-le (u16 1))         ; Number of pages
    (bytes/u16-le (u16 0))         ; Relocations
    (bytes/u16-le (u16 4))         ; Size of header in paragraphs
    (bytes/u16-le (u16 0))         ; Minimum extra paragraphs needed
    (bytes/u16-le (u16 0))         ; Maximum extra paragraphs needed
    (bytes/u16-le (u16 0))         ; Initial (relative) SS value
    (bytes/u16-le (u16 0))         ; Initial SP value
    (bytes/u16-le (u16 0))         ; Checksum
    (bytes/u16-le (u16 0))         ; Initial IP value
    (bytes/u16-le (u16 0))         ; Initial (relative) CS value
    (bytes/u16-le (u16 #x40))      ; File address of relocation table
    (bytes/u16-le (u16 0))         ; Overlay number
    (make-bytes 8)                 ; 8 bytes Reserved
    (bytes/u16-le (u16 0))         ; OEM identifier
    (bytes/u16-le (u16 0))         ; OEM information
    (make-bytes 20)                ; 20 bytes Reserved
    (bytes/u16-le (u16 #x78))      ; Offset for PE
    (make-bytes 2)                 ; 2 bytes Reserved
    ;; The Dos program
    #"\x0e"         ; push   cs
    #"\x1f"         ; pop    ds
    #"\xba\x0e\x00" ; mov    #x0e, dx (Message is at offset 14 [0x0e])
    #"\xb4\x09"     ; mov    #x09, ah
    #"\xcd\x21"     ; int    0x21
    #"\xb8\x01\x4c" ; mov    0x4c01, ax
    #"\xcd\x21"     ; int    0x21
    #"This program cannot be run in DOS mode" ; Message
    #"\x2e\x24"     ; Unknown
    (make-bytes 2)                 ; 2 bytes Reserved
    ))

(define (make-pe-header
          [text-base : Int]
          [text-size : Int]
          [data-size : Int]
          [entry-point : Int]
          [image-size : Int]
          [relocation-table-base : Int]
          [relocation-table-size : Int]
          [header-size : Int]) : (JoinList Bytes)
  (varargs join-list
    (bytes/u16-le (u16 #x20b))  ; PE32+ Magic Number
    (bytes/1      (u8 14))      ; Linker major version
    (bytes/1      (u8 0))       ; Linker minor version
    (bytes/u32-le (u32 text-size))   ; Size of code
    (bytes/u32-le (u32 data-size))   ; Size of initialized data
    (bytes/u32-le (u32 0))           ; Size of uninitialized data
    (bytes/u32-le (u32 entry-point)) ; Address of entry point
    (bytes/u32-le (u32 text-base))   ; Base of code
    (bytes/u64-le (u64 #x180000000)) ; Image base
    (bytes/u32-le (u32 #x1000))      ; Section alignment
    (bytes/u32-le (u32 #x0200))      ; File alignment
    (bytes/u16-le (u16 6))           ; Major operating system version
    (bytes/u16-le (u16 0))           ; Minor operating system version
    (bytes/u16-le (u16 0))           ; Major image version
    (bytes/u16-le (u16 0))           ; Minor image version
    (bytes/u16-le (u16 6))           ; Major subsystem version
    (bytes/u16-le (u16 0))           ; Minor subsystem version
    (bytes/u32-le (u32 0))           ; Win32 version value
    (bytes/u32-le (u32 image-size))  ; Size of image
    (bytes/u32-le (u32 header-size)) ; Size of headers
    (bytes/u32-le (u32 0))           ; Checksum
    (bytes/u16-le (u16 10))          ; Subsystem (EFI)
    (bytes/u16-le (u16 #x160))       ; Dll characteristics
                                     ; (high entropy, dynamic base, NX)
    (bytes/u64-le (u64 #x100000)) ; Size of stack reserve
    (bytes/u64-le (u64 #x1000))   ; Size of stack commit
    (bytes/u64-le (u64 #x100000)) ; Size of heap reserve
    (bytes/u64-le (u64 #x1000))   ; Size of heap commit
    (bytes/u32-le (u32 0))        ; Loader flags
    (bytes/u32-le (u32 16))       ; Number of rva and sizes

    (bytes/u64-le (u64 0))        ; Export table
    (bytes/u64-le (u64 0))        ; Import table
    (bytes/u64-le (u64 0))        ; Resource table
    (bytes/u32-le (u32 0))        ; Exception table
    (bytes/u32-le (u32 0))        ; Exception table (part 2)
    (bytes/u64-le (u64 0))        ; Certificate table
    (bytes/u32-le (u32 relocation-table-base)) ; Base relocation table
    (bytes/u32-le (u32 relocation-table-size)) ; Base relocation table (part 2)
    (bytes/u64-le (u64 0))        ; Debug
    (bytes/u64-le (u64 0))        ; Architecture
    (bytes/u64-le (u64 0))        ; Global ptr
    (bytes/u64-le (u64 0))        ; TLS table
    (bytes/u64-le (u64 0))        ; Load config table
    (bytes/u64-le (u64 0))        ; Bound import
    (bytes/u64-le (u64 0))        ; IAT
    (bytes/u64-le (u64 0))        ; Delay import descriptor
    (bytes/u64-le (u64 0))        ; CLR runtime header
    (bytes/u64-le (u64 0))        ; Reserved
    ))


(define (apply-pe-relocations [relocations : (List (Relocation PeRelocationKind))]
                              [symbol-addresses : (Dict Bytes LiftedInt)]
                              [base-address : Int]
                              [section-contents : Bytes])
  : Bytes
  (case relocations
    [(empty) section-contents]
    [(cons
       (relocation (pe-relocation-kind4) offset symbol)
       relocations)
     (begin
       (case (dict-ref symbol-addresses symbol)
         [(nothing)
          (bytes-set!/s32-le section-contents offset (s32 #xdeadface))]
         [(just (lifted-int sym-addr))
          (match-define offset-addr (+ base-address offset))
          (match-define delta (- (- sym-addr offset-addr) 4))
          (match-define base-value (bytes-ref/quad-le section-contents offset))
          (match-define updated-value (s32 (+ base-value delta)))
          (bytes-set!/s32-le section-contents offset updated-value)])
       (apply-pe-relocations relocations symbol-addresses base-address section-contents))]
    [(cons
       (relocation (pe-relocation-kind1) offset symbol)
       relocations)
     (begin
       (case (dict-ref symbol-addresses symbol)
         [(nothing)
          (bytes-set!/s32-le section-contents offset (s32 #xdeadcafe))]
         [(just (lifted-int sym-addr))
          (bytes-set!/u64-le section-contents offset (u64 sym-addr))])
       (apply-pe-relocations relocations symbol-addresses base-address section-contents))]
    ))
