#:module (formats pe-writer)
#:import {
  (io)
  (list)
  (maybe)
  (prim)
  (structured-native-code)
  (structured-pe)
}
(export
  (#:values
     serialize-pe-library
     write-pe-executable))
(types
  (define-type SymbolReference
    (symbol-reference
      [symbol : Bytes]
      [address : Int])))

(define (serialize-pe-library
          [text-section : (ProgramSection AbstractRelocationKind)]
          [const-section : (ProgramSection AbstractRelocationKind)])
  : Bytes
  #"")

(define (write-pe-executable
          [pe-files : (List ParsedPe)]
          [output-file-name : Bytes]) : (Maybe Bytes)
  (call-with-output-file output-file-name
    (lambda ([p : OutputPort])
      (begin
        (write-all-bytes (serialize-pe-executable pe-files) p)
        (nothing)))))

(define (serialize-pe-executable [pe-files : (List ParsedPe)]) : Bytes
  #"")
