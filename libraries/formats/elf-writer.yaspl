#:module (formats elf-writer)
#:import {
  (aligned-bytes)
  (bytes)
  (data indexed-set)
  (data lifted-primitives)
  (dict)
  (io)
  (join-list)
  (list)
  (maybe)
  (numbers)
  (panic)
  (prim)
  (set)
  (structured-elf)
  (structured-native-code)
  (tuples)
}
(export
  (#:types)
  (#:values
     serialize-elf-library
     write-elf-executable)
  (#:patterns))
(types
  (define-type SymbolReference
    (symbol-reference
      [symbol : Bytes]
      [address : Int])))

(define (serialize-elf-library
          [text-section : (ProgramSection AbstractRelocationKind)]
          [const-section : (ProgramSection AbstractRelocationKind)])
  : Bytes
  (match-define (program-section (aligned-bytes text-section-contents text-section-alignment)
                                 text-relocations text-global-symbols text-local-symbols)
    text-section)
  (match-define text-symbols (append text-global-symbols text-local-symbols))
  (match-define text-section-length (bytes-length text-section-contents))

  (match-define (program-section (aligned-bytes const-section-contents const-section-alignment)
                                 const-relocations const-global-symbols const-local-symbols)
    const-section)
  (match-define const-symbols (append const-global-symbols const-local-symbols))
  (match-define const-section-length (bytes-length const-section-contents))

  (match-define defined-symbols
    (map defined-symbol-name
         (append* (varargs list
                    text-local-symbols text-global-symbols
                    const-local-symbols const-global-symbols))))

  (match-define undefined-symbols
    (let ([defined-symbols-set (set-add-all (make-set bytes-cmp) defined-symbols)])
      (remove-duplicates
        (filter-map
          (lambda ([r : (Relocation AbstractRelocationKind)]) : (Maybe Bytes)
            (let ([sym (relocation-symbol r)])
              (if (set-member? defined-symbols-set sym)
                  (nothing)
                  (just sym))))
          (append text-relocations const-relocations)))))

  (match-define ordered-symbols
    (append defined-symbols undefined-symbols))

  (match-define indexed-text-symbols
    (indexed-set-add-all
      (make-indexed-set defined-symbol-name bytes-cmp)
      text-symbols))
  (match-define indexed-const-symbols
    (indexed-set-add-all
      (make-indexed-set defined-symbol-name bytes-cmp)
      const-symbols))
  (match-define text-global-symbol-names-set
    (set-add-all
      (make-set bytes-cmp)
      (map defined-symbol-name text-global-symbols)))
  (match-define const-global-symbol-names-set
    (set-add-all
      (make-set bytes-cmp)
      (map defined-symbol-name const-global-symbols)))

  (match-define ordered-text-relocations
    (order-relocations text-relocations))

  (match-define (tuple2 offset-symbols (lifted-int string-table-size))
    (compute-string-table-offsets ordered-symbols))
  (match-define symbol-locations : (Dict Bytes LiftedInt)
    (dict-add-all
      (dict-add-all
        (make-dict bytes-cmp)
        (map (lambda ([s : DefinedSymbol])
               (case s
                 [(defined-symbol name addr)
                  (tuple2 name (lifted-int addr))]))
             (append text-symbols const-symbols)))
      (map (lambda ([s : Bytes])
             (tuple2 s (lifted-int 0)))
           undefined-symbols)))

  (match-define named-sections : (List LiftedInt)
    (varargs list (lifted-int 1) (lifted-int 3) (lifted-int 4) (lifted-int 5)))

  (match-define symbol-indices : (Dict Bytes LiftedInt)
    (dict-add-all
      (make-dict bytes-cmp)
      (map/indexed
        (lambda ([s : Bytes] [index : Int])
          (tuple2 s (lifted-int (+ 1 (+ (length named-sections) index)))))
        ordered-symbols)))

  (match-define text-section-start #x40)
  (match-define text-section-end (+ text-section-start text-section-length))
  (match-define const-section-start
    (round-up text-section-end (logical-shift-left 1 const-section-alignment)))
  (match-define const-section-end (+ const-section-start const-section-length))

  (match-define symbol-table-size (* (+ 1 (+ (length named-sections) (dict-count symbol-indices))) #x18))

  (match-define section-string-table-strings
    (map make-null-terminated
      (varargs list
        #""
        #".symtab"
        #".strtab"
        #".shstrtab"
        #".rela.text"
        #".data"
        #".bss"
        #".rela.rodata")))

  (match-define section-string-table-size
    (sum bytes-length section-string-table-strings))

  (match-define symbol-table-start (round-up const-section-end 8))
  (match-define string-table-start (round-up (+ symbol-table-start symbol-table-size) 8))

  (match-define string-table-end (+ string-table-start string-table-size))
  (match-define rela-text-section-start (round-up string-table-end 8))
  (match-define rela-text-section-size
    (* #x18 (length text-relocations)))
  (match-define rela-text-section-end
    (+ rela-text-section-start rela-text-section-size))

  (match-define rela-const-section-start (round-up rela-text-section-end 8))
  (match-define rela-const-section-size
    (* #x18 (length const-relocations)))
  (match-define rela-const-section-end
    (+ rela-const-section-start rela-const-section-size))

  (match-define section-string-table-start
    (round-up rela-const-section-end 1))

  (match-define section-string-table-end
    (+ section-string-table-start section-string-table-size))
  (match-define section-header-start
    (round-up section-string-table-end 8))

  (match-define section-headers : (List (JoinList Bytes))
    (varargs list
      (single-jl (make-bytes (* 16 4))) ;; Empty section header
      ;; .text section
      (section-header/bytes 32 1 6 0 text-section-start text-section-length 0 0
                      (logical-shift-left 1 text-section-alignment) 0)
      ;; .rela.text section
      (section-header/bytes 27 4 64 0 rela-text-section-start rela-text-section-size
                      7 1 8 #x18)
      ;; .data section
      (section-header/bytes 38 1 3 0 text-section-end 0 0 0 1 0)
      ;; .bss section
      (section-header/bytes 44 8 3 0 text-section-end 0 0 0 1 0)
      ;; .rodata section
      (section-header/bytes 54 1 2 0 const-section-start const-section-length 0 0
                            (logical-shift-left 1 const-section-alignment) 0)
      ;; .rela.rodata section
      (section-header/bytes 49 4 64 0 rela-const-section-start rela-const-section-size
                            7 5 8 #x18)
      ;; .symtab section
      (section-header/bytes 1 2 0 0 symbol-table-start symbol-table-size
                            8 (+ 5 (+ (length text-local-symbols) (length const-local-symbols))) 8 24)
      ;; .strtab section
      (section-header/bytes 9 3 0 0 string-table-start string-table-size 0 0 1 0)
      ;; .shstrtab section
      (section-header/bytes 17 3 0 0 section-string-table-start section-string-table-size 0 0 1 0)))

  (bytes-append
    (jl->list
      (varargs append-jl*
        (single-jl #"\x7FELF") ;; Magic
        (single-jl #"\x02") ;; Class (64 bit)
        (single-jl #"\x01") ;; Data encoding (LSB)
        (single-jl #"\x01") ;; Version
        (single-jl #"\x00") ;; OS ABI (SysV)
        (single-jl #"\x00") ;; OS ABI version
        (single-jl (make-bytes 7)) ;; Padding
        (single-jl (bytes/u16-le 1)) ;; Relocatable object file
        (single-jl (bytes/u16-le #x3E)) ;; Machine type X86_64
        (single-jl (bytes/u32-le 1)) ;; Version
        (single-jl (bytes/u64-le (u64 0))) ;; No start address
        (single-jl (bytes/u64-le (u64 0))) ;; Program header offset
        (single-jl (bytes/u64-le (u64 section-header-start))) ;; Section header offset
        (single-jl (bytes/u32-le 0)) ;; FLAGS
        (single-jl (bytes/u16-le #x40)) ;; ELF header size
        (single-jl (bytes/u16-le #x00)) ;; Size of program header entry
        (single-jl (bytes/u16-le #x00)) ;; Number of program header entries
        (single-jl (bytes/u16-le #x40)) ;; size of section header entry
        (single-jl (bytes/u16-le (length section-headers)))   ;; Number of section header entries
        (single-jl (bytes/u16-le (- (length section-headers) 1)))  ;; Index of section name section
        (single-jl text-section-contents)
        (single-jl (make-bytes (- const-section-start text-section-end)))
        (single-jl const-section-contents)
        (single-jl (make-bytes (- symbol-table-start const-section-end)))
        (symbol-table-entry 0 0 0 0)
        (concat-jl
          (map
            (lambda ([named-section-index : LiftedInt])
              (case named-section-index
                [(lifted-int v)
                 (symbol-table-entry 0 3 v 0)]))
            named-sections))
        (concat-jl
          (map
            (lambda ([entry : (Tuple2 Bytes LiftedInt)])
              (case entry
                [(tuple2 sym (lifted-int name-offset))
                 (case (indexed-set-ref indexed-text-symbols sym)
                   [(just (defined-symbol _ addr))
                    (symbol-table-entry name-offset
                                        (if (set-member? text-global-symbol-names-set sym) #x10 #x00)
                                        1
                                        addr)]
                   [(nothing)
                    (case (indexed-set-ref indexed-const-symbols sym)
                      [(just (defined-symbol _ addr))
                       (symbol-table-entry name-offset
                                           (if (set-member? const-global-symbol-names-set sym) #x10 #x00)
                                           5
                                           addr)]
                      [(nothing)
                       (symbol-table-entry name-offset #x10 0 0)])])]))
            offset-symbols))
        (single-jl (make-null-terminated #""))
        (concat-jl
          (map
            (lambda ([s : Bytes])
              (single-jl (make-null-terminated s)))
            ordered-symbols))
        (single-jl (make-bytes (- rela-text-section-start string-table-end)))
        (concat-jl
          (map
            (lambda ([relocation : (Relocation AbstractRelocationKind)]) : (JoinList Bytes)
              (case relocation
                [(relocation kind offset sym)
                 (match-define kind (abstract-relocation->elf-relocation kind))
                 (varargs join-list
                   (bytes/s64-le offset)
                   (bytes/u32-le
                     (case kind
                       [(elf-pc32-relocation) #x02]))
                   (bytes/u32-le
                     (case (dict-ref symbol-indices sym)
                       [(nothing) (panic/int #"Unknown symbol")]
                       [(just (lifted-int v)) v]))
                   (bytes/s64-le
                     (case (dict-ref symbol-locations sym)
                       [(nothing) (panic/int #"Unknown symbol")]
                       [(just (lifted-int v))
                        ;; pc relative relocations need to account for the 4 bytes offset
                        (case kind
                          [(elf-pc32-relocation) (- 0 4)])])))]))
            (append ordered-text-relocations const-relocations)))
        (concat-jl (map (lambda ([v : Bytes]) (single-jl v)) section-string-table-strings))
        (single-jl (make-bytes (- section-header-start section-string-table-end)))
        (concat-jl section-headers)))))

(define (remove-duplicates [l : (List Bytes)]) : (List Bytes)
  (remove-duplicates* l (empty) (make-set bytes-cmp)))

(define (remove-duplicates* [l : (List Bytes)] [rev-acc : (List Bytes)] [seen : (Set Bytes)])
  : (List Bytes)
  (case l
    [(empty) (reverse rev-acc)]
    [(cons e l)
     (if (set-member? seen e)
         (remove-duplicates* l rev-acc seen)
         (remove-duplicates* l (cons e rev-acc) (set-add seen e)))]))

(define (bytes/u16-le [v : Int]) : Bytes
  (bytes/2 (u8 (remainder v 256)) (u8 (quotient v 256))))

(define (bytes/u32-le [v : Int]) : Bytes
  (match-define b (make-bytes 4))
  (begin
    (bytes-set!/quad-le b 0 (u32 v))
    b))

(define (bytes/s64-le [v : Int]) : Bytes
  (match-define b (make-bytes 8))
  (begin
    (if (>= v 0)
        (bytes-set!/u64-le b 0 (u64 v))
        (begin
          (bytes-set!/s32-le b 0 (s32 v))
          (bytes-set!/s32-le b 4 (s32 (- 0 1)))))
    b))

(define (section-header/bytes
          [name-offset : Int]
          [section-type : Int]
          [section-flags : Int]
          [section-addr : Int]
          [section-offset : Int]
          [section-size : Int]
          [section-link : Int]
          [section-info : Int]
          [section-align : Int]
          [entry-size : Int]) : (JoinList Bytes)
  (varargs join-list
    (bytes/u32-le name-offset)
    (bytes/u32-le section-type)
    (bytes/u64-le (u64 section-flags))
    (bytes/u64-le (u64 section-addr))
    (bytes/u64-le (u64 section-offset))
    (bytes/u64-le (u64 section-size))
    (bytes/u32-le section-link)
    (bytes/u32-le section-info)
    (bytes/u64-le (u64 section-align))
    (bytes/u64-le (u64 entry-size))))

(define (symbol-table-entry
          [symbol-name-offset : Int]
          [binding-info : Int]
          [section-table-index : Int]
          [symbol-value : Int]) : (JoinList Bytes)
  (varargs join-list
    (bytes/u32-le symbol-name-offset)
    (bytes/2 (u8 binding-info) (u8 0))
    (bytes/u16-le section-table-index)
    (bytes/u64-le (u64 symbol-value))
    (make-bytes 8)))

(define (order-relocations [relocations : (List (Relocation AbstractRelocationKind))])
  : (List (Relocation AbstractRelocationKind))
  (order-relocations* relocations (empty) (empty)))

(define (order-relocations*
          [relocations : (List (Relocation AbstractRelocationKind))]
          [rev-non-branch-relocations : (List (Relocation AbstractRelocationKind))]
          [rev-branch-relocations : (List (Relocation AbstractRelocationKind))])
  : (List (Relocation AbstractRelocationKind))
  (case relocations
    [(empty)
     (append (reverse rev-non-branch-relocations) (reverse rev-branch-relocations))]
    [(cons rel relocations)
     (case rel
       [(relocation (branch-relocation) _ _)
        (order-relocations* relocations rev-non-branch-relocations
                            (cons rel rev-branch-relocations))]
       [_
        (order-relocations* relocations (cons rel rev-non-branch-relocations)
                            rev-branch-relocations)])]))

(define (compute-string-table-offsets [strings : (List Bytes)])
  : (Tuple2 (List (Tuple2 Bytes LiftedInt)) LiftedInt)
  (match-define (tuple2 rev-offset-strings string-table-size)
    (foldl
      (lambda ([s : Bytes] [acc : (Tuple2 (List (Tuple2 Bytes LiftedInt)) LiftedInt)])
        (case acc
          [(tuple2 offset-strings (lifted-int current-offset))
           (tuple2
             (cons (tuple2 s (lifted-int current-offset)) offset-strings)
             (lifted-int (+ current-offset (+ 1 (bytes-length s)))))]))
      strings
      (tuple2
        (ann (List (Tuple2 Bytes LiftedInt)) (empty))
        (lifted-int 1))))
  (tuple2 (reverse rev-offset-strings) string-table-size))


(define (write-elf-executable
          [text-section : (ProgramSection ElfRelocationKind)]
          [output-file-name : Bytes]) : (Maybe Bytes)
  (call-with-output-file output-file-name
    (lambda ([p : OutputPort])
      (begin
        (write-all-bytes (serialize-elf-executable text-section) p)
        (nothing)))))

(define (serialize-elf-executable [text-section : (ProgramSection ElfRelocationKind)])
  : Bytes
  (match-define
    (program-section (aligned-bytes text-section-contents _text-section-alignment)
                     text-relocations text-global-symbols text-local-symbols)
    text-section)

  (match-define text-section-length (bytes-length text-section-contents))
  (match-define (tuple2 offset-symbols (lifted-int string-table-size))
    (compute-string-table-offsets
      (map
        defined-symbol-name
        (append
          text-local-symbols
          text-global-symbols))))
  (match-define offset-symbols-dict : (Dict Bytes LiftedInt)
    (dict-add-all (make-dict bytes-cmp) offset-symbols))

  (match-define symbol-locations : (Dict Bytes LiftedInt)
    (dict-add-all
      (make-dict bytes-cmp)
      (map
        (lambda ([s : DefinedSymbol])
          (case s
            [(defined-symbol name addr)
             (tuple2 name (lifted-int addr))]))
        (append
          text-local-symbols
          text-global-symbols))))



  ;; Long text section includes the LLD version number
  (match-define long-text-section-length (+ text-section-length 18))
  (match-define rounded-long-text-section-length (round-up long-text-section-length 8))

  (match-define symbol-table-start rounded-long-text-section-length)
  (match-define num-symbol-table-entries (+ 3 (length offset-symbols)))
  (match-define symbol-table-size (* #x18 num-symbol-table-entries))

  (match-define string-table-start (round-up (+ symbol-table-start symbol-table-size) 8))
  (match-define section-string-table-start
     (+ string-table-start string-table-size))
  (match-define section-string-table-size
    #x2a)
  (match-define section-string-table-end
    (+ section-string-table-start section-string-table-size))
  (match-define section-header-start
    (round-up (+ section-string-table-start section-string-table-size) 8))
  (match-define section-header-padding
    (- section-header-start section-string-table-end))

  (match-define text-section-contents
    (apply-elf-relocations
      text-relocations
      symbol-locations
      text-section-contents))

  (match-define section-header-offset (+ #x1000 section-header-start))

  (bytes-append
    (jl->list
      (varargs append-jl*
        (single-jl #"\x7FELF") ;; Magic
        (single-jl #"\x02") ;; Class (64 bit)
        (single-jl #"\x01") ;; Data encoding (LSB)
        (single-jl #"\x01") ;; Version
        (single-jl #"\x00") ;; OS ABI (SysV)
        (single-jl #"\x00") ;; OS ABI version
        (single-jl (make-bytes 7)) ;; Padding

        (single-jl (bytes/u16-le 2)) ;; Executable file
        (single-jl (bytes/u16-le #x3E)) ;; Machine type X86_64
        (single-jl (bytes/u32-le 1)) ;; Version
        (single-jl (bytes/u64-le (u64 #x201000))) ;; Start address
        (single-jl (bytes/u64-le (u64 #x40))) ;; Program header offset
        (single-jl (bytes/u64-le (u64 section-header-offset))) ;; Section header offset
        (single-jl (bytes/u32-le 0)) ;; FLAGS
        (single-jl (bytes/u16-le #x40)) ;; ELF header size
        (single-jl (bytes/u16-le #x38)) ;; Size of program header entry
        (single-jl (bytes/u16-le #x04)) ;; Number of program header entries

        (single-jl (bytes/u16-le #x40)) ;; size of section header entry
        (single-jl (bytes/u16-le #x06))   ;; Number of section header entries
        (single-jl (bytes/u16-le #x05))  ;; Index of section name section

        (single-jl (bytes/u32-le #x06))  ;; Segment type (Program Header)
        (single-jl (bytes/u32-le #x4))  ;; Segment flags (Read)
        (single-jl (bytes/u64-le (u64 #x40)))  ;; Segment offset
        (single-jl (bytes/u64-le (u64 #x40)))  ;; Segment virtual address
        (single-jl (bytes/u64-le (u64 #x200040)))  ;; Segment physical address
        (single-jl (bytes/u64-le (u64 #xE0)))  ;; Segment file size
        (single-jl (bytes/u64-le (u64 #xE0)))  ;; Segment memory size
        (single-jl (bytes/u64-le (u64 #x08)))  ;; Segment alignment

        (single-jl (bytes/u32-le #x01))  ;; Segment type (Loadable)
        (single-jl (bytes/u32-le #x4))  ;; Segment flags (Read)
        (single-jl (bytes/u64-le (u64 #x00)))  ;; Segment offset
        (single-jl (bytes/u64-le (u64 #x00)))  ;; Segment virtual address
        (single-jl (bytes/u64-le (u64 #x200000)))  ;; Segment physical address
        (single-jl (bytes/u64-le (u64 #x120)))  ;; Segment file size
        (single-jl (bytes/u64-le (u64 #x120)))  ;; Segment memory size
        (single-jl (bytes/u64-le (u64 #x1000)))  ;; Segment alignment

        (single-jl (bytes/u32-le #x01))  ;; Segment type (Loadable)
        (single-jl (bytes/u32-le #x5))  ;; Segment flags (Read/Execute)
        (single-jl (bytes/u64-le (u64 #x1000)))  ;; Segment offset
        (single-jl (bytes/u64-le (u64 #x201000)))  ;; Segment virtual address
        (single-jl (bytes/u64-le (u64 #x201000)))  ;; Segment physical address
        (single-jl (bytes/u64-le (u64 text-section-length)))  ;; Segment file size
        (single-jl (bytes/u64-le (u64 text-section-length)))  ;; Segment memory size
        (single-jl (bytes/u64-le (u64 #x1000)))  ;; Segment alignment

        (single-jl (bytes/u32-le #x6474e551))  ;; Segment type (Loadable)
        (single-jl (bytes/u32-le #x6))  ;; Segment flags (Read/Write)
        (single-jl (bytes/u64-le (u64 #x00)))  ;; Segment offset
        (single-jl (bytes/u64-le (u64 #x00)))  ;; Segment virtual address
        (single-jl (bytes/u64-le (u64 #x00)))  ;; Segment physical address
        (single-jl (bytes/u64-le (u64 #x00)))  ;; Segment file size
        (single-jl (bytes/u64-le (u64 #x00)))  ;; Segment memory size
        (single-jl (bytes/u64-le (u64 #x00000)))  ;; Segment alignment

        (single-jl (make-bytes #xEE0))
        (single-jl text-section-contents)

        ;; TODO remove this once we don't need byte for byte compatibility
        (single-jl #"Linker: LLD 6.0.0\x00")

        ;; Symbol tables are 8 byte aligned, so add padding as needed
        (single-jl (make-bytes (- rounded-long-text-section-length
                                  long-text-section-length)))


        (symbol-table-entry 0 0 0 0)
        (concat-jl
          (map
            (lambda ([v : DefinedSymbol])
              (case v
                [(defined-symbol sym offset)
                 (symbol-table-entry
                   (case (dict-ref offset-symbols-dict sym)
                     [(nothing) (panic/int #"No symbol")]
                     [(just (lifted-int v)) v])
                   #x00 1 (+ #x201000 offset))]))
            text-local-symbols))
        (symbol-table-entry 0 3 1 #x201000)
        (symbol-table-entry 0 3 2 0)
        (concat-jl
          (map
            (lambda ([v : DefinedSymbol])
              (case v
                [(defined-symbol sym offset)
                 (symbol-table-entry
                   (case (dict-ref offset-symbols-dict sym)
                     [(nothing) (panic/int #"No symbol")]
                     [(just (lifted-int v)) v])
                   #x10 1 (+ #x201000 offset))]))
            text-global-symbols))


        (single-jl (make-null-terminated #""))
        (concat-jl
          (map
            (lambda ([t : (Tuple2 Bytes LiftedInt)])
              (case t
                [(tuple2 s _)
                 (single-jl (make-null-terminated s))]))
            offset-symbols))
        (concat-jl
          (map
            (lambda ([s : Bytes])
              (single-jl (make-null-terminated s)))
            (varargs list
              #""
              #".symtab"
              #".strtab"
              #".shstrtab"
              #".text"
              #".comment")))


        (single-jl (make-bytes section-header-padding))
        (single-jl (make-bytes (* 16 4))) ;; Empty section header
        (section-header/bytes 27 1 6 #x201000 #x1000 text-section-length 0 0 #x10 0)
        (section-header/bytes 33 1 #x30 0 (+ #x1000 text-section-length) #x12 0 0 1 1)
        (section-header/bytes 1 2 0 0 (+ #x1000 rounded-long-text-section-length) symbol-table-size 4
                              (+ (length text-local-symbols) 3) #x08 #x18)
        (section-header/bytes 9 3 0 0 (+ #x1000 string-table-start) string-table-size
                              0 0 1 0)
        (section-header/bytes 17 3 0 0 (+ #x1000 section-string-table-start) section-string-table-size 0 0 1 0)

      ))))

(define (apply-elf-relocations [relocations : (List (Relocation ElfRelocationKind))]
                               [symbol-locations : (Dict Bytes LiftedInt)]
                               [section-contents : Bytes])
  : Bytes
  (case relocations
    [(empty) section-contents]
    [(cons
       (relocation (elf-pc32-relocation) offset symbol)
       relocations)
     (begin
       (bytes-set!/s32-le
         section-contents
         offset
         (case (dict-ref symbol-locations symbol)
           [(nothing) (s32 #xDEADBEEF)]
           [(just (lifted-int v))
            (s32 (- (- v offset) 4))]))
       (apply-elf-relocations relocations symbol-locations section-contents))]))
