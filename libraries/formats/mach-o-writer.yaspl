#:module (formats mach-o-writer)
#:import {
  (aligned-bytes)
  (bytes)
  (data indexed-set)
  (data lifted-primitives)
  (either)
  (formats mach-o)
  (io)
  (list)
  (maybe)
  (numbers)
  (panic)
  (prim)
  (set)
  (structured-mach-o)
  (structured-native-code)
  (tuples)
}
(export
  (#:values write-mach-o-library write-mach-o-executable))
(types
  (define-type MachOFileType
    (mach-o-library-file)
    (mach-o-executable-file)))


;; These assume that the text section is the first section, the const section is the second, and the
;; common data section is the third.
(define (text-symbol-table-entry [name : Bytes] [value : U64]) : SymbolTableEntry
  (symbol-table-entry name (u8 #x0f) (u8 #x01) (u8 #x20) value))
(define (const-symbol-table-entry [name : Bytes] [value : U64]) : SymbolTableEntry
  (symbol-table-entry name (u8 #x0f) (u8 #x02) (u8 #x20) value))
(define (zero-data-symbol-table-entry [name : Bytes] [value : U64]) : SymbolTableEntry
  (symbol-table-entry name (u8 #x0f) (u8 #x03) (u8 #x20) value))
(define (undefined-symbol-table-entry [name : Bytes]) : SymbolTableEntry
  (symbol-table-entry name (u8 #x01) (u8 #x00) (u8 #x00) (u64 0)))

(define [RelocationKind]
  (construct-symbol-table-entries
    [text-section-start-address : Int]
    [text-section : (ProgramSection RelocationKind)]
    [const-section-start-address : Int]
    [const-section : (ProgramSection RelocationKind)]
    [zero-data-section-start-address : Int]
    [zero-data-section : ZeroDataSection])
  : (List SymbolTableEntry)
  (match-define (program-section _ text-relocations text-global-symbols _text-local-symbols) text-section)
  (match-define (program-section _ const-relocations const-global-symbols _const-local-symbols) const-section)
  (match-define (zero-data-section _ _ zero-data-symbols) zero-data-section)

  (match-define undefined-symbols
    (set->list
      (set-remove-all
        (set-add-all
          (make-set bytes-cmp)
          (map (lambda ([r : (Relocation RelocationKind)]) (relocation-symbol r))
               (append text-relocations const-relocations)))
        (map defined-symbol-name
             (append (append text-global-symbols const-global-symbols)
                     zero-data-symbols)))))
  (append
    (append
      (map
        (lambda ([s : DefinedSymbol])
          (case s
            [(defined-symbol name offset)
             (text-symbol-table-entry name (u64 (+ text-section-start-address offset)))]))
        (sort text-global-symbols defined-symbol<))
      (append
        (map
          (lambda ([s : DefinedSymbol])
            (case s
              [(defined-symbol name offset)
               (const-symbol-table-entry name (u64 (+ const-section-start-address offset)))]))
          (sort const-global-symbols defined-symbol<))
        (map
          (lambda ([s : DefinedSymbol])
            (case s
              [(defined-symbol name offset)
               (zero-data-symbol-table-entry name (u64 (+ zero-data-section-start-address offset)))]))
          (sort zero-data-symbols defined-symbol<))))
    (map
      undefined-symbol-table-entry
      (sort undefined-symbols bytes<))))

(define (write-symbol-strings [symbols : (List SymbolTableEntry)] [output : OutputPort]) : Void
  (case symbols
    [(empty) (void)]
    [(cons (symbol-table-entry name _ _ _ _) symbols)
     (begin
       (write-all-bytes name output)
       (write-all-bytes (make-bytes 1) output)
       (write-symbol-strings symbols output))]))

(define (write-symbol-entries
          [symbols : (List SymbolTableEntry)]
          [string-offset : Int] [output : OutputPort]) : Void
  (case symbols
    [(empty) (void)]
    [(cons (symbol-table-entry name type sect desc value) symbols)
     ;; TODO actually use high bits of description
     (begin
       (write-u32-le (u32 string-offset) output)
       (write-all-bytes (bytes/4 type sect desc (u8 0)) output)
       (write-u64-le value output)
       (write-symbol-entries symbols (+ string-offset (+ 1 (bytes-length name))) output))]))

(define (make-serialize-symbol-table [symbols : (List SymbolTableEntry)])
  : (Tuple2 LiftedInt (OutputPort -> Void))
  ;; The 0 string offset is special and is treated as indicating the empty string.
  ;; To avoid having a real string there, we explictly put an empty string there.

  (match-define symbol-strings-length-unrounded
    (+ 1
       (+ (length symbols)
          (sum bytes-length (map symbol-table-entry-name symbols)))))
  (match-define symbol-strings-length (round-up symbol-strings-length-unrounded 8))

  (tuple2
    (lifted-int symbol-strings-length)
    (lambda ([output : OutputPort])
      (begin
        (write-symbol-entries symbols 1 output)
        (write-all-bytes #"\x00" output)
        (write-symbol-strings symbols output)
        (write-all-bytes
          (make-bytes (- symbol-strings-length symbol-strings-length-unrounded))
          output)))))

(define (write-relocations
          [relocations : (List (Relocation AbstractRelocationKind))]
          [symbols : (List Bytes)]
          [output : OutputPort]) : Void
  (for-each
    (lambda ([r : (Relocation AbstractRelocationKind)])
      (match-define (relocation reloc-kind offset symbol) r)
      (begin
        (write-u32-le (u32 offset) output)
        (case (find-index (lambda ([x : Bytes]) (bytes=? symbol x)) symbols)
          [(nothing)
           (panic/void #"Bad symbol")]
          [(just (lifted-int index))
           (let ([reloc-byte (u8->s64 (relocation-kind->u8
                                        (abstract-relocation->mach-o-relocation reloc-kind)))])
             (write-u32-le (u32 (bitwise-ior index (logical-shift-left reloc-byte 24))) output))])))
    relocations))

(define (find-start-address [symbols : (List SymbolTableEntry)]) : (Either Bytes LiftedU64)
  (case (findf (lambda ([entry : SymbolTableEntry])
                 (case entry [(symbol-table-entry name _ _ _ _) (bytes=? #"start" name)]))
               symbols)
    [(nothing) (left #"Couldn't find start symbol")]
    [(just v) (right (lifted-u64 (symbol-table-entry-value v)))]))

(define (make-symbol-table-lookup [entries : (List SymbolTableEntry)])
  : (Either Bytes (IndexedSet SymbolTableEntry Bytes))
  (make-symbol-table-lookup*
    entries
    (make-indexed-set symbol-table-entry-name bytes-cmp)))

(define (make-symbol-table-lookup* [entries : (List SymbolTableEntry)]
                            [acc : (IndexedSet SymbolTableEntry Bytes)])
  : (Either Bytes (IndexedSet SymbolTableEntry Bytes))
  (case entries
    [(empty) (right acc)]
    [(cons entry entries)
     (case (indexed-set-maybe-add acc entry)
       [(nothing)
        (left (bytes-append (varargs list #"Duplicate symbol: "
                                          (symbol-table-entry-name entry))))]
       [(just acc)
        (make-symbol-table-lookup* entries acc)])]))

(define (find-symbol-entry [symbol : Bytes] [symbols : (IndexedSet SymbolTableEntry Bytes)])
  : (Either Bytes SymbolTableEntry)
  (case (indexed-set-ref symbols symbol)
    [(nothing) (left (bytes-append (varargs list #"Couldn't find symbol: " symbol)))]
    [(just entry) (right entry)]))

(define (apply-u64-absolute-relocation
          [section : Bytes]
          [offset : Int]
          [value : Int]) : Void
  (bytes-set!/u64-le
    section
    offset
    (u64 (+ (u64->s64 (bytes-ref/u64-le section offset))
         value))))

(define (apply-s32-pc-relative-relocation
          [section : Bytes]
          [offset : Int]
          [addr : Int]
          [section-start-addr : Int]) : Void
  ;; We adjust the value by 4 because the PC differs by 4 from the start of the relocated value,
  ;; when the calculation is done.
  (bytes-set!/s32-le
    section
    offset
    (s32
      (+ (bytes-ref/quad-le section offset)
         (- addr (+ (+ offset 4) section-start-addr))))))

(define (apply-mach-o-relocations
          [rels : (List (Relocation MachORelocationKind))]
          [symbols : (IndexedSet SymbolTableEntry Bytes)]
          [section-contents : Bytes]
          [section-start-addr : Int]) : (Maybe Bytes)
  (case rels
    [(empty) (nothing)]
    [(cons (relocation rel-kind offset symbol) rels)
     (case (find-symbol-entry symbol symbols)
       [(left msg) (just msg)]
       [(right (symbol-table-entry _name type _section _description value))
        (match-define value (u64->s64 value))
        (case (u8->s64 type)
          [#x0f
           (begin
             (case rel-kind
              [(mach-o-branch-relocation)
               (apply-s32-pc-relative-relocation section-contents offset value section-start-addr)]
              [(mach-o-signed-relocation)
               (apply-s32-pc-relative-relocation section-contents offset value section-start-addr)]
              [(mach-o-unsigned-relocation)
               (apply-u64-absolute-relocation section-contents offset value)])
             (apply-mach-o-relocations rels symbols section-contents section-start-addr))]
          [#x01
           (just #"Cannot apply relocations for undefined symbol")]
          [_
           (just #"Cannot apply relocations for unknown symbol type")])])]))

(define (write-mach-o-executable
          [text-section : (ProgramSection MachORelocationKind)]
          [const-section : (ProgramSection MachORelocationKind)]
          [zero-data-section : ZeroDataSection]
          [output-file-name : Bytes])
  : (Maybe Bytes)
  (match-define
    (program-section (aligned-bytes text-section-contents text-section-alignment)
                     text-relocations _text-global-symbols _text-local-symbols)
    text-section)
  (match-define
    (program-section (aligned-bytes const-section-contents const-section-alignment)
                     const-relocations _const-global-symbols _const-local-symbols)
    const-section)
  (match-define
    (zero-data-section zero-data-section-size zero-data-section-alignment
                       _zero-data-section-symbols)
    zero-data-section)

  (match-define page-zero-start-address 0)
  (match-define page-zero-memory-size #x0000000100000000)
  (match-define page-zero-file-offset 0)
  (match-define page-zero-file-size 0)
  (match-define page-zero-end-address (+ page-zero-start-address page-zero-memory-size))

  (match-define text-segment-start-address page-zero-end-address)
  (match-define text-segment-start-file-offset 0)

  (match-define mach-o-header-end-file-offset #x300)
  (match-define text-section-start-file-offset
    (round-up mach-o-header-end-file-offset (logical-shift-left 1 text-section-alignment)))
  (match-define text-section-end-file-offset
    (+ text-section-start-file-offset (bytes-length text-section-contents)))
  (match-define const-section-start-file-offset
    (round-up text-section-end-file-offset (logical-shift-left 1 const-section-alignment)))
  (match-define const-section-end-file-offset
    (+ const-section-start-file-offset (bytes-length const-section-contents)))
  (match-define text-segment-file-size
    (- (round-up const-section-end-file-offset #x1000) text-segment-start-file-offset))
  (match-define text-segment-memory-size text-segment-file-size)

  ;; This is where the actual content starts.
  (match-define text-section-start-address
    (+ text-segment-start-address text-section-start-file-offset))
  (match-define const-section-start-address
    (+ text-segment-start-address const-section-start-file-offset))
  (match-define text-segment-end-address
    (+ text-segment-start-address text-segment-memory-size))
  (match-define text-segment-end-file-offset
    (+ text-segment-start-file-offset text-segment-file-size))

  (match-define data-segment-start-address text-segment-end-address)
  (match-define data-segment-start-file-offset text-segment-end-file-offset)
  (match-define common-section-start-address data-segment-start-address)
  (match-define common-section-start-file-offset data-segment-start-file-offset)

  (match-define common-section-memory-size zero-data-section-size)
  (match-define common-section-file-size 0)
  (match-define common-section-alignment zero-data-section-alignment)

  (match-define common-section-end-address
    (+ common-section-start-address common-section-memory-size))
  (match-define common-section-end-file-offset
    (+ common-section-start-file-offset common-section-file-size))
  (match-define data-segment-end-address
    (round-up common-section-end-address #x1000))
  (match-define data-segment-end-file-offset
    (round-up common-section-end-file-offset #x1000))
  (match-define data-segment-file-size
    (- data-segment-end-file-offset data-segment-start-file-offset))
  (match-define data-segment-memory-size
    (- data-segment-end-address data-segment-start-address))

  (match-define linkedit-segment-start-address data-segment-end-address)
  (match-define linkedit-segment-start-file-offset data-segment-end-file-offset)

  (match-define symbol-table-entries
    (construct-symbol-table-entries
      text-section-start-address text-section
      const-section-start-address const-section
      common-section-start-address zero-data-section))

  (match-define num-symbols (length symbol-table-entries))
  (match-define
    (tuple2 (lifted-int symbol-strings-length) serialize-symbol-table)
    (make-serialize-symbol-table symbol-table-entries))

  (match-define symbol-table-start-file-offset linkedit-segment-start-file-offset)
  (match-define symbol-table-end-file-offset
    (+ symbol-table-start-file-offset (* 16 num-symbols)))
  (match-define string-table-start-file-offset symbol-table-end-file-offset)

  (match-define string-table-end-file-offset
    (+ string-table-start-file-offset symbol-strings-length))

  (match-define linkedit-segment-end-file-offset
    string-table-end-file-offset)
  (match-define linkedit-segment-file-size
    (- linkedit-segment-end-file-offset linkedit-segment-start-file-offset))
  (match-define linkedit-segment-memory-size
    (round-up linkedit-segment-file-size #x1000))


  (case (make-symbol-table-lookup symbol-table-entries)
    [(left msg) (just msg)]
    [(right symbol-table-lookup)
     (case (apply-mach-o-relocations
             text-relocations
             symbol-table-lookup
             text-section-contents
             text-section-start-address)
       [(just msg)
        (just msg)]
       [(nothing)
        (case (apply-mach-o-relocations
                const-relocations
                symbol-table-lookup
                const-section-contents
                const-section-start-address)
          [(just msg)
           (just msg)]
          [(nothing)
           (case (find-start-address symbol-table-entries)
             [(left msg) (just msg)]
             [(right (lifted-u64 start-address))
              (call-with-output-file output-file-name
                (lambda ([output : OutputPort])
                  (begin
                    (write-executable-mach-o-header-and-load-commands
                      (varargs list
                        (lc-load-segment64
                          (load-segment64 #"__PAGEZERO"
                            (u64 page-zero-start-address)
                            (u64 page-zero-memory-size)
                            (u64 page-zero-file-offset)
                            (u64 page-zero-file-size)
                            (u32 #x00)
                            (u32 #x00)
                            (u32 0)
                            (empty)))
                        (lc-load-segment64
                          (load-segment64 #"__TEXT"
                            (u64 text-segment-start-address)
                            (u64 text-segment-memory-size)
                            (u64 text-segment-start-file-offset)
                            (u64 text-segment-file-size)
                            (u32 #x07)
                            (u32 #x05)
                            (u32 0)
                            (varargs list
                              (section64 #"__text" #"__TEXT"
                                         (u64 text-section-start-address)
                                         (u64 (bytes-length text-section-contents))
                                         (u32 text-section-start-file-offset)
                                         (u32 text-section-alignment)
                                         (u32 0)
                                         (u32 0)
                                         (u32 #x80000400))
                              (section64 #"__const" #"__TEXT"
                                         (u64 const-section-start-address)
                                         (u64 (bytes-length const-section-contents))
                                         (u32 const-section-start-file-offset)
                                         (u32 const-section-alignment)
                                         (u32 0)
                                         (u32 0)
                                         (u32 0)))))
                        (lc-load-segment64
                          (load-segment64 #"__DATA"
                            (u64 data-segment-start-address)
                            (u64 data-segment-memory-size)
                            (u64 data-segment-start-file-offset)
                            (u64 data-segment-file-size)
                            (u32 #x03)
                            (u32 #x03)
                            (u32 #x04)
                            (varargs list
                              (section64 #"__common" #"__DATA"
                                         (u64 common-section-start-address)
                                         (u64 common-section-memory-size)
                                         (u32 common-section-start-file-offset)
                                         (u32 common-section-alignment)
                                         (u32 0)
                                         (u32 0)
                                         (u32 1)))))
                        (lc-load-segment64
                          (load-segment64 #"__LINKEDIT"
                            (u64 linkedit-segment-start-address)
                            (u64 linkedit-segment-memory-size)
                            (u64 linkedit-segment-start-file-offset)
                            (u64 linkedit-segment-file-size)
                            (u32 #x07)
                            (u32 #x01)
                            (u32 #x00)
                            (empty)))
                        (lc-symbol-table
                          (symbol-table
                            (u32 symbol-table-start-file-offset)
                            (u32 num-symbols)
                            (u32 string-table-start-file-offset)
                            (u32 symbol-strings-length)))
                        (lc-unix-thread (unix-thread start-address)))
                      output)
                    ;; Write all the contents with appropriate padding
                    (write-all-bytes
                      (make-bytes (- text-section-start-file-offset mach-o-header-end-file-offset))
                      output)
                    (write-all-bytes text-section-contents output)
                    (write-all-bytes
                      (make-bytes (- const-section-start-file-offset text-section-end-file-offset))
                      output)
                    (write-all-bytes const-section-contents output)
                    (write-all-bytes
                      (make-bytes (- text-segment-file-size const-section-end-file-offset))
                      output)

                    ;; Write out the symbol table
                    (serialize-symbol-table output)

                    (nothing))))])])])]))

(define (write-mach-o-library
          [text-section : (ProgramSection AbstractRelocationKind)]
          [const-section : (ProgramSection AbstractRelocationKind)]
          [zero-data-section : ZeroDataSection]
          [output-file-name : Bytes])
  : Void
  (match-define
    (program-section (aligned-bytes text-section-contents text-section-alignment)
                     text-relocations _text-global-symbols _text-local-symbols)
    text-section)
  (match-define
    (program-section (aligned-bytes const-section-contents const-section-alignment)
                     const-relocations _const-global-symbols _const-local-symbols)
    const-section)
  (match-define (zero-data-section zero-data-section-size zero-data-section-alignment
                                   _zero-data-section-symbols)
                zero-data-section)

  ;; Copy the contents and modify it to write in the addends.
  (match-define const-section-contents
    (foldl
      (lambda ([r : (Relocation AbstractRelocationKind)] [contents : Bytes])
        (case r
          [(relocation (address-relocation addend) offset _symbol)
           (begin
             (bytes-set!/u64-le contents offset (u64 addend))
             contents)]
          [_
           contents]))
      const-relocations
      (subbytes const-section-contents 0 (bytes-length const-section-contents))))

  ;; Layout the sections right next to one another.
  (match-define text-section-offset 0)
  (match-define text-section-end (+ text-section-offset (bytes-length text-section-contents)))

  (match-define const-section-offset
    (round-up text-section-end (logical-shift-left 1 const-section-alignment)))
  (match-define const-section-padding-size
    (- const-section-offset text-section-end))
  (match-define const-section-end
    (+ const-section-offset (bytes-length const-section-contents)))

  (match-define zero-data-section-offset
    (round-up const-section-end (logical-shift-left 1 zero-data-section-alignment)))
  (match-define zero-data-section-end
    (+ zero-data-section-offset zero-data-section-size))

  ;; Ignore the zero data section when calculating the segment file size as
  ;; it doesn't exist in the file.
  (match-define segment-file-size const-section-end)
  (match-define segment-rounded-file-size (round-up segment-file-size 8))
  (match-define segment-padding-size (- segment-rounded-file-size segment-file-size))
  (match-define segment-vm-size zero-data-section-end)


  (match-define exported-symbols
    (construct-symbol-table-entries
      text-section-offset text-section
      const-section-offset const-section
      zero-data-section-offset zero-data-section))
  (match-define num-text-relocations (length text-relocations))
  (match-define num-const-relocations (length const-relocations))
  ;; The segment-file-offset is double checked later.
  (match-define segment-file-offset 400)
  (match-define segment-end (+ segment-file-offset segment-rounded-file-size))
  (match-define reloc-base segment-end)
  (match-define text-reloc-offset reloc-base)
  (match-define text-reloc-size (* 8 num-text-relocations))
  (match-define text-reloc-end (+ text-reloc-offset text-reloc-size))
  (match-define const-reloc-offset text-reloc-end)
  (match-define const-reloc-size (* 8 num-const-relocations))
  (match-define const-reloc-end (+ const-reloc-offset const-reloc-size))
  (match-define reloc-end const-reloc-end)
  (match-define link-edit-start reloc-end)
  (match-define link-edit-end link-edit-start)
  (match-define symbol-table-start link-edit-end)

  (match-define
    (tuple2 (lifted-int symbol-strings-length) serialize-symbol-table)
    (make-serialize-symbol-table exported-symbols))


  (match-define load-commands
    (varargs list
      (lc-load-segment64
        (load-segment64 #""
          (u64 #x0000000000000000)
          (u64 segment-vm-size)
          (u64 segment-file-offset)
          (u64 segment-file-size)
          (u32 #x07)
          (u32 #x07)
          (u32 0)
          (varargs list
            (section64 #"__text" #"__TEXT"
                       (u64 text-section-offset)
                       (u64 (bytes-length text-section-contents))
                       (u32 (+ segment-file-offset text-section-offset))
                       (u32 text-section-alignment)
                       (u32 text-reloc-offset)
                       (u32 num-text-relocations)
                       (u32 #x80000400))
            (section64 #"__const" #"__TEXT"
                       (u64 const-section-offset)
                       (u64 (bytes-length const-section-contents))
                       (u32 (+ segment-file-offset const-section-offset))
                       (u32 const-section-alignment)
                       (u32 const-reloc-offset)
                       (u32 num-const-relocations)
                       (u32 0))
            (section64 #"__common" #"__DATA"
                       (u64 zero-data-section-offset)
                       (u64 zero-data-section-size)
                       (u32 0) ;; Zero offset
                       (u32 zero-data-section-alignment)
                       (u32 0)
                       (u32 0)
                       (u32 1)))))
      (lc-symbol-table
        (symbol-table
          (u32 symbol-table-start)
          (u32 (length exported-symbols))
          (u32 (+ symbol-table-start
                  (* (length exported-symbols) #x10)))
          (u32 symbol-strings-length)))
      (lc-version-min-macosx
        (version-min (u8 10) (u8 11) (u8 0) (u8 10) (u8 11) (u8 0)))
      (lc-data-in-code
        (linkedit-data
          (u32 link-edit-start)
          (u32 0)))))
  (match-define mach-o-header-size 32)
  (match-define commands-size (load-commands-size load-commands))

  (match-define _check-segment-file-offset : Void
    (if (= (+ mach-o-header-size commands-size) segment-file-offset)
        (void)
        (panic/void #"Commands don't match expected size")))

  (call-with-output-file/void output-file-name
    (lambda ([output : OutputPort])
      (begin
        (write-library-mach-o-header-and-load-commands load-commands output)

        ;; Write out the segment
        (write-all-bytes text-section-contents output)
        (write-all-bytes (make-bytes const-section-padding-size) output)
        (write-all-bytes const-section-contents output)
        (write-all-bytes (make-bytes segment-padding-size) output)

        ;; Write out the relocations
        (write-relocations
          (append text-relocations const-relocations)
          (map symbol-table-entry-name exported-symbols)
          output)

        ;; Write out the symbol table
        (serialize-symbol-table output)))))

(define (write-u8 [v : U8] [output : OutputPort]) : Void
  (write-all-bytes (bytes/u8 v) output))

(define (write-u32-le [v : U32] [output : OutputPort]) : Void
  (write-all-bytes (bytes/u32-le v) output))

(define (write-u64-le [v : U64] [output : OutputPort]) : Void
  (write-all-bytes (bytes/u64-le v) output))

(define (load-commands-size [lcs : (List MachOLoadCommand)]) : Int
  (sum load-command-size lcs))

(define (load-command-size [lc : MachOLoadCommand]) : Int
  (case lc
    [(lc-unix-thread _) #xb8]
    [(lc-version-min-macosx _) #x10]
    [(lc-data-in-code _) #x10]
    [(lc-load-segment64 load-seg)
     (+ 72 (* (length (load-segment64-sections load-seg)) 80))]
    [(lc-symbol-table _) #x18]))

(define (write-library-mach-o-header-and-load-commands
          [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (begin
    (write-mach-o-header (make-mach-o-header (mach-o-library-file) commands) output)
    (write-load-commands commands output)))

(define (write-executable-mach-o-header-and-load-commands
          [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (begin
    (write-mach-o-header (make-mach-o-header (mach-o-executable-file) commands) output)
    (write-load-commands commands output)))

(define (make-mach-o-header [file-type : MachOFileType] [commands : (List MachOLoadCommand)])
  : MachOHeader
  (mach-o-header
    ;; Magic number
    (u32 #xfeedfacf)
    ;; CPU type
    (u32 #x01000007)
    ;; CPU subtype
    (u32 #x03)
    ;; File type
    (case file-type
      [(mach-o-library-file) (u32 #x01)]
      [(mach-o-executable-file) (u32 #x02)])
    ;; Number of commands
    (u32 (length commands))
    ;; Size of commands
    (u32 (load-commands-size commands))

    ;; Flags
    ;; TODO actually compute these instead of guessing at them based on file type
    (case file-type
      [(mach-o-library-file) (u32 #x00)]
      [(mach-o-executable-file) (u32 #x01)])
    ;; Reserved
    (u32 #x00)))

(define (write-mach-o-header [header : MachOHeader] [output : OutputPort]) : Void
  (match-define (mach-o-header magic cpu-type cpu-subtype file-type number-commands command-size flags
                               reserved) header)
  (begin
    (write-u32-le magic output)
    (write-u32-le cpu-type output)
    (write-u32-le cpu-subtype output)
    (write-u32-le file-type output)
    (write-u32-le number-commands output)
    (write-u32-le command-size output)
    (write-u32-le flags output)
    (write-u32-le reserved output)))


(define (write-load-commands [commands : (List MachOLoadCommand)] [output : OutputPort]) : Void
  (for-each
    (lambda ([command : MachOLoadCommand])
      (case command
        [(lc-unix-thread ut)
         (write-unix-thread ut output)]
        [(lc-version-min-macosx vm)
         (write-version-min vm output)]
        [(lc-data-in-code v)
         (write-linkedit-data v output)]
        [(lc-load-segment64 ls)
         (write-load-segment64 ls output)]
        [(lc-symbol-table st)
         (write-symbol-table st output)]))
    commands))

(define (write-16-byte-name [bytes : Bytes] [output : OutputPort]) : Void
  (if (> (bytes-length bytes) 16)
      (panic/void #"Too Long")
      (begin
        (write-all-bytes bytes output)
        (write-all-bytes (make-bytes (- 16 (bytes-length bytes))) output))))

(define (write-load-segment64 [seg : LoadSegment64] [output : OutputPort]) : Void
  (match-define (load-segment64 name vm-addr vm-size file-offset file-size max-protection
                                init-protection flags sections)
    seg)
  (begin
    ;; LC_SEGMENT_64
    (write-u32-le (u32 #x19) output)
    ;; Command size
    (write-u32-le (u32 (+ 72 (* (length sections) 80))) output)

    (write-16-byte-name name output)

    (write-u64-le vm-addr output)
    (write-u64-le vm-size output)

    (write-u64-le file-offset output)
    (write-u64-le file-size output)

    (write-u32-le max-protection output)
    (write-u32-le init-protection output)
    (write-u32-le (u32 (length sections)) output)
    (write-u32-le flags output)

    (write-sections sections output)))

(define (write-sections [sections : (List Section64)] [output : OutputPort]) : Void
  (for-each (lambda ([s : Section64]) (write-section s output)) sections))

(define (write-section [section : Section64] [output : OutputPort]) : Void
  (match-define (section64 name seg-name addr size offset align rel-offset num-rels flags) section)
  (begin
    (write-16-byte-name name output)
    (write-16-byte-name seg-name output)
    (write-u64-le addr output)
    (write-u64-le size output)
    (write-u32-le offset output)
    (write-u32-le align output)
    (write-u32-le rel-offset output)
    (write-u32-le num-rels output)
    (write-u32-le flags output)
    (write-u32-le (u32 #x00) output)
    (write-u32-le (u32 #x00) output)
    (write-u32-le (u32 #x00) output)))

;; TODO make this not hardcoded to LC_VERSION_MIN_MACOSX
;; TODO support more than one major byte this the real values
(define (write-version-min [vm : VersionMin] [output : OutputPort]) : Void
  (match-define (version-min v-major v-minor v-patch sdk-major sdk-minor sdk-patch) vm)
  (begin
    ;; LC_VERSION_MIN_MACOSX
    (write-u32-le (u32 #x24) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)

    (write-u8 v-patch output)
    (write-u8 v-minor output)
    (write-u8 v-major output)
    (write-u8 (u8 0) output)
    (write-u8 sdk-patch output)
    (write-u8 sdk-minor output)
    (write-u8 sdk-major output)
    (write-u8 (u8 0) output)))

(define (write-linkedit-data [v : LinkeditData] [output : OutputPort]) : Void
  (match-define (linkedit-data offset size) v)
  (begin
    ;; LC_DATA_IN_CODE
    (write-u32-le (u32 #x29) output)
    ;; Command size
    (write-u32-le (u32 #x10) output)
    (write-u32-le offset output)
    (write-u32-le size output)))

(define (write-unix-thread [ut : UnixThread] [output : OutputPort]) : Void
  (match-define (unix-thread start-address) ut)
  (begin
    ;; LC_UNIXTHREAD
    (write-u32-le (u32 #x05) output)
    ;; Command size
    (write-u32-le (u32 #xb8) output)
    ;; Thread Flavor
    (write-u32-le (u32 #x04) output)
    ;; Thread Count
    (write-u32-le (u32 #x2a) output)

    ;; Registers
    ;; rax
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rbx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rcx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rdx
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rdi
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rsi
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rbp
    (write-u64-le (u64 #x0000000000000000) output)
    ;; rsp
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r8
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r9
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r10
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r11
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r12
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r13
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r14
    (write-u64-le (u64 #x0000000000000000) output)
    ;; r15
    (write-u64-le (u64 #x0000000000000000) output)

    ;; rip
    (write-u64-le start-address output)
    ;; rflags
    (write-u64-le (u64 #x0000000000000000) output)
    ;; cs
    (write-u64-le (u64 #x0000000000000000) output)
    ;; fs
    (write-u64-le (u64 #x0000000000000000) output)
    ;; gs
    (write-u64-le (u64 #x0000000000000000) output)))

(define (write-symbol-table [st : SymbolTable] [output : OutputPort]) : Void
  (match-define (symbol-table offset number-syms string-offset string-size) st)
  (begin
    ;; LC_SYMTAB
    (write-u32-le (u32 #x02) output)
    ;; Command size
    (write-u32-le (u32 #x18) output)

    (write-u32-le offset output)
    (write-u32-le number-syms output)
    (write-u32-le string-offset output)
    (write-u32-le string-size output)))
