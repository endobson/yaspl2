(module mach-o-writer2
  (import
    (prim
      #:types (Bytes S64 InputPort OutputPort Array Void)
      #:values (= + close-output-port array-length array-ref open-output-file < void open-input-file)
      #:patterns ())
    (io write-line write-all-bytes read-all-bytes)
    (bytes bytes make-null-terminated bytes-append bytes=?)
    (join-list jl->list)
    (list
      #:types (List)
      #:values (empty cons map reverse list)
      #:patterns (cons empty))
    (x86-64-stack-machine
      #:types (AssemblyFragment BasicBlock Instruction)
      #:values (write-fragments convert-objects instruction->mc-command)
      #:patterns (function-fragment basic-block mc-bytes mc-jump
                  mcj-jb mcj-je mcj-jne mcj-jnz))
    (library-compiler add-known-functions extract-modules compile-main-module)
    (dict
      #:types (Dict)
      #:values (make-dict)
      #:patterns ())
    (prim-implementation prim-static-signature prim-signature prim-implementation)
    (mach-o-writer write-mach-o-header2 mach-o-header lc-load-segment64 load-segment64 section64
                   lc-version-min-macosx version-min symbol-table lc-symbol-table
                   lc-dynamic-symbol-table dynamic-symbol-table)
    (source-language
      #:types ()
      #:values (parse-module)
      #:patterns ())
    (sexp-parser
      #:types ()
      #:values (parse-sexps)
      #:patterns ())
    (either
      #:types (Either)
      #:values (left right)
      #:patterns (left right)))
  (export
    #:types ()
    #:values (write-mach-o)
    #:patterns ())
  (types)

  (define (a) (array->list [offset : S64] [arr : (Array a)]) : (List a)
    (if (= offset (array-length arr))
        (empty)
        (cons (array-ref arr offset) (array->list (+ 1 offset) arr))))

  (define (read-module-files [modules : (List Bytes)]) : (List Bytes)
    (case modules
      [(empty) (empty)]
      [(cons mod modules)
       (cons (read-all-bytes (open-input-file (make-null-terminated mod)))
             (read-module-files modules))]))

  (define (write-mach-o [output-file-name : Bytes] [input-file-names : Bytes]) : (Either Bytes Void)
    (case (parse-sexps (bytes-append (read-module-files input-file-names)))
          [(left v) (left v)]
          [(right sexps)
           (case (extract-modules (map parse-module sexps))
             [(left v) (left v)]
             [(right modules)
              (case (reverse modules)
                [(empty) (left #"No provided modules")]
                [(cons main-module other-modules)
                 (case (compile-main-module
                         main-module
                         (reverse other-modules)
                         (cons (prim-static-signature) (empty))
                         (cons (prim-signature) (empty))
                         (add-known-functions (prim-implementation) (make-dict bytes=?)))
                   [(left v) (left v)]
                   [(right objects)
                    (let ([output (open-output-file (make-null-terminated output-file-name))])
                      (begin
                        (write-mach-o-header2
                          (mach-o-header
                            (varargs list
                              (lc-load-segment64
                                (load-segment64 #""
                                  #x0000000000000000
                                  #x0000000000000090
                                  384
                                  144
                                  #x07
                                  #x07
                                  0
                                  (varargs list
                                    (section64 #"__TEXT" #"__text"
                                               #x00
                                               #x78
                                               384
                                               528
                                               1
                                               #x80000400)
                                    (section64 #"__TEXT" #"__const"
                                               #x78
                                               #x18
                                               504
                                               536
                                               3
                                               0))))
                              (lc-version-min-macosx
                                (version-min 10 11 0 0 0 0))
                              (lc-symbol-table
                                (symbol-table
                                  560
                                  10
                                  720
                                  220))
                              (lc-dynamic-symbol-table
                                (dynamic-symbol-table 0 9 9 1))))
                          output)
                        (map
                          (lambda ([fragment : AssemblyFragment])
                            (case fragment
                              [(function-fragment name blocks)
                               (map
                                 (lambda ([bb : BasicBlock])
                                   (case bb
                                     [(basic-block block-name instructions)
                                      (map
                                        (lambda ([inst : Instruction])
                                          (write-all-bytes
                                            (case (instruction->mc-command inst)
                                              [(mc-bytes bytes) bytes]
                                              [(mc-jump (mcj-jb) _) (varargs bytes #x0F #x82 0 0 0 0)]
                                              [(mc-jump (mcj-je) _) (varargs bytes #x0F #x84 0 0 0 0)]
                                              [(mc-jump (mcj-jne) _) (varargs bytes #x0F #x85 0 0 0 0)]
                                              [(mc-jump (mcj-jnz) _) (varargs bytes #x0F #x85 0 0 0 0)]
                                              [_ #""])
                                            output))
                                        (jl->list instructions))]))
                                 blocks)]
                              [_ (void)]))
                          (convert-objects objects))
                        (close-output-port output)
                        (right (void))))])])])]))

  (define (main [args : (Array Bytes)] [stdin : InputPort] [stdout : OutputPort] [stderr : OutputPort]) : S64
    (if (< (array-length args) 2)
        (begin
          (write-line #"No output file name supplied" stderr)
          1)
        (case (write-mach-o (array-ref args 1) (array->list 2 args))
          [(left v)
           (begin
             (write-line v stderr)
             1)]
          [(right _)
           0]))))
