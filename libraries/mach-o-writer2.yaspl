#:module (mach-o-writer2)
#:import {
  (assembler)
  (bytes)
  (either)
  (io)
  (list)
  (mach-o)
  (mach-o-writer)
  (maybe)
  (prim)
  (set)
  (yaspl x86-64-assembly)
}
(export
  #:types ()
  #:values (write-mach-o-library/fragments write-mach-o-executable)
  #:patterns ())
(types)

(define (construct-symbol-table-entries
          [text-section : AssembledSection]
          [const-section : AssembledSection])
  : (List SymbolTableEntry)
  (match-define (assembled-section text-bytes text-relocations text-defined-symbols) text-section)
  (match-define (assembled-section _ const-relocations const-defined-symbols) const-section)
  (match-define undefined-symbols
    (set->list
      (set-remove-all
        (set-add-all
          (make-set bytes-cmp)
          (map relocation-symbol (append text-relocations const-relocations)))
        (map defined-symbol-name (append text-defined-symbols const-defined-symbols)))))
  (append
    (append
      (map
        (lambda ([s : DefinedSymbol])
          (case s
            [(defined-symbol name offset)
             (symbol-table-entry name (u8 #x0f) (u8 #x01) (u8 #x20) offset)]))
        (sort text-defined-symbols defined-symbol<))
      (map
        (lambda ([s : DefinedSymbol])
          (case s
            [(defined-symbol name offset)
             (symbol-table-entry name (u8 #x0f) (u8 #x02) (u8 #x20) (+ (bytes-length text-bytes) offset))]))
        (sort const-defined-symbols defined-symbol<)))
    (map
      (lambda ([s : Bytes])
        (symbol-table-entry s (u8 #x01) (u8 #x00) (u8 #x00) 0))
      (sort undefined-symbols bytes<))))


(define (round-up [v : Int] [mod : Int]) : Int
  (let ([rem (remainder v mod)])
    (if (= 0 rem)
        v
        (+ (- v rem) mod))))

(define (write-quad-le [v : U32] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 4)])
    (begin
      (bytes-set!/quad-le bytes 0 v)
      (write-all-bytes bytes output))))

(define (write-eight-bytes-le [v : EightBytesLe] [output : OutputPort]) : Void
  (let ([bytes (make-bytes 8)])
    (begin
      (bytes-set!/eight-bytes-le bytes 0 v)
      (write-all-bytes bytes output))))


(define (write-symbol-strings [symbols : (List SymbolTableEntry)] [output : OutputPort]) : Void
  (case symbols
    [(empty) (void)]
    [(cons (symbol-table-entry name _ _ _ _) symbols)
     (begin
       (write-all-bytes name output)
       (write-all-bytes (make-bytes 1) output)
       (write-symbol-strings symbols output))]))

(define (write-symbol-entries
          [symbols : (List SymbolTableEntry)]
          [string-offset : Int] [output : OutputPort]) : Void
  (case symbols
    [(empty) (void)]
    [(cons (symbol-table-entry name type sect desc value) symbols)
     ;; TODO actually use high bits of description
     (begin
       (write-quad-le (u32 string-offset) output)
       (write-all-bytes (varargs bytes (u8->s64 type) (u8->s64 sect) (u8->s64 desc) 0) output)
       (write-eight-bytes-le (int->eight-bytes-le value) output)
       (write-symbol-entries symbols (+ string-offset (+ 1 (bytes-length name))) output))]))

(define (write-relocations
          [relocations : (List Relocation)]
          [symbols : (List Bytes)]
          [output : OutputPort]) : Void
  (case relocations
    [(empty) (void)]
    [(cons (relocation reloc-type offset symbol) relocations)
     (begin
       (write-quad-le (u32 offset) output)
       (case (find-index (lambda ([x : Bytes]) (bytes=? symbol x))
                         symbols)
         [(nothing)
          (panic #"Bad symbol")]
         [(just index)
          (let ([reloc-byte
                  (case reloc-type
                    [(branch-relocation) #x2D000000]
                    [(signed-relocation) #x1D000000]
                    [(unsigned-relocation) #x0E000000])])
          (write-quad-le (u32 (bitwise-ior index reloc-byte)) output))])
       (write-relocations relocations symbols output))]))

(define (find-start-address [symbols : (List SymbolTableEntry)]) : Int
  (case (findf (lambda ([entry : SymbolTableEntry])
                 (case entry [(symbol-table-entry name _ _ _ _) (bytes=? #"start" name)]))
               symbols)
    [(nothing) (panic #"Couldn't find symbol")]
    [(just v) (symbol-table-entry-value v)]))

(define (empty/relocation) : (List Relocation)
  (empty))

(define (write-mach-o-executable
          [symbol-table-entries : (List SymbolTableEntry)]
          [text-section : Bytes]
          [const-section : Bytes]
          [output-file-name : Bytes])
  : (Either Bytes Void)
  (match-define page-zero-size #x0000000100000000)
  (match-define text-section-relocations (empty/relocation))
  (match-define text-section-num-relocations (length text-section-relocations))
  (match-define const-section-relocations (empty/relocation))
  (match-define const-section-num-relocations (length const-section-relocations))
  (match-define text-segment-size
    (+ (bytes-length text-section) (bytes-length const-section)))
  (match-define text-segment-num-pages
    (+ (quotient (+ text-segment-size #x330) #x1000) 1))
  (match-define const-section-start
    (- (+ page-zero-size (* text-segment-num-pages #x1000)) (bytes-length const-section)))
  (match-define text-section-start
    (- const-section-start (bytes-length text-section)))
  (match-define num-symbols (length symbol-table-entries))
  (match-define symbols-length-unrounded
    (+ (+ 2 (length symbol-table-entries))
       (sum (map bytes-length (map symbol-table-entry-name
                                   symbol-table-entries)))))
  (match-define symbols-length (round-up symbols-length-unrounded 8))
  (match-define start-address (find-start-address symbol-table-entries))
  (call-with-output-file output-file-name
    (lambda ([output : OutputPort])
      (begin
        (write-mach-o-header
          (mach-o-header
            (mach-o-executable-file)
            (varargs list
              (lc-load-segment64
                (load-segment64 #"__PAGEZERO"
                  #x0000000000000000
                  page-zero-size
                  0
                  0
                  (u32 #x00)
                  (u32 #x00)
                  (u32 0)
                  (empty)))
              (lc-load-segment64
                (load-segment64 #"__TEXT"
                  page-zero-size
                  (* text-segment-num-pages #x1000)
                  #x0
                  (* text-segment-num-pages #x1000)
                  (u32 #x07)
                  (u32 #x05)
                  (u32 0)
                  (varargs list
                    (section64 #"__TEXT" #"__text"
                               text-section-start
                               (bytes-length text-section)
                               (- text-section-start page-zero-size)
                               0
                               text-section-num-relocations
                               (u32 #x80000400))
                    (section64 #"__TEXT" #"__const"
                               const-section-start
                               (bytes-length const-section)
                               (- const-section-start page-zero-size)
                               0
                               const-section-num-relocations
                               (u32 0)))))
              (lc-load-segment64
                (load-segment64 #"__DATA"
                  (+ page-zero-size
                     (* text-segment-num-pages #x1000))
                  #x0000000000000000
                  (* text-segment-num-pages #x1000)
                  #x0
                  (u32 #x07)
                  (u32 #x03)
                  (u32 #x04)
                  (varargs list
                    (section64 #"__DATA" #"__data"
                               (+ page-zero-size
                                  (* text-segment-num-pages #x1000))
                               #x0000000000000000
                               (* text-segment-num-pages #x1000)
                               0
                               text-section-num-relocations
                               (u32 0)))))
              (lc-load-segment64
                (load-segment64 #"__LINKEDIT"
                  (+ page-zero-size
                     (* text-segment-num-pages #x1000))
                  (* (+ (quotient
                          (- (+ (* num-symbols 16) symbols-length) 1)
                          #x1000)
                        1)
                     #x1000)
                  (* text-segment-num-pages #x1000)
                  (+ (* num-symbols 16) symbols-length)
                  (u32 #x07)
                  (u32 #x01)
                  (u32 #x00)
                  (empty)))
              (lc-symbol-table
                (symbol-table
                  (* text-segment-num-pages #x1000)
                  num-symbols
                  (+ (* text-segment-num-pages #x1000) (* num-symbols 16))
                  symbols-length))
              (lc-source-version)
              (lc-unix-thread (unix-thread start-address))))
          output)
        (write-all-bytes (make-bytes 32) output)
        (write-all-bytes
          (make-bytes
            (- (+ (* (quotient (+ text-segment-size #x330) #x1000) #x1000)
                  #xCD0)
               text-segment-size))
        output)
        (write-all-bytes text-section output)
        (write-all-bytes const-section output)
        (write-symbol-entries symbol-table-entries 2 output)
        ;(write-all-bytes (make-bytes (- (* num-symbols 16) 2)) output)

        (write-all-bytes (varargs bytes 32 0) output)
        (write-symbol-strings symbol-table-entries output)
        (write-all-bytes
          (make-bytes
            (- symbols-length symbols-length-unrounded))
          output)

        (right (void))))))

(define (write-mach-o-library/fragments [output-file-name : Bytes] [fragments : AssemblyFragments])
  : (Either Bytes Void)
  (match-define (assembly-fragments text-fragments const-fragments) fragments)
  (match-define text-section (assemble-text-section text-fragments))
  (match-define (assembled-section text-section-bytes text-section-relocations _)
    text-section)
  (match-define const-section (assemble-const-section const-fragments))
  (match-define (assembled-section const-section-bytes const-section-relocations _)
    const-section)
  (match-define exported-symbols (construct-symbol-table-entries text-section const-section))

  (match-define text-section-num-relocations (length text-section-relocations))
  (match-define const-section-num-relocations (length const-section-relocations))
  (match-define segment-size
    (+ (bytes-length text-section-bytes) (bytes-length const-section-bytes)))
  (match-define reloc-base (+ 352 (round-up segment-size 8)))
  (call-with-output-file output-file-name
    (lambda ([output : OutputPort])
      (begin
        (write-mach-o-header
          (mach-o-header
            (mach-o-library-file)
            (varargs list
              (lc-load-segment64
                (load-segment64 #""
                  #x0000000000000000
                  segment-size
                  352
                  segment-size
                  (u32 #x07)
                  (u32 #x07)
                  (u32 0)
                  (varargs list
                    (section64 #"__TEXT" #"__text"
                               #x00
                               (bytes-length text-section-bytes)
                               352
                               reloc-base
                               text-section-num-relocations
                               (u32 #x80000400))
                    (section64 #"__TEXT" #"__const"
                               (bytes-length text-section-bytes)
                               (bytes-length const-section-bytes)
                               (+ 352 (bytes-length text-section-bytes))
                               (+ reloc-base
                                  (* 8 text-section-num-relocations))
                               const-section-num-relocations
                               (u32 0)))))
              (lc-symbol-table
                (symbol-table
                  (+ reloc-base
                     (* 8 (+ text-section-num-relocations
                             const-section-num-relocations)))
                  (length exported-symbols)
                  (+ (+ reloc-base
                        (* 8 (+ text-section-num-relocations
                                const-section-num-relocations)))
                     (* (length exported-symbols) #x10))
                  (round-up
                    (+ (+ 2 (length exported-symbols))
                       (sum (map bytes-length
                                 (map symbol-table-entry-name exported-symbols))))
                    8)))
              (lc-version-min-macosx
                (version-min (u8 10) (u8 11) (u8 0) (u8 10) (u8 11) (u8 0)))
              (lc-data-in-code
                (linkedit-data
                  (u32 (+ reloc-base
                          (* 8 (+ text-section-num-relocations
                                  const-section-num-relocations))))
                  (u32 0)))))
          output)
        (write-all-bytes (make-bytes 32) output)
        (write-all-bytes text-section-bytes output)
        (write-all-bytes const-section-bytes output)
        (write-all-bytes
          (make-bytes
            (-
              (round-up (+ (bytes-length text-section-bytes)
                           (bytes-length const-section-bytes))
                        8)
              (+ (bytes-length text-section-bytes)
                 (bytes-length const-section-bytes)))) output)
        (write-relocations
          (append text-section-relocations const-section-relocations)
          (map symbol-table-entry-name exported-symbols)
          output)
        (write-symbol-entries exported-symbols 2 output)
        (write-all-bytes (varargs bytes 32 0) output)
        (write-symbol-strings exported-symbols output)
        (write-all-bytes
          (make-bytes
            (-
              (round-up
                (+ (+ 2 (length exported-symbols))
                   (sum (map bytes-length
                             (map symbol-table-entry-name exported-symbols))))
                8)
              (+ (+ 2 (length exported-symbols))
                 (sum (map bytes-length
                           (map symbol-table-entry-name exported-symbols))))))
          output)
        (right (void))))))
